cscope 15 /usr/src/bin               0001685675
	@cat/cat.c

34 #i‚de‡
löt


35 c⁄° 
	gc›yright
[] =

41 #i‚de‡
löt


43 
	gsccsid
[] = "@(#)cat.c 8.2 (Berkeley) 4/27/95";

46 
	~<sys/cdefs.h
>

47 
__FBSDID
("$FreeBSD: src/bin/cat/cat.c,v 1.33.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

49 
	~<sys/∑øm.h
>

50 
	~<sys/°©.h
>

51 #i‚de‡
NO_UDOM_SUPPORT


52 
	~<sys/sockë.h
>

53 
	~<sys/un.h
>

54 
	~<î∫o.h
>

57 
	~<˘y≥.h
>

58 
	~<îr.h
>

59 
	~<f˙é.h
>

60 
	~<loˇÀ.h
>

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~<uni°d.h
>

65 
	~<°ddef.h
>

67 
	gbÊag
, 
	geÊag
, 
	gnÊag
, 
	gsÊag
, 
	gtÊag
, 
	gvÊag
;

68 
	grvÆ
;

69 c⁄° *
	gfûíame
;

71 
ußge
();

72 
sˇnfûes
(*
¨gv
[], 
cooked
);

73 
cook_ˇt
(
FILE
 *);

74 
øw_ˇt
();

76 #i‚de‡
NO_UDOM_SUPPORT


77 
udom_›í
(c⁄° *
∑th
, 
Êags
);

82 
	#PHYSPAGES_THRESHOLD
 (32*1024)

	)

85 
	#BUFSIZE_MAX
 (2*1024*1024)

	)

89 
	#BUFSIZE_SMALL
 (
MAXPHYS
)

	)

92 
	$maö
(
¨gc
, *
¨gv
[])

94 
ch
;

96 
	`£éoˇÀ
(
LC_CTYPE
, "");

98 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "benstuv")) != -1)

99 
ch
) {

101 
bÊag
 = 
nÊag
 = 1;

104 
eÊag
 = 
vÊag
 = 1;

107 
nÊag
 = 1;

110 
sÊag
 = 1;

113 
tÊag
 = 
vÊag
 = 1;

116 
	`£tbuf
(
°dout
, 
NULL
);

119 
vÊag
 = 1;

122 
	`ußge
();

124 
¨gv
 +
›töd
;

126 i‡(
bÊag
 || 
eÊag
 || 
nÊag
 || 
sÊag
 || 
tÊag
 || 
vÊag
)

127 
	`sˇnfûes
(
¨gv
, 1);

129 
	`sˇnfûes
(
¨gv
, 0);

130 i‡(
	`f˛o£
(
°dout
))

131 
	`îr
(1, "stdout");

132 
	`exô
(
rvÆ
);

134 
	}
}

137 
	$ußge
()

139 
	`Ârötf
(
°dîr
, "usage: cat [-benstuv] [file ...]\n");

140 
	`exô
(1);

142 
	}
}

145 
	$sˇnfûes
(*
¨gv
[], 
cooked
)

147 
i
 = 0;

148 *
∑th
;

149 
FILE
 *
Â
;

151 (
∑th
 = 
¨gv
[
i
]Ë!
NULL
 || i == 0) {

152 
fd
;

154 i‡(
∑th
 =
NULL
 || 
	`°rcmp
(path, "-") == 0) {

155 
fûíame
 = "stdin";

156 
fd
 = 
STDIN_FILENO
;

158 
fûíame
 = 
∑th
;

159 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

160 #i‚de‡
NO_UDOM_SUPPORT


161 i‡(
fd
 < 0 && 
î∫o
 =
EOPNOTSUPP
)

162 
fd
 = 
	`udom_›í
(
∑th
, 
O_RDONLY
);

165 i‡(
fd
 < 0) {

166 
	`w¨n
("%s", 
∑th
);

167 
rvÆ
 = 1;

168 } i‡(
cooked
) {

169 i‡(
fd
 =
STDIN_FILENO
)

170 
	`cook_ˇt
(
°dö
);

172 
Â
 = 
	`fd›í
(
fd
, "r");

173 
	`cook_ˇt
(
Â
);

174 
	`f˛o£
(
Â
);

177 
	`øw_ˇt
(
fd
);

178 i‡(
fd
 !
STDIN_FILENO
)

179 
	`˛o£
(
fd
);

181 i‡(
∑th
 =
NULL
)

183 ++
i
;

185 
	}
}

188 
	$cook_ˇt
(
FILE
 *
Â
)

190 
ch
, 
gobbÀ
, 
löe
, 
¥ev
;

193 i‡(
Â
 =
°dö
 && 
	`„of
(stdin))

194 
	`˛óªº
(
°dö
);

196 
löe
 = 
gobbÀ
 = 0;

197 
¥ev
 = '\n'; (
ch
 = 
	`gëc
(
Â
)Ë!
EOF
;Örev = ch) {

198 i‡(
¥ev
 == '\n') {

199 i‡(
sÊag
) {

200 i‡(
ch
 == '\n') {

201 i‡(
gobbÀ
)

203 
gobbÀ
 = 1;

205 
gobbÀ
 = 0;

207 i‡(
nÊag
 && (!
bÊag
 || 
ch
 != '\n')) {

208 ()
	`Ârötf
(
°dout
, "%6d\t", ++
löe
);

209 i‡(
	`„º‹
(
°dout
))

213 i‡(
ch
 == '\n') {

214 i‡(
eÊag
 && 
	`putch¨
('$'Ë=
EOF
)

216 } i‡(
ch
 == '\t') {

217 i‡(
tÊag
) {

218 i‡(
	`putch¨
('^'Ë=
EOF
 ||Öutchar('I') == EOF)

222 } i‡(
vÊag
) {

223 i‡(!
	`ißscii
(
ch
Ë&& !
	`i•röt
(ch)) {

224 i‡(
	`putch¨
('M'Ë=
EOF
 ||Öutchar('-') == EOF)

226 
ch
 = 
	`tﬂscii
(ch);

228 i‡(
	`is˙ål
(
ch
)) {

229 i‡(
	`putch¨
('^'Ë=
EOF
 ||

230 
	`putch¨
(
ch
 == '\177' ? '?' :

231 
ch
 | 0100Ë=
EOF
)

236 i‡(
	`putch¨
(
ch
Ë=
EOF
)

239 i‡(
	`„º‹
(
Â
)) {

240 
	`w¨n
("%s", 
fûíame
);

241 
rvÆ
 = 1;

242 
	`˛óªº
(
Â
);

244 i‡(
	`„º‹
(
°dout
))

245 
	`îr
(1, "stdout");

246 
	}
}

249 
	$øw_ˇt
(
rfd
)

251 
off
, 
wfd
;

252 
ssize_t
 
ƒ
, 
nw
;

253 
size_t
 
bsize
;

254 *
buf
 = 
NULL
;

255 
°©
 
sbuf
;

257 
wfd
 = 
	`fûío
(
°dout
);

258 i‡(
buf
 =
NULL
) {

259 i‡(
	`f°©
(
wfd
, &
sbuf
))

260 
	`îr
(1, "%s", 
fûíame
);

261 i‡(
	`S_ISREG
(
sbuf
.
°_mode
)) {

263 i‡(
	`sysc⁄f
(
_SC_PHYS_PAGES
Ë> 
PHYSPAGES_THRESHOLD
)

264 
bsize
 = 
	`MIN
(
BUFSIZE_MAX
, 
MAXPHYS
*8);

266 
bsize
 = 
BUFSIZE_SMALL
;

268 
bsize
 = 
	`MAX
(
sbuf
.
°_blksize
,

269 (
blksize_t
)
	`sysc⁄f
(
_SC_PAGESIZE
));

270 i‡((
buf
 = 
	`mÆloc
(
bsize
)Ë=
NULL
)

271 
	`îr
(1, "malloc() failure of IO buffer");

273 (
ƒ
 = 
	`ªad
(
rfd
, 
buf
, 
bsize
)) > 0)

274 
off
 = 0; 
ƒ
;Ç∏-
nw
, off +=Çw)

275 i‡((
nw
 = 
	`wrôe
(
wfd
, 
buf
 + 
off
, (
size_t
)
ƒ
)) < 0)

276 
	`îr
(1, "stdout");

277 i‡(
ƒ
 < 0) {

278 
	`w¨n
("%s", 
fûíame
);

279 
rvÆ
 = 1;

281 
	}
}

283 #i‚de‡
NO_UDOM_SUPPORT


286 
	$udom_›í
(c⁄° *
∑th
, 
Êags
)

288 
sockaddr_un
 
sou
;

289 
fd
;

290 
Àn
;

292 
	`bzîo
(&
sou
, (sou));

297 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

298 i‡(
fd
 >= 0) {

299 
sou
.
sun_Ámûy
 = 
AF_UNIX
;

300 i‡((
Àn
 = 
	`°æ˝y
(
sou
.
sun_∑th
, 
∑th
,

301 (
sou
.
sun_∑th
))) >= (sou.sun_path)) {

302 
î∫o
 = 
ENAMETOOLONG
;

305 
Àn
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
[len+1]);

307 i‡(
	`c⁄√˘
(
fd
, (*)&
sou
, 
Àn
) < 0) {

308 
	`˛o£
(
fd
);

309 
fd
 = -1;

316 i‡(
fd
 >= 0) {

317 
Êags
 & 
O_ACCMODE
) {

318 
O_RDONLY
:

319 i‡(
	`shutdown
(
fd
, 
SHUT_WR
) == -1)

320 
	`w¨n
(
NULL
);

322 
O_WRONLY
:

323 i‡(
	`shutdown
(
fd
, 
SHUT_RD
) == -1)

324 
	`w¨n
(
NULL
);

330 (
fd
);

331 
	}
}

	@chflags/chflags.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)chflags.c 8.5 (Berkeley) 4/1/94";

42 
	~<sys/cdefs.h
>

43 
__FBSDID
("$FreeBSD: src/bin/chflags/chflags.c,v 1.26.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

45 
	~<sys/ty≥s.h
>

46 
	~<sys/°©.h
>

48 
	~<îr.h
>

49 
	~<î∫o.h
>

50 
	~<·s.h
>

51 
	~<°dio.h
>

52 
	~<°dlib.h
>

53 
	~<°rög.h
>

54 
	~<uni°d.h
>

56 
ußge
();

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
FTS
 *
·•
;

62 
FTSENT
 *
p
;

63 
u_l⁄g
 
˛ór
, 
√wÊags
, 
£t
;

64 
vÆ
;

65 
HÊag
, 
LÊag
, 
RÊag
, 
fÊag
, 
hÊag
, 
vÊag
;

66 
ch
, 
·s_›ti⁄s
, 
o˘
, 
rvÆ
;

67 *
Êags
, *
ï
;

68 (*
ch™ge_Êags
)(const *, );

70 
HÊag
 = 
LÊag
 = 
RÊag
 = 
fÊag
 = 
hÊag
 = 
vÊag
 = 0;

71 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "HLPRfhv")) != -1)

72 
ch
) {

74 
HÊag
 = 1;

75 
LÊag
 = 0;

78 
LÊag
 = 1;

79 
HÊag
 = 0;

82 
HÊag
 = 
LÊag
 = 0;

85 
RÊag
 = 1;

88 
fÊag
 = 1;

91 
hÊag
 = 1;

94 
vÊag
++;

98 
	`ußge
();

100 
¨gv
 +
›töd
;

101 
¨gc
 -
›töd
;

103 i‡(
¨gc
 < 2)

104 
	`ußge
();

106 i‡(
RÊag
) {

107 
·s_›ti⁄s
 = 
FTS_PHYSICAL
;

108 i‡(
hÊag
)

109 
	`îrx
(1, "the -Ránd -h options "

111 i‡(
HÊag
)

112 
·s_›ti⁄s
 |
FTS_COMFOLLOW
;

113 i‡(
LÊag
) {

114 
·s_›ti⁄s
 &~
FTS_PHYSICAL
;

115 
·s_›ti⁄s
 |
FTS_LOGICAL
;

118 
·s_›ti⁄s
 = 
hÊag
 ? 
FTS_PHYSICAL
 : 
FTS_LOGICAL
;

121 i‡(
hÊag
)

122 
ch™ge_Êags
 = ((*)(c⁄° *, ))
lchÊags
;

124 
ch™ge_Êags
 = 
chÊags
;

126 
Êags
 = *
¨gv
;

127 i‡(*
Êags
 >= '0' && *flags <= '7') {

128 
î∫o
 = 0;

129 
vÆ
 = 
	`°πﬁ
(
Êags
, &
ï
, 8);

130 i‡(
vÆ
 < 0)

131 
î∫o
 = 
ERANGE
;

132 i‡(
î∫o
)

133 
	`îr
(1, "övÆid fœgs: %s", 
Êags
);

134 i‡(*
ï
)

135 
	`îrx
(1, "övÆid fœgs: %s", 
Êags
);

136 
£t
 = 
vÆ
;

137 
o˘
 = 1;

139 i‡(
	`°πofÊags
(&
Êags
, &
£t
, &
˛ór
))

140 
	`îrx
(1, "övÆid fœg: %s", 
Êags
);

141 
˛ór
 = ~clear;

142 
o˘
 = 0;

145 i‡((
·•
 = 
	`·s_›í
(++
¨gv
, 
·s_›ti⁄s
 , 0)Ë=
NULL
)

146 
	`îr
(1, 
NULL
);

148 
rvÆ
 = 0; (
p
 = 
	`·s_ªad
(
·•
)Ë!
NULL
;) {

149 
p
->
·s_öfo
) {

150 
FTS_D
:

151 i‡(!
RÊag
)

152 
	`·s_£t
(
·•
, 
p
, 
FTS_SKIP
);

154 
FTS_DNR
:

155 
	`w¨nx
("%s: %s", 
p
->
·s_∑th
, 
	`°ªº‹
’->
·s_î∫o
));

156 
rvÆ
 = 1;

158 
FTS_ERR
:

159 
FTS_NS
:

160 
	`w¨nx
("%s: %s", 
p
->
·s_∑th
, 
	`°ªº‹
’->
·s_î∫o
));

161 
rvÆ
 = 1;

163 
FTS_SL
:

164 
FTS_SLNONE
:

170 i‡(!
hÊag
)

176 i‡(
o˘
)

177 
√wÊags
 = 
£t
;

179 
√wÊags
 = (
p
->
·s_°©p
->
°_Êags
 | 
£t
Ë& 
˛ór
;

180 i‡(
√wÊags
 =
p
->
·s_°©p
->
°_Êags
)

182 i‡((*
ch™ge_Êags
)(
p
->
·s_ac˝©h
, 
√wÊags
Ë&& !
fÊag
) {

183 
	`w¨n
("%s", 
p
->
·s_∑th
);

184 
rvÆ
 = 1;

185 } i‡(
vÊag
) {

186 ()
	`¥ötf
("%s", 
p
->
·s_∑th
);

187 i‡(
vÊag
 > 1)

188 ()
	`¥ötf
(": 0%lo -> 0%lo",

189 (
u_l⁄g
)
p
->
·s_°©p
->
°_Êags
,

190 
√wÊags
);

191 ()
	`¥ötf
("\n");

194 i‡(
î∫o
)

195 
	`îr
(1, "fts_read");

196 
	`exô
(
rvÆ
);

197 
	}
}

200 
	$ußge
()

202 ()
	`Ârötf
(
°dîr
,

204 
	`exô
(1);

205 
	}
}

	@chio/chio.c

39 #i‚de‡
löt


40 c⁄° 
	gc›yright
[] =

45 
	~<sys/cdefs.h
>

46 
__FBSDID
("$FreeBSD: src/bin/chio/chio.c,v 1.28.2.2.4.1 2012/03/03 06:15:13 kensmith Exp $");

48 
	~<sys/∑øm.h
>

49 
	~<sys/chio.h
>

50 
	~<îr.h
>

51 
	~<f˙é.h
>

52 
	~<°dio.h
>

53 
	~<°döt.h
>

54 
	~<°dlib.h
>

55 
	~<°rög.h
>

56 
	~<uni°d.h
>

58 
	~"defs.h
"

59 
	~"∑th«mes.h
"

61 
ußge
();

62 
˛ónup
();

63 
u_öt16_t
 
∑r£_ñemít_ty≥
(*);

64 
u_öt16_t
 
∑r£_ñemít_unô
(*);

65 c⁄° * 
ñemít_ty≥_«me
(
ë
);

66 
∑r£_•ecül
(*);

67 
is_•ecül
(*);

68 c⁄° *
bôs_to_°rög
(
˚s_°©us_Êags
, const *);

70 
föd_ñemít
(*, 
uöt16_t
 *, uint16_t *);

71 
ch™gî_ñemít_°©us
 *
	ggë_ñemít_°©us


74 
do_move
(const *, , **);

75 
do_exch™ge
(const *, , **);

76 
do_posôi⁄
(const *, , **);

77 
do_∑øms
(const *, , **);

78 
do_gëpickî
(const *, , **);

79 
do_£çickî
(const *, , **);

80 
do_°©us
(const *, , **);

81 
do_õÀm
(const *, , **);

82 
do_ªtu∫
(const *, , **);

83 
do_vﬁèg
(const *, , **);

85 #i‚de‡
CHET_VT


86 
	#CHET_VT
 10

	)

90 c⁄° 
ñemít_ty≥
 
	gñemíts
[] = {

91 { "drive", 
CHET_DT
 },

92 { "pickî", 
CHET_MT
 },

93 { "p‹èl", 
CHET_IE
 },

94 { "¶Ÿ", 
CHET_ST
 },

95 { "vﬁèg", 
CHET_VT
 },

96 { 
NULL
, 0 },

100 c⁄° 
ch™gî_comm™d
 
	gcomm™ds
[] = {

101 { "exch™ge", 
do_exch™ge
 },

102 { "gëpickî", 
do_gëpickî
 },

103 { "õÀm", 
do_õÀm
 },

104 { "move", 
do_move
 },

105 { "∑øms", 
do_∑øms
 },

106 { "posôi⁄", 
do_posôi⁄
 },

107 { "£çickî", 
do_£çickî
 },

108 { "°©us", 
do_°©us
 },

109 { "ªtu∫", 
do_ªtu∫
 },

110 { "vﬁèg", 
do_vﬁèg
 },

111 { 
NULL
, 0 },

115 c⁄° 
•ecül_w‹d
 
	g•ecüls
[] = {

116 { "öv", 
SW_INVERT
 },

117 { "öv1", 
SW_INVERT1
 },

118 { "öv2", 
SW_INVERT2
 },

119 { 
NULL
, 0 },

122 
	gch™gî_fd
;

123 c⁄° *
	gch™gî_«me
;

126 
	$maö
(
¨gc
, **
¨gv
)

128 
ch
, 
i
;

130 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:")) != -1) {

131 
ch
) {

133 
ch™gî_«me
 = 
›èrg
;

137 
	`ußge
();

140 
¨gc
 -
›töd
;

141 
¨gv
 +
›töd
;

143 i‡(
¨gc
 == 0)

144 
	`ußge
();

147 i‡(
ch™gî_«me
 =
NULL
)

148 i‡((
ch™gî_«me
 = 
	`gëív
(
CHANGER_ENV_VAR
)Ë=
NULL
)

149 
ch™gî_«me
 = 
_PATH_CH
;

152 i‡((
ch™gî_fd
 = 
	`›í
(
ch™gî_«me
, 
O_RDWR
, 0600)) == -1)

153 
	`îr
(1, "%s: o≥n", 
ch™gî_«me
);

156 i‡(
	`©exô
(
˛ónup
))

157 
	`îr
(1, "can'tÑegister cleanup function");

160 
i
 = 0; 
comm™ds
[i].
cc_«me
 !
NULL
; ++i)

161 i‡(
	`°rcmp
(*
¨gv
, 
comm™ds
[
i
].
cc_«me
) == 0)

163 i‡(
comm™ds
[
i
].
cc_«me
 =
NULL
) {

165 
i
 = 0; 
comm™ds
[i].
cc_«me
 !
NULL
; ++i)

166 i‡(
	`°∫cmp
(*
¨gv
, 
comm™ds
[
i
].
cc_«me
,

167 
	`°æí
(*
¨gv
)) == 0)

171 i‡(
comm™ds
[
i
].
cc_«me
 =
NULL
)

172 
	`îrx
(1, "unknow¿comm™d: %s", *
¨gv
);

174 
	`exô
 ((*
comm™ds
[
i
].
cc_h™dÀr
)(comm™ds[i].
cc_«me
, 
¨gc
, 
¨gv
));

176 
	}
}

179 
	$do_move
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

181 
ch™gî_move
 
cmd
;

182 
vÆ
;

192 ++
¨gv
; --
¨gc
;

194 i‡(
¨gc
 < 4) {

195 
	`w¨nx
("%s:Åoÿ„wárgumíts", 
˙ame
);

196 
ußge
;

197 } i‡(
¨gc
 > 5) {

198 
	`w¨nx
("%s:Åoÿm™yárgumíts", 
˙ame
);

199 
ußge
;

201 (Ë
	`mem£t
(&
cmd
, 0, (cmd));

204 
cmd
.
cm_‰omty≥
 = 
	`∑r£_ñemít_ty≥
(*
¨gv
);

205 ++
¨gv
; --
¨gc
;

208 i‡(
CHET_VT
 =
cmd
.
cm_‰omty≥
) {

209 
	`föd_ñemít
(*
¨gv
, &
cmd
.
cm_‰omty≥
, &cmd.
cm_‰omunô
);

212 
cmd
.
cm_‰omunô
 = 
	`∑r£_ñemít_unô
(*
¨gv
);

214 ++
¨gv
; --
¨gc
;

217 
cmd
.
cm_tŸy≥
 = 
	`∑r£_ñemít_ty≥
(*
¨gv
);

218 ++
¨gv
; --
¨gc
;

221 i‡(
CHET_VT
 =
cmd
.
cm_tŸy≥
)

222 
	`îrx
(1,"%s: voltag only makes senseásánÉlement source",

223 
˙ame
);

226 
cmd
.
cm_tounô
 = 
	`∑r£_ñemít_unô
(*
¨gv
);

227 ++
¨gv
; --
¨gc
;

230 i‡(
¨gc
) {

231 
vÆ
 = 
	`∑r£_•ecül
(*
¨gv
);

232 
vÆ
) {

233 
SW_INVERT
:

234 
cmd
.
cm_Êags
 |
CM_INVERT
;

238 
	`îrx
(1, "%s: inappropriate modifier `%s'",

239 
˙ame
, *
¨gv
);

245 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOMOVE
, &
cmd
))

246 
	`îr
(1, "%s: CHIOMOVE", 
ch™gî_«me
);

250 
ußge
:

251 (Ë
	`Ârötf
(
°dîr
, "usage: %s %s "

252 "<‰om ET> <‰om EU> <tÿET> <tÿEU> [öv]\n", 
	`gë¥og«me
(), 
˙ame
);

254 
	}
}

257 
	$do_exch™ge
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

259 
ch™gî_exch™ge
 
cmd
;

260 
vÆ
;

270 ++
¨gv
; --
¨gc
;

272 i‡(
¨gc
 < 4) {

273 
	`w¨nx
("%s:Åoÿ„wárgumíts", 
˙ame
);

274 
ußge
;

275 } i‡(
¨gc
 > 8) {

276 
	`w¨nx
("%s:Åoÿm™yárgumíts", 
˙ame
);

277 
ußge
;

279 (Ë
	`mem£t
(&
cmd
, 0, (cmd));

282 
cmd
.
˚_§˘y≥
 = 
	`∑r£_ñemít_ty≥
(*
¨gv
);

283 ++
¨gv
; --
¨gc
;

286 i‡(
CHET_VT
 =
cmd
.
˚_§˘y≥
) {

287 
	`föd_ñemít
(*
¨gv
, &
cmd
.
˚_§˘y≥
, &cmd.
˚_§cunô
);

290 
cmd
.
˚_§cunô
 = 
	`∑r£_ñemít_unô
(*
¨gv
);

292 ++
¨gv
; --
¨gc
;

295 
cmd
.
˚_fd°ty≥
 = 
	`∑r£_ñemít_ty≥
(*
¨gv
);

296 ++
¨gv
; --
¨gc
;

299 i‡(
CHET_VT
 =
cmd
.
˚_fd°ty≥
) {

300 
	`föd_ñemít
(*
¨gv
, &
cmd
.
˚_fd°ty≥
, &cmd.
˚_fd°unô
);

303 
cmd
.
˚_fd°unô
 = 
	`∑r£_ñemít_unô
(*
¨gv
);

305 ++
¨gv
; --
¨gc
;

312 i‡((
¨gc
 =0Ë|| 
	`is_•ecül
(*
¨gv
)) {

313 
cmd
.
˚_sd°ty≥
 = cmd.
˚_§˘y≥
;

314 
cmd
.
˚_sd°unô
 = cmd.
˚_§cunô
;

315 
do_•ecül
;

319 
cmd
.
˚_sd°ty≥
 = 
	`∑r£_ñemít_ty≥
(*
¨gv
);

320 ++
¨gv
; --
¨gc
;

322 i‡(
CHET_VT
 =
cmd
.
˚_sd°ty≥
)

323 
	`îrx
(1,"%s %s: voltag only makes senseásánÉlement source",

324 
˙ame
, *
¨gv
);

327 
cmd
.
˚_sd°unô
 = 
	`∑r£_ñemít_unô
(*
¨gv
);

328 ++
¨gv
; --
¨gc
;

330 
do_•ecül
:

332 
¨gc
) {

333 
vÆ
 = 
	`∑r£_•ecül
(*
¨gv
);

334 ++
¨gv
; --
¨gc
;

335 
vÆ
) {

336 
SW_INVERT1
:

337 
cmd
.
˚_Êags
 |
CE_INVERT1
;

340 
SW_INVERT2
:

341 
cmd
.
˚_Êags
 |
CE_INVERT2
;

345 
	`îrx
(1, "%s: inappropriate modifier `%s'",

346 
˙ame
, *
¨gv
);

352 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOEXCHANGE
, &
cmd
))

353 
	`îr
(1, "%s: CHIOEXCHANGE", 
ch™gî_«me
);

357 
ußge
:

358 (Ë
	`Ârötf
(
°dîr
,

361 
	`gë¥og«me
(), 
˙ame
);

363 
	}
}

366 
	$do_posôi⁄
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

368 
ch™gî_posôi⁄
 
cmd
;

369 
vÆ
;

379 ++
¨gv
; --
¨gc
;

381 i‡(
¨gc
 < 2) {

382 
	`w¨nx
("%s:Åoÿ„wárgumíts", 
˙ame
);

383 
ußge
;

384 } i‡(
¨gc
 > 3) {

385 
	`w¨nx
("%s:Åoÿm™yárgumíts", 
˙ame
);

386 
ußge
;

388 (Ë
	`mem£t
(&
cmd
, 0, (cmd));

391 
cmd
.
˝_ty≥
 = 
	`∑r£_ñemít_ty≥
(*
¨gv
);

392 ++
¨gv
; --
¨gc
;

395 
cmd
.
˝_unô
 = 
	`∑r£_ñemít_unô
(*
¨gv
);

396 ++
¨gv
; --
¨gc
;

399 i‡(
¨gc
) {

400 
vÆ
 = 
	`∑r£_•ecül
(*
¨gv
);

401 
vÆ
) {

402 
SW_INVERT
:

403 
cmd
.
˝_Êags
 |
CP_INVERT
;

407 
	`îrx
(1, "%s: inappropriate modifier `%s'",

408 
˙ame
, *
¨gv
);

414 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOPOSITION
, &
cmd
))

415 
	`îr
(1, "%s: CHIOPOSITION", 
ch™gî_«me
);

419 
ußge
:

420 (Ë
	`Ârötf
(
°dîr
, "usage: %s %s <to ET> <to EU> [inv]\n",

421 
	`gë¥og«me
(), 
˙ame
);

423 
	}
}

427 
	$do_∑øms
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

429 
ch™gî_∑øms
 
d©a
;

430 
pickî
;

434 ++
¨gv
; --
¨gc
;

436 i‡(
¨gc
) {

437 
	`w¨nx
("%s:Çÿ¨gumít†ex≥˘ed", 
˙ame
);

438 
ußge
;

442 (Ë
	`mem£t
(&
d©a
, 0, (data));

443 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGPARAMS
, &
d©a
))

444 
	`îr
(1, "%s: CHIOGPARAMS", 
ch™gî_«me
);

446 (Ë
	`¥ötf
("%s: %d slot%s, %d drive%s, %dÖicker%s",

447 
ch™gî_«me
,

448 
d©a
.
˝_n¶Ÿs
, (data.cp_nslots > 1) ? "s" : "",

449 
d©a
.
˝_ndrives
, (data.cp_ndrives > 1) ? "s" : "",

450 
d©a
.
˝_≈ickîs
, (data.cp_npickers > 1) ? "s" : "");

451 i‡(
d©a
.
˝_≈‹èls
)

452 (Ë
	`¥ötf
(", %dÖ‹èl%s", 
d©a
.
˝_≈‹èls
,

453 (
d©a
.
˝_≈‹èls
 > 1) ? "s" : "");

456 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGPICKER
, &
pickî
))

457 
	`îr
(1, "%s: CHIOGPICKER", 
ch™gî_«me
);

459 (Ë
	`¥ötf
("\n%s: cuºíàpickî: %d\n", 
ch™gî_«me
, 
pickî
);

463 
ußge
:

464 (Ë
	`Ârötf
(
°dîr
, "ußge: %†%s\n", 
	`gë¥og«me
(), 
˙ame
);

466 
	}
}

470 
	$do_gëpickî
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

472 
pickî
;

476 ++
¨gv
; --
¨gc
;

478 i‡(
¨gc
) {

479 
	`w¨nx
("%s:Çÿ¨gumít†ex≥˘ed", 
˙ame
);

480 
ußge
;

484 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGPICKER
, &
pickî
))

485 
	`îr
(1, "%s: CHIOGPICKER", 
ch™gî_«me
);

487 (Ë
	`¥ötf
("%s: cuºíàpickî: %d\n", 
ch™gî_«me
, 
pickî
);

491 
ußge
:

492 (Ë
	`Ârötf
(
°dîr
, "ußge: %†%s\n", 
	`gë¥og«me
(), 
˙ame
);

494 
	}
}

497 
	$do_£çickî
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

499 
pickî
;

501 ++
¨gv
; --
¨gc
;

503 i‡(
¨gc
 < 1) {

504 
	`w¨nx
("%s:Åoÿ„wárgumíts", 
˙ame
);

505 
ußge
;

506 } i‡(
¨gc
 > 1) {

507 
	`w¨nx
("%s:Åoÿm™yárgumíts", 
˙ame
);

508 
ußge
;

511 
pickî
 = 
	`∑r£_ñemít_unô
(*
¨gv
);

514 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOSPICKER
, &
pickî
))

515 
	`îr
(1, "%s: CHIOSPICKER", 
ch™gî_«me
);

519 
ußge
:

520 (Ë
	`Ârötf
(
°dîr
, "ußge: %†%†<pickî>\n", 
	`gë¥og«me
(), 
˙ame
);

522 
	}
}

525 
	$do_°©us
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

527 
ch™gî_∑øms
 
˝
;

528 
ch™gî_ñemít_°©us_ªque°
 
˚§
;

529 
i
;

530 
u_öt16_t
 
ba£
, 
cou¡
, 
chë
, 
schë
, 
echë
;

531 c⁄° *
des¸ùti⁄
;

532 
pvﬁèg
 = 0;

533 
avﬁèg
 = 0;

534 
£n£
 = 0;

535 
scsi
 = 0;

536 
sour˚
 = 0;

537 
öèddr
 = 0;

538 
c
;

540 
cou¡
 = 0;

541 
ba£
 = 0;

542 
des¸ùti⁄
 = 
NULL
;

544 
›töd
 = 
›åe£t
 = 1;

545 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "vVsSbaI")) != -1) {

546 
c
) {

548 
pvﬁèg
 = 1;

551 
avﬁèg
 = 1;

554 
£n£
 = 1;

557 
sour˚
 = 1;

560 
scsi
 = 1;

563 
öèddr
 = 1;

566 
pvﬁèg
 = 
avﬁèg
 = 
sour˚
 = 
£n£
 = 
scsi
 = 
öèddr
 = 1;

569 
	`w¨nx
("%s: bad o±i⁄", 
˙ame
);

570 
ußge
;

574 
¨gc
 -
›töd
;

575 
¨gv
 +
›töd
;

588 i‡(
¨gc
 > 3) {

589 
	`w¨nx
("%s:Åoÿm™yárgumíts", 
˙ame
);

590 
ußge
;

597 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGPARAMS
, (*)&
˝
))

598 
	`îr
(1, "%s: CHIOGPARAMS", 
ch™gî_«me
);

600 i‡(
¨gc
 > 0)

601 
schë
 = 
echë
 = 
	`∑r£_ñemít_ty≥
(
¨gv
[0]);

603 
schë
 = 
CHET_MT
;

604 
echë
 = 
CHET_DT
;

606 i‡(
¨gc
 > 1) {

607 
ba£
 = (
u_öt16_t
)
	`©ﬁ
(
¨gv
[1]);

608 
cou¡
 = 1;

610 i‡(
¨gc
 > 2)

611 
cou¡
 = (
u_öt16_t
)
	`©ﬁ
(
¨gv
[2]Ë- 
ba£
 + 1;

613 
chë
 = 
schë
; chë <
echë
; ++chet) {

614 
chë
) {

615 
CHET_MT
:

616 i‡(
cou¡
 == 0)

617 
cou¡
 = 
˝
.
˝_≈ickîs
;

618 i‡(
cou¡
 > 
˝
.
˝_≈ickîs
)

619 
	`îrx
(1, "notÅhat manyÖickers in device");

620 
des¸ùti⁄
 = "picker";

623 
CHET_ST
:

624 i‡(
cou¡
 == 0)

625 
cou¡
 = 
˝
.
˝_n¶Ÿs
;

626 i‡(
cou¡
 > 
˝
.
˝_n¶Ÿs
)

627 
	`îrx
(1, "notÅhat many slots in device");

628 
des¸ùti⁄
 = "slot";

631 
CHET_IE
:

632 i‡(
cou¡
 == 0)

633 
cou¡
 = 
˝
.
˝_≈‹èls
;

634 i‡(
cou¡
 > 
˝
.
˝_≈‹èls
)

635 
	`îrx
(1, "notÅhat manyÖortals in device");

636 
des¸ùti⁄
 = "portal";

639 
CHET_DT
:

640 i‡(
cou¡
 == 0)

641 
cou¡
 = 
˝
.
˝_ndrives
;

642 i‡(
cou¡
 > 
˝
.
˝_ndrives
)

643 
	`îrx
(1, "notÅhat many drives in device");

644 
des¸ùti⁄
 = "drive";

649 
cou¡
 = 0;

650 
des¸ùti⁄
 = 
NULL
;

653 i‡(
cou¡
 == 0) {

654 i‡(
¨gc
 == 0)

657 
	`¥ötf
("%s:Ço %sÉlements\n",

658 
ch™gî_«me
, 
des¸ùti⁄
);

663 
	`bzîo
(&
˚§
, (cesr));

664 
˚§
.
˚§_ñemít_ty≥
 = 
chë
;

665 
˚§
.
˚§_ñemít_ba£
 = 
ba£
;

666 
˚§
.
˚§_ñemít_cou¡
 = 
cou¡
;

668 
˚§
.
˚§_ñemít_°©us
 =

669 (
ch™gî_ñemít_°©us
 *)

670 
	`ˇŒoc
((
size_t
)
cou¡
, (
ch™gî_ñemít_°©us
));

672 i‡(!
˚§
.
˚§_ñemít_°©us
)

673 
	`îrx
(1, "can'tállocate status storage");

675 i‡(
avﬁèg
 || 
pvﬁèg
)

676 
˚§
.
˚§_Êags
 |
CESR_VOLTAGS
;

678 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGSTATUS
, (*)&
˚§
)) {

679 
	`‰ì
(
˚§
.
˚§_ñemít_°©us
);

680 
	`îr
(1, "%s: CHIOGSTATUS", 
ch™gî_«me
);

684 
i
 = 0; i < 
cou¡
; ++i) {

685 
ch™gî_ñemít_°©us
 *
˚s
 =

686 &(
˚§
.
˚§_ñemít_°©us
[
i
]);

687 
	`¥ötf
("%†%d: %s", 
des¸ùti⁄
, 
˚s
->
˚s_addr
,

688 
	`bôs_to_°rög
(
˚s
->
˚s_Êags
,

689 
CESTATUS_BITS
));

690 i‡(
£n£
)

691 
	`¥ötf
(" sense: <0x%02x/0x%02x>",

692 
˚s
->
˚s_£n£code
,

693 
˚s
->
˚s_£n£quÆ
);

694 i‡(
pvﬁèg
)

695 
	`¥ötf
(" voltag: <%s:%d>",

696 
˚s
->
˚s_pvﬁèg
.
cv_vﬁid
,

697 
˚s
->
˚s_pvﬁèg
.
cv_£rül
);

698 i‡(
avﬁèg
)

699 
	`¥ötf
("ávoltag: <%s:%d>",

700 
˚s
->
˚s_avﬁèg
.
cv_vﬁid
,

701 
˚s
->
˚s_avﬁèg
.
cv_£rül
);

702 i‡(
sour˚
) {

703 i‡(
˚s
->
˚s_Êags
 & 
CES_SOURCE_VALID
)

704 
	`¥ötf
(" source: <%s %d>",

705 
	`ñemít_ty≥_«me
(

706 
˚s
->
˚s_sour˚_ty≥
),

707 
˚s
->
˚s_sour˚_addr
);

709 
	`¥ötf
(" source: <>");

711 i‡(
öèddr
)

712 
	`¥ötf
(" i¡addr: <%d>", 
˚s
->
˚s_öt_addr
);

713 i‡(
scsi
) {

714 
	`¥ötf
(" scsi: <");

715 i‡(
˚s
->
˚s_Êags
 & 
CES_SCSIID_VALID
)

716 
	`¥ötf
("%d", 
˚s
->
˚s_scsi_id
);

718 
	`putch¨
('?');

719 
	`putch¨
(':');

720 i‡(
˚s
->
˚s_Êags
 & 
CES_LUN_VALID
)

721 
	`¥ötf
("%d", 
˚s
->
˚s_scsi_lun
);

723 
	`putch¨
('?');

724 
	`putch¨
('>');

726 
	`putch¨
('\n');

729 
	`‰ì
(
˚§
.
˚§_ñemít_°©us
);

730 
cou¡
 = 0;

735 
ußge
:

736 (Ë
	`Ârötf
(
°dîr
, "usage: %s %s [-vVsSbaA] [<elementÅype> [<start-addr> [<end-addr>] ] ]\n",

737 
	`gë¥og«me
(), 
˙ame
);

739 
	}
}

742 
	$do_õÀm
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

744 
timeout
 = 0;

746 i‡(
¨gc
 == 2) {

747 
timeout
 = 
	`©ﬁ
(
¨gv
[1]);

748 } i‡(
¨gc
 > 1) {

749 
	`w¨nx
("%s:Åoÿm™yárgumíts", 
˙ame
);

750 
ußge
;

753 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOIELEM
, &
timeout
))

754 
	`îr
(1, "%s: CHIOIELEM", 
ch™gî_«me
);

758 
ußge
:

759 (Ë
	`Ârötf
(
°dîr
, "usage: %s %s [<timeout>]\n",

760 
	`gë¥og«me
(), 
˙ame
);

762 
	}
}

765 
	$do_vﬁèg
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

767 
f‹˚
 = 0;

768 
˛ór
 = 0;

769 
Æã∫©e
 = 0;

770 
c
;

771 
ch™gî_£t_vﬁèg_ªque°
 
csvr
;

773 
	`bzîo
(&
csvr
, (csvr));

775 
›töd
 = 
›åe£t
 = 1;

776 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "fca")) != -1) {

777 
c
) {

779 
f‹˚
 = 1;

782 
˛ór
 = 1;

785 
Æã∫©e
 = 1;

788 
	`w¨nx
("%s: bad o±i⁄", 
˙ame
);

789 
ußge
;

793 
¨gc
 -
›töd
;

794 
¨gv
 +
›töd
;

796 i‡(
¨gc
 < 2) {

797 
	`w¨nx
("%s: missögÉÀmíà•ecifiˇti⁄", 
˙ame
);

798 
ußge
;

801 
csvr
.
csvr_ty≥
 = 
	`∑r£_ñemít_ty≥
(
¨gv
[0]);

802 
csvr
.
csvr_addr
 = (
u_öt16_t
)
	`©ﬁ
(
¨gv
[1]);

804 i‡(!
˛ór
) {

805 i‡(
¨gc
 < 3 ||árgc > 4) {

806 
	`w¨nx
("%s: missögárgumít", 
˙ame
);

807 
ußge
;

810 i‡(
f‹˚
)

811 
csvr
.
csvr_Êags
 = 
CSVR_MODE_REPLACE
;

813 
csvr
.
csvr_Êags
 = 
CSVR_MODE_SET
;

815 i‡(
	`°æí
(
¨gv
[2]Ë> (
csvr
.
csvr_vﬁèg
.
cv_vﬁid
)) {

816 
	`w¨nx
("%s: vﬁumêœbñÅoÿl⁄g", 
˙ame
);

817 
ußge
;

820 
	`°æ˝y
((*)
csvr
.
csvr_vﬁèg
.
cv_vﬁid
, 
¨gv
[2],

821 (
csvr
.
csvr_vﬁèg
.
cv_vﬁid
));

823 i‡(
¨gc
 == 4) {

824 
csvr
.
csvr_vﬁèg
.
cv_£rül
 = (
u_öt16_t
)
	`©ﬁ
(
¨gv
[3]);

827 i‡(
¨gc
 != 2) {

828 
	`w¨nx
("%s: u√x≥˘edárgumít", 
˙ame
);

829 
ußge
;

831 
csvr
.
csvr_Êags
 = 
CSVR_MODE_CLEAR
;

834 i‡(
Æã∫©e
) {

835 
csvr
.
csvr_Êags
 |
CSVR_ALTERNATE
;

838 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOSETVOLTAG
, &
csvr
))

839 
	`îr
(1, "%s: CHIOSETVOLTAG", 
ch™gî_«me
);

842 
ußge
:

843 (Ë
	`Ârötf
(
°dîr
,

845 
	`gë¥og«me
(), 
˙ame
);

847 
	}
}

849 
u_öt16_t


850 
	$∑r£_ñemít_ty≥
(*
˝
)

852 
i
;

854 
i
 = 0; 
ñemíts
[i].
ë_«me
 !
NULL
; ++i)

855 i‡(
	`°rcmp
(
ñemíts
[
i
].
ë_«me
, 
˝
) == 0)

856  ((
u_öt16_t
)
ñemíts
[
i
].
ë_ty≥
);

858 
	`îrx
(1, "övÆidÉÀmíàty≥ `%s'", 
˝
);

860 
	}
}

863 
	$ñemít_ty≥_«me
(
ë
)

865 
i
;

867 
i
 = 0; 
ñemíts
[i].
ë_«me
 !
NULL
; i++)

868 i‡(
ñemíts
[
i
].
ë_ty≥
 =
ë
)

869  
ñemíts
[
i
].
ë_«me
;

872 
	}
}

874 
u_öt16_t


875 
	$∑r£_ñemít_unô
(*
˝
)

877 
i
;

878 *
p
;

880 
i
 = ()
	`°πﬁ
(
˝
, &
p
, 10);

881 i‡((
i
 < 0Ë|| (*
p
 != '\0'))

882 
	`îrx
(1, "övÆid unôÇumbî `%s'", 
˝
);

884  ((
u_öt16_t
)
i
);

885 
	}
}

888 
	$∑r£_•ecül
(*
˝
)

890 
vÆ
;

892 
vÆ
 = 
	`is_•ecül
(
˝
);

893 i‡(
vÆ
)

894  (
vÆ
);

896 
	`îrx
(1, "övÆid modifõ∏`%s'", 
˝
);

898 
	}
}

901 
	$is_•ecül
(*
˝
)

903 
i
;

905 
i
 = 0; 
•ecüls
[i].
sw_«me
 !
NULL
; ++i)

906 i‡(
	`°rcmp
(
•ecüls
[
i
].
sw_«me
, 
˝
) == 0)

907  (
•ecüls
[
i
].
sw_vÆue
);

910 
	}
}

913 
	$bôs_to_°rög
(
˚s_°©us_Êags
 
v
, c⁄° *
˝
)

915 c⁄° *
≈
;

916 
f
, 
£p
, *
bp
;

917 
buf
[128];

919 
bp
 = 
buf
;

920 (Ë
	`mem£t
(
buf
, 0, (buf));

922 
£p
 = '<'; (
f
 = *
˝
++Ë!0; c∞
≈
) {

923 
≈
 = 
˝
; *np >= ' ';)

924 
≈
++;

925 i‡((()
v
 & (1 << (
f
 - 1))) == 0)

927 (Ë
	`¢¥ötf
(
bp
, (
buf
Ë- (
size_t
)(bp - &buf[0]),

928 "%c%.*s", 
£p
, ()()(
≈
 - 
˝
), cp);

929 
bp
 +
	`°æí
(bp);

930 
£p
 = ',';

932 i‡(
£p
 != '<')

933 *
bp
 = '>';

935  (
buf
);

936 
	}
}

944 
	$do_ªtu∫
(c⁄° *
˙ame
, 
¨gc
, **
¨gv
)

946 
ch™gî_ñemít_°©us
 *
˚s
;

947 
ch™gî_move
 
cmd
;

948 
uöt16_t
 
ty≥
, 
ñemít
;

950 ++
¨gv
; --
¨gc
;

952 i‡(
¨gc
 < 2) {

953 
	`w¨nx
("%s:Åoÿ„wárgumíts", 
˙ame
);

954 
ußge
;

955 } i‡(
¨gc
 > 3) {

956 
	`w¨nx
("%s:Åoÿm™yárgumíts", 
˙ame
);

957 
ußge
;

960 
ty≥
 = 
	`∑r£_ñemít_ty≥
(*
¨gv
);

961 ++
¨gv
; --
¨gc
;

964 i‡(
CHET_VT
 =
ty≥
) {

965 
	`föd_ñemít
(*
¨gv
, &
ty≥
, &
ñemít
);

967 
ñemít
 = 
	`∑r£_ñemít_unô
(*
¨gv
);

969 ++
¨gv
; --
¨gc
;

972 
˚s
 = 
	`gë_ñemít_°©us
(()
ty≥
, ()
ñemít
,

973 
CHET_VT
 =
ty≥
);

975 i‡(
NULL
 =
˚s
)

976 
	`îrx
(1, "%s:ÇuŒÉÀmíà°©u†poöãr", 
˙ame
);

978 i‡(!(
˚s
->
˚s_Êags
 & 
CES_SOURCE_VALID
))

979 
	`îrx
(1, "%s:Çÿsour˚ inf‹m©i⁄", 
˙ame
);

981 (Ë
	`mem£t
(&
cmd
, 0, (cmd));

983 
cmd
.
cm_‰omty≥
 = 
ty≥
;

984 
cmd
.
cm_‰omunô
 = 
ñemít
;

985 
cmd
.
cm_tŸy≥
 = 
˚s
->
˚s_sour˚_ty≥
;

986 
cmd
.
cm_tounô
 = 
˚s
->
˚s_sour˚_addr
;

988 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOMOVE
, &
cmd
) == -1)

989 
	`îr
(1, "%s: CHIOMOVE", 
ch™gî_«me
);

990 
	`‰ì
(
˚s
);

994 
ußge
:

995 (Ë
	`Ârötf
(
°dîr
, "usage: %s %s "

996 "<‰om ET> <‰om EU>\n", 
	`gë¥og«me
(), 
˙ame
);

998 
	}
}

1007 
ch™gî_ñemít_°©us
 *

1008 
	$gë_ñemít_°©us
(
ty≥
, 
ñemít
, 
u£_vﬁègs
)

1010 
ch™gî_ñemít_°©us_ªque°
 
˚§
;

1011 
ch™gî_ñemít_°©us
 *
˚s
;

1013 
˚s
 = (
ch™gî_ñemít_°©us
 *)

1014 
	`ˇŒoc
((
size_t
)1, (
ch™gî_ñemít_°©us
));

1016 i‡(
NULL
 =
˚s
)

1017 
	`îrx
(1, "can'tállocate status storage");

1019 ()
	`mem£t
(&
˚§
, 0, (cesr));

1021 
˚§
.
˚§_ñemít_ty≥
 = (
uöt16_t
)
ty≥
;

1022 
˚§
.
˚§_ñemít_ba£
 = (
uöt16_t
)
ñemít
;

1023 
˚§
.
˚§_ñemít_cou¡
 = 1;

1024 i‡(
u£_vﬁègs
)

1025 
˚§
.
˚§_Êags
 |
CESR_VOLTAGS
;

1026 
˚§
.
˚§_ñemít_°©us
 = 
˚s
;

1028 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGSTATUS
, (*)&
˚§
) == -1) {

1029 
	`‰ì
(
˚s
);

1030 
	`îr
(1, "%s: CHIOGSTATUS", 
ch™gî_«me
);

1034  
˚s
;

1035 
	}
}

1046 
	$föd_ñemít
(*
vﬁèg
, 
uöt16_t
 *
ë
, uöt16_à*
eu
)

1048 
ch™gî_∑øms
 
˝
;

1049 
ch™gî_ñemít_°©us_ªque°
 
˚§
;

1050 
ch™gî_ñemít_°©us
 *
ch_˚s
, *
˚s
;

1051 
found
 = 0;

1052 
size_t
 
ñem
, 
tŸÆ_ñem
;

1058 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGPARAMS
, (*)&
˝
))

1059 
	`îr
(1, "%s: CHIOGPARAMS", 
ch™gî_«me
);

1062 
tŸÆ_ñem
 = (
˝
.
˝_n¶Ÿs
 + cp.
˝_ndrives


1063 + 
˝
.
˝_≈ickîs
 + cp.
˝_≈‹èls
);

1065 
ch_˚s
 = (
ch™gî_ñemít_°©us
 *)

1066 
	`ˇŒoc
(
tŸÆ_ñem
, (
ch™gî_ñemít_°©us
));

1068 i‡(
NULL
 =
ch_˚s
)

1069 
	`îrx
(1, "can'tállocate status storage");

1071 
˚s
 = 
ch_˚s
;

1074 i‡(
˝
.
˝_n¶Ÿs
 > 0) {

1075 (Ë
	`mem£t
(&
˚§
, 0, (cesr));

1076 
˚§
.
˚§_ñemít_ty≥
 = 
CHET_ST
;

1077 
˚§
.
˚§_ñemít_ba£
 = 0;

1078 
˚§
.
˚§_ñemít_cou¡
 = 
˝
.
˝_n¶Ÿs
;

1079 
˚§
.
˚§_Êags
 |
CESR_VOLTAGS
;

1080 
˚§
.
˚§_ñemít_°©us
 = 
˚s
;

1082 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGSTATUS
, (*)&
˚§
) == -1) {

1083 
	`‰ì
(
ch_˚s
);

1084 
	`îr
(1, "%s: CHIOGSTATUS", 
ch™gî_«me
);

1086 
˚s
 +
˝
.
˝_n¶Ÿs
;

1090 i‡(
˝
.
˝_ndrives
 > 0 ) {

1092 (Ë
	`mem£t
(&
˚§
, 0, (cesr));

1093 
˚§
.
˚§_ñemít_ty≥
 = 
CHET_DT
;

1094 
˚§
.
˚§_ñemít_ba£
 = 0;

1095 
˚§
.
˚§_ñemít_cou¡
 = 
˝
.
˝_ndrives
;

1096 
˚§
.
˚§_Êags
 |
CESR_VOLTAGS
;

1097 
˚§
.
˚§_ñemít_°©us
 = 
˚s
;

1099 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGSTATUS
, (*)&
˚§
) == -1) {

1100 
	`‰ì
(
ch_˚s
);

1101 
	`îr
(1, "%s: CHIOGSTATUS", 
ch™gî_«me
);

1103 
˚s
 +
˝
.
˝_ndrives
;

1107 i‡(
˝
.
˝_≈‹èls
 > 0 ) {

1108 (Ë
	`mem£t
(&
˚§
, 0, (cesr));

1109 
˚§
.
˚§_ñemít_ty≥
 = 
CHET_IE
;

1110 
˚§
.
˚§_ñemít_ba£
 = 0;

1111 
˚§
.
˚§_ñemít_cou¡
 = 
˝
.
˝_≈‹èls
;

1112 
˚§
.
˚§_Êags
 |
CESR_VOLTAGS
;

1113 
˚§
.
˚§_ñemít_°©us
 = 
˚s
;

1115 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGSTATUS
, (*)&
˚§
) == -1) {

1116 
	`‰ì
(
ch_˚s
);

1117 
	`îr
(1, "%s: CHIOGSTATUS", 
ch™gî_«me
);

1119 
˚s
 +
˝
.
˝_≈‹èls
;

1123 i‡(
˝
.
˝_≈ickîs
 > 0) {

1124 (Ë
	`mem£t
(&
˚§
, 0, (cesr));

1125 
˚§
.
˚§_ñemít_ty≥
 = 
CHET_MT
;

1126 
˚§
.
˚§_ñemít_ba£
 = 0;

1127 
˚§
.
˚§_ñemít_cou¡
 = 
˝
.
˝_≈ickîs
;

1128 
˚§
.
˚§_Êags
 |
CESR_VOLTAGS
;

1129 
˚§
.
˚§_ñemít_°©us
 = 
˚s
;

1131 i‡(
	`io˘l
(
ch™gî_fd
, 
CHIOGSTATUS
, (*)&
˚§
) == -1) {

1132 
	`‰ì
(
ch_˚s
);

1133 
	`îr
(1, "%s: CHIOGSTATUS", 
ch™gî_«me
);

1140 
ñem
 = 0;ÉÀm <
tŸÆ_ñem
; ++elem) {

1142 
˚s
 = &
ch_˚s
[
ñem
];

1145 i‡((
˚s
->
˚s_Êags
 & (
CES_STATUS_ACCESS
|
CES_STATUS_FULL
))

1146 !(
CES_STATUS_ACCESS
|
CES_STATUS_FULL
))

1150 i‡(
	`°rˇ£cmp
(
vﬁèg
,

1151 (c⁄° *)
˚s
->
˚s_pvﬁèg
.
cv_vﬁid
) == 0) {

1152 *
ë
 = 
˚s
->
˚s_ty≥
;

1153 *
eu
 = 
˚s
->
˚s_addr
;

1154 ++
found
;

1158 i‡(!
found
) {

1159 
	`îrx
(1, "%s: u«bÀÅÿloˇã vﬁèg: %s", 
ch™gî_«me
,

1160 
vﬁèg
);

1162 
	`‰ì
(
ch_˚s
);

1164 
	}
}

1167 
	$˛ónup
()

1170 ()
	`˛o£
(
ch™gî_fd
);

1171 
	}
}

1174 
	$ußge
()

1176 ()
	`Ârötf
(
°dîr
, "usage: %s [-f changer] command [-<flags>] "

1177 "¨g1árg2 [¨g3 [...]]\n", 
	`gë¥og«me
());

1178 
	`exô
(1);

1179 
	}
}

	@chio/defs.h

35 
	sñemít_ty≥
 {

36 c⁄° *
	më_«me
;

37 
	më_ty≥
;

40 
	sch™gî_comm™d
 {

41 c⁄° *
	mcc_«me
;

43 (*
	mcc_h™dÀr
)(const *, , **);

46 
	s•ecül_w‹d
 {

47 c⁄° *
	msw_«me
;

48 
	msw_vÆue
;

52 
	#SW_INVERT
 1

	)

53 
	#SW_INVERT1
 2

	)

54 
	#SW_INVERT2
 3

	)

57 
	#CHANGER_ENV_VAR
 "CHANGER"

	)

	@chio/pathnames.h

35 
	#_PATH_CH
 "/dev/ch0"

	)

	@chmod/chmod.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)chmod.c 8.8 (Berkeley) 4/1/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/chmod/chmod.c,v 1.35.2.3.6.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/∑øm.h
>

45 
	~<sys/°©.h
>

47 
	~<îr.h
>

48 
	~<î∫o.h
>

49 
	~<·s.h
>

50 
	~<limôs.h
>

51 
	~<°dio.h
>

52 
	~<°dlib.h
>

53 
	~<°rög.h
>

54 
	~<uni°d.h
>

56 
ußge
();

57 
may_have_nfs4a˛
(c⁄° 
FTSENT
 *
ít
, 
hÊag
);

60 
	$maö
(
¨gc
, *
¨gv
[])

62 
FTS
 *
·•
;

63 
FTSENT
 *
p
;

64 
mode_t
 *
£t
;

65 
HÊag
, 
LÊag
, 
RÊag
, 
ch
, 
îr‹
, 
fÊag
, 
·s_›ti⁄s
, 
hÊag
, 
rvÆ
;

66 
vÊag
;

67 *
mode
;

68 
mode_t
 
√wmode
;

70 
£t
 = 
NULL
;

71 
HÊag
 = 
LÊag
 = 
RÊag
 = 
fÊag
 = 
hÊag
 = 
vÊag
 = 0;

72 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "HLPRXfghorstuvwx")) != -1)

73 
ch
) {

75 
HÊag
 = 1;

76 
LÊag
 = 0;

79 
LÊag
 = 1;

80 
HÊag
 = 0;

83 
HÊag
 = 
LÊag
 = 0;

86 
RÊag
 = 1;

89 
fÊag
 = 1;

100 
hÊag
 = 1;

110 i‡(
¨gv
[
›töd
 - 1][0] == '-' &&

111 
¨gv
[
›töd
 - 1][1] =
ch
 &&

112 
¨gv
[
›töd
 - 1][2] == '\0')

113 --
›töd
;

114 
d⁄e
;

116 
vÊag
++;

120 
	`ußge
();

122 
d⁄e
: 
¨gv
 +
›töd
;

123 
¨gc
 -
›töd
;

125 i‡(
¨gc
 < 2)

126 
	`ußge
();

128 i‡(
RÊag
) {

129 
·s_›ti⁄s
 = 
FTS_PHYSICAL
;

130 i‡(
hÊag
)

131 
	`îrx
(1,

133 i‡(
HÊag
)

134 
·s_›ti⁄s
 |
FTS_COMFOLLOW
;

135 i‡(
LÊag
) {

136 
·s_›ti⁄s
 &~
FTS_PHYSICAL
;

137 
·s_›ti⁄s
 |
FTS_LOGICAL
;

140 
·s_›ti⁄s
 = 
hÊag
 ? 
FTS_PHYSICAL
 : 
FTS_LOGICAL
;

142 
mode
 = *
¨gv
;

143 i‡((
£t
 = 
	`£tmode
(
mode
)Ë=
NULL
)

144 
	`îrx
(1, "övÆid fûêmode: %s", 
mode
);

146 i‡((
·•
 = 
	`·s_›í
(++
¨gv
, 
·s_›ti⁄s
, 0)Ë=
NULL
)

147 
	`îr
(1, "fts_open");

148 
rvÆ
 = 0; (
p
 = 
	`·s_ªad
(
·•
)Ë!
NULL
;) {

149 
p
->
·s_öfo
) {

150 
FTS_D
:

151 i‡(!
RÊag
)

152 
	`·s_£t
(
·•
, 
p
, 
FTS_SKIP
);

154 
FTS_DNR
:

155 
	`w¨nx
("%s: %s", 
p
->
·s_∑th
, 
	`°ªº‹
’->
·s_î∫o
));

156 
rvÆ
 = 1;

158 
FTS_ERR
:

159 
FTS_NS
:

160 
	`w¨nx
("%s: %s", 
p
->
·s_∑th
, 
	`°ªº‹
’->
·s_î∫o
));

161 
rvÆ
 = 1;

163 
FTS_SL
:

164 
FTS_SLNONE
:

170 i‡(!
hÊag
)

176 
√wmode
 = 
	`gëmode
(
£t
, 
p
->
·s_°©p
->
°_mode
);

182 i‡(
	`may_have_nfs4a˛
(
p
, 
hÊag
) == 0 &&

183 (
√wmode
 & 
ALLPERMS
Ë=(
p
->
·s_°©p
->
°_mode
 & ALLPERMS))

185 i‡(
hÊag
)

186 
îr‹
 = 
	`lchmod
(
p
->
·s_ac˝©h
, 
√wmode
);

188 
îr‹
 = 
	`chmod
(
p
->
·s_ac˝©h
, 
√wmode
);

189 i‡(
îr‹
) {

190 i‡(!
fÊag
) {

191 
	`w¨n
("%s", 
p
->
·s_∑th
);

192 
rvÆ
 = 1;

195 i‡(
vÊag
) {

196 ()
	`¥ötf
("%s", 
p
->
·s_∑th
);

198 i‡(
vÊag
 > 1) {

199 
m1
[12], 
m2
[12];

201 
	`°rmode
(
p
->
·s_°©p
->
°_mode
, 
m1
);

202 
	`°rmode
((
p
->
·s_°©p
->
°_mode
 &

203 
S_IFMT
Ë| 
√wmode
, 
m2
);

204 ()
	`¥ötf
(": 0%o [%s] -> 0%o [%s]",

205 
p
->
·s_°©p
->
°_mode
, 
m1
,

206 (
p
->
·s_°©p
->
°_mode
 & 
S_IFMT
) |

207 
√wmode
, 
m2
);

209 ()
	`¥ötf
("\n");

213 i‡(
î∫o
)

214 
	`îr
(1, "fts_read");

215 
	`exô
(
rvÆ
);

216 
	}
}

219 
	$ußge
()

221 ()
	`Ârötf
(
°dîr
,

223 
	`exô
(1);

224 
	}
}

227 
	$may_have_nfs4a˛
(c⁄° 
FTSENT
 *
ít
, 
hÊag
)

229 
ªt
;

230 
dev_t
 
¥evious_dev
 = 
NODEV
;

231 
suµ‹ts_a˛s
 = -1;

233 i‡(
¥evious_dev
 !
ít
->
·s_°©p
->
°_dev
) {

234 
¥evious_dev
 = 
ít
->
·s_°©p
->
°_dev
;

235 
suµ‹ts_a˛s
 = 0;

237 i‡(
hÊag
)

238 
ªt
 = 
	`Õ©hc⁄f
(
ít
->
·s_ac˝©h
, 
_PC_ACL_NFS4
);

240 
ªt
 = 
	`∑thc⁄f
(
ít
->
·s_ac˝©h
, 
_PC_ACL_NFS4
);

241 i‡(
ªt
 > 0)

242 
suµ‹ts_a˛s
 = 1;

243 i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
)

244 
	`w¨n
("%s", 
ít
->
·s_∑th
);

247  (
suµ‹ts_a˛s
);

248 
	}
}

	@cp/cp.c

34 #i‚de‡
löt


35 c⁄° 
	gc›yright
[] =

40 #i‚de‡
löt


41 
	gsccsid
[] = "@(#)cp.c 8.2 (Berkeley) 4/1/94";

44 
	~<sys/cdefs.h
>

45 
__FBSDID
("$FreeBSD: src/bin/cp/cp.c,v 1.60.2.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

62 
	~<sys/ty≥s.h
>

63 
	~<sys/°©.h
>

65 
	~<îr.h
>

66 
	~<î∫o.h
>

67 
	~<·s.h
>

68 
	~<limôs.h
>

69 
	~<sig«l.h
>

70 
	~<°dio.h
>

71 
	~<°dlib.h
>

72 
	~<°rög.h
>

73 
	~<uni°d.h
>

75 
	~"exã∫.h
"

77 
	#STRIP_TRAILING_SLASH
(
p
) { \

78 (
p
).
p_íd
 > (p).
p_∑th
 + 1 && (p).p_end[-1] == '/') \

79 *--(
p
).
p_íd
 = 0; \

80 }

	)

82 
	gem±y°rög
[] = "";

84 
PATH_T
 
	gto
 = { 
to
.
p_∑th
, 
em±y°rög
, "" };

86 
	gfÊag
, 
	giÊag
, 
	glÊag
, 
	gnÊag
, 
	gpÊag
, 
	gvÊag
;

87 
	gRÊag
, 
	grÊag
;

88 vﬁ©ûê
sig_©omic_t
 
	göfo
;

90 
	e›
 { 
	mFILE_TO_FILE
, 
	mFILE_TO_DIR
, 
	mDIR_TO_DNE
 };

92 
c›y
(*[], 
›
, );

93 
ma°îcmp
(c⁄° 
FTSENT
 * const *, const FTSENT * const *);

94 
sigöfo
(
__unu£d
);

97 
	$maö
(
¨gc
, *
¨gv
[])

99 
°©
 
to_°©
, 
tmp_°©
;

100 
›
 
ty≥
;

101 
HÊag
, 
LÊag
, 
PÊag
, 
ch
, 
·s_›ti⁄s
, 
r
, 
have_åaûög_¶ash
;

102 *
èrgë
;

104 
·s_›ti⁄s
 = 
FTS_NOCHDIR
 | 
FTS_PHYSICAL
;

105 
HÊag
 = 
LÊag
 = 
PÊag
 = 0;

106 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "HLPRafilnprvx")) != -1)

107 
ch
) {

109 
HÊag
 = 1;

110 
LÊag
 = 
PÊag
 = 0;

113 
LÊag
 = 1;

114 
HÊag
 = 
PÊag
 = 0;

117 
PÊag
 = 1;

118 
HÊag
 = 
LÊag
 = 0;

121 
RÊag
 = 1;

124 
PÊag
 = 1;

125 
pÊag
 = 1;

126 
RÊag
 = 1;

127 
HÊag
 = 
LÊag
 = 0;

130 
fÊag
 = 1;

131 
iÊag
 = 
nÊag
 = 0;

134 
iÊag
 = 1;

135 
fÊag
 = 
nÊag
 = 0;

138 
lÊag
 = 1;

141 
nÊag
 = 1;

142 
fÊag
 = 
iÊag
 = 0;

145 
pÊag
 = 1;

148 
rÊag
 = 
LÊag
 = 1;

149 
HÊag
 = 
PÊag
 = 0;

152 
vÊag
 = 1;

155 
·s_›ti⁄s
 |
FTS_XDEV
;

158 
	`ußge
();

161 
¨gc
 -
›töd
;

162 
¨gv
 +
›töd
;

164 i‡(
¨gc
 < 2)

165 
	`ußge
();

167 i‡(
RÊag
 && 
rÊag
)

168 
	`îrx
(1, "the -Ránd -r options mayÇot be specifiedÅogether");

169 i‡(
rÊag
)

170 
RÊag
 = 1;

171 i‡(
RÊag
) {

172 i‡(
HÊag
)

173 
·s_›ti⁄s
 |
FTS_COMFOLLOW
;

174 i‡(
LÊag
) {

175 
·s_›ti⁄s
 &~
FTS_PHYSICAL
;

176 
·s_›ti⁄s
 |
FTS_LOGICAL
;

179 
·s_›ti⁄s
 &~
FTS_PHYSICAL
;

180 
·s_›ti⁄s
 |
FTS_LOGICAL
 | 
FTS_COMFOLLOW
;

182 ()
	`sig«l
(
SIGINFO
, 
sigöfo
);

185 
èrgë
 = 
¨gv
[--
¨gc
];

186 i‡(
	`°æ˝y
(
to
.
p_∑th
, 
èrgë
, (to.p_path)) >= (to.p_path))

187 
	`îrx
(1, "%s:Çamêtoÿl⁄g", 
èrgë
);

188 
to
.
p_íd
 =Åo.
p_∑th
 + 
	`°æí
(to.p_path);

189 i‡(
to
.
p_∑th
 =to.
p_íd
) {

190 *
to
.
p_íd
++ = '.';

191 *
to
.
p_íd
 = 0;

193 
have_åaûög_¶ash
 = (
to
.
p_íd
[-1] == '/');

194 i‡(
have_åaûög_¶ash
)

195 
	`STRIP_TRAILING_SLASH
(
to
);

196 
to
.
èrgë_íd
 =Åo.
p_íd
;

199 
¨gv
[
¨gc
] = 
NULL
;

215 
r
 = 
	`°©
(
to
.
p_∑th
, &
to_°©
);

216 i‡(
r
 =-1 && 
î∫o
 !
ENOENT
)

217 
	`îr
(1, "%s", 
to
.
p_∑th
);

218 i‡(
r
 =-1 || !
	`S_ISDIR
(
to_°©
.
°_mode
)) {

222 i‡(
¨gc
 > 1)

223 
	`îrx
(1, "%†i†nŸá dúe˘‹y", 
to
.
p_∑th
);

232 i‡(
r
 == -1) {

233 i‡(
RÊag
 && (
LÊag
 || 
HÊag
))

234 
	`°©
(*
¨gv
, &
tmp_°©
);

236 
	`l°©
(*
¨gv
, &
tmp_°©
);

238 i‡(
	`S_ISDIR
(
tmp_°©
.
°_mode
Ë&& 
RÊag
)

239 
ty≥
 = 
DIR_TO_DNE
;

241 
ty≥
 = 
FILE_TO_FILE
;

243 
ty≥
 = 
FILE_TO_FILE
;

245 i‡(
have_åaûög_¶ash
 && 
ty≥
 =
FILE_TO_FILE
) {

246 i‡(
r
 == -1)

247 
	`îrx
(1, "directory %s doesÇotÉxist",

248 
to
.
p_∑th
);

250 
	`îrx
(1, "%†i†nŸá dúe˘‹y", 
to
.
p_∑th
);

256 
ty≥
 = 
FILE_TO_DIR
;

258 
	`exô
 (
	`c›y
(
¨gv
, 
ty≥
, 
·s_›ti⁄s
));

259 
	}
}

262 
	$c›y
(*
¨gv
[], 
›
 
ty≥
, 
·s_›ti⁄s
)

264 
°©
 
to_°©
;

265 
FTS
 *
·•
;

266 
FTSENT
 *
cuº
;

267 
ba£
 = 0, 
d√
, 
bad˝
, 
rvÆ
;

268 
size_t
 
∆í
;

269 *
p
, *
èrgë_mid
;

270 
mode_t
 
mask
, 
mode
;

276 
mask
 = ~
	`umask
(0777);

277 
	`umask
(~
mask
);

279 i‡((
·•
 = 
	`·s_›í
(
¨gv
, 
·s_›ti⁄s
, 
ma°îcmp
)Ë=
NULL
)

280 
	`îr
(1, "fts_open");

281 
bad˝
 = 
rvÆ
 = 0; (
cuº
 = 
	`·s_ªad
(
·•
)Ë!
NULL
; badcp = 0) {

282 
cuº
->
·s_öfo
) {

283 
FTS_NS
:

284 
FTS_DNR
:

285 
FTS_ERR
:

286 
	`w¨nx
("%s: %s",

287 
cuº
->
·s_∑th
, 
	`°ªº‹
(cuº->
·s_î∫o
));

288 
bad˝
 = 
rvÆ
 = 1;

290 
FTS_DC
:

291 
	`w¨nx
("%s: dúe˘‹y cau£†®cy˛e", 
cuº
->
·s_∑th
);

292 
bad˝
 = 
rvÆ
 = 1;

302 i‡(
ty≥
 !
FILE_TO_FILE
) {

322 i‡(
cuº
->
·s_Àvñ
 =
FTS_ROOTLEVEL
) {

323 i‡(
ty≥
 !
DIR_TO_DNE
) {

324 
p
 = 
	`°ºchr
(
cuº
->
·s_∑th
, '/');

325 
ba£
 = (
p
 =
NULL
) ? 0 :

326 ()(
p
 - 
cuº
->
·s_∑th
 + 1);

328 i‡(!
	`°rcmp
(&
cuº
->
·s_∑th
[
ba£
],

330 
ba£
 += 1;

332 
ba£
 = 
cuº
->
·s_∑thÀn
;

335 
p
 = &
cuº
->
·s_∑th
[
ba£
];

336 
∆í
 = 
cuº
->
·s_∑thÀn
 - 
ba£
;

337 
èrgë_mid
 = 
to
.
èrgë_íd
;

338 i‡(*
p
 !'/' && 
èrgë_mid
[-1] != '/')

339 *
èrgë_mid
++ = '/';

340 *
èrgë_mid
 = 0;

341 i‡(
èrgë_mid
 - 
to
.
p_∑th
 + 
∆í
 >
PATH_MAX
) {

342 
	`w¨nx
("%s%s:ÇameÅooÜong (not copied)",

343 
to
.
p_∑th
, 
p
);

344 
bad˝
 = 
rvÆ
 = 1;

347 ()
	`°∫ˇt
(
èrgë_mid
, 
p
, 
∆í
);

348 
to
.
p_íd
 = 
èrgë_mid
 + 
∆í
;

349 *
to
.
p_íd
 = 0;

350 
	`STRIP_TRAILING_SLASH
(
to
);

353 i‡(
cuº
->
·s_öfo
 =
FTS_DP
) {

359 i‡(!
cuº
->
·s_numbî
)

370 i‡(
pÊag
) {

371 i‡(
	`£tfûe
(
cuº
->
·s_°©p
, -1))

372 
rvÆ
 = 1;

373 i‡(
	`¥e£rve_dú_a˛s
(
cuº
->
·s_°©p
,

374 
cuº
->
·s_ac˝©h
, 
to
.
p_∑th
) != 0)

375 
rvÆ
 = 1;

377 
mode
 = 
cuº
->
·s_°©p
->
°_mode
;

378 i‡((
mode
 & (
S_ISUID
 | 
S_ISGID
 | 
S_ISTXT
)) ||

379 ((
mode
 | 
S_IRWXU
Ë& 
mask
) != (mode & mask))

380 i‡(
	`chmod
(
to
.
p_∑th
, 
mode
 & 
mask
) != 0){

381 
	`w¨n
("chmod: %s", 
to
.
p_∑th
);

382 
rvÆ
 = 1;

389 i‡(
	`°©
(
to
.
p_∑th
, &
to_°©
) == -1)

390 
d√
 = 1;

392 i‡(
to_°©
.
°_dev
 =
cuº
->
·s_°©p
->st_dev &&

393 
to_°©
.
°_öo
 =
cuº
->
·s_°©p
->st_ino) {

394 
	`w¨nx
("%sánd %sáre identical (not copied).",

395 
to
.
p_∑th
, 
cuº
->
·s_∑th
);

396 
bad˝
 = 
rvÆ
 = 1;

397 i‡(
	`S_ISDIR
(
cuº
->
·s_°©p
->
°_mode
))

398 ()
	`·s_£t
(
·•
, 
cuº
, 
FTS_SKIP
);

401 i‡(!
	`S_ISDIR
(
cuº
->
·s_°©p
->
°_mode
) &&

402 
	`S_ISDIR
(
to_°©
.
°_mode
)) {

403 
	`w¨nx
("cannot overwrite directory %s with "

405 
to
.
p_∑th
, 
cuº
->
·s_∑th
);

406 
bad˝
 = 
rvÆ
 = 1;

409 
d√
 = 0;

412 
cuº
->
·s_°©p
->
°_mode
 & 
S_IFMT
) {

413 
S_IFLNK
:

415 i‡((
·s_›ti⁄s
 & 
FTS_LOGICAL
) ||

416 ((
·s_›ti⁄s
 & 
FTS_COMFOLLOW
) &&

417 
cuº
->
·s_Àvñ
 == 0)) {

418 i‡(
	`c›y_fûe
(
cuº
, 
d√
))

419 
bad˝
 = 
rvÆ
 = 1;

421 i‡(
	`c›y_lök
(
cuº
, !
d√
))

422 
bad˝
 = 
rvÆ
 = 1;

425 
S_IFDIR
:

426 i‡(!
RÊag
) {

427 
	`w¨nx
("%s isá directory (not copied).",

428 
cuº
->
·s_∑th
);

429 ()
	`·s_£t
(
·•
, 
cuº
, 
FTS_SKIP
);

430 
bad˝
 = 
rvÆ
 = 1;

441 i‡(
d√
) {

442 i‡(
	`mkdú
(
to
.
p_∑th
,

443 
cuº
->
·s_°©p
->
°_mode
 | 
S_IRWXU
) < 0)

444 
	`îr
(1, "%s", 
to
.
p_∑th
);

445 } i‡(!
	`S_ISDIR
(
to_°©
.
°_mode
)) {

446 
î∫o
 = 
ENOTDIR
;

447 
	`îr
(1, "%s", 
to
.
p_∑th
);

454 
cuº
->
·s_numbî
 = 
pÊag
 || 
d√
;

456 
S_IFBLK
:

457 
S_IFCHR
:

458 i‡(
RÊag
) {

459 i‡(
	`c›y_•ecül
(
cuº
->
·s_°©p
, !
d√
))

460 
bad˝
 = 
rvÆ
 = 1;

462 i‡(
	`c›y_fûe
(
cuº
, 
d√
))

463 
bad˝
 = 
rvÆ
 = 1;

466 
S_IFSOCK
:

467 
	`w¨nx
("%s isá socket (not copied).",

468 
cuº
->
·s_∑th
);

469 
S_IFIFO
:

470 i‡(
RÊag
) {

471 i‡(
	`c›y_fifo
(
cuº
->
·s_°©p
, !
d√
))

472 
bad˝
 = 
rvÆ
 = 1;

474 i‡(
	`c›y_fûe
(
cuº
, 
d√
))

475 
bad˝
 = 
rvÆ
 = 1;

479 i‡(
	`c›y_fûe
(
cuº
, 
d√
))

480 
bad˝
 = 
rvÆ
 = 1;

483 i‡(
vÊag
 && !
bad˝
)

484 ()
	`¥ötf
("%†-> %s\n", 
cuº
->
·s_∑th
, 
to
.
p_∑th
);

486 i‡(
î∫o
)

487 
	`îr
(1, "fts_read");

488 
	`·s_˛o£
(
·•
);

489  (
rvÆ
);

490 
	}
}

501 
	$ma°îcmp
(c⁄° 
FTSENT
 * c⁄° *
a
, c⁄° FTSENT * c⁄° *
b
)

503 
a_öfo
, 
b_öfo
;

505 
a_öfo
 = (*
a
)->
·s_öfo
;

506 i‡(
a_öfo
 =
FTS_ERR
 ||á_öfÿ=
FTS_NS
 ||á_öfÿ=
FTS_DNR
)

508 
b_öfo
 = (*
b
)->
·s_öfo
;

509 i‡(
b_öfo
 =
FTS_ERR
 || b_öfÿ=
FTS_NS
 || b_öfÿ=
FTS_DNR
)

511 i‡(
a_öfo
 =
FTS_D
)

513 i‡(
b_öfo
 =
FTS_D
)

516 
	}
}

519 
	$sigöfo
(
sig
 
__unu£d
)

522 
öfo
 = 1;

523 
	}
}

	@cp/extern.h

34 *
	mp_íd
;

35 *
	mèrgë_íd
;

36 
	mp_∑th
[
PATH_MAX
];

37 } 
	tPATH_T
;

39 
PATH_T
 
to
;

40 
fÊag
, 
iÊag
, 
lÊag
, 
nÊag
, 
pÊag
, 
vÊag
;

41 vﬁ©ûê
sig_©omic_t
 
öfo
;

43 
__BEGIN_DECLS


44 
c›y_fifo
(
°©
 *, );

45 
c›y_fûe
(c⁄° 
FTSENT
 *, );

46 
c›y_lök
(c⁄° 
FTSENT
 *, );

47 
c›y_•ecül
(
°©
 *, );

48 
£tfûe
(
°©
 *, );

49 
¥e£rve_dú_a˛s
(
°©
 *, *, *);

50 
¥e£rve_fd_a˛s
(, );

51 
ußge
();

52 
	g__END_DECLS


	@cp/utils.c

30 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)utils.c 8.3 (Berkeley) 4/1/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/cp/utils.c,v 1.58.2.3.6.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/ty≥s.h
>

39 
	~<sys/a˛.h
>

40 
	~<sys/∑øm.h
>

41 
	~<sys/°©.h
>

42 #ifde‡
VM_AND_BUFFER_CACHE_SYNCHRONIZED


43 
	~<sys/mm™.h
>

46 
	~<îr.h
>

47 
	~<î∫o.h
>

48 
	~<f˙é.h
>

49 
	~<·s.h
>

50 
	~<limôs.h
>

51 
	~<°dio.h
>

52 
	~<°dlib.h
>

53 
	~<sy£xôs.h
>

54 
	~<uni°d.h
>

56 
	~"exã∫.h
"

58 
	#˝_p˘
(
x
, 
y
Ë((y =0Ë? 0 : ()(100.0 * (xË/ (y)))

	)

62 
	#PHYSPAGES_THRESHOLD
 (32*1024)

	)

65 
	#BUFSIZE_MAX
 (2*1024*1024)

	)

69 
	#BUFSIZE_SMALL
 (
MAXPHYS
)

	)

72 
	$c›y_fûe
(c⁄° 
FTSENT
 *
íç
, 
d√
)

74 *
buf
 = 
NULL
;

75 
size_t
 
bufsize
;

76 
°©
 *
fs
;

77 
ssize_t
 
wcou¡
;

78 
size_t
 
wªsid
;

79 
off_t
 
wtŸÆ
;

80 
ch
, 
checkch
, 
‰om_fd
 = 0, 
rcou¡
, 
rvÆ
, 
to_fd
 = 0;

81 *
buÂ
;

82 #ifde‡
VM_AND_BUFFER_CACHE_SYNCHRONIZED


83 *
p
;

86 i‡((
‰om_fd
 = 
	`›í
(
íç
->
·s_∑th
, 
O_RDONLY
, 0)) == -1) {

87 
	`w¨n
("%s", 
íç
->
·s_∑th
);

91 
fs
 = 
íç
->
·s_°©p
;

101 i‡(!
d√
) {

102 
	#YESNO
 "(y/¿[n]Ë"

	)

103 i‡(
nÊag
) {

104 i‡(
vÊag
)

105 
	`¥ötf
("%†nŸ ovîwrôãn\n", 
to
.
p_∑th
);

106 ()
	`˛o£
(
‰om_fd
);

108 } i‡(
iÊag
) {

109 ()
	`Ârötf
(
°dîr
, "overwrite %s? %s",

110 
to
.
p_∑th
, 
YESNO
);

111 
checkch
 = 
ch
 = 
	`gëch¨
();

112 
ch
 !'\n' && ch !
EOF
)

113 
ch
 = 
	`gëch¨
();

114 i‡(
checkch
 != 'y' && checkch != 'Y') {

115 ()
	`˛o£
(
‰om_fd
);

116 ()
	`Ârötf
(
°dîr
, "not overwritten\n");

121 i‡(
fÊag
) {

124 ()
	`u∆ök
(
to
.
p_∑th
);

125 i‡(!
lÊag
)

126 
to_fd
 = 
	`›í
(
to
.
p_∑th
, 
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
,

127 
fs
->
°_mode
 & ~(
S_ISUID
 | 
S_ISGID
));

129 i‡(!
lÊag
)

131 
to_fd
 = 
	`›í
(
to
.
p_∑th
, 
O_WRONLY
 | 
O_TRUNC
, 0);

134 i‡(!
lÊag
)

135 
to_fd
 = 
	`›í
(
to
.
p_∑th
, 
O_WRONLY
 | 
O_TRUNC
 | 
O_CREAT
,

136 
fs
->
°_mode
 & ~(
S_ISUID
 | 
S_ISGID
));

139 i‡(
to_fd
 == -1) {

140 
	`w¨n
("%s", 
to
.
p_∑th
);

141 ()
	`˛o£
(
‰om_fd
);

145 
rvÆ
 = 0;

147 i‡(!
lÊag
) {

155 #ifde‡
VM_AND_BUFFER_CACHE_SYNCHRONIZED


156 i‡(
	`S_ISREG
(
fs
->
°_mode
Ë&& fs->
°_size
 > 0 &&

157 
fs
->
°_size
 <= 8 * 1024 * 1024 &&

158 (
p
 = 
	`mm≠
(
NULL
, (
size_t
)
fs
->
°_size
, 
PROT_READ
,

159 
MAP_SHARED
, 
‰om_fd
, (
off_t
)0)Ë!
MAP_FAILED
) {

160 
wtŸÆ
 = 0;

161 
buÂ
 = 
p
, 
wªsid
 = 
fs
->
°_size
; ;

162 
buÂ
 +
wcou¡
, 
wªsid
 -(
size_t
)wcount) {

163 
wcou¡
 = 
	`wrôe
(
to_fd
, 
buÂ
, 
wªsid
);

164 i‡(
wcou¡
 <= 0)

166 
wtŸÆ
 +
wcou¡
;

167 i‡(
öfo
) {

168 
öfo
 = 0;

169 ()
	`Ârötf
(
°dîr
,

171 
íç
->
·s_∑th
, 
to
.
p_∑th
,

172 
	`˝_p˘
(
wtŸÆ
, 
fs
->
°_size
));

174 i‡(
wcou¡
 >(
ssize_t
)
wªsid
)

177 i‡(
wcou¡
 !(
ssize_t
)
wªsid
) {

178 
	`w¨n
("%s", 
to
.
p_∑th
);

179 
rvÆ
 = 1;

182 i‡(
	`munm≠
(
p
, 
fs
->
°_size
) < 0) {

183 
	`w¨n
("%s", 
íç
->
·s_∑th
);

184 
rvÆ
 = 1;

189 i‡(
buf
 =
NULL
) {

195 i‡(
	`sysc⁄f
(
_SC_PHYS_PAGES
) >

196 
PHYSPAGES_THRESHOLD
)

197 
bufsize
 = 
	`MIN
(
BUFSIZE_MAX
, 
MAXPHYS
 * 8);

199 
bufsize
 = 
BUFSIZE_SMALL
;

200 
buf
 = 
	`mÆloc
(
bufsize
);

201 i‡(
buf
 =
NULL
)

202 
	`îr
(1, "NotÉnough memory");

204 
wtŸÆ
 = 0;

205 (
rcou¡
 = 
	`ªad
(
‰om_fd
, 
buf
, 
bufsize
)) > 0) {

206 
buÂ
 = 
buf
, 
wªsid
 = 
rcou¡
; ;

207 
buÂ
 +
wcou¡
, 
wªsid
 -= wcount) {

208 
wcou¡
 = 
	`wrôe
(
to_fd
, 
buÂ
, 
wªsid
);

209 i‡(
wcou¡
 <= 0)

211 
wtŸÆ
 +
wcou¡
;

212 i‡(
öfo
) {

213 
öfo
 = 0;

214 ()
	`Ârötf
(
°dîr
,

216 
íç
->
·s_∑th
, 
to
.
p_∑th
,

217 
	`˝_p˘
(
wtŸÆ
, 
fs
->
°_size
));

219 i‡(
wcou¡
 >(
ssize_t
)
wªsid
)

222 i‡(
wcou¡
 !(
ssize_t
)
wªsid
) {

223 
	`w¨n
("%s", 
to
.
p_∑th
);

224 
rvÆ
 = 1;

228 i‡(
rcou¡
 < 0) {

229 
	`w¨n
("%s", 
íç
->
·s_∑th
);

230 
rvÆ
 = 1;

234 i‡(
	`lök
(
íç
->
·s_∑th
, 
to
.
p_∑th
)) {

235 
	`w¨n
("%s", 
to
.
p_∑th
);

236 
rvÆ
 = 1;

247 i‡(!
lÊag
) {

248 i‡(
pÊag
 && 
	`£tfûe
(
fs
, 
to_fd
))

249 
rvÆ
 = 1;

250 i‡(
pÊag
 && 
	`¥e£rve_fd_a˛s
(
‰om_fd
, 
to_fd
) != 0)

251 
rvÆ
 = 1;

252 i‡(
	`˛o£
(
to_fd
)) {

253 
	`w¨n
("%s", 
to
.
p_∑th
);

254 
rvÆ
 = 1;

258 ()
	`˛o£
(
‰om_fd
);

260  (
rvÆ
);

261 
	}
}

264 
	$c›y_lök
(c⁄° 
FTSENT
 *
p
, 
exi°s
)

266 
Àn
;

267 
Œök
[
PATH_MAX
];

269 i‡((
Àn
 = 
	`ªadlök
(
p
->
·s_∑th
, 
Œök
, (llink) - 1)) == -1) {

270 
	`w¨n
("ªadlök: %s", 
p
->
·s_∑th
);

273 
Œök
[
Àn
] = '\0';

274 i‡(
exi°s
 && 
	`u∆ök
(
to
.
p_∑th
)) {

275 
	`w¨n
("u∆ök: %s", 
to
.
p_∑th
);

278 i‡(
	`symlök
(
Œök
, 
to
.
p_∑th
)) {

279 
	`w¨n
("symlök: %s", 
Œök
);

282  (
pÊag
 ? 
	`£tfûe
(
p
->
·s_°©p
, -1) : 0);

283 
	}
}

286 
	$c›y_fifo
(
°©
 *
‰om_°©
, 
exi°s
)

288 i‡(
exi°s
 && 
	`u∆ök
(
to
.
p_∑th
)) {

289 
	`w¨n
("u∆ök: %s", 
to
.
p_∑th
);

292 i‡(
	`mkfifo
(
to
.
p_∑th
, 
‰om_°©
->
°_mode
)) {

293 
	`w¨n
("mkfifo: %s", 
to
.
p_∑th
);

296  (
pÊag
 ? 
	`£tfûe
(
‰om_°©
, -1) : 0);

297 
	}
}

300 
	$c›y_•ecül
(
°©
 *
‰om_°©
, 
exi°s
)

302 i‡(
exi°s
 && 
	`u∆ök
(
to
.
p_∑th
)) {

303 
	`w¨n
("u∆ök: %s", 
to
.
p_∑th
);

306 i‡(
	`mknod
(
to
.
p_∑th
, 
‰om_°©
->
°_mode
, from_°©->
°_rdev
)) {

307 
	`w¨n
("mknod: %s", 
to
.
p_∑th
);

310  (
pÊag
 ? 
	`£tfûe
(
‰om_°©
, -1) : 0);

311 
	}
}

314 
	$£tfûe
(
°©
 *
fs
, 
fd
)

316 
timevÆ
 
tv
[2];

317 
°©
 
ts
;

318 
rvÆ
, 
gŸ°©
, 
i¶ök
, 
fdvÆ
;

320 
rvÆ
 = 0;

321 
fdvÆ
 = 
fd
 != -1;

322 
i¶ök
 = !
fdvÆ
 && 
	`S_ISLNK
(
fs
->
°_mode
);

323 
fs
->
°_mode
 &
S_ISUID
 | 
S_ISGID
 | 
S_ISVTX
 |

324 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
;

326 
	`TIMESPEC_TO_TIMEVAL
(&
tv
[0], &
fs
->
°_©ime•ec
);

327 
	`TIMESPEC_TO_TIMEVAL
(&
tv
[1], &
fs
->
°_mtime•ec
);

328 i‡(
i¶ök
 ? 
	`lutimes
(
to
.
p_∑th
, 
tv
Ë: 
	`utimes
(to.p_path,Åv)) {

329 
	`w¨n
("%sutimes: %s", 
i¶ök
 ? "l" : "", 
to
.
p_∑th
);

330 
rvÆ
 = 1;

332 i‡(
fdvÆ
 ? 
	`f°©
(
fd
, &
ts
) :

333 (
i¶ök
 ? 
	`l°©
(
to
.
p_∑th
, &
ts
Ë: 
	`°©
(to.p_path, &ts)))

334 
gŸ°©
 = 0;

336 
gŸ°©
 = 1;

337 
ts
.
°_mode
 &
S_ISUID
 | 
S_ISGID
 | 
S_ISVTX
 |

338 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
;

346 i‡(!
gŸ°©
 || 
fs
->
°_uid
 !
ts
.°_uid || fs->
°_gid
 !=Ås.st_gid)

347 i‡(
fdvÆ
 ? 
	`fchown
(
fd
, 
fs
->
°_uid
, fs->
°_gid
) :

348 (
i¶ök
 ? 
	`lchown
(
to
.
p_∑th
, 
fs
->
°_uid
, fs->
°_gid
) :

349 
	`chown
(
to
.
p_∑th
, 
fs
->
°_uid
, fs->
°_gid
))) {

350 i‡(
î∫o
 !
EPERM
) {

351 
	`w¨n
("chown: %s", 
to
.
p_∑th
);

352 
rvÆ
 = 1;

354 
fs
->
°_mode
 &~(
S_ISUID
 | 
S_ISGID
);

357 i‡(!
gŸ°©
 || 
fs
->
°_mode
 !
ts
.st_mode)

358 i‡(
fdvÆ
 ? 
	`fchmod
(
fd
, 
fs
->
°_mode
) :

359 (
i¶ök
 ? 
	`lchmod
(
to
.
p_∑th
, 
fs
->
°_mode
) :

360 
	`chmod
(
to
.
p_∑th
, 
fs
->
°_mode
))) {

361 
	`w¨n
("chmod: %s", 
to
.
p_∑th
);

362 
rvÆ
 = 1;

365 i‡(!
gŸ°©
 || 
fs
->
°_Êags
 !
ts
.st_flags)

366 i‡(
fdvÆ
 ?

367 
	`fchÊags
(
fd
, 
fs
->
°_Êags
) :

368 (
i¶ök
 ? 
	`lchÊags
(
to
.
p_∑th
, 
fs
->
°_Êags
) :

369 
	`chÊags
(
to
.
p_∑th
, 
fs
->
°_Êags
))) {

370 
	`w¨n
("chÊags: %s", 
to
.
p_∑th
);

371 
rvÆ
 = 1;

374  (
rvÆ
);

375 
	}
}

378 
	$¥e£rve_fd_a˛s
(
sour˚_fd
, 
de°_fd
)

380 
a˛_t
 
a˛
;

381 
a˛_ty≥_t
 
a˛_ty≥
;

382 
a˛_suµ‹ãd
 = 0, 
ªt
, 
åivül
;

384 
ªt
 = 
	`Â©hc⁄f
(
sour˚_fd
, 
_PC_ACL_NFS4
);

385 i‡(
ªt
 > 0 ) {

386 
a˛_suµ‹ãd
 = 1;

387 
a˛_ty≥
 = 
ACL_TYPE_NFS4
;

388 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

389 
	`w¨n
("Â©hc⁄f(..., _PC_ACL_NFS4ËÁûed f‹ %s", 
to
.
p_∑th
);

392 i‡(
a˛_suµ‹ãd
 == 0) {

393 
ªt
 = 
	`Â©hc⁄f
(
sour˚_fd
, 
_PC_ACL_EXTENDED
);

394 i‡(
ªt
 > 0 ) {

395 
a˛_suµ‹ãd
 = 1;

396 
a˛_ty≥
 = 
ACL_TYPE_ACCESS
;

397 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

398 
	`w¨n
("fpathconf(..., _PC_ACL_EXTENDED) failed for %s",

399 
to
.
p_∑th
);

403 i‡(
a˛_suµ‹ãd
 == 0)

406 
a˛
 = 
	`a˛_gë_fd_≈
(
sour˚_fd
, 
a˛_ty≥
);

407 i‡(
a˛
 =
NULL
) {

408 
	`w¨n
("ÁûedÅÿgëá˛É¡rõ†whûê£âög %s", 
to
.
p_∑th
);

411 i‡(
	`a˛_is_åivül_≈
(
a˛
, &
åivül
)) {

412 
	`w¨n
("a˛_is_åivül(ËÁûed f‹ %s", 
to
.
p_∑th
);

413 
	`a˛_‰ì
(
a˛
);

416 i‡(
åivül
) {

417 
	`a˛_‰ì
(
a˛
);

420 i‡(
	`a˛_£t_fd_≈
(
de°_fd
, 
a˛
, 
a˛_ty≥
) < 0) {

421 
	`w¨n
("ÁûedÅÿ£àa˛É¡rõ†f‹ %s", 
to
.
p_∑th
);

422 
	`a˛_‰ì
(
a˛
);

425 
	`a˛_‰ì
(
a˛
);

427 
	}
}

430 
	$¥e£rve_dú_a˛s
(
°©
 *
fs
, *
sour˚_dú
, *
de°_dú
)

432 
	`a˛_t
 (*
a˛gëf
)(c⁄° *, 
a˛_ty≥_t
);

433 (*
a˛£tf
)(c⁄° *, 
a˛_ty≥_t
, 
a˛_t
);

434 
a˛
 *
a˛p
;

435 
a˛_t
 
a˛
;

436 
a˛_ty≥_t
 
a˛_ty≥
;

437 
a˛_suµ‹ãd
 = 0, 
ªt
, 
åivül
;

439 
ªt
 = 
	`∑thc⁄f
(
sour˚_dú
, 
_PC_ACL_NFS4
);

440 i‡(
ªt
 > 0) {

441 
a˛_suµ‹ãd
 = 1;

442 
a˛_ty≥
 = 
ACL_TYPE_NFS4
;

443 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

444 
	`w¨n
("Â©hc⁄f(..., _PC_ACL_NFS4ËÁûed f‹ %s", 
sour˚_dú
);

447 i‡(
a˛_suµ‹ãd
 == 0) {

448 
ªt
 = 
	`∑thc⁄f
(
sour˚_dú
, 
_PC_ACL_EXTENDED
);

449 i‡(
ªt
 > 0) {

450 
a˛_suµ‹ãd
 = 1;

451 
a˛_ty≥
 = 
ACL_TYPE_ACCESS
;

452 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

453 
	`w¨n
("fpathconf(..., _PC_ACL_EXTENDED) failed for %s",

454 
sour˚_dú
);

458 i‡(
a˛_suµ‹ãd
 == 0)

464 i‡(
	`S_ISLNK
(
fs
->
°_mode
)) {

465 
a˛gëf
 = 
a˛_gë_lök_≈
;

466 
a˛£tf
 = 
a˛_£t_lök_≈
;

468 
a˛gëf
 = 
a˛_gë_fûe
;

469 
a˛£tf
 = 
a˛_£t_fûe
;

471 i‡(
a˛_ty≥
 =
ACL_TYPE_ACCESS
) {

477 
a˛
 = 
	`a˛gëf
(
sour˚_dú
, 
ACL_TYPE_DEFAULT
);

478 i‡(
a˛
 =
NULL
) {

479 
	`w¨n
("failedÅo get defaultáclÉntries on %s",

480 
sour˚_dú
);

483 
a˛p
 = &
a˛
->
©s_a˛
;

484 i‡(
a˛p
->
a˛_˙t
 !0 && 
	`a˛£tf
(
de°_dú
,

485 
ACL_TYPE_DEFAULT
, 
a˛
) < 0) {

486 
	`w¨n
("failedÅo set defaultáclÉntries on %s",

487 
de°_dú
);

488 
	`a˛_‰ì
(
a˛
);

491 
	`a˛_‰ì
(
a˛
);

493 
a˛
 = 
	`a˛gëf
(
sour˚_dú
, 
a˛_ty≥
);

494 i‡(
a˛
 =
NULL
) {

495 
	`w¨n
("ÁûedÅÿgëá˛É¡rõ†⁄ %s", 
sour˚_dú
);

498 i‡(
	`a˛_is_åivül_≈
(
a˛
, &
åivül
)) {

499 
	`w¨n
("a˛_is_åivül(ËÁûed o¿%s", 
sour˚_dú
);

500 
	`a˛_‰ì
(
a˛
);

503 i‡(
åivül
) {

504 
	`a˛_‰ì
(
a˛
);

507 i‡(
	`a˛£tf
(
de°_dú
, 
a˛_ty≥
, 
a˛
) < 0) {

508 
	`w¨n
("ÁûedÅÿ£àa˛É¡rõ†⁄ %s", 
de°_dú
);

509 
	`a˛_‰ì
(
a˛
);

512 
	`a˛_‰ì
(
a˛
);

514 
	}
}

517 
	$ußge
()

520 ()
	`Ârötf
(
°dîr
, "%s\n%s\n",

524 
	`exô
(
EX_USAGE
);

525 
	}
}

	@csh/config.h

7 
	#GETGROUPS_T
 
gid_t


	)

10 
	#GETPGRP_VOID
 1

	)

16 
	#HAVE_CATGETS
 1

	)

23 
	#HAVE_DECL_CRYPT
 1

	)

27 
	#HAVE_DECL_ENVIRON
 0

	)

31 
	#HAVE_DECL_GETHOSTNAME
 1

	)

35 
	#HAVE_DECL_GETPGRP
 1

	)

39 
	#HAVE_DIRENT_H
 1

	)

42 
	#HAVE_DUP2
 1

	)

48 
	#HAVE_GETCWD
 1

	)

51 
	#HAVE_GETHOSTNAME
 1

	)

54 
	#HAVE_GETPWENT
 1

	)

63 
	#HAVE_INTTYPES_H
 1

	)

66 
	#HAVE_LONG_LONG
 1

	)

69 
	#HAVE_MBRTOWC
 1

	)

72 
	#HAVE_MEMMOVE
 1

	)

75 
	#HAVE_MEMORY_H
 1

	)

78 
	#HAVE_MEMSET
 1

	)

84 
	#HAVE_NICE
 1

	)

87 
	#HAVE_NL_LANGINFO
 1

	)

90 
	#HAVE_SBRK
 1

	)

93 
	#HAVE_SETPGID
 1

	)

96 
	#HAVE_SETPRIORITY
 1

	)

102 
	#HAVE_STDINT_H
 1

	)

105 
	#HAVE_STDLIB_H
 1

	)

109 
	#HAVE_STRCOLL
 1

	)

112 
	#HAVE_STRERROR
 1

	)

115 
	#HAVE_STRINGS_H
 1

	)

118 
	#HAVE_STRING_H
 1

	)

121 
	#HAVE_STRSTR
 1

	)

124 
	#HAVE_STRUCT_DIRENT_D_INO
 1

	)

127 
	#HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY
 1

	)

130 
	#HAVE_STRUCT_UTMP_UT_HOST
 1

	)

142 
	#HAVE_SYSCONF
 1

	)

153 
	#HAVE_SYS_STAT_H
 1

	)

156 
	#HAVE_SYS_TYPES_H
 1

	)

159 
	#HAVE_UNISTD_H
 1

	)

165 
	#HAVE_UTMP_H
 1

	)

168 
	#HAVE_WCHAR_H
 1

	)

171 
	#HAVE_WCTYPE_H
 1

	)

174 
	#HAVE_WCWIDTH
 1

	)

177 
	#ICONV_CONST
 c⁄°

	)

180 
	#NLS
 1

	)

183 
	#PACKAGE_BUGREPORT
 ""

	)

186 
	#PACKAGE_NAME
 ""

	)

189 
	#PACKAGE_STRING
 ""

	)

192 
	#PACKAGE_TARNAME
 ""

	)

195 
	#PACKAGE_VERSION
 ""

	)

201 
	#SIZEOF_WCHAR_T
 4

	)

207 
	#STDC_HEADERS
 1

	)

234 
	~"c⁄fig_p.h
"

235 
	~"c⁄fig_f.h
"

237 #i‚de‡
NO_NLS_CATALOGS


238 
	#NLS_CATALOGS


	)

242 
	#SYSMALLOC


	)

	@csh/config_p.h

10 #i‚de‡
_h_c⁄fig


11 
	#_h_c⁄fig


	)

16 
	#POSIX


	)

22 
	#POSIXJOBS


	)

37 
	#VFORK


	)

43 
	#BSDJOBS


	)

50 
	#BSDTIMES


	)

55 
	#BSDLIMIT


	)

63 
	#TERMIO


	)

72 
	#SYSVREL
 0

	)

78 #unde‡
YPBUGS


82 #i‡
deföed
(
__FªeBSD__
)

83 
	#NLS_BUGS


	)

84 
	#BSD_STYLE_COLORLS


	)

86 
	#MCLﬂdBySë
 
NL_CAT_LOCALE


	)

87 
	#BUFSIZE
 8192

	)

90 #i‡
deföed
(
__bsdi__
)

94 
	~<sys/∑øm.h
>

95 #ifde‡
_BSDI_VERSION
 >= 199701

96 
	#_PATH_TCSHELL
 "/bö/tcsh"

	)

97 #unde‡
SYSMALLOC


98 
	#SYSMALLOC


	)

100 
	#_PATH_TCSHELL
 "/u§/c⁄åib/bö/tcsh"

	)

103 #unde‡
NLS


104 #unde‡
NLS_CATALOGS


106 #ñi‡
deföed
(
__APPLE__
)

107 
	#SYSMALLOC


	)

110 
	#NLS_CATALOGS


	)

	@csh/iconv.h

29 #i‚de‡
_ICONV_H_


30 
	#_ICONV_H_


	)

32 *
	tic⁄v_t
;

33 
size_t
 
	tdl_ic⁄v_t
(
	tic⁄v_t
, c⁄° **, 
	tsize_t
 *, **, size_t *);

34 
	tdl_ic⁄v_˛o£_t
(
	tic⁄v_t
);

36 
ic⁄v_t
 
dl_ic⁄v_›í
(const *, const *);

37 
dl_ic⁄v_t
 *
dl_ic⁄v
;

38 
dl_ic⁄v_˛o£_t
 *
dl_ic⁄v_˛o£
;

40 
	#ic⁄v_›í
 
dl_ic⁄v_›í


	)

41 
	#ic⁄v
 
dl_ic⁄v


	)

42 
	#ic⁄v_˛o£
 
dl_ic⁄v_˛o£


	)

	@csh/iconv_stub.c

29 
	~<dlf˙.h
>

30 
	~<°ddef.h
>

32 
	~"ic⁄v.h
"

34 #unde‡
ic⁄v_›í


35 #unde‡
ic⁄v


36 #unde‡
ic⁄v_˛o£


38 
	#ICONVLIB
 "libic⁄v.so"

	)

39 
	#ICONV_ENGINE
 "ic⁄v"

	)

40 
	#ICONV_OPEN
 "ic⁄v_›í"

	)

41 
	#ICONV_CLOSE
 "ic⁄v_˛o£"

	)

43 
ic⁄v_t
 
	tic⁄v_›í_t
(const *, const *);

45 
dl_ic⁄v_t
 *
	gdl_ic⁄v
;

46 
dl_ic⁄v_˛o£_t
 *
	gdl_ic⁄v_˛o£
;

48 
	göôülized
;

49 *
	gic⁄vlib
;

50 
ic⁄v_›í_t
 *
	gic⁄v_›í
;

52 
ic⁄v_t


53 
	$dl_ic⁄v_›í
(c⁄° *
tocode
, c⁄° *
‰omcode
)

55 i‡(
öôülized
) {

56 i‡(
ic⁄vlib
 =
NULL
)

57  (
ic⁄v_t
)-1;

59 
öôülized
 = 1;

60 
ic⁄vlib
 = 
	`dl›í
(
ICONVLIB
, 
RTLD_LAZY
 | 
RTLD_GLOBAL
);

61 i‡(
ic⁄vlib
 =
NULL
)

62  (
ic⁄v_t
)-1;

63 
ic⁄v_›í
 = (
ic⁄v_›í_t
 *)
	`dlfunc
(
ic⁄vlib
, 
ICONV_OPEN
);

64 i‡(
ic⁄v_›í
 =
NULL
)

65 
dlfunc_îr
;

66 
dl_ic⁄v
 = (
dl_ic⁄v_t
 *)
	`dlfunc
(
ic⁄vlib
, 
ICONV_ENGINE
);

67 i‡(
dl_ic⁄v
 =
NULL
)

68 
dlfunc_îr
;

69 
dl_ic⁄v_˛o£
 = (
dl_ic⁄v_˛o£_t
 *)
	`dlfunc
(
ic⁄vlib
,

70 
ICONV_CLOSE
);

71 i‡(
dl_ic⁄v_˛o£
 =
NULL
)

72 
dlfunc_îr
;

74  
	`ic⁄v_›í
(
tocode
, 
‰omcode
);

76 
dlfunc_îr
:

77 
	`dl˛o£
(
ic⁄vlib
);

78 
ic⁄vlib
 = 
NULL
;

79  (
ic⁄v_t
)-1;

80 
	}
}

	@date/date.c

30 #i‚de‡
löt


31 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)date.c 8.2 (Berkeley) 4/28/95";

42 
	~<sys/cdefs.h
>

43 
__FBSDID
("$FreeBSD: src/bin/date/date.c,v 1.48.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

45 
	~<sys/∑øm.h
>

46 
	~<sys/time.h
>

48 
	~<˘y≥.h
>

49 
	~<îr.h
>

50 
	~<loˇÀ.h
>

51 
	~<libutû.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

55 
	~<sy¶og.h
>

56 
	~<uni°d.h
>

58 
	~"exã∫.h
"

59 
	~"v¨y.h
"

61 #i‚def 
TM_YEAR_BASE


62 
	#TM_YEAR_BASE
 1900

	)

65 
time_t
 
	gtvÆ
;

66 
	gªtvÆ
;

68 
£âhëime
(const *, const *, , );

69 
badf‹m©
();

70 
ußge
();

73 
	$maö
(
¨gc
, *
¨gv
[])

75 
timez⁄e
 
tz
;

76 
ch
, 
rÊag
;

77 
jÊag
, 
nÊag
;

78 c⁄° *
f‹m©
;

79 
buf
[1024];

80 *
íd±r
, *
fmt
;

81 *
tmp
;

82 
£t_timez⁄e
;

83 
v¨y
 *
v
;

84 c⁄° 
v¨y
 *
badv
;

85 
tm
 
…
;

87 
v
 = 
NULL
;

88 
fmt
 = 
NULL
;

89 (Ë
	`£éoˇÀ
(
LC_TIME
, "");

90 
tz
.
tz_d°time
 =Åz.
tz_möuãswe°
 = 0;

91 
rÊag
 = 0;

92 
jÊag
 = 
nÊag
 = 0;

93 
£t_timez⁄e
 = 0;

94 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:f:jnr:t:uv:")) != -1)

95 ()
ch
) {

97 
tz
.
tz_d°time
 = 
	`°πﬁ
(
›èrg
, &
íd±r
, 10) ? 1 : 0;

98 i‡(
íd±r
 =
›èrg
 || *endptr != '\0')

99 
	`ußge
();

100 
£t_timez⁄e
 = 1;

103 
fmt
 = 
›èrg
;

106 
jÊag
 = 1;

109 
nÊag
 = 1;

112 
rÊag
 = 1;

113 
tvÆ
 = 
	`°πoq
(
›èrg
, &
tmp
, 0);

114 i‡(*
tmp
 != 0)

115 
	`ußge
();

119 
tz
.
tz_möuãswe°
 = 
	`°πﬁ
(
›èrg
, &
íd±r
, 10);

120 i‡(
íd±r
 =
›èrg
 || *endptr != '\0')

121 
	`ußge
();

122 
£t_timez⁄e
 = 1;

125 ()
	`£ãnv
("TZ", "UTC0", 1);

128 
v
 = 
	`v¨y_≠≥nd
(v, 
›èrg
);

131 
	`ußge
();

133 
¨gc
 -
›töd
;

134 
¨gv
 +
›töd
;

140 i‡(
£t_timez⁄e
 && 
	`£âimeofday
((
timevÆ
 *)
NULL
, &
tz
))

141 
	`îr
(1, "settimeofday (timezone)");

143 i‡(!
rÊag
 && 
	`time
(&
tvÆ
) == -1)

144 
	`îr
(1, "time");

146 
f‹m©
 = "%+";

149 i‡(*
¨gv
 && **argv == '+') {

150 
f‹m©
 = *
¨gv
 + 1;

151 ++
¨gv
;

154 i‡(*
¨gv
) {

155 
	`£âhëime
(
fmt
, *
¨gv
, 
jÊag
, 
nÊag
);

156 ++
¨gv
;

157 } i‡(
fmt
 !
NULL
)

158 
	`ußge
();

160 i‡(*
¨gv
 && **argv == '+')

161 
f‹m©
 = *
¨gv
 + 1;

163 
…
 = *
	`loˇ…ime
(&
tvÆ
);

164 
badv
 = 
	`v¨y_≠∂y
(
v
, &
…
);

165 i‡(
badv
) {

166 
	`Ârötf
(
°dîr
, "%s: Cannotápply dateádjustment\n",

167 
badv
->
¨g
);

168 
	`v¨y_de°roy
(
v
);

169 
	`ußge
();

171 
	`v¨y_de°roy
(
v
);

172 ()
	`°r·ime
(
buf
, (buf), 
f‹m©
, &
…
);

173 ()
	`¥ötf
("%s\n", 
buf
);

174 i‡(
	`fÊush
(
°dout
))

175 
	`îr
(1, "stdout");

176 
	`exô
(
ªtvÆ
);

177 
	}
}

179 
	#ATOI2
(
s
Ë((sË+2, ((s)[-2] - '0'Ë* 10 + ((s)[-1] - '0'))

	)

182 
	$£âhëime
(c⁄° *
fmt
, c⁄° *
p
, 
jÊag
, 
nÊag
)

184 
tm
 *
…
;

185 
timevÆ
 
tv
;

186 c⁄° *
dŸ
, *
t
;

187 
˚¡ury
;

189 
…
 = 
	`loˇ…ime
(&
tvÆ
);

190 
…
->
tm_isd°
 = -1;

192 i‡(
fmt
 !
NULL
) {

193 
t
 = 
	`°Ωtime
(
p
, 
fmt
, 
…
);

194 i‡(
t
 =
NULL
) {

195 
	`Ârötf
(
°dîr
, "Failed conversion of ``%s''"

196 " usög f‹m© ``%s''\n", 
p
, 
fmt
);

197 
	`badf‹m©
();

198 } i‡(*
t
 != '\0')

199 
	`Ârötf
(
°dîr
, "Warning: Ignoring %ldÉxtraneous"

201 (Ë
	`°æí
(
t
),Å);

203 
t
 = 
p
, 
dŸ
 = 
NULL
; *t; ++t) {

204 i‡(
	`isdigô
(*
t
))

206 i‡(*
t
 ='.' && 
dŸ
 =
NULL
) {

207 
dŸ
 = 
t
;

210 
	`badf‹m©
();

213 i‡(
dŸ
 !
NULL
) {

214 
dŸ
++;

215 i‡(
	`°æí
(
dŸ
) != 2)

216 
	`badf‹m©
();

217 
…
->
tm_£c
 = 
	`ATOI2
(
dŸ
);

218 i‡(
…
->
tm_£c
 > 61)

219 
	`badf‹m©
();

221 
…
->
tm_£c
 = 0;

223 
˚¡ury
 = 0;

225 
	`°æí
(
p
Ë- ((
dŸ
 !
NULL
) ? 3 : 0)) {

227 
…
->
tm_yór
 = 
	`ATOI2
(
p
Ë* 100 - 
TM_YEAR_BASE
;

228 
˚¡ury
 = 1;

231 i‡(
˚¡ury
)

232 
…
->
tm_yór
 +
	`ATOI2
(
p
);

234 
…
->
tm_yór
 = 
	`ATOI2
(
p
);

235 i‡(
…
->
tm_yór
 < 69)

236 
…
->
tm_yór
 +2000 - 
TM_YEAR_BASE
;

238 
…
->
tm_yór
 +1900 - 
TM_YEAR_BASE
;

242 
…
->
tm_m⁄
 = 
	`ATOI2
(
p
);

243 i‡(
…
->
tm_m⁄
 > 12)

244 
	`badf‹m©
();

245 --
…
->
tm_m⁄
;

248 
…
->
tm_mday
 = 
	`ATOI2
(
p
);

249 i‡(
…
->
tm_mday
 > 31)

250 
	`badf‹m©
();

253 
…
->
tm_hour
 = 
	`ATOI2
(
p
);

254 i‡(
…
->
tm_hour
 > 23)

255 
	`badf‹m©
();

258 
…
->
tm_mö
 = 
	`ATOI2
(
p
);

259 i‡(
…
->
tm_mö
 > 59)

260 
	`badf‹m©
();

263 
	`badf‹m©
();

268 i‡((
tvÆ
 = 
	`mktime
(
…
)) == -1)

269 
	`îrx
(1, "nonexistentÅime");

271 i‡(!
jÊag
) {

273 i‡(
nÊag
 || 
	`√t£âime
(
tvÆ
)) {

274 
	`logwtmp
("|", "date", "");

275 
tv
.
tv_£c
 = 
tvÆ
;

276 
tv
.
tv_u£c
 = 0;

277 i‡(
	`£âimeofday
(&
tv
, (
timez⁄e
 *)
NULL
))

278 
	`îr
(1, "settimeofday (timeval)");

279 
	`logwtmp
("{", "date", "");

282 i‡((
p
 = 
	`gëlogö
()Ë=
NULL
)

283 
p
 = "???";

284 
	`sy¶og
(
LOG_AUTH
 | 
LOG_NOTICE
, "d©ê£àby %s", 
p
);

286 
	}
}

289 
	$badf‹m©
()

291 
	`w¨nx
("illegalÅime format");

292 
	`ußge
();

293 
	}
}

296 
	$ußge
()

298 ()
	`Ârötf
(
°dîr
, "%s\n%s\n",

303 
	`exô
(1);

304 
	}
}

	@date/extern.h

33 
√t£âime
(
time_t
);

	@date/netdate.c

31 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)netdate.c 8.1 (Berkeley) 5/31/93";

36 
	~<sys/cdefs.h
>

37 
__FBSDID
("$FreeBSD: src/bin/date/netdate.c,v 1.19.10.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

39 
	~<sys/∑øm.h
>

40 
	~<sys/time.h
>

41 
	~<sys/sockë.h
>

43 
	~<√töë/ö.h
>

44 
	~<√tdb.h
>

45 
	#TSPTYPES


	)

46 
	~<¥Ÿocﬁs/timed.h
>

48 
	~<îr.h
>

49 
	~<î∫o.h
>

50 
	~<°rög.h
>

51 
	~<uni°d.h
>

53 
	~"exã∫.h
"

55 
	#WAITACK
 2

	)

56 
	#WAITDATEACK
 5

	)

58 
ªtvÆ
;

68 
	$√t£âime
(
time_t
 
tvÆ
)

70 
timevÆ
 
tout
;

71 
£rvít
 *
•
;

72 
t•
 
msg
;

73 
sockaddr_ö
 
lsö
, 
de°
, 
‰om
;

74 
fd_£t
 
ªady
;

75 
waôtime
;

76 
s
, 
p‹t
, 
timed_ack
, 
found
, 
Àº
;

77 
sockÀn_t
 
Àngth
;

78 
ho°«me
[
MAXHOSTNAMELEN
];

80 i‡((
•
 = 
	`gë£rvby«me
("timed", "udp")Ë=
NULL
) {

81 
	`w¨nx
("timed/udp: unknown service");

82  (
ªtvÆ
 = 2);

85 
de°
.
sö_p‹t
 = 
•
->
s_p‹t
;

86 
de°
.
sö_Ámûy
 = 
AF_INET
;

87 
de°
.
sö_addr
.
s_addr
 = 
	`ht⁄l
((
u_l⁄g
)
INADDR_ANY
);

88 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

89 i‡(
s
 < 0) {

90 i‡(
î∫o
 !
EPROTONOSUPPORT
)

91 
	`w¨n
("timed");

92  (
ªtvÆ
 = 2);

95 
	`mem£t
(&
lsö
, 0, (lsin));

96 
lsö
.
sö_Ámûy
 = 
AF_INET
;

97 
p‹t
 = 
IPPORT_RESERVED
 - 1;Öort > IPPORT_RESERVED / 2;Öort--) {

98 
lsö
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
)
p‹t
);

99 i‡(
	`böd
(
s
, (
sockaddr
 *)&
lsö
, (lsin)) >= 0)

101 i‡(
î∫o
 =
EADDRINUSE
)

103 i‡(
î∫o
 !
EADDRNOTAVAIL
)

104 
	`w¨n
("bind");

105 
bad
;

107 i‡(
p‹t
 =
IPPORT_RESERVED
 / 2) {

108 
	`w¨nx
("allÖorts in use");

109 
bad
;

111 
	`mem£t
(&
msg
, 0, (msg));

112 
msg
.
t•_ty≥
 = 
TSP_SETDATE
;

113 
msg
.
t•_vîs
 = 
TSPVERSION
;

114 i‡(
	`gëho°«me
(
ho°«me
, (hostname))) {

115 
	`w¨n
("gethostname");

116 
bad
;

118 ()
	`°æ˝y
(
msg
.
t•_«me
, 
ho°«me
, (msg.tsp_name));

119 
msg
.
t•_£q
 = 
	`ht⁄s
((
u_sh‹t
)0);

120 
msg
.
t•_time
.
tv_£c
 = 
	`ht⁄l
((
u_l⁄g
)
tvÆ
);

121 
msg
.
t•_time
.
tv_u£c
 = 
	`ht⁄l
((
u_l⁄g
)0);

122 
Àngth
 = (
sockaddr_ö
);

123 i‡(
	`c⁄√˘
(
s
, (
sockaddr
 *)&
de°
, 
Àngth
) < 0) {

124 
	`w¨n
("connect");

125 
bad
;

127 i‡(
	`£nd
(
s
, (*)&
msg
, (
t•
), 0) < 0) {

128 i‡(
î∫o
 !
ECONNREFUSED
)

129 
	`w¨n
("send");

130 
bad
;

133 
timed_ack
 = -1;

134 
waôtime
 = 
WAITACK
;

135 
lo›
:

136 
tout
.
tv_£c
 = 
waôtime
;

137 
tout
.
tv_u£c
 = 0;

139 
	`FD_ZERO
(&
ªady
);

140 
	`FD_SET
(
s
, &
ªady
);

141 
found
 = 
	`£À˘
(
FD_SETSIZE
, &
ªady
, (
fd_£t
 *)0, (fd_£à*)0, &
tout
);

143 
Àngth
 = (
Àº
);

144 i‡(!
	`gësock›t
(
s
,

145 
SOL_SOCKET
, 
SO_ERROR
, (*)&
Àº
, &
Àngth
) &&Üerr) {

146 i‡(
Àº
 !
ECONNREFUSED
)

147 
	`w¨nc
(
Àº
, "send (delayedÉrror)");

148 
bad
;

151 i‡(
found
 > 0 && 
	`FD_ISSET
(
s
, &
ªady
)) {

152 
Àngth
 = (
sockaddr_ö
);

153 i‡(
	`ªcv‰om
(
s
, &
msg
, (
t•
), 0,

154 (
sockaddr
 *)&
‰om
, &
Àngth
) < 0) {

155 i‡(
î∫o
 !
ECONNREFUSED
)

156 
	`w¨n
("recvfrom");

157 
bad
;

159 
msg
.
t•_£q
 = 
	`¡ohs
(msg.tsp_seq);

160 
msg
.
t•_time
.
tv_£c
 = 
	`¡ohl
(msg.tsp_time.tv_sec);

161 
msg
.
t•_time
.
tv_u£c
 = 
	`¡ohl
(msg.tsp_time.tv_usec);

162 
msg
.
t•_ty≥
) {

163 
TSP_ACK
:

164 
timed_ack
 = 
TSP_ACK
;

165 
waôtime
 = 
WAITDATEACK
;

166 
lo›
;

167 
TSP_DATEACK
:

168 ()
	`˛o£
(
s
);

171 
	`w¨nx
("wrongáckÑeceived fromÅimed: %s",

172 
t•ty≥
[
msg
.
t•_ty≥
]);

173 
timed_ack
 = -1;

177 i‡(
timed_ack
 == -1)

178 
	`w¨nx
("can'tÑeachÅime daemon,Åime setÜocally");

180 
bad
:

181 ()
	`˛o£
(
s
);

182  (
ªtvÆ
 = 2);

183 
	}
}

	@date/vary.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: src/bin/date/vary.c,v 1.16.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

30 
	~<îr.h
>

31 
	~<time.h
>

32 
	~<°rög.h
>

33 
	~<°dlib.h
>

34 
	~"v¨y.h
"

36 
	så™s
 {

37 
	mvÆ
;

38 c⁄° *
	m°r
;

41 
å™s
 
	gå™s_m⁄
[] = {

45 { -1, 
NULL
 }

48 
å™s
 
	gå™s_wday
[] = {

51 { -1, 
NULL
 }

54 
	gdigôs
[] = "0123456789";

55 
adjhour
(
tm
 *, , , );

58 
	$domktime
(
tm
 *
t
, 
ty≥
)

60 
time_t
 
ªt
;

62 (
ªt
 = 
	`mktime
(
t
)Ë=-1 &&Å->
tm_yór
 > 68 &&Å->tm_year < 138)

64 
	`adjhour
(
t
, 
ty≥
 == '-' ?Åype : '+', 1, 0);

66  
ªt
;

67 
	}
}

70 
	$å™s
(c⁄° 
å™s
 
t
[], c⁄° *
¨g
)

72 
f
;

74 
f
 = 0; 
t
[f].
vÆ
 != -1; f++)

75 i‡(!
	`°∫ˇ£cmp
(
t
[
f
].
°r
, 
¨g
, 3) ||

76 !
	`°∫ˇ£cmp
(
t
[
f
].
°r
, 
¨g
, 
	`°æí
(t[f].str)))

77  
t
[
f
].
vÆ
;

80 
	}
}

82 
v¨y
 *

83 
	$v¨y_≠≥nd
(
v¨y
 *
v
, *
¨g
)

85 
v¨y
 *
ªsu…
, **
√xç
;

87 i‡(
v
) {

88 
ªsu…
 = 
v
;

89 
v
->
√xt
)

90 
v
 = v->
√xt
;

91 
√xç
 = &
v
->
√xt
;

93 
√xç
 = &
ªsu…
;

95 i‡((*
√xç
 = (
v¨y
 *)
	`mÆloc
((v¨y))Ë=
NULL
)

96 
	`îr
(1, "malloc");

97 (*
√xç
)->
¨g
 =árg;

98 (*
√xç
)->
√xt
 = 
NULL
;

99  
ªsu…
;

100 
	}
}

102 
	gmdays
[12] = { 31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

105 
	$daysöm⁄th
(c⁄° 
tm
 *
t
)

107 
yór
;

109 
yór
 = 
t
->
tm_yór
 + 1900;

111 i‡(
t
->
tm_m⁄
 == 1)

112 i‡(!(
yór
 % 400))

114 i‡(!(
yór
 % 100))

116 i‡(!(
yór
 % 4))

120 i‡(
t
->
tm_m⁄
 >= 0 &&Å->tm_mon < 12)

121  
mdays
[
t
->
tm_m⁄
];

124 
	}
}

128 
	$adjyór
(
tm
 *
t
, 
ty≥
, 
vÆ
, 
mk
)

130 
ty≥
) {

132 
t
->
tm_yór
 +
vÆ
;

135 
t
->
tm_yór
 -
vÆ
;

138 
t
->
tm_yór
 = 
vÆ
;

139 i‡(
t
->
tm_yór
 < 69)

140 
t
->
tm_yór
 += 100;

141 i‡(
t
->
tm_yór
 > 1900)

142 
t
->
tm_yór
 -= 1900;

145  !
mk
 || 
	`domktime
(
t
, 
ty≥
) != -1;

146 
	}
}

149 
	$adjm⁄
(
tm
 *
t
, 
ty≥
, 
vÆ
, 
i°ext
, 
mk
)

151 
lmdays
;

153 i‡(
vÆ
 < 0)

156 
ty≥
) {

158 i‡(
i°ext
) {

159 i‡(
vÆ
 <
t
->
tm_m⁄
)

160 
vÆ
 +11 - 
t
->
tm_m⁄
;

162 
vÆ
 -
t
->
tm_m⁄
 + 1;

164 i‡(
vÆ
) {

165 i‡(!
	`adjyór
(
t
, '+', (t->
tm_m⁄
 + 
vÆ
) / 12, 0))

167 
vÆ
 %= 12;

168 
t
->
tm_m⁄
 +
vÆ
;

169 i‡(
t
->
tm_m⁄
 > 11)

170 
t
->
tm_m⁄
 -= 12;

175 i‡(
i°ext
) {

176 i‡(
vÆ
-1 > 
t
->
tm_m⁄
)

177 
vÆ
 = 13 - vÆ + 
t
->
tm_m⁄
;

179 
vÆ
 = 
t
->
tm_m⁄
 - val + 1;

181 i‡(
vÆ
) {

182 i‡(!
	`adjyór
(
t
, '-', 
vÆ
 / 12, 0))

184 
vÆ
 %= 12;

185 i‡(
vÆ
 > 
t
->
tm_m⁄
) {

186 i‡(!
	`adjyór
(
t
, '-', 1, 0))

188 
vÆ
 -= 12;

190 
t
->
tm_m⁄
 -
vÆ
;

195 i‡(
vÆ
 > 12 || val < 1)

197 
t
->
tm_m⁄
 = --
vÆ
;

201 
lmdays
 = 
	`daysöm⁄th
(
t
);

202 i‡(
t
->
tm_mday
 > 
lmdays
)

203 
t
->
tm_mday
 = 
lmdays
;

205  !
mk
 || 
	`domktime
(
t
, 
ty≥
) != -1;

206 
	}
}

209 
	$adjday
(
tm
 *
t
, 
ty≥
, 
vÆ
, 
mk
)

211 
lmdays
;

213 
ty≥
) {

215 
vÆ
) {

216 
lmdays
 = 
	`daysöm⁄th
(
t
);

217 i‡(
vÆ
 > 
lmdays
 - 
t
->
tm_mday
) {

218 
vÆ
 -
lmdays
 - 
t
->
tm_mday
 + 1;

219 
t
->
tm_mday
 = 1;

220 i‡(!
	`adjm⁄
(
t
, '+', 1, 0, 0))

223 
t
->
tm_mday
 +
vÆ
;

224 
vÆ
 = 0;

229 
vÆ
)

230 i‡(
vÆ
 >
t
->
tm_mday
) {

231 
vÆ
 -
t
->
tm_mday
;

232 
t
->
tm_mday
 = 1;

233 i‡(!
	`adjm⁄
(
t
, '-', 1, 0, 0))

235 
t
->
tm_mday
 = 
	`daysöm⁄th
(t);

237 
t
->
tm_mday
 -
vÆ
;

238 
vÆ
 = 0;

242 i‡(
vÆ
 > 0 && vÆ <
	`daysöm⁄th
(
t
))

243 
t
->
tm_mday
 = 
vÆ
;

249  !
mk
 || 
	`domktime
(
t
, 
ty≥
) != -1;

250 
	}
}

253 
	$adjwday
(
tm
 *
t
, 
ty≥
, 
vÆ
, 
i°ext
, 
mk
)

255 i‡(
vÆ
 < 0)

258 
ty≥
) {

260 i‡(
i°ext
)

261 i‡(
vÆ
 < 
t
->
tm_wday
)

262 
vÆ
 = 7 - 
t
->
tm_wday
 + val;

264 
vÆ
 -
t
->
tm_wday
;

266 
vÆ
 *= 7;

267  !
vÆ
 || 
	`adjday
(
t
, '+', vÆ, 
mk
);

269 i‡(
i°ext
) {

270 i‡(
vÆ
 > 
t
->
tm_wday
)

271 
vÆ
 = 7 - vÆ + 
t
->
tm_wday
;

273 
vÆ
 = 
t
->
tm_wday
 - val;

275 
vÆ
 *= 7;

276  !
vÆ
 || 
	`adjday
(
t
, '-', vÆ, 
mk
);

278 i‡(
vÆ
 < 
t
->
tm_wday
)

279  
	`adjday
(
t
, '-',Å->
tm_wday
 - 
vÆ
, 
mk
);

280 i‡(
vÆ
 > 6)

282 i‡(
vÆ
 > 
t
->
tm_wday
)

283  
	`adjday
(
t
, '+', 
vÆ
 -Å->
tm_wday
, 
mk
);

286 
	}
}

289 
	$adjhour
(
tm
 *
t
, 
ty≥
, 
vÆ
, 
mk
)

291 i‡(
vÆ
 < 0)

294 
ty≥
) {

296 i‡(
vÆ
) {

297 
days
;

299 
days
 = (
t
->
tm_hour
 + 
vÆ
) / 24;

300 
vÆ
 %= 24;

301 
t
->
tm_hour
 +
vÆ
;

302 
t
->
tm_hour
 %= 24;

303 i‡(!
	`adjday
(
t
, '+', 
days
, 0))

309 i‡(
vÆ
) {

310 
days
;

312 
days
 = 
vÆ
 / 24;

313 
vÆ
 %= 24;

314 i‡(
vÆ
 > 
t
->
tm_hour
) {

315 
days
++;

316 
vÆ
 -= 24;

318 
t
->
tm_hour
 -
vÆ
;

319 i‡(!
	`adjday
(
t
, '-', 
days
, 0))

325 i‡(
vÆ
 > 23)

327 
t
->
tm_hour
 = 
vÆ
;

330  !
mk
 || 
	`domktime
(
t
, 
ty≥
) != -1;

331 
	}
}

334 
	$adjmö
(
tm
 *
t
, 
ty≥
, 
vÆ
, 
mk
)

336 i‡(
vÆ
 < 0)

339 
ty≥
) {

341 i‡(
vÆ
) {

342 i‡(!
	`adjhour
(
t
, '+', (t->
tm_mö
 + 
vÆ
) / 60, 0))

344 
vÆ
 %= 60;

345 
t
->
tm_mö
 +
vÆ
;

346 i‡(
t
->
tm_mö
 > 59)

347 
t
->
tm_mö
 -= 60;

352 i‡(
vÆ
) {

353 i‡(!
	`adjhour
(
t
, '-', 
vÆ
 / 60, 0))

355 
vÆ
 %= 60;

356 i‡(
vÆ
 > 
t
->
tm_mö
) {

357 i‡(!
	`adjhour
(
t
, '-', 1, 0))

359 
vÆ
 -= 60;

361 
t
->
tm_mö
 -
vÆ
;

366 i‡(
vÆ
 > 59)

368 
t
->
tm_mö
 = 
vÆ
;

371  !
mk
 || 
	`domktime
(
t
, 
ty≥
) != -1;

372 
	}
}

375 
	$adj£c
(
tm
 *
t
, 
ty≥
, 
vÆ
, 
mk
)

377 i‡(
vÆ
 < 0)

380 
ty≥
) {

382 i‡(
vÆ
) {

383 i‡(!
	`adjmö
(
t
, '+', (t->
tm_£c
 + 
vÆ
) / 60, 0))

385 
vÆ
 %= 60;

386 
t
->
tm_£c
 +
vÆ
;

387 i‡(
t
->
tm_£c
 > 59)

388 
t
->
tm_£c
 -= 60;

393 i‡(
vÆ
) {

394 i‡(!
	`adjmö
(
t
, '-', 
vÆ
 / 60, 0))

396 
vÆ
 %= 60;

397 i‡(
vÆ
 > 
t
->
tm_£c
) {

398 i‡(!
	`adjmö
(
t
, '-', 1, 0))

400 
vÆ
 -= 60;

402 
t
->
tm_£c
 -
vÆ
;

407 i‡(
vÆ
 > 59)

409 
t
->
tm_£c
 = 
vÆ
;

412  !
mk
 || 
	`domktime
(
t
, 
ty≥
) != -1;

413 
	}
}

415 c⁄° 
v¨y
 *

416 
	$v¨y_≠∂y
(c⁄° 
v¨y
 *
v
, 
tm
 *
t
)

418 
ty≥
;

419 
which
;

420 *
¨g
;

421 
size_t
 
Àn
;

422 
vÆ
;

424 ; 
v
; v = v->
√xt
) {

425 
ty≥
 = *
v
->
¨g
;

426 
¨g
 = 
v
->arg;

427 i‡(
ty≥
 == '+' ||Åype == '-')

428 
¨g
++;

430 
ty≥
 = '\0';

431 
Àn
 = 
	`°æí
(
¨g
);

432 i‡(
Àn
 < 2)

433  
v
;

435 i‡(
ty≥
 == '\0')

436 
t
->
tm_isd°
 = -1;

438 i‡(
	`°r•n
(
¨g
, 
digôs
Ë!
Àn
-1) {

439 
vÆ
 = 
	`å™s
(
å™s_wday
, 
¨g
);

440 i‡(
vÆ
 != -1) {

441 i‡(!
	`adjwday
(
t
, 
ty≥
, 
vÆ
, 1, 1))

442  
v
;

444 
vÆ
 = 
	`å™s
(
å™s_m⁄
, 
¨g
);

445 i‡(
vÆ
 != -1) {

446 i‡(!
	`adjm⁄
(
t
, 
ty≥
, 
vÆ
, 1, 1))

447  
v
;

449  
v
;

452 
vÆ
 = 
	`©oi
(
¨g
);

453 
which
 = 
¨g
[
Àn
-1];

455 
which
) {

457 i‡(!
	`adj£c
(
t
, 
ty≥
, 
vÆ
, 1))

458  
v
;

461 i‡(!
	`adjmö
(
t
, 
ty≥
, 
vÆ
, 1))

462  
v
;

465 i‡(!
	`adjhour
(
t
, 
ty≥
, 
vÆ
, 1))

466  
v
;

469 
t
->
tm_isd°
 = -1;

470 i‡(!
	`adjday
(
t
, 
ty≥
, 
vÆ
, 1))

471  
v
;

474 
t
->
tm_isd°
 = -1;

475 i‡(!
	`adjwday
(
t
, 
ty≥
, 
vÆ
, 0, 1))

476  
v
;

479 
t
->
tm_isd°
 = -1;

480 i‡(!
	`adjm⁄
(
t
, 
ty≥
, 
vÆ
, 0, 1))

481  
v
;

484 
t
->
tm_isd°
 = -1;

485 i‡(!
	`adjyór
(
t
, 
ty≥
, 
vÆ
, 1))

486  
v
;

489  
v
;

494 
	}
}

497 
	$v¨y_de°roy
(
v¨y
 *
v
)

499 
v¨y
 *
n
;

501 
v
) {

502 
n
 = 
v
->
√xt
;

503 
	`‰ì
(
v
);

504 
v
 = 
n
;

506 
	}
}

	@date/vary.h

29 
	sv¨y
 {

30 *
	m¨g
;

31 
v¨y
 *
	m√xt
;

34 
v¨y
 *
v¨y_≠≥nd
(v¨y *
v
, *
¨g
);

35 c⁄° 
v¨y
 *
v¨y_≠∂y
(c⁄° v¨y *
v
, 
tm
 *
t
);

36 
v¨y_de°roy
(
v¨y
 *
v
);

	@dd/args.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)args.c 8.3 (Berkeley) 4/2/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/dd/args.c,v 1.40.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

44 
	~<îr.h
>

45 
	~<î∫o.h
>

46 
	~<öây≥s.h
>

47 
	~<limôs.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

51 
	~"dd.h
"

52 
	~"exã∫.h
"

54 
c_¨g
(const *, const *);

55 
c_c⁄v
(const *, const *);

56 
f_bs
(*);

57 
f_cbs
(*);

58 
f_c⁄v
(*);

59 
f_cou¡
(*);

60 
f_fûes
(*);

61 
f_fûlch¨
(*);

62 
f_ibs
(*);

63 
f_if
(*);

64 
f_obs
(*);

65 
f_of
(*);

66 
f_£ek
(*);

67 
f_skù
(*);

68 
uötmax_t
 
gë_num
(const *);

69 
off_t
 
gë_off_t
(const *);

71 c⁄° 
	s¨g
 {

72 c⁄° *
	m«me
;

73 (*
	mf
)(*);

74 
u_öt
 
	m£t
, 
	mno£t
;

75 } 
	g¨gs
[] = {

76 { "bs", 
f_bs
, 
C_BS
, C_BS|
C_IBS
|
C_OBS
|
C_OSYNC
 },

77 { "cbs", 
f_cbs
, 
C_CBS
, C_CBS },

78 { "c⁄v", 
f_c⁄v
, 0, 0 },

79 { "cou¡", 
f_cou¡
, 
C_COUNT
, C_COUNT },

80 { "fûes", 
f_fûes
, 
C_FILES
, C_FILES },

81 { "fûlch¨", 
f_fûlch¨
, 
C_FILL
, C_FILL },

82 { "ibs", 
f_ibs
, 
C_IBS
, 
C_BS
|C_IBS },

83 { "if", 
f_if
, 
C_IF
, C_IF },

84 { "i£ek", 
f_skù
, 
C_SKIP
, C_SKIP },

85 { "obs", 
f_obs
, 
C_OBS
, 
C_BS
|C_OBS },

86 { "of", 
f_of
, 
C_OF
, C_OF },

87 { "o£ek", 
f_£ek
, 
C_SEEK
, C_SEEK },

88 { "£ek", 
f_£ek
, 
C_SEEK
, C_SEEK },

89 { "skù", 
f_skù
, 
C_SKIP
, C_SKIP },

92 *
	g›î
;

98 
	$j˛
(**
¨gv
)

100 
¨g
 *
≠
, 
tmp
;

101 *
¨g
;

103 
ö
.
dbsz
 = 
out
.dbsz = 512;

105 (
›î
 = *++
¨gv
Ë!
NULL
) {

106 i‡((
›î
 = 
	`°rdup
(›î)Ë=
NULL
)

107 
	`îrx
(1, "u«bÀÅÿÆloˇã s∑˚ f‹Åhê¨gumíà\"%s\"", *
¨gv
);

108 i‡((
¨g
 = 
	`°rchr
(
›î
, '=')Ë=
NULL
)

109 
	`îrx
(1, "unknow¿›î™d %s", 
›î
);

110 *
¨g
++ = '\0';

111 i‡(!*
¨g
)

112 
	`îrx
(1, "nÿvÆuê•ecifõd f‹ %s", 
›î
);

113 
tmp
.
«me
 = 
›î
;

114 i‡(!(
≠
 = (
¨g
 *)
	`b£¨ch
(&
tmp
, 
¨gs
,

115 (
¨gs
)/(
¨g
), (arg),

116 
c_¨g
)))

117 
	`îrx
(1, "unknow¿›î™d %s", 
tmp
.
«me
);

118 i‡(
ddÊags
 & 
≠
->
no£t
)

119 
	`îrx
(1, "%s: illegalárgument combination orálready set",

120 
tmp
.
«me
);

121 
ddÊags
 |
≠
->
£t
;

122 
≠
->
	`f
(
¨g
);

127 i‡(
ddÊags
 & 
C_BS
) {

133 i‡(
ddÊags
 & (
C_BLOCK
 | 
C_LCASE
 | 
C_SWAB
 | 
C_UCASE
 |

134 
C_UNBLOCK
))

135 
ddÊags
 &~
C_BS
;

138 i‡(
ddÊags
 & 
C_BS
 && ddÊag†& (
C_IBS
 | 
C_OBS
))

139 
	`w¨nx
("bs supersedes ibsánd obs");

146 i‡(
ddÊags
 & (
C_BLOCK
 | 
C_UNBLOCK
)) {

147 i‡(!(
ddÊags
 & 
C_CBS
))

148 
	`îrx
(1, "record operationsÑequire cbs");

149 i‡(
cbsz
 == 0)

150 
	`îrx
(1, "cbs cannot be zero");

151 
cfunc
 = 
ddÊags
 & 
C_BLOCK
 ? 
block
 : 
unblock
;

152 } i‡(
ddÊags
 & 
C_CBS
) {

153 i‡(
ddÊags
 & (
C_ASCII
 | 
C_EBCDIC
)) {

154 i‡(
ddÊags
 & 
C_ASCII
) {

155 
ddÊags
 |
C_UNBLOCK
;

156 
cfunc
 = 
unblock
;

158 
ddÊags
 |
C_BLOCK
;

159 
cfunc
 = 
block
;

162 
	`îrx
(1, "cbs meaningless ifÇot doingÑecord operations");

164 
cfunc
 = 
def
;

169 i‡(
ö
.
off£t
 > 
OFF_MAX
 / (
ssize_t
)ö.
dbsz
 ||

170 
out
.
off£t
 > 
OFF_MAX
 / (
ssize_t
)out.
dbsz
)

171 
	`îrx
(1, "seek offsets cannot beÜargerÅhan %jd",

172 (
ötmax_t
)
OFF_MAX
);

173 
	}
}

176 
	$c_¨g
(c⁄° *
a
, c⁄° *
b
)

179  (
	`°rcmp
(((c⁄° 
¨g
 *)
a
)->
«me
,

180 ((c⁄° 
¨g
 *)
b
)->
«me
));

181 
	}
}

184 
	$f_bs
(*
¨g
)

186 
uötmax_t
 
ªs
;

188 
ªs
 = 
	`gë_num
(
¨g
);

189 i‡(
ªs
 < 1 ||Ñe†> 
SSIZE_MAX
)

190 
	`îrx
(1, "b†mu° bêbëwì¿1ánd %jd", (
ötmax_t
)
SSIZE_MAX
);

191 
ö
.
dbsz
 = 
out
.dbsz = (
size_t
)
ªs
;

192 
	}
}

195 
	$f_cbs
(*
¨g
)

197 
uötmax_t
 
ªs
;

199 
ªs
 = 
	`gë_num
(
¨g
);

200 i‡(
ªs
 < 1 ||Ñe†> 
SSIZE_MAX
)

201 
	`îrx
(1, "cb†mu° bêbëwì¿1ánd %jd", (
ötmax_t
)
SSIZE_MAX
);

202 
cbsz
 = (
size_t
)
ªs
;

203 
	}
}

206 
	$f_cou¡
(*
¨g
)

208 
ötmax_t
 
ªs
;

210 
ªs
 = (
ötmax_t
)
	`gë_num
(
¨g
);

211 i‡(
ªs
 < 0)

212 
	`îrx
(1, "count cannot beÇegative");

213 i‡(
ªs
 == 0)

214 
˝y_˙t
 = (
uötmax_t
)-1;

216 
˝y_˙t
 = (
uötmax_t
)
ªs
;

217 
	}
}

220 
	$f_fûes
(*
¨g
)

223 
fûes_˙t
 = 
	`gë_num
(
¨g
);

224 i‡(
fûes_˙t
 < 1)

225 
	`îrx
(1, "fûe†mu° bêbëwì¿1ánd %jd", (
uötmax_t
)-1);

226 
	}
}

229 
	$f_fûlch¨
(*
¨g
)

232 i‡(
	`°æí
(
¨g
) != 1)

233 
	`îrx
(1, "needÉxactly one fill char");

235 
fûl_ch¨
 = 
¨g
[0];

236 
	}
}

239 
	$f_ibs
(*
¨g
)

241 
uötmax_t
 
ªs
;

243 i‡(!(
ddÊags
 & 
C_BS
)) {

244 
ªs
 = 
	`gë_num
(
¨g
);

245 i‡(
ªs
 < 1 ||Ñe†> 
SSIZE_MAX
)

246 
	`îrx
(1, "ibs must be between 1ánd %jd",

247 (
ötmax_t
)
SSIZE_MAX
);

248 
ö
.
dbsz
 = (
size_t
)
ªs
;

250 
	}
}

253 
	$f_if
(*
¨g
)

256 
ö
.
«me
 = 
¨g
;

257 
	}
}

260 
	$f_obs
(*
¨g
)

262 
uötmax_t
 
ªs
;

264 i‡(!(
ddÊags
 & 
C_BS
)) {

265 
ªs
 = 
	`gë_num
(
¨g
);

266 i‡(
ªs
 < 1 ||Ñe†> 
SSIZE_MAX
)

267 
	`îrx
(1, "obs must be between 1ánd %jd",

268 (
ötmax_t
)
SSIZE_MAX
);

269 
out
.
dbsz
 = (
size_t
)
ªs
;

271 
	}
}

274 
	$f_of
(*
¨g
)

277 
out
.
«me
 = 
¨g
;

278 
	}
}

281 
	$f_£ek
(*
¨g
)

284 
out
.
off£t
 = 
	`gë_off_t
(
¨g
);

285 
	}
}

288 
	$f_skù
(*
¨g
)

291 
ö
.
off£t
 = 
	`gë_off_t
(
¨g
);

292 
	}
}

294 c⁄° 
	sc⁄v
 {

295 c⁄° *
	m«me
;

296 
u_öt
 
	m£t
, 
	mno£t
;

297 c⁄° 
u_ch¨
 *
	m˘ab
;

298 } 
	g˛i°
[] = {

299 { "ascii", 
C_ASCII
, 
C_EBCDIC
, 
e2a_POSIX
 },

300 { "block", 
C_BLOCK
, 
C_UNBLOCK
, 
NULL
 },

301 { "ebcdic", 
C_EBCDIC
, 
C_ASCII
, 
a2e_POSIX
 },

302 { "ibm", 
C_EBCDIC
, 
C_ASCII
, 
a2ibm_POSIX
 },

303 { "lˇ£", 
C_LCASE
, 
C_UCASE
, 
NULL
 },

304 { "n€º‹", 
C_NOERROR
, 0, 
NULL
 },

305 { "nŸrunc", 
C_NOTRUNC
, 0, 
NULL
 },

306 { "ﬁdascii", 
C_ASCII
, 
C_EBCDIC
, 
e2a_32V
 },

307 { "ﬁdebcdic", 
C_EBCDIC
, 
C_ASCII
, 
a2e_32V
 },

308 { "ﬁdibm", 
C_EBCDIC
, 
C_ASCII
, 
a2ibm_32V
 },

309 { "osync", 
C_OSYNC
, 
C_BS
, 
NULL
 },

310 { "∑ªví", 
C_PAREVEN
, 
C_PARODD
|
C_PARSET
|
C_PARNONE
, 
NULL
},

311 { "∑∫⁄e", 
C_PARNONE
, 
C_PARODD
|
C_PARSET
|
C_PAREVEN
, 
NULL
},

312 { "∑rodd", 
C_PARODD
, 
C_PAREVEN
|
C_PARSET
|
C_PARNONE
, 
NULL
},

313 { "∑r£t", 
C_PARSET
, 
C_PARODD
|
C_PAREVEN
|
C_PARNONE
, 
NULL
},

314 { "•¨£", 
C_SPARSE
, 0, 
NULL
 },

315 { "swab", 
C_SWAB
, 0, 
NULL
 },

316 { "sync", 
C_SYNC
, 0, 
NULL
 },

317 { "uˇ£", 
C_UCASE
, 
C_LCASE
, 
NULL
 },

318 { "unblock", 
C_UNBLOCK
, 
C_BLOCK
, 
NULL
 },

322 
	$f_c⁄v
(*
¨g
)

324 
c⁄v
 *
˝
, 
tmp
;

326 
¨g
 !
NULL
) {

327 
tmp
.
«me
 = 
	`°r£p
(&
¨g
, ",");

328 
˝
 = 
	`b£¨ch
(&
tmp
, 
˛i°
, (˛i°Ë/ (
c⁄v
),

329 (
c⁄v
), 
c_c⁄v
);

330 i‡(
˝
 =
NULL
)

331 
	`îrx
(1, "unknow¿c⁄vîsi⁄ %s", 
tmp
.
«me
);

332 i‡(
ddÊags
 & 
˝
->
no£t
)

333 
	`îrx
(1, "%s: iŒegÆ c⁄vîsi⁄ combö©i⁄", 
tmp
.
«me
);

334 
ddÊags
 |
˝
->
£t
;

335 i‡(
˝
->
˘ab
)

336 
˘ab
 = 
˝
->ctab;

338 
	}
}

341 
	$c_c⁄v
(c⁄° *
a
, c⁄° *
b
)

344  (
	`°rcmp
(((c⁄° 
c⁄v
 *)
a
)->
«me
,

345 ((c⁄° 
c⁄v
 *)
b
)->
«me
));

346 
	}
}

360 
uötmax_t


361 
	$gë_num
(c⁄° *
vÆ
)

363 
uötmax_t
 
num
, 
mu…
, 
¥evnum
;

364 *
ex¥
;

366 
î∫o
 = 0;

367 
num
 = 
	`°πouq
(
vÆ
, &
ex¥
, 0);

368 i‡(
î∫o
 != 0)

369 
	`îr
(1, "%s", 
›î
);

371 i‡(
ex¥
 =
vÆ
)

372 
	`îrx
(1, "%s: iŒegÆÇumîi¯vÆue", 
›î
);

374 
mu…
 = 0;

375 *
ex¥
) {

378 
mu…
 = 512;

382 
mu…
 = 1 << 10;

386 
mu…
 = 1 << 20;

390 
mu…
 = 1 << 30;

394 
mu…
 = ();

400 i‡(
mu…
 != 0) {

401 
¥evnum
 = 
num
;

402 
num
 *
mu…
;

404 i‡(
num
 / 
mu…
 !
¥evnum
)

405 
î™ge
;

406 
ex¥
++;

409 *
ex¥
) {

415 
mu…
 = 
	`gë_num
(
ex¥
 + 1);

416 
¥evnum
 = 
num
;

417 
num
 *
mu…
;

418 i‡(
num
 / 
mu…
 =
¥evnum
)

420 
î™ge
:

421 
	`îrx
(1, "%s: %s", 
›î
, 
	`°ªº‹
(
ERANGE
));

423 
	`îrx
(1, "%s: iŒegÆÇumîi¯vÆue", 
›î
);

425  (
num
);

426 
	}
}

434 
off_t


435 
	$gë_off_t
(c⁄° *
vÆ
)

437 
ötmax_t
 
num
, 
mu…
, 
¥evnum
;

438 *
ex¥
;

440 
î∫o
 = 0;

441 
num
 = 
	`°πoq
(
vÆ
, &
ex¥
, 0);

442 i‡(
î∫o
 != 0)

443 
	`îr
(1, "%s", 
›î
);

445 i‡(
ex¥
 =
vÆ
)

446 
	`îrx
(1, "%s: iŒegÆÇumîi¯vÆue", 
›î
);

448 
mu…
 = 0;

449 *
ex¥
) {

452 
mu…
 = 512;

456 
mu…
 = 1 << 10;

460 
mu…
 = 1 << 20;

464 
mu…
 = 1 << 30;

468 
mu…
 = ();

472 i‡(
mu…
 != 0) {

473 
¥evnum
 = 
num
;

474 
num
 *
mu…
;

476 i‡((
¥evnum
 > 0Ë!(
num
 > 0Ë||Çum / 
mu…
 !=Örevnum)

477 
î™ge
;

478 
ex¥
++;

481 *
ex¥
) {

487 
mu…
 = (
ötmax_t
)
	`gë_off_t
(
ex¥
 + 1);

488 
¥evnum
 = 
num
;

489 
num
 *
mu…
;

490 i‡((
¥evnum
 > 0Ë=(
num
 > 0Ë&&Çum / 
mu…
 ==Örevnum)

492 
î™ge
:

493 
	`îrx
(1, "%s: %s", 
›î
, 
	`°ªº‹
(
ERANGE
));

495 
	`îrx
(1, "%s: iŒegÆÇumîi¯vÆue", 
›î
);

497  (
num
);

498 
	}
}

	@dd/conv.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)conv.c 8.3 (Berkeley) 4/2/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/dd/conv.c,v 1.19.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/∑øm.h
>

44 
	~<îr.h
>

45 
	~<öây≥s.h
>

46 
	~<°rög.h
>

48 
	~"dd.h
"

49 
	~"exã∫.h
"

58 
	$def
()

60 
u_ch¨
 *
öp
;

61 c⁄° 
u_ch¨
 *
t
;

62 
size_t
 
˙t
;

64 i‡((
t
 = 
˘ab
Ë!
NULL
)

65 
öp
 = 
ö
.
dbp
 - (
˙t
 = in.
dbr˙t
); cnt--; ++inp)

66 *
öp
 = 
t
[*inp];

69 
out
.
dbp
 = 
ö
.dbp;

70 
out
.
db˙t
 = 
ö
.dbcnt;

72 i‡(
ö
.
db˙t
 >
out
.
dbsz
) {

74 
	`dd_out
(0);

81 
ö
.
dbp
 = 
out
.dbp;

82 
ö
.
db˙t
 = 
out
.dbcnt;

84 
	}
}

87 
	$def_˛o£
()

90 i‡(
ö
.
db˙t
)

91 
out
.
db˙t
 = 
ö
.dbcnt;

92 
	}
}

102 
	$block
()

104 
u_ch¨
 *
öp
, *
ouç
;

105 c⁄° 
u_ch¨
 *
t
;

106 
size_t
 
˙t
, 
maxÀn
;

107 
öåunc
;

108 
ch
;

116 i‡(
öåunc
) {

117 
öp
 = 
ö
.
db
, 
˙t
 = in.
dbr˙t
; cnt && *inp++ != '\n'; --cnt)

119 i‡(!
˙t
) {

120 
ö
.
db˙t
 = 0;

121 
ö
.
dbp
 = in.
db
;

124 
öåunc
 = 0;

126 
ö
.
db˙t
 = 
˙t
 - 1;

127 
ö
.
dbp
 = 
öp
 + 
˙t
 - 1;

134 
ch
 = 0;

135 
öp
 = 
ö
.
dbp
 - in.
db˙t
, 
ouç
 = 
out
.dbp; in.dbcnt;) {

136 
maxÀn
 = 
	`MIN
(
cbsz
, 
ö
.
db˙t
);

137 i‡((
t
 = 
˘ab
Ë!
NULL
)

138 
˙t
 = 0; c¡ < 
maxÀn
 && (
ch
 = *
öp
++) != '\n';

139 ++
˙t
)

140 *
ouç
++ = 
t
[
ch
];

142 
˙t
 = 0; c¡ < 
maxÀn
 && (
ch
 = *
öp
++) != '\n';

143 ++
˙t
)

144 *
ouç
++ = 
ch
;

149 i‡(
ch
 !'\n' && 
ö
.
db˙t
 < 
cbsz
) {

150 ()
	`memmove
(
ö
.
db
, in.
dbp
 - in.
db˙t
, in.dbcnt);

155 
ö
.
db˙t
 -
˙t
;

156 i‡(
ch
 == '\n')

157 --
ö
.
db˙t
;

160 i‡(
˙t
 < 
cbsz
)

161 ()
	`mem£t
(
ouç
, 
˘ab
 ? cèb[' '] : ' ', 
cbsz
 - 
˙t
);

167 i‡(!
ö
.
db˙t
 || *
öp
 != '\n')

168 ++
°
.
åunc
;

171 ; 
ö
.
db˙t
 && *
öp
++ != '\n'; --in.dbcnt)

173 i‡(!
ö
.
db˙t
)

174 
öåunc
 = 1;

176 --
ö
.
db˙t
;

180 
out
.
dbp
 +
cbsz
;

181 i‡((
out
.
db˙t
 +
cbsz
Ë>out.
dbsz
)

182 
	`dd_out
(0);

183 
ouç
 = 
out
.
dbp
;

185 
ö
.
dbp
 = in.
db
 + in.
db˙t
;

186 
	}
}

189 
	$block_˛o£
()

199 i‡(
ö
.
db˙t
) {

200 ++
°
.
åunc
;

201 ()
	`memmove
(
out
.
dbp
, 
ö
.db∞- in.
db˙t
, in.dbcnt);

202 ()
	`mem£t
(
out
.
dbp
 + 
ö
.
db˙t
, 
˘ab
 ? ctab[' '] : ' ',

203 
cbsz
 - 
ö
.
db˙t
);

204 
out
.
db˙t
 +
cbsz
;

206 
	}
}

216 
	$unblock
()

218 
u_ch¨
 *
öp
;

219 c⁄° 
u_ch¨
 *
t
;

220 
size_t
 
˙t
;

223 i‡((
t
 = 
˘ab
Ë!
NULL
)

224 
öp
 = 
ö
.
dbp
 - (
˙t
 = in.
dbr˙t
); cnt--; ++inp)

225 *
öp
 = 
t
[*inp];

231 
öp
 = 
ö
.
db
; in.
db˙t
 >
cbsz
; inp += cbsz, in.dbcnt -= cbsz) {

232 
t
 = 
öp
 + 
cbsz
 - 1;Å >= inp && *t == ' '; --t)

234 i‡(
t
 >
öp
) {

235 
˙t
 = 
t
 - 
öp
 + 1;

236 ()
	`memmove
(
out
.
dbp
, 
öp
, 
˙t
);

237 
out
.
dbp
 +
˙t
;

238 
out
.
db˙t
 +
˙t
;

240 *
out
.
dbp
++ = '\n';

241 i‡(++
out
.
db˙t
 >out.
dbsz
)

242 
	`dd_out
(0);

244 i‡(
ö
.
db˙t
)

245 ()
	`memmove
(
ö
.
db
, in.
dbp
 - in.
db˙t
, in.dbcnt);

246 
ö
.
dbp
 = in.
db
 + in.
db˙t
;

247 
	}
}

250 
	$unblock_˛o£
()

252 
u_ch¨
 *
t
;

253 
size_t
 
˙t
;

255 i‡(
ö
.
db˙t
) {

256 
	`w¨nx
("%s: sh‹àöpuàªc‹d", 
ö
.
«me
);

257 
t
 = 
ö
.
db
 + in.
db˙t
 - 1;Å >= in.db && *t == ' '; --t)

259 i‡(
t
 >
ö
.
db
) {

260 
˙t
 = 
t
 - 
ö
.
db
 + 1;

261 ()
	`memmove
(
out
.
dbp
, 
ö
.
db
, 
˙t
);

262 
out
.
dbp
 +
˙t
;

263 
out
.
db˙t
 +
˙t
;

265 ++
out
.
db˙t
;

266 *
out
.
dbp
++ = '\n';

268 
	}
}

	@dd/conv_tab.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)conv_tab.c 8.1 (Berkeley) 5/31/93";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/dd/conv_tab.c,v 1.12.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

68 
u_ch¨
 
	gˇ£èb
[256];

71 c⁄° 
u_ch¨
 
	ge2a_32V
[] = {

107 c⁄° 
u_ch¨
 
	ga2e_32V
[] = {

143 c⁄° 
u_ch¨
 
	ga2ibm_32V
[] = {

179 c⁄° 
u_ch¨
 
	ge2a_POSIX
[] = {

215 c⁄° 
u_ch¨
 
	ga2e_POSIX
[] = {

251 c⁄° 
u_ch¨
 
	ga2ibm_POSIX
[] = {

	@dd/dd.c

35 #i‚de‡
löt


36 c⁄° 
	gc›yright
[] =

41 #i‚de‡
löt


42 
	gsccsid
[] = "@(#)dd.c 8.5 (Berkeley) 4/2/94";

45 
	~<sys/cdefs.h
>

46 
__FBSDID
("$FreeBSD: src/bin/dd/dd.c,v 1.43.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

48 
	~<sys/∑øm.h
>

49 
	~<sys/°©.h
>

50 
	~<sys/c⁄f.h
>

51 
	~<sys/diskœbñ.h
>

52 
	~<sys/fûio.h
>

53 
	~<sys/time.h
>

55 
	~<˘y≥.h
>

56 
	~<îr.h
>

57 
	~<î∫o.h
>

58 
	~<f˙é.h
>

59 
	~<öây≥s.h
>

60 
	~<loˇÀ.h
>

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~<uni°d.h
>

66 
	~"dd.h
"

67 
	~"exã∫.h
"

69 
dd_˛o£
();

70 
dd_ö
();

71 
gëfdty≥
(
IO
 *);

72 
£tup
();

74 
IO
 
	gö
, 
	gout
;

75 
STAT
 
	g°
;

76 (*
cfunc
)();

77 
uötmax_t
 
˝y_˙t
;

78 
off_t
 
≥ndög
 = 0;

79 
u_öt
 
ddÊags
 = 0;

80 
size_t
 
cbsz
;

81 
uötmax_t
 
fûes_˙t
 = 1;

82 c⁄° 
u_ch¨
 *
˘ab
;

83 
fûl_ch¨
;

86 
	$maö
(
¨gc
 
__unu£d
, *
¨gv
[])

88 ()
	`£éoˇÀ
(
LC_CTYPE
, "");

89 
	`j˛
(
¨gv
);

90 
	`£tup
();

92 ()
	`sig«l
(
SIGINFO
, 
summ¨yx
);

93 ()
	`sig«l
(
SIGINT
, 
ãrmö©e
);

95 
	`©exô
(
summ¨y
);

97 
fûes_˙t
--)

98 
	`dd_ö
();

100 
	`dd_˛o£
();

101 
	`exô
(0);

102 
	}
}

105 
	$∑rôy
(
u_ch¨
 
c
)

107 
i
;

109 
i
 = 
c
 ^ (c >> 1) ^ (c >> 2) ^ (c >> 3) ^

110 (
c
 >> 4) ^ (c >> 5) ^ (c >> 6) ^ (c >> 7);

111  (
i
 & 1);

112 
	}
}

115 
	$£tup
()

117 
u_öt
 
˙t
;

118 
timevÆ
 
tv
;

120 i‡(
ö
.
«me
 =
NULL
) {

121 
ö
.
«me
 = "stdin";

122 
ö
.
fd
 = 
STDIN_FILENO
;

124 
ö
.
fd
 = 
	`›í
(ö.
«me
, 
O_RDONLY
, 0);

125 i‡(
ö
.
fd
 == -1)

126 
	`îr
(1, "%s", 
ö
.
«me
);

129 
	`gëfdty≥
(&
ö
);

131 i‡(
fûes_˙t
 > 1 && !(
ö
.
Êags
 & 
ISTAPE
))

132 
	`îrx
(1, "files isÇot supported forÇon-tape devices");

134 i‡(
out
.
«me
 =
NULL
) {

136 
out
.
fd
 = 
STDOUT_FILENO
;

137 
out
.
«me
 = "stdout";

139 
	#OFLAGS
 \

140 (
O_CREAT
 | (
ddÊags
 & (
C_SEEK
 | 
C_NOTRUNC
Ë? 0 : 
O_TRUNC
))

	)

141 
out
.
fd
 = 
	`›í
(out.
«me
, 
O_RDWR
 | 
OFLAGS
, 
DEFFILEMODE
);

147 i‡(
out
.
fd
 == -1) {

148 
out
.
fd
 = 
	`›í
(out.
«me
, 
O_WRONLY
 | 
OFLAGS
, 
DEFFILEMODE
);

149 
out
.
Êags
 |
NOREAD
;

151 i‡(
out
.
fd
 == -1)

152 
	`îr
(1, "%s", 
out
.
«me
);

155 
	`gëfdty≥
(&
out
);

161 i‡(!(
ddÊags
 & (
C_BLOCK
 | 
C_UNBLOCK
))) {

162 i‡((
ö
.
db
 = 
	`mÆloc
(
out
.
dbsz
 + in.dbsz - 1)Ë=
NULL
)

163 
	`îr
(1, "input buffer");

164 
out
.
db
 = 
ö
.db;

165 } i‡((
ö
.
db
 = 
	`mÆloc
(
	`MAX
(ö.
dbsz
, 
cbsz
Ë+ cbsz)Ë=
NULL
 ||

166 (
out
.
db
 = 
	`mÆloc
(out.
dbsz
 + 
cbsz
)Ë=
NULL
)

167 
	`îr
(1, "output buffer");

168 
ö
.
dbp
 = in.
db
;

169 
out
.
dbp
 = out.
db
;

172 i‡(
ö
.
off£t
)

173 
	`pos_ö
();

174 i‡(
out
.
off£t
)

175 
	`pos_out
();

181 i‡((
ddÊags
 & (
C_OF
 | 
C_SEEK
 | 
C_NOTRUNC
)) == (C_OF | C_SEEK) &&

182 
out
.
Êags
 & 
ISTRUNC
)

183 i‡(
	`·runˇã
(
out
.
fd
, out.
off£t
 * out.
dbsz
) == -1)

184 
	`îr
(1, "åunˇtög %s", 
out
.
«me
);

186 i‡(
ddÊags
 & (
C_LCASE
 | 
C_UCASE
 | 
C_ASCII
 | 
C_EBCDIC
 | 
C_PARITY
)) {

187 i‡(
˘ab
 !
NULL
) {

188 
˙t
 = 0; cnt <= 0377; ++cnt)

189 
ˇ£èb
[
˙t
] = 
˘ab
[cnt];

191 
˙t
 = 0; cnt <= 0377; ++cnt)

192 
ˇ£èb
[
˙t
] = cnt;

194 i‡((
ddÊags
 & 
C_PARITY
Ë&& !(ddÊag†& 
C_ASCII
)) {

199 
˙t
 = 200; cnt <= 0377; ++cnt)

200 
ˇ£èb
[
˙t
] = casetab[cnt & 0x7f];

202 i‡(
ddÊags
 & 
C_LCASE
) {

203 
˙t
 = 0; cnt <= 0377; ++cnt)

204 
ˇ£èb
[
˙t
] = 
	`tﬁowî
(casetab[cnt]);

205 } i‡(
ddÊags
 & 
C_UCASE
) {

206 
˙t
 = 0; cnt <= 0377; ++cnt)

207 
ˇ£èb
[
˙t
] = 
	`touµî
(casetab[cnt]);

209 i‡((
ddÊags
 & 
C_PARITY
)) {

214 
˙t
 = 0; cnt <= 0377; ++cnt)

215 
ˇ£èb
[
˙t
] = casetab[cnt] & 0x7f;

217 i‡((
ddÊags
 & 
C_PARSET
)) {

218 
˙t
 = 0; cnt <= 0377; ++cnt)

219 
ˇ£èb
[
˙t
] = casetab[cnt] | 0x80;

221 i‡((
ddÊags
 & 
C_PAREVEN
)) {

222 
˙t
 = 0; cnt <= 0377; ++cnt)

223 i‡(
	`∑rôy
(
ˇ£èb
[
˙t
]))

224 
ˇ£èb
[
˙t
] = casetab[cnt] | 0x80;

226 i‡((
ddÊags
 & 
C_PARODD
)) {

227 
˙t
 = 0; cnt <= 0377; ++cnt)

228 i‡(!
	`∑rôy
(
ˇ£èb
[
˙t
]))

229 
ˇ£èb
[
˙t
] = casetab[cnt] | 0x80;

232 
˘ab
 = 
ˇ£èb
;

235 ()
	`gëtimeofday
(&
tv
, (
timez⁄e
 *)
NULL
);

236 
°
.
°¨t
 = 
tv
.
tv_£c
 +Åv.
tv_u£c
 * 1e-6;

237 
	}
}

240 
	$gëfdty≥
(
IO
 *
io
)

242 
°©
 
sb
;

243 
ty≥
;

245 i‡(
	`f°©
(
io
->
fd
, &
sb
) == -1)

246 
	`îr
(1, "%s", 
io
->
«me
);

247 i‡(
	`S_ISREG
(
sb
.
°_mode
))

248 
io
->
Êags
 |
ISTRUNC
;

249 i‡(
	`S_ISCHR
(
sb
.
°_mode
Ë|| 
	`S_ISBLK
(sb.st_mode)) {

250 i‡(
	`io˘l
(
io
->
fd
, 
FIODTYPE
, &
ty≥
) == -1) {

251 
	`îr
(1, "%s", 
io
->
«me
);

253 i‡(
ty≥
 & 
D_TAPE
)

254 
io
->
Êags
 |
ISTAPE
;

255 i‡(
ty≥
 & (
D_DISK
 | 
D_MEM
))

256 
io
->
Êags
 |
ISSEEK
;

257 i‡(
	`S_ISCHR
(
sb
.
°_mode
Ë&& (
ty≥
 & 
D_TAPE
) == 0)

258 
io
->
Êags
 |
ISCHR
;

262 
î∫o
 = 0;

263 i‡(
	`l£ek
(
io
->
fd
, (
off_t
)0, 
SEEK_CUR
Ë=-1 && 
î∫o
 =
ESPIPE
)

264 
io
->
Êags
 |
ISPIPE
;

266 
io
->
Êags
 |
ISSEEK
;

267 
	}
}

270 
	$dd_ö
()

272 
ssize_t
 
n
;

275 
˝y_˙t
) {

281 i‡(
°
.
ö_fuŒ
 + st.
ö_∑π
 >(
uötmax_t
)
˝y_˙t
)

290 i‡(
ddÊags
 & 
C_SYNC
) {

291 i‡(
ddÊags
 & 
C_FILL
)

292 
	`mem£t
(
ö
.
dbp
, 
fûl_ch¨
, in.
dbsz
);

293 i‡(
ddÊags
 & (
C_BLOCK
 | 
C_UNBLOCK
))

294 
	`mem£t
(
ö
.
dbp
, ' ', in.
dbsz
);

296 
	`mem£t
(
ö
.
dbp
, 0, in.
dbsz
);

299 
n
 = 
	`ªad
(
ö
.
fd
, in.
dbp
, in.
dbsz
);

300 i‡(
n
 == 0) {

301 
ö
.
dbr˙t
 = 0;

306 i‡(
n
 == -1) {

311 i‡(!(
ddÊags
 & 
C_NOERROR
))

312 
	`îr
(1, "%s", 
ö
.
«me
);

313 
	`w¨n
("%s", 
ö
.
«me
);

314 
	`summ¨y
();

322 i‡(
ö
.
Êags
 & 
ISSEEK
 &&

323 
	`l£ek
(
ö
.
fd
, (
off_t
)ö.
dbsz
, 
SEEK_CUR
))

324 
	`w¨n
("%s", 
ö
.
«me
);

327 i‡(!(
ddÊags
 & 
C_SYNC
))

331 
ö
.
db˙t
 +ö.
dbr˙t
 = in.
dbsz
;

332 ++
°
.
ö_fuŒ
;

335 } i‡((
size_t
)
n
 =
ö
.
dbsz
) {

336 
ö
.
db˙t
 +ö.
dbr˙t
 = 
n
;

337 ++
°
.
ö_fuŒ
;

342 i‡(
ddÊags
 & 
C_SYNC
)

343 
ö
.
db˙t
 +ö.
dbr˙t
 = in.
dbsz
;

345 
ö
.
db˙t
 +ö.
dbr˙t
 = 
n
;

346 ++
°
.
ö_∑π
;

354 i‡(
ddÊags
 & 
C_BS
) {

355 
out
.
db˙t
 = 
ö
.dbcnt;

356 
	`dd_out
(1);

357 
ö
.
db˙t
 = 0;

361 i‡(
ddÊags
 & 
C_SWAB
) {

362 i‡((
n
 = 
ö
.
dbr˙t
) & 1) {

363 ++
°
.
swab
;

364 --
n
;

366 
	`swab
(
ö
.
dbp
, in.dbp, (
size_t
)
n
);

369 
ö
.
dbp
 +ö.
dbr˙t
;

370 (*
cfunc
)();

372 
	}
}

379 
	$dd_˛o£
()

381 i‡(
cfunc
 =
def
)

382 
	`def_˛o£
();

383 i‡(
cfunc
 =
block
)

384 
	`block_˛o£
();

385 i‡(
cfunc
 =
unblock
)

386 
	`unblock_˛o£
();

387 i‡(
ddÊags
 & 
C_OSYNC
 && 
out
.
db˙t
 && out.db˙à< out.
dbsz
) {

388 i‡(
ddÊags
 & 
C_FILL
)

389 
	`mem£t
(
out
.
dbp
, 
fûl_ch¨
, out.
dbsz
 - out.
db˙t
);

390 i‡(
ddÊags
 & (
C_BLOCK
 | 
C_UNBLOCK
))

391 
	`mem£t
(
out
.
dbp
, ' ', out.
dbsz
 - out.
db˙t
);

393 
	`mem£t
(
out
.
dbp
, 0, out.
dbsz
 - out.
db˙t
);

394 
out
.
db˙t
 = out.
dbsz
;

396 i‡(
out
.
db˙t
 || 
≥ndög
)

397 
	`dd_out
(1);

398 
	}
}

401 
	$dd_out
(
f‹˚
)

403 
u_ch¨
 *
ouç
;

404 
size_t
 
˙t
, 
i
, 
n
;

405 
ssize_t
 
nw
;

406 
w¨√d
;

407 
•¨£
;

425 
ouç
 = 
out
.
db
;

426 
n
 = 
f‹˚
 ? 
out
.
db˙t
 : out.
dbsz
;;Ç = out.dbsz) {

427 
˙t
 = 
n
;; c¡ -
nw
) {

428 
•¨£
 = 0;

429 i‡(
ddÊags
 & 
C_SPARSE
) {

430 
•¨£
 = 1;

431 
i
 = 0; i < 
˙t
; i++)

432 i‡(
ouç
[
i
] != 0) {

433 
•¨£
 = 0;

437 i‡(
•¨£
 && !
f‹˚
) {

438 
≥ndög
 +
˙t
;

439 
nw
 = 
˙t
;

441 i‡(
≥ndög
 != 0) {

442 i‡(
f‹˚
)

443 
≥ndög
--;

444 i‡(
	`l£ek
(
out
.
fd
, 
≥ndög
, 
SEEK_CUR
) ==

446 
	`îr
(2, "%s: seekÉrror creating sparse file",

447 
out
.
«me
);

448 i‡(
f‹˚
)

449 
	`wrôe
(
out
.
fd
, 
ouç
, 1);

450 
≥ndög
 = 0;

452 i‡(
˙t
)

453 
nw
 = 
	`wrôe
(
out
.
fd
, 
ouç
, 
˙t
);

458 i‡(
nw
 <= 0) {

459 i‡(
nw
 == 0)

460 
	`îrx
(1, "%s:Énd o‡devi˚", 
out
.
«me
);

461 i‡(
î∫o
 !
EINTR
)

462 
	`îr
(1, "%s", 
out
.
«me
);

463 
nw
 = 0;

465 
ouç
 +
nw
;

466 
°
.
byãs
 +
nw
;

467 i‡((
size_t
)
nw
 =
n
) {

468 i‡(
n
 !
out
.
dbsz
)

469 ++
°
.
out_∑π
;

471 ++
°
.
out_fuŒ
;

474 ++
°
.
out_∑π
;

475 i‡((
size_t
)
nw
 =
˙t
)

477 i‡(
out
.
Êags
 & 
ISTAPE
)

478 
	`îrx
(1, "%s: short write onÅape device",

479 
out
.
«me
);

480 i‡(
out
.
Êags
 & 
ISCHR
 && !
w¨√d
) {

481 
w¨√d
 = 1;

482 
	`w¨nx
("%s: short write on character device",

483 
out
.
«me
);

486 i‡((
out
.
db˙t
 -
n
Ë< out.
dbsz
)

491 i‡(
out
.
db˙t
)

492 ()
	`memmove
(
out
.
db
, out.
dbp
 - out.
db˙t
, out.dbcnt);

493 
out
.
dbp
 = out.
db
 + out.
db˙t
;

494 
	}
}

	@dd/dd.h

39 
u_ch¨
 *
	mdb
;

40 
u_ch¨
 *
	mdbp
;

42 
size_t
 
	mdb˙t
;

43 
size_t
 
	mdbr˙t
;

44 
size_t
 
	mdbsz
;

46 
	#ISCHR
 0x01

	)

47 
	#ISPIPE
 0x02

	)

48 
	#ISTAPE
 0x04

	)

49 
	#ISSEEK
 0x08

	)

50 
	#NOREAD
 0x10

	)

51 
	#ISTRUNC
 0x20

	)

52 
u_öt
 
	mÊags
;

54 c⁄° *
	m«me
;

55 
	mfd
;

56 
off_t
 
	moff£t
;

57 } 
	tIO
;

60 
uötmax_t
 
	mö_fuŒ
;

61 
uötmax_t
 
	mö_∑π
;

62 
uötmax_t
 
	mout_fuŒ
;

63 
uötmax_t
 
	mout_∑π
;

64 
uötmax_t
 
	måunc
;

65 
uötmax_t
 
	mswab
;

66 
uötmax_t
 
	mbyãs
;

67 
	m°¨t
;

68 } 
	tSTAT
;

71 
	#C_ASCII
 0x00001

	)

72 
	#C_BLOCK
 0x00002

	)

73 
	#C_BS
 0x00004

	)

74 
	#C_CBS
 0x00008

	)

75 
	#C_COUNT
 0x00010

	)

76 
	#C_EBCDIC
 0x00020

	)

77 
	#C_FILES
 0x00040

	)

78 
	#C_IBS
 0x00080

	)

79 
	#C_IF
 0x00100

	)

80 
	#C_LCASE
 0x00200

	)

81 
	#C_NOERROR
 0x00400

	)

82 
	#C_NOTRUNC
 0x00800

	)

83 
	#C_OBS
 0x01000

	)

84 
	#C_OF
 0x02000

	)

85 
	#C_OSYNC
 0x04000

	)

86 
	#C_PAREVEN
 0x08000

	)

87 
	#C_PARNONE
 0x100000

	)

88 
	#C_PARODD
 0x200000

	)

89 
	#C_PARSET
 0x400000

	)

90 
	#C_SEEK
 0x800000

	)

91 
	#C_SKIP
 0x1000000

	)

92 
	#C_SPARSE
 0x2000000

	)

93 
	#C_SWAB
 0x4000000

	)

94 
	#C_SYNC
 0x8000000

	)

95 
	#C_UCASE
 0x10000000

	)

96 
	#C_UNBLOCK
 0x20000000

	)

97 
	#C_FILL
 0x40000000

	)

99 
	#C_PARITY
 (
C_PAREVEN
 | 
C_PARODD
 | 
C_PARNONE
 | 
C_PARSET
)

	)

	@dd/extern.h

37 
block
();

38 
block_˛o£
();

39 
dd_out
();

40 
def
();

41 
def_˛o£
();

42 
j˛
(**);

43 
pos_ö
();

44 
pos_out
();

45 
summ¨y
();

46 
summ¨yx
();

47 
ãrmö©e
();

48 
unblock
();

49 
unblock_˛o£
();

51 
IO
 
ö
, 
out
;

52 
STAT
 
°
;

53 (*
cfunc
)();

54 
uötmax_t
 
˝y_˙t
;

55 
size_t
 
cbsz
;

56 
u_öt
 
ddÊags
;

57 
uötmax_t
 
fûes_˙t
;

58 c⁄° 
u_ch¨
 *
˘ab
;

59 c⁄° 
u_ch¨
 
a2e_32V
[], 
a2e_POSIX
[];

60 c⁄° 
u_ch¨
 
e2a_32V
[], 
e2a_POSIX
[];

61 c⁄° 
u_ch¨
 
a2ibm_32V
[], 
a2ibm_POSIX
[];

62 
u_ch¨
 
ˇ£èb
[];

63 
fûl_ch¨
;

	@dd/gen.c

7 
	~<°dio.h
>

10 
	$maö
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

12 
i
;

14 
i
 = 0; i < 256; i++)

15 
	`putch¨
(
i
);

17 
	}
}

	@dd/misc.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)misc.c 8.3 (Berkeley) 4/2/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/dd/misc.c,v 1.27.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

45 
	~<î∫o.h
>

46 
	~<öây≥s.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<uni°d.h
>

52 
	~"dd.h
"

53 
	~"exã∫.h
"

56 
	$summ¨y
()

58 
timevÆ
 
tv
;

59 
£cs
;

60 
buf
[100];

62 ()
	`gëtimeofday
(&
tv
, (
timez⁄e
 *)
NULL
);

63 
£cs
 = 
tv
.
tv_£c
 +Åv.
tv_u£c
 * 1e-6 - 
°
.
°¨t
;

64 i‡(
£cs
 < 1e-6)

65 
£cs
 = 1e-6;

67 ()
	`¢¥ötf
(
buf
, (buf),

69 
°
.
ö_fuŒ
, st.
ö_∑π
, st.
out_fuŒ
, st.
out_∑π
);

70 ()
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

71 i‡(
°
.
swab
) {

72 ()
	`¢¥ötf
(
buf
, (buf), "%ju oddÜength swab %s\n",

73 
°
.
swab
, (st.swab == 1) ? "block" : "blocks");

74 ()
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

76 i‡(
°
.
åunc
) {

77 ()
	`¢¥ötf
(
buf
, (buf), "%juÅruncated %s\n",

78 
°
.
åunc
, (st.trunc == 1) ? "block" : "blocks");

79 ()
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

81 ()
	`¢¥ötf
(
buf
, (buf),

83 
°
.
byãs
, 
£cs
, st.bytes / secs);

84 ()
	`wrôe
(
STDERR_FILENO
, 
buf
, 
	`°æí
(buf));

85 
	}
}

89 
	$summ¨yx
(
nŸu£d
 
__unu£d
)

91 
ßve_î∫o
 = 
î∫o
;

93 
	`summ¨y
();

94 
î∫o
 = 
ßve_î∫o
;

95 
	}
}

99 
	$ãrmö©e
(
sig
)

102 
	`summ¨y
();

103 
	`_exô
(
sig
 == 0 ? 0 : 1);

104 
	}
}

	@dd/position.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)position.c 8.3 (Berkeley) 4/2/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/dd/position.c,v 1.23.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/mtio.h
>

45 
	~<îr.h
>

46 
	~<î∫o.h
>

47 
	~<öây≥s.h
>

48 
	~<uni°d.h
>

50 
	~"dd.h
"

51 
	~"exã∫.h
"

60 
	$pos_ö
()

62 
off_t
 
˙t
;

63 
w¨√d
;

64 
ssize_t
 
ƒ
;

65 
size_t
 
b˙t
;

68 i‡(
ö
.
Êags
 & 
ISSEEK
) {

69 
î∫o
 = 0;

70 i‡(
	`l£ek
(
ö
.
fd
, in.
off£t
 * in.
dbsz
, 
SEEK_CUR
) == -1 &&

71 
î∫o
 != 0)

72 
	`îr
(1, "%s", 
ö
.
«me
);

77 i‡(
ö
.
off£t
 < 0)

78 
	`îrx
(1, "%s: illegal offset", "iseek/skip");

85 
b˙t
 = 
ö
.
dbsz
, 
˙t
 = in.
off£t
, 
w¨√d
 = 0; cnt;) {

86 i‡((
ƒ
 = 
	`ªad
(
ö
.
fd
, in.
db
, 
b˙t
)) > 0) {

87 i‡(
ö
.
Êags
 & 
ISPIPE
) {

88 i‡(!(
b˙t
 -
ƒ
)) {

89 
b˙t
 = 
ö
.
dbsz
;

90 --
˙t
;

93 --
˙t
;

97 i‡(
ƒ
 == 0) {

98 i‡(
fûes_˙t
 > 1) {

99 --
fûes_˙t
;

102 
	`îrx
(1, "skipÑeachedÉnd of input");

110 i‡(
ddÊags
 & 
C_NOERROR
) {

111 i‡(!
w¨√d
) {

112 
	`w¨n
("%s", 
ö
.
«me
);

113 
w¨√d
 = 1;

114 
	`summ¨y
();

118 
	`îr
(1, "%s", 
ö
.
«me
);

120 
	}
}

123 
	$pos_out
()

125 
mt›
 
t_›
;

126 
off_t
 
˙t
;

127 
ssize_t
 
n
;

134 i‡(
out
.
Êags
 & (
ISSEEK
 | 
ISPIPE
)) {

135 
î∫o
 = 0;

136 i‡(
	`l£ek
(
out
.
fd
, out.
off£t
 * out.
dbsz
, 
SEEK_CUR
) == -1 &&

137 
î∫o
 != 0)

138 
	`îr
(1, "%s", 
out
.
«me
);

143 i‡(
out
.
off£t
 < 0)

144 
	`îrx
(1, "%s: illegal offset", "oseek/seek");

147 i‡(
out
.
Êags
 & 
NOREAD
) {

148 
t_›
.
mt_›
 = 
MTFSR
;

149 
t_›
.
mt_cou¡
 = 
out
.
off£t
;

151 i‡(
	`io˘l
(
out
.
fd
, 
MTIOCTOP
, &
t_›
) == -1)

152 
	`îr
(1, "%s", 
out
.
«me
);

157 
˙t
 = 0; c¡ < 
out
.
off£t
; ++cnt) {

158 i‡((
n
 = 
	`ªad
(
out
.
fd
, out.
db
, out.
dbsz
)) > 0)

161 i‡(
n
 == -1)

162 
	`îr
(1, "%s", 
out
.
«me
);

169 
t_›
.
mt_›
 = 
MTBSR
;

170 
t_›
.
mt_cou¡
 = 1;

171 i‡(
	`io˘l
(
out
.
fd
, 
MTIOCTOP
, &
t_›
) == -1)

172 
	`îr
(1, "%s", 
out
.
«me
);

174 
˙t
++ < 
out
.
off£t
) {

175 
n
 = 
	`wrôe
(
out
.
fd
, out.
db
, out.
dbsz
);

176 i‡(
n
 == -1)

177 
	`îr
(1, "%s", 
out
.
«me
);

178 i‡((
size_t
)
n
 !
out
.
dbsz
)

179 
	`îrx
(1, "%s: wrôêÁûuª", 
out
.
«me
);

183 
	}
}

	@df/df.c

36 #i‚de‡
löt


37 c⁄° 
	gc›yright
[] =

42 #i‚de‡
löt


43 
	gsccsid
[] = "@(#)df.c 8.9 (Berkeley) 5/8/95";

46 
	~<sys/cdefs.h
>

47 
__FBSDID
("$FreeBSD: src/bin/df/df.c,v 1.74.2.3.2.1 2012/03/03 06:15:13 kensmith Exp $");

49 
	~<sys/∑øm.h
>

50 
	~<sys/°©.h
>

51 
	~<sys/mou¡.h
>

52 
	~<sys/sys˘l.h
>

53 
	~<ufs/ufs/ufsmou¡.h
>

54 
	~<îr.h
>

55 
	~<libutû.h
>

56 
	~<°döt.h
>

57 
	~<°dio.h
>

58 
	~<°dlib.h
>

59 
	~<°rög.h
>

60 
	~<sy£xôs.h
>

61 
	~<uni°d.h
>

63 
	~"exã∫.h
"

65 
	#UNITS_SI
 1

	)

66 
	#UNITS_2
 2

	)

69 
	smaxwidths
 {

70 
	mm¡‰om
;

71 
	mf°y≥
;

72 
	mtŸÆ
;

73 
	mu£d
;

74 
	mavaû
;

75 
	miu£d
;

76 
	mi‰ì
;

79 
add°©
(
°©fs
 *, statfs *);

80 *
gëm¡±
(const *);

81 
öt64width
(
öt64_t
);

82 *
makíëvf¶i°
();

83 
¥thum™
(c⁄° 
°©fs
 *, 
öt64_t
);

84 
¥thum™vÆ
(
öt64_t
);

85 
ötmax_t
 
fsbtoblk
(
öt64_t
, 
uöt64_t
, 
u_l⁄g
);

86 
¥t°©
(
°©fs
 *, 
maxwidths
 *);

87 
size_t
 
ªgëm¡öfo
(
°©fs
 **, , const **);

88 
upd©e_maxwidths
(
maxwidths
 *, c⁄° 
°©fs
 *);

89 
ußge
();

91 
__ölöe
 

92 
	$imax
(
a
, 
b
)

94  (
a
 > 
b
 ?á : b);

95 
	}
}

97 
	gaÊag
 = 0, 
	gcÊag
, 
	ghÊag
, 
	giÊag
, 
	gkÊag
, 
	glÊag
 = 0, 
	gnÊag
, 
	gTÊag
;

98 
ufs_¨gs
 
	gmdev
;

101 
	$maö
(
¨gc
, *
¨gv
[])

103 
°©
 
°buf
;

104 
°©fs
 
°©fsbuf
, 
tŸÆbuf
;

105 
maxwidths
 maxwidths;

106 
°©fs
 *
m¡buf
;

107 c⁄° *
f°y≥
;

108 *
m¡∑th
, *
m¡±
;

109 c⁄° **
vf¶i°
;

110 
i
, 
m¡size
;

111 
ch
, 
rv
;

113 
f°y≥
 = "ufs";

115 
	`mem£t
(&
tŸÆbuf
, 0, (totalbuf));

116 
tŸÆbuf
.
f_bsize
 = 
DEV_BSIZE
;

117 
	`°æ˝y
(
tŸÆbuf
.
f_m¡‰om«me
, "tŸÆ", 
MNAMELEN
);

118 
vf¶i°
 = 
NULL
;

119 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "abcgHhiklmnPt:T")) != -1)

120 
ch
) {

122 
aÊag
 = 1;

133 i‡(
kÊag
)

135 
	`£ãnv
("BLOCKSIZE", "512", 1);

136 
hÊag
 = 0;

139 
cÊag
 = 1;

142 
	`£ãnv
("BLOCKSIZE", "1g", 1);

143 
hÊag
 = 0;

146 
hÊag
 = 
UNITS_SI
;

149 
hÊag
 = 
UNITS_2
;

152 
iÊag
 = 1;

155 
kÊag
++;

156 
	`£ãnv
("BLOCKSIZE", "1024", 1);

157 
hÊag
 = 0;

160 i‡(
vf¶i°
 !
NULL
)

161 
	`îrx
(1, "-lánd -táre mutuallyÉxclusive.");

162 
vf¶i°
 = 
	`makevf¶i°
(
	`makíëvf¶i°
());

163 
lÊag
 = 1;

166 
	`£ãnv
("BLOCKSIZE", "1m", 1);

167 
hÊag
 = 0;

170 
nÊag
 = 1;

173 i‡(
lÊag
)

174 
	`îrx
(1, "-lánd -táre mutuallyÉxclusive.");

175 i‡(
vf¶i°
 !
NULL
)

176 
	`îrx
(1, "only one -t option may be specified");

177 
f°y≥
 = 
›èrg
;

178 
vf¶i°
 = 
	`makevf¶i°
(
›èrg
);

181 
TÊag
 = 1;

185 
	`ußge
();

187 
¨gc
 -
›töd
;

188 
¨gv
 +
›töd
;

190 
rv
 = 0;

191 i‡(!*
¨gv
) {

193 
m¡size
 = 
	`gëm¡öfo
(&
m¡buf
, 
MNT_NOWAIT
);

194 
m¡size
 = 
	`ªgëm¡öfo
(&
m¡buf
, m¡size, 
vf¶i°
);

197 
m¡buf
 = 
	`mÆloc
(
¨gc
 * (*mntbuf));

198 i‡(
m¡buf
 == 0)

199 
	`îr
(1, "malloc()");

200 
m¡size
 = 0;

205 ; *
¨gv
;árgv++) {

206 i‡(
	`°©
(*
¨gv
, &
°buf
) < 0) {

207 i‡((
m¡±
 = 
	`gëm¡±
(*
¨gv
)) == 0) {

208 
	`w¨n
("%s", *
¨gv
);

209 
rv
 = 1;

212 } i‡(
	`S_ISCHR
(
°buf
.
°_mode
)) {

213 i‡((
m¡±
 = 
	`gëm¡±
(*
¨gv
)) == 0) {

214 
mdev
.
f•ec
 = *
¨gv
;

215 
m¡∑th
 = 
	`°rdup
("/tmp/df.XXXXXX");

216 i‡(
m¡∑th
 =
NULL
) {

217 
	`w¨n
("strdup failed");

218 
rv
 = 1;

221 
m¡±
 = 
	`mkdãmp
(
m¡∑th
);

222 i‡(
m¡±
 =
NULL
) {

223 
	`w¨n
("mkdãmp(\"%s\"ËÁûed", 
m¡∑th
);

224 
rv
 = 1;

225 
	`‰ì
(
m¡∑th
);

228 i‡(
	`mou¡
(
f°y≥
, 
m¡±
, 
MNT_RDONLY
,

229 &
mdev
) != 0) {

230 
	`w¨n
("%s", *
¨gv
);

231 
rv
 = 1;

232 ()
	`rmdú
(
m¡±
);

233 
	`‰ì
(
m¡∑th
);

235 } i‡(
	`°©fs
(
m¡±
, &
°©fsbuf
) == 0) {

236 
°©fsbuf
.
f_m¡⁄«me
[0] = '\0';

237 
	`¥t°©
(&
°©fsbuf
, &
maxwidths
);

238 i‡(
cÊag
)

239 
	`add°©
(&
tŸÆbuf
, &
°©fsbuf
);

241 
	`w¨n
("%s", *
¨gv
);

242 
rv
 = 1;

244 ()
	`unmou¡
(
m¡±
, 0);

245 ()
	`rmdú
(
m¡±
);

246 
	`‰ì
(
m¡∑th
);

250 
m¡±
 = *
¨gv
;

256 i‡(
	`°©fs
(
m¡±
, &
°©fsbuf
) < 0) {

257 
	`w¨n
("%s", 
m¡±
);

258 
rv
 = 1;

268 i‡(
	`checkvf¢ame
(
°©fsbuf
.
f_f°y≥«me
, 
vf¶i°
)) {

269 
rv
 = 1;

274 
°©fsbuf
.
f_Êags
 &~
MNT_IGNORE
;

277 
m¡buf
[
m¡size
++] = 
°©fsbuf
;

280 
	`bzîo
(&
maxwidths
, (maxwidths));

281 
i
 = 0; i < 
m¡size
; i++) {

282 i‡(
aÊag
 || (
m¡buf
[
i
].
f_Êags
 & 
MNT_IGNORE
) == 0) {

283 
	`upd©e_maxwidths
(&
maxwidths
, &
m¡buf
[
i
]);

284 i‡(
cÊag
)

285 
	`add°©
(&
tŸÆbuf
, &
m¡buf
[
i
]);

288 
i
 = 0; i < 
m¡size
; i++)

289 i‡(
aÊag
 || (
m¡buf
[
i
].
f_Êags
 & 
MNT_IGNORE
) == 0)

290 
	`¥t°©
(&
m¡buf
[
i
], &
maxwidths
);

291 i‡(
cÊag
)

292 
	`¥t°©
(&
tŸÆbuf
, &
maxwidths
);

293  (
rv
);

294 
	}
}

297 
	$gëm¡±
(c⁄° *
«me
)

299 
size_t
 
m¡size
, 
i
;

300 
°©fs
 *
m¡buf
;

302 
m¡size
 = 
	`gëm¡öfo
(&
m¡buf
, 
MNT_NOWAIT
);

303 
i
 = 0; i < 
m¡size
; i++) {

304 i‡(!
	`°rcmp
(
m¡buf
[
i
].
f_m¡‰om«me
, 
«me
))

305  (
m¡buf
[
i
].
f_m¡⁄«me
);

308 
	}
}

315 
size_t


316 
	$ªgëm¡öfo
(
°©fs
 **
m¡buÂ
, 
m¡size
, c⁄° **
vf¶i°
)

318 
îr‹
, 
i
, 
j
;

319 
°©fs
 *
m¡buf
;

321 i‡(
vf¶i°
 =
NULL
)

322  (
nÊag
 ? 
m¡size
 : 
	`gëm¡öfo
(
m¡buÂ
, 
MNT_WAIT
));

324 
m¡buf
 = *
m¡buÂ
;

325 
j
 = 0, 
i
 = 0; i < 
m¡size
; i++) {

326 i‡(
	`checkvf¢ame
(
m¡buf
[
i
].
f_f°y≥«me
, 
vf¶i°
))

334 
îr‹
 = 
	`°©fs
(
m¡buf
[
i
].
f_m¡⁄«me
, &m¡buf[
j
]);

335 i‡(
nÊag
 || 
îr‹
 < 0)

336 i‡(
i
 !
j
) {

337 i‡(
îr‹
 < 0)

338 
	`w¨nx
("%s statsÖossibly stale",

339 
m¡buf
[
i
].
f_m¡⁄«me
);

340 
m¡buf
[
j
] = m¡buf[
i
];

342 
j
++;

344  (
j
);

345 
	}
}

348 
	$¥thum™
(c⁄° 
°©fs
 *
sf•
, 
öt64_t
 
u£d
)

351 
	`¥thum™vÆ
(
sf•
->
f_blocks
 * sf•->
f_bsize
);

352 
	`¥thum™vÆ
(
u£d
 * 
sf•
->
f_bsize
);

353 
	`¥thum™vÆ
(
sf•
->
f_bavaû
 * sf•->
f_bsize
);

354 
	}
}

357 
	$¥thum™vÆ
(
öt64_t
 
byãs
)

359 
buf
[6];

360 
Êags
;

362 
Êags
 = 
HN_B
 | 
HN_NOSPACE
 | 
HN_DECIMAL
;

363 i‡(
hÊag
 =
UNITS_SI
)

364 
Êags
 |
HN_DIVISOR_1000
;

366 
	`hum™ize_numbî
(
buf
, (bufË- (
byãs
 < 0 ? 0 : 1),

367 
byãs
, "", 
HN_AUTOSCALE
, 
Êags
);

369 ()
	`¥ötf
(" %6s", 
buf
);

370 
	}
}

376 
	$¥thum™vÆöode
(
öt64_t
 
byãs
)

378 
buf
[6];

379 
Êags
;

381 
Êags
 = 
HN_NOSPACE
 | 
HN_DECIMAL
 | 
HN_DIVISOR_1000
;

383 
	`hum™ize_numbî
(
buf
, (bufË- (
byãs
 < 0 ? 0 : 1),

384 
byãs
, "", 
HN_AUTOSCALE
, 
Êags
);

386 ()
	`¥ötf
(" %5s", 
buf
);

387 
	}
}

393 
ötmax_t


394 
	$fsbtoblk
(
öt64_t
 
num
, 
uöt64_t
 
fsbs
, 
u_l⁄g
 
bs
)

397 i‡(
fsbs
 !0 && fsb†< 
bs
)

398  (
num
 / (
ötmax_t
)(
bs
 / 
fsbs
));

400  (
num
 * (
ötmax_t
)(
fsbs
 / 
bs
));

401 
	}
}

407 
	$¥t°©
(
°©fs
 *
sf•
, 
maxwidths
 *
mwp
)

409 
blocksize
;

410 
hódîÀn
, 
time°hrough
 = 0;

411 c⁄° *
hódî
;

412 
öt64_t
 
u£d
, 
avaûblks
, 
öodes
;

414 i‡(++
time°hrough
 == 1) {

415 
mwp
->
m¡‰om
 = 
	`imax
(mwp->m¡‰om, ()
	`°æí
("Filesystem"));

416 
mwp
->
f°y≥
 = 
	`imax
(mwp->f°y≥, ()
	`°æí
("Type"));

417 i‡(
hÊag
) {

418 
hódî
 = " Size";

419 
mwp
->
tŸÆ
 = mwp->
u£d
 = mwp->
avaû
 =

420 ()
	`°æí
(
hódî
);

422 
hódî
 = 
	`gëbsize
(&
hódîÀn
, &
blocksize
);

423 
mwp
->
tŸÆ
 = 
	`imax
(mwp->tŸÆ, 
hódîÀn
);

425 
mwp
->
u£d
 = 
	`imax
(mwp->u£d, ()
	`°æí
("Used"));

426 
mwp
->
avaû
 = 
	`imax
(mwp->avaû, ()
	`°æí
("Avail"));

428 ()
	`¥ötf
("%-*s", 
mwp
->
m¡‰om
, "Filesystem");

429 i‡(
TÊag
)

430 ()
	`¥ötf
(" %-*s", 
mwp
->
f°y≥
, "Type");

431 ()
	`¥ötf
(" %-*†%*†%*†C≠acôy", 
mwp
->
tŸÆ
, 
hódî
,

432 
mwp
->
u£d
, "U£d", mwp->
avaû
, "Avail");

433 i‡(
iÊag
) {

434 
mwp
->
iu£d
 = 
	`imax
(
hÊag
 ? 0 : mwp->iused,

435 ()
	`°æí
(" iused"));

436 
mwp
->
i‰ì
 = 
	`imax
(
hÊag
 ? 0 : mwp->ifree,

437 ()
	`°æí
("ifree"));

438 ()
	`¥ötf
(" %*s %*s %%iused",

439 
mwp
->
iu£d
 - 2, "iu£d", mwp->
i‰ì
, "ifree");

441 ()
	`¥ötf
(" Mounted on\n");

443 ()
	`¥ötf
("%-*s", 
mwp
->
m¡‰om
, 
sf•
->
f_m¡‰om«me
);

444 i‡(
TÊag
)

445 ()
	`¥ötf
(" %-*s", 
mwp
->
f°y≥
, 
sf•
->
f_f°y≥«me
);

446 
u£d
 = 
sf•
->
f_blocks
 - sf•->
f_b‰ì
;

447 
avaûblks
 = 
sf•
->
f_bavaû
 + 
u£d
;

448 i‡(
hÊag
) {

449 
	`¥thum™
(
sf•
, 
u£d
);

451 ()
	`¥ötf
(" %*jd %*jd %*jd",

452 
mwp
->
tŸÆ
, 
	`fsbtoblk
(
sf•
->
f_blocks
,

453 
sf•
->
f_bsize
, 
blocksize
),

454 
mwp
->
u£d
, 
	`fsbtoblk
(u£d, 
sf•
->
f_bsize
, 
blocksize
),

455 
mwp
->
avaû
, 
	`fsbtoblk
(
sf•
->
f_bavaû
,

456 
sf•
->
f_bsize
, 
blocksize
));

458 ()
	`¥ötf
(" %5.0f%%",

459 
avaûblks
 =0 ? 100.0 : ()
u£d
 / ()availblks * 100.0);

460 i‡(
iÊag
) {

461 
öodes
 = 
sf•
->
f_fûes
;

462 
u£d
 = 
öodes
 - 
sf•
->
f_f‰ì
;

463 i‡(
hÊag
) {

464 ()
	`¥ötf
(" ");

465 
	`¥thum™vÆöode
(
u£d
);

466 
	`¥thum™vÆöode
(
sf•
->
f_f‰ì
);

468 ()
	`¥ötf
(" %*jd %*jd", 
mwp
->
iu£d
, (
ötmax_t
)
u£d
,

469 
mwp
->
i‰ì
, (
ötmax_t
)
sf•
->
f_f‰ì
);

471 ()
	`¥ötf
(" %4.0f%% ", 
öodes
 == 0 ? 100.0 :

472 ()
u£d
 / ()
öodes
 * 100.0);

474 ()
	`¥ötf
(" ");

475 i‡(
	`°∫cmp
(
sf•
->
f_m¡‰om«me
, "tŸÆ", 
MNAMELEN
) != 0)

476 ()
	`¥ötf
(" %s", 
sf•
->
f_m¡⁄«me
);

477 ()
	`¥ötf
("\n");

478 
	}
}

481 
	$add°©
(
°©fs
 *
tŸÆf•
, °©f†*
°©f•
)

483 
uöt64_t
 
bsize
;

485 
bsize
 = 
°©f•
->
f_bsize
 / 
tŸÆf•
->f_bsize;

486 
tŸÆf•
->
f_blocks
 +
°©f•
->f_block†* 
bsize
;

487 
tŸÆf•
->
f_b‰ì
 +
°©f•
->f_b‰ì * 
bsize
;

488 
tŸÆf•
->
f_bavaû
 +
°©f•
->f_bavaû * 
bsize
;

489 
tŸÆf•
->
f_fûes
 +
°©f•
->f_files;

490 
tŸÆf•
->
f_f‰ì
 +
°©f•
->f_ffree;

491 
	}
}

498 
	$upd©e_maxwidths
(
maxwidths
 *
mwp
, c⁄° 
°©fs
 *
sf•
)

500 
blocksize
 = 0;

501 
dummy
;

503 i‡(
blocksize
 == 0)

504 
	`gëbsize
(&
dummy
, &
blocksize
);

506 
mwp
->
m¡‰om
 = 
	`imax
(mwp->m¡‰om, ()
	`°æí
(
sf•
->
f_m¡‰om«me
));

507 
mwp
->
f°y≥
 = 
	`imax
(mwp->f°y≥, ()
	`°æí
(
sf•
->
f_f°y≥«me
));

508 
mwp
->
tŸÆ
 = 
	`imax
(mwp->tŸÆ, 
	`öt64width
(

509 
	`fsbtoblk
((
öt64_t
)
sf•
->
f_blocks
, sf•->
f_bsize
, 
blocksize
)));

510 
mwp
->
u£d
 = 
	`imax
(mwp->used,

511 
	`öt64width
(
	`fsbtoblk
((
öt64_t
)
sf•
->
f_blocks
 -

512 (
öt64_t
)
sf•
->
f_b‰ì
, sf•->
f_bsize
, 
blocksize
)));

513 
mwp
->
avaû
 = 
	`imax
(mwp->avaû, 
	`öt64width
(
	`fsbtoblk
(
sf•
->
f_bavaû
,

514 
sf•
->
f_bsize
, 
blocksize
)));

515 
mwp
->
iu£d
 = 
	`imax
(mwp->iu£d, 
	`öt64width
((
öt64_t
)
sf•
->
f_fûes
 -

516 
sf•
->
f_f‰ì
));

517 
mwp
->
i‰ì
 = 
	`imax
(mwp->i‰ì, 
	`öt64width
(
sf•
->
f_f‰ì
));

518 
	}
}

522 
	$öt64width
(
öt64_t
 
vÆ
)

524 
Àn
;

526 
Àn
 = 0;

528 i‡(
vÆ
 <= 0) {

529 
vÆ
 = -val;

530 
Àn
++;

532 
vÆ
 > 0) {

533 
Àn
++;

534 
vÆ
 /= 10;

537  (
Àn
);

538 
	}
}

541 
	$ußge
()

544 ()
	`Ârötf
(
°dîr
,

546 
	`exô
(
EX_USAGE
);

547 
	}
}

550 
	$makíëvf¶i°
()

552 *
°r
, *
°Ωå
, **
li°±r
;

553 
xvfsc⁄f
 *
xvf•
, *
kìp_xvf•
;

554 
size_t
 
buÊí
;

555 
˙t
, 
i
, 
maxvfsc⁄f
;

557 i‡(
	`sys˘lby«me
("vfs.c⁄Êi°", 
NULL
, &
buÊí
, NULL, 0) < 0) {

558 
	`w¨n
("sysctl(vfs.conflist)");

559  (
NULL
);

561 
xvf•
 = 
	`mÆloc
(
buÊí
);

562 i‡(
xvf•
 =
NULL
) {

563 
	`w¨nx
("malloc failed");

564  (
NULL
);

566 
kìp_xvf•
 = 
xvf•
;

567 i‡(
	`sys˘lby«me
("vfs.c⁄Êi°", 
xvf•
, &
buÊí
, 
NULL
, 0) < 0) {

568 
	`w¨n
("sysctl(vfs.conflist)");

569 
	`‰ì
(
kìp_xvf•
);

570  (
NULL
);

572 
maxvfsc⁄f
 = 
buÊí
 / (
xvfsc⁄f
);

574 i‡((
li°±r
 = 
	`mÆloc
((*Ë* 
maxvfsc⁄f
)Ë=
NULL
) {

575 
	`w¨nx
("malloc failed");

576 
	`‰ì
(
kìp_xvf•
);

577  (
NULL
);

580 
˙t
 = 0, 
i
 = 0; i < 
maxvfsc⁄f
; i++) {

581 i‡(
xvf•
->
vfc_Êags
 & 
VFCF_NETWORK
) {

582 
li°±r
[
˙t
++] = 
	`°rdup
(
xvf•
->
vfc_«me
);

583 i‡(
li°±r
[
˙t
-1] =
NULL
) {

584 
	`w¨nx
("malloc failed");

585 
	`‰ì
(
li°±r
);

586 
	`‰ì
(
kìp_xvf•
);

587  (
NULL
);

590 
xvf•
++;

593 i‡(
˙t
 == 0 ||

594 (
°r
 = 
	`mÆloc
((Ë* (32 * 
˙t
 + c¡ + 2))Ë=
NULL
) {

595 i‡(
˙t
 > 0)

596 
	`w¨nx
("malloc failed");

597 
	`‰ì
(
li°±r
);

598 
	`‰ì
(
kìp_xvf•
);

599  (
NULL
);

602 *
°r
 = 'n'; *(str + 1) = 'o';

603 
i
 = 0, 
°Ωå
 = 
°r
 + 2; i < 
˙t
; i++, strptr++) {

604 
	`°æ˝y
(
°Ωå
, 
li°±r
[
i
], 32);

605 
°Ωå
 +
	`°æí
(
li°±r
[
i
]);

606 *
°Ωå
 = ',';

607 
	`‰ì
(
li°±r
[
i
]);

609 *(--
°Ωå
) = '\0';

611 
	`‰ì
(
kìp_xvf•
);

612 
	`‰ì
(
li°±r
);

613  (
°r
);

614 
	}
}

	@domainname/domainname.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 c⁄° 
	gsccsid
[] = "From: @(#)hostname.c 8.1 (Berkeley) 5/31/93";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/domainname/domainname.c,v 1.19.22.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/∑øm.h
>

46 
	~<îr.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<uni°d.h
>

52 
ußge
();

55 
	$maö
(
¨gc
, *
¨gv
[])

57 
ch
;

58 
domaö«me
[
MAXHOSTNAMELEN
];

60 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "")) != -1)

61 
ch
) {

65 
	`ußge
();

67 
¨gc
 -
›töd
;

68 
¨gv
 +
›töd
;

70 i‡(
¨gc
 > 1)

71 
	`ußge
();

73 i‡(*
¨gv
) {

74 i‡(
	`£tdomaö«me
(*
¨gv
, ()
	`°æí
(*argv)))

75 
	`îr
(1, "setdomainname");

77 i‡(
	`gëdomaö«me
(
domaö«me
, ()(domainname)))

78 
	`îr
(1, "getdomainname");

79 ()
	`¥ötf
("%s\n", 
domaö«me
);

81 
	`exô
(0);

82 
	}
}

85 
	$ußge
()

87 ()
	`Ârötf
(
°dîr
, "usage: domainname [ypdomain]\n");

88 
	`exô
(1);

89 
	}
}

	@echo/echo.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)echo.c 8.1 (Berkeley) 5/31/93";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/echo/echo.c,v 1.19.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/ty≥s.h
>

45 
	~<sys/uio.h
>

47 
	~<as£π.h
>

48 
	~<î∫o.h
>

49 
	~<limôs.h
>

50 
	~<°dlib.h
>

51 
	~<°rög.h
>

52 
	~<uni°d.h
>

58 
__dód2
 

59 
	$îªxô
(c⁄° *
¥og
, c⁄° *
ªas⁄
)

61 *
îr°r
 = 
	`°ªº‹
(
î∫o
);

62 
	`wrôe
(
STDERR_FILENO
, 
¥og
, 
	`°æí
(prog));

63 
	`wrôe
(
STDERR_FILENO
, ": ", 2);

64 
	`wrôe
(
STDERR_FILENO
, 
ªas⁄
, 
	`°æí
(reason));

65 
	`wrôe
(
STDERR_FILENO
, ": ", 2);

66 
	`wrôe
(
STDERR_FILENO
, 
îr°r
, 
	`°æí
(errstr));

67 
	`wrôe
(
STDERR_FILENO
, "\n", 1);

68 
	`exô
(1);

69 
	}
}

72 
	$maö
(
¨gc
, *
¨gv
[])

74 
nÊag
;

75 
ve˛í
;

76 
iovec
 *
iov
, *
vp
;

77 
•a˚
[] = " ";

78 
√wlöe
[] = "\n";

79 *
¥og«me
 = 
¨gv
[0];

82 i‡(*++
¨gv
 && !
	`°rcmp
(*argv, "-n")) {

83 ++
¨gv
;

84 --
¨gc
;

85 
nÊag
 = 1;

87 
nÊag
 = 0;

89 
ve˛í
 = (
¨gc
 >= 2) ? (argc - 2) * 2 + 1 : 0;

91 i‡((
vp
 = 
iov
 = 
	`mÆloc
((
ve˛í
 + 1Ë* (
iovec
))Ë=
NULL
)

92 
	`îªxô
(
¥og«me
, "malloc");

94 
¨gv
[0] !
NULL
) {

95 
size_t
 
Àn
;

97 
Àn
 = 
	`°æí
(
¨gv
[0]);

104 i‡(
¨gv
[1] =
NULL
) {

106 i‡(
Àn
 >= 2 &&

107 
¨gv
[0][
Àn
 - 2] == '\\' &&

108 
¨gv
[0][
Àn
 - 1] == 'c') {

110 
Àn
 -= 2;

111 
nÊag
 = 1;

114 
vp
->
iov_ba£
 = *
¨gv
;

115 
vp
++->
iov_Àn
 = 
Àn
;

116 i‡(*++
¨gv
) {

117 
vp
->
iov_ba£
 = 
•a˚
;

118 
vp
++->
iov_Àn
 = 1;

121 i‡(!
nÊag
) {

122 
ve˛í
++;

123 
vp
->
iov_ba£
 = 
√wlöe
;

124 
vp
++->
iov_Àn
 = 1;

127 
ve˛í
) {

128 
nwrôe
;

130 
nwrôe
 = (
ve˛í
 > 
IOV_MAX
) ? IOV_MAX : veclen;

131 i‡(
	`wrôev
(
STDOUT_FILENO
, 
iov
, 
nwrôe
) == -1)

132 
	`îªxô
(
¥og«me
, "write");

133 
iov
 +
nwrôe
;

134 
ve˛í
 -
nwrôe
;

137 
	}
}

	@ed/buf.c

29 
	~<sys/cdefs.h
>

30 
__FBSDID
("$FreeBSD: src/bin/ed/buf.c,v 1.22.36.2.2.1 2012/03/03 06:15:13 kensmith Exp $");

32 
	~<sys/fûe.h
>

33 
	~<sys/°©.h
>

35 
	~"ed.h
"

38 
FILE
 *
	gsÂ
;

39 
off_t
 
	gsf£ek
;

40 
	g£ek_wrôe
;

41 
löe_t
 
	gbuf„r_hód
;

46 
	$gë_sbuf_löe
(
löe_t
 *
Õ
)

48 *
sfbuf
 = 
NULL
;

49 
sfbufsz
 = 0;

51 
Àn
, 
˘
;

53 i‡(
Õ
 =&
buf„r_hód
)

54  
NULL
;

55 
£ek_wrôe
 = 1;

57 i‡(
sf£ek
 !
Õ
->
£ek
) {

58 
sf£ek
 = 
Õ
->
£ek
;

59 i‡(
	`f£eko
(
sÂ
, 
sf£ek
, 
SEEK_SET
) < 0) {

60 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

61 
îrmsg
 = "cannot seekÅemp file";

62  
NULL
;

65 
Àn
 = 
Õ
->len;

66 
	`REALLOC
(
sfbuf
, 
sfbufsz
, 
Àn
 + 1, 
NULL
);

67 i‡((
˘
 = 
	`‰ód
(
sfbuf
, (), 
Àn
, 
sÂ
)) < 0 || ct !=Üen) {

68 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

69 
îrmsg
 = "cannotÑeadÅemp file";

70  
NULL
;

72 
sf£ek
 +
Àn
;

73 
sfbuf
[
Àn
] = '\0';

74  
sfbuf
;

75 
	}
}

81 
	$put_sbuf_löe
(c⁄° *
cs
)

83 
löe_t
 *
Õ
;

84 
Àn
, 
˘
;

85 c⁄° *
s
;

87 i‡((
Õ
 = (
löe_t
 *Ë
	`mÆloc
(÷öe_t))Ë=
NULL
) {

88 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

89 
îrmsg
 = "out of memory";

90  
NULL
;

93 
s
 = 
cs
; *s != '\n'; s++)

95 i‡(
s
 - 
cs
 >
LINECHARS
) {

96 
îrmsg
 = "lineÅooÜong";

97 
	`‰ì
(
Õ
);

98  
NULL
;

100 
Àn
 = 
s
 - 
cs
;

102 i‡(
£ek_wrôe
) {

103 i‡(
	`f£eko
(
sÂ
, (
off_t
)0, 
SEEK_END
) < 0) {

104 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

105 
îrmsg
 = "cannot seekÅemp file";

106 
	`‰ì
(
Õ
);

107  
NULL
;

109 
sf£ek
 = 
	`·ñlo
(
sÂ
);

110 
£ek_wrôe
 = 0;

113 i‡((
˘
 = 
	`fwrôe
(
cs
, (), 
Àn
, 
sÂ
)) < 0 || ct !=Üen) {

114 
sf£ek
 = -1;

115 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

116 
îrmsg
 = "cannot writeÅemp file";

117 
	`‰ì
(
Õ
);

118  
NULL
;

120 
Õ
->
Àn
 =Üen;

121 
Õ
->
£ek
 = 
sf£ek
;

122 
	`add_löe_node
(
Õ
);

123 
sf£ek
 +
Àn
;

124  ++
s
;

125 
	}
}

130 
	$add_löe_node
(
löe_t
 *
Õ
)

132 
löe_t
 *
˝
;

134 
˝
 = 
	`gë_addªs£d_löe_node
(
cuºít_addr
);

135 
	`INSQUE
(
Õ
, 
˝
);

136 
addr_œ°
++;

137 
cuºít_addr
++;

138 
	}
}

143 
	$gë_löe_node_addr
(
löe_t
 *
Õ
)

145 
löe_t
 *
˝
 = &
buf„r_hód
;

146 
n
 = 0;

148 
˝
 !
Õ
 && (˝ = cp->
q_f‹w
Ë!&
buf„r_hód
)

149 
n
++;

150 i‡(
n
 && 
˝
 =&
buf„r_hód
) {

151 
îrmsg
 = "invalidáddress";

152  
ERR
;

154  
n
;

155 
	}
}

159 
löe_t
 *

160 
	$gë_addªs£d_löe_node
(
n
)

162 
löe_t
 *
Õ
 = &
buf„r_hód
;

163 
⁄
 = 0;

165 
	`SPL1
();

166 i‡(
n
 > 
⁄
)

167 i‡(
n
 <(
⁄
 + 
addr_œ°
) >> 1)

168 ; 
⁄
 < 
n
; on++)

169 
Õ
 =Üp->
q_f‹w
;

171 
Õ
 = 
buf„r_hód
.
q_back
;

172 
⁄
 = 
addr_œ°
; o¿> 
n
; on--)

173 
Õ
 =Üp->
q_back
;

176 i‡(
n
 >
⁄
 >> 1)

177 ; 
⁄
 > 
n
; on--)

178 
Õ
 =Üp->
q_back
;

180 
Õ
 = &
buf„r_hód
;

181 
⁄
 = 0; o¿< 
n
; on++)

182 
Õ
 =Üp->
q_f‹w
;

184 
	`SPL0
();

185  
Õ
;

186 
	}
}

189 
√wlöe_added
;

191 
	gs‚
[15] = "";

195 
	$›í_sbuf
()

197 
fd
;

198 
u
;

200 
isbö¨y
 = 
√wlöe_added
 = 0;

201 
u
 = 
	`umask
(077);

202 
	`°r˝y
(
s‚
, "/tmp/ed.XXXXXX");

203 i‡((
fd
 = 
	`mk°emp
(
s‚
)) == -1 ||

204 (
sÂ
 = 
	`fd›í
(
fd
, "w+")Ë=
NULL
) {

205 i‡(
fd
 != -1)

206 
	`˛o£
(
fd
);

207 
	`≥º‹
(
s‚
);

208 
îrmsg
 = "cannot openÅemp file";

209 
	`umask
(
u
);

210  
ERR
;

212 
	`umask
(
u
);

214 
	}
}

219 
	$˛o£_sbuf
()

221 i‡(
sÂ
) {

222 i‡(
	`f˛o£
(
sÂ
) < 0) {

223 
	`Ârötf
(
°dîr
, "%s: %s\n", 
s‚
, 
	`°ªº‹
(
î∫o
));

224 
îrmsg
 = "cannot closeÅemp file";

225  
ERR
;

227 
sÂ
 = 
NULL
;

228 
	`u∆ök
(
s‚
);

230 
sf£ek
 = 
£ek_wrôe
 = 0;

232 
	}
}

237 
	$quô
(
n
)

239 i‡(
sÂ
) {

240 
	`f˛o£
(
sÂ
);

241 
	`u∆ök
(
s‚
);

243 
	`exô
(
n
);

244 
	}
}

247 
	g˘ab
[256];

251 
	$öô_buf„rs
()

253 
i
 = 0;

261 
	`£tbuf„r
(
°dö
, 
°döbuf
, 1);

265 
	`£tvbuf
(
°dout
, 
NULL
, 
_IOLBF
, 0);

266 i‡(
	`›í_sbuf
() < 0)

267 
	`quô
(2);

268 
	`REQUE
(&
buf„r_hód
, &buffer_head);

269 
i
 = 0; i < 256; i++)

270 
˘ab
[
i
] = i;

271 
	}
}

276 
	$å™¶ô_ãxt
(*
s
, 
Àn
, 
‰om
, 
to
)

278 
i
 = 0;

280 *
us
;

282 
˘ab
[
i
] = i;

283 
˘ab
[
i
 = 
‰om
] = 
to
;

284 
us
 = (*Ë
s
; 
Àn
-- > 0; us++)

285 *
us
 = 
˘ab
[*us];

286  
s
;

287 
	}
}

	@ed/cbc.c

34 
	~<sys/cdefs.h
>

35 
__FBSDID
("$FreeBSD: src/bin/ed/cbc.c,v 1.20.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

37 
	~<sys/ty≥s.h
>

38 
	~<î∫o.h
>

39 
	~<pwd.h
>

40 #ifde‡
DES


41 
	~<time.h
>

42 
	~<›ís¶/des.h
>

43 
	#ED_DES_INCLUDES


	)

46 
	~"ed.h
"

53 
	#MEMCPY
(
de°
,
§c
,
Àn
Ë
	`mem˝y
((de°),(§c),÷í))

	)

54 
	#MEMZERO
(
de°
,
Àn
Ë
	`mem£t
((de°), 0, (Àn))

	)

57 
	#DES_XFORM
(
buf
) \

58 
	`DES_ecb_í¸y±
(
buf
, buf, &
scheduÀ
, \

59 
övî£
 ? 
DES_DECRYPT
 : 
DES_ENCRYPT
);

	)

64 
	#READ
(
buf
, 
n
, 
Â
Ë
	`‰ód
(buf, (),Ç, fp)

	)

65 
	#WRITE
(
buf
, 
n
, 
Â
Ë
	`fwrôe
(buf, (),Ç, fp)

	)

72 
	mMODE_ENCRYPT
, 
	mMODE_DECRYPT
, 
	mMODE_AUTHENTICATE


73 } 
	gmode
 = 
MODE_ENCRYPT
;

75 #ifde‡
DES


76 
DES_cblock
 
	givec
;

77 
DES_cblock
 
	gpvec
;

80 
	gbôs
[] = {

84 
	gpÊag
;

86 #ifde‡
DES


87 
DES_key_scheduÀ
 
	gscheduÀ
;

90 
	gdes_buf
[8];

91 
	gdes_˘
 = 0;

92 
	gdes_n
 = 0;

96 
	$öô_des_cùhî
()

98 #ifde‡
DES


99 
i
;

101 
des_˘
 = 
des_n
 = 0;

104 
	`MEMZERO
(
ivec
, 8);

107 
i
 = 0; i < 8; i++)

108 
pvec
[
i
] = (Ë(
	`¨c4øndom
() % 256);

110 
	}
}

115 
	$gë_des_ch¨
(
FILE
 *
Â
)

117 #ifde‡
DES


118 i‡(
des_n
 >
des_˘
) {

119 
des_n
 = 0;

120 
des_˘
 = 
	`cbc_decode
(
des_buf
, 
Â
);

122  (
des_˘
 > 0Ë? 
des_buf
[
des_n
++] : 
EOF
;

124  (
	`gëc
(
Â
));

126 
	}
}

131 
	$put_des_ch¨
(
c
, 
FILE
 *
Â
)

133 #ifde‡
DES


134 i‡(
des_n
 = 
des_buf
) {

135 
des_˘
 = 
	`cbc_ícode
(
des_buf
, 
des_n
, 
Â
);

136 
des_n
 = 0;

138  (
des_˘
 >0Ë? (
des_buf
[
des_n
++] = 
c
Ë: 
EOF
;

140  (
	`Âutc
(
c
, 
Â
));

142 
	}
}

147 
	$Êush_des_fûe
(
FILE
 *
Â
)

149 #ifde‡
DES


150 i‡(
des_n
 = 
des_buf
) {

151 
des_˘
 = 
	`cbc_ícode
(
des_buf
, 
des_n
, 
Â
);

152 
des_n
 = 0;

154  (
des_˘
 >0 && 
	`cbc_ícode
(
des_buf
, 
des_n
, 
Â
Ë>0Ë? 0 : 
EOF
;

156  (
	`fÊush
(
Â
));

158 
	}
}

160 #ifde‡
DES


165 
	$gë_keyw‹d
()

167 *
p
;

168 
DES_cblock
 
msgbuf
;

173 i‡(*(
p
 = 
	`gë∑ss
("Enter key: "))) {

178 
	`ex∑nd_des_key
(
msgbuf
, 
p
);

179 
	`MEMZERO
(
p
, 
_PASSWORD_LEN
);

180 
	`£t_des_key
(&
msgbuf
);

181 
	`MEMZERO
(
msgbuf
,  msgbuf);

185 
	}
}

192 
	$des_îr‹
(c⁄° *
s
)

194 
îrmsg
 = 
s
 ? s : 
	`°ªº‹
(
î∫o
);

195 
	}
}

201 
	$hex_to_bö¨y
(
c
, 
ødix
)

203 
c
) {

206 '2': (
ødix
 > 2 ? 0x2 : -1);

207 '3': (
ødix
 > 3 ? 0x3 : -1);

208 '4': (
ødix
 > 4 ? 0x4 : -1);

209 '5': (
ødix
 > 5 ? 0x5 : -1);

210 '6': (
ødix
 > 6 ? 0x6 : -1);

211 '7': (
ødix
 > 7 ? 0x7 : -1);

212 '8': (
ødix
 > 8 ? 0x8 : -1);

213 '9': (
ødix
 > 9 ? 0x9 : -1);

214 'A': 'a': (
ødix
 > 10 ? 0xa : -1);

215 'B': 'b': (
ødix
 > 11 ? 0xb : -1);

216 'C': 'c': (
ødix
 > 12 ? 0xc : -1);

217 'D': 'd': (
ødix
 > 13 ? 0xd : -1);

218 'E': 'e': (
ødix
 > 14 ? 0xe : -1);

219 'F': 'f': (
ødix
 > 15 ? 0xf : -1);

225 
	}
}

233 
	$ex∑nd_des_key
(*
obuf
, *
kbuf
)

235 
i
, 
j
;

236 
nbuf
[64];

241 i‡(
kbuf
[0] == '0' && (kbuf[1] == 'x' || kbuf[1] == 'X')) {

242 
kbuf
 = &kbuf[2];

246 
i
 = 0; 
kbuf
[i] && i < 16; i++)

247 i‡((
nbuf
[
i
] = 
	`hex_to_bö¨y
((Ë
kbuf
[i], 16)) == -1)

248 
	`des_îr‹
("bad hex digit in key");

249 
i
 < 16)

250 
nbuf
[
i
++] = 0;

251 
i
 = 0; i < 8; i++)

252 
obuf
[
i
] =

253 ((
nbuf
[2*
i
]&0xf)<<4) | (nbuf[2*i+1]&0xf);

255 
pÊag
 = 1;

261 i‡(
kbuf
[0] == '0' && (kbuf[1] == 'b' || kbuf[1] == 'B')) {

262 
kbuf
 = &kbuf[2];

266 
i
 = 0; 
kbuf
[i] && i < 16; i++)

267 i‡((
nbuf
[
i
] = 
	`hex_to_bö¨y
((Ë
kbuf
[i], 2)) == -1)

268 
	`des_îr‹
("bad binary digit in key");

269 
i
 < 64)

270 
nbuf
[
i
++] = 0;

271 
i
 = 0; i < 8; i++)

272 
j
 = 0; j < 8; j++)

273 
obuf
[
i
] = (obuf[i]<<1)|
nbuf
[8*i+
j
];

275 
pÊag
 = 1;

281 ()
	`°∫˝y
(
obuf
, 
kbuf
, 8);

282 
	}
}

299 
	$£t_des_key
(
DES_cblock
 *
buf
)

301 
i
, 
j
;

302 
∑r
;

307 i‡(!
pÊag
) {

308 
i
 = 0; i < 8; i++) {

309 
∑r
 = 0;

310 
j
 = 1; j < 8; j++)

311 i‡((
bôs
[
j
] & (*
buf
)[
i
]) != 0)

312 
∑r
++;

313 i‡((
∑r
 & 0x01) == 0x01)

314 (*
buf
)[
i
] &= 0x7f;

316 (*
buf
)[
i
] = ((*buf)[i] & 0x7f) | 0x80;

320 
	`DES_£t_odd_∑rôy
(
buf
);

321 
	`DES_£t_key
(
buf
, &
scheduÀ
);

322 
	}
}

329 
	$cbc_ícode
(*
msgbuf
, 
n
, 
FILE
 *
Â
)

331 
övî£
 = 0;

336 i‡(
n
 == 8) {

337 
n
 = 0;Ç < 8;Ç++)

338 
msgbuf
[
n
] ^
ivec
[n];

339 
	`DES_XFORM
((
DES_cblock
 *)
msgbuf
);

340 
	`MEMCPY
(
ivec
, 
msgbuf
, 8);

341  
	`WRITE
(
msgbuf
, 8, 
Â
);

353 ()
	`MEMCPY
(
msgbuf
 + 
n
, 
pvec
, 8 -Ç);

354 
msgbuf
[7] = 
n
;

355 
n
 = 0;Ç < 8;Ç++)

356 
msgbuf
[
n
] ^
ivec
[n];

357 
	`DES_XFORM
((
DES_cblock
 *)
msgbuf
);

358  
	`WRITE
(
msgbuf
, 8, 
Â
);

359 
	}
}

367 
	$cbc_decode
(*
msgbuf
, 
FILE
 *
Â
)

369 
DES_cblock
 
tbuf
;

370 
n
;

371 
c
;

372 
övî£
 = 1;

374 i‡((
n
 = 
	`READ
(
msgbuf
, 8, 
Â
)) == 8) {

378 
	`MEMCPY
(
tbuf
, 
msgbuf
, 8);

379 
	`DES_XFORM
((
DES_cblock
 *)
msgbuf
);

380 
c
 = 0; c < 8; c++)

381 
msgbuf
[
c
] ^
ivec
[c];

382 
	`MEMCPY
(
ivec
, 
tbuf
, 8);

386 i‡((
c
 = 
	`fgëc
(
Â
)Ë=
EOF
) {

387 
n
 = 
msgbuf
[7];

388 i‡(
n
 < 0 ||Ç > 7) {

389 
	`des_îr‹
("decryption failed (block corrupted)");

390  
EOF
;

393 ()
	`ungëc
(
c
, 
Â
);

394  
n
;

396 i‡(
n
 > 0)

397 
	`des_îr‹
("decryption failed (incomplete block)");

398 i‡(
n
 < 0)

399 
	`des_îr‹
("cannotÑead file");

400  
EOF
;

401 
	}
}

	@ed/ed.h

31 
	~<sys/∑øm.h
>

32 
	~<î∫o.h
>

33 
	~<limôs.h
>

34 
	~<ªgex.h
>

35 
	~<sig«l.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

39 
	~<uni°d.h
>

41 
	#ERR
 (-2)

	)

42 
	#EMOD
 (-3)

	)

43 
	#FATAL
 (-4)

	)

45 
	#MINBUFSZ
 512

	)

46 
	#SE_MAX
 30

	)

47 #ifde‡
INT_MAX


48 
	#LINECHARS
 
INT_MAX


	)

50 
	#LINECHARS
 
MAXINT


	)

54 
	#GLB
 001

	)

55 
	#GPR
 002

	)

56 
	#GLS
 004

	)

57 
	#GNP
 010

	)

58 
	#GSG
 020

	)

60 
ªgex_t
 
	t∑âîn_t
;

63 
	slöe
 {

64 
löe
 *
	mq_f‹w
;

65 
löe
 *
	mq_back
;

66 
off_t
 
	m£ek
;

67 
	mÀn
;

68 } 
	tlöe_t
;

71 
	sundo
 {

74 
	#UADD
 0

	)

75 
	#UDEL
 1

	)

76 
	#UMOV
 2

	)

77 
	#VMOV
 3

	)

79 
	mty≥
;

80 
löe_t
 *
	mh
;

81 
löe_t
 *
	mt
;

82 } 
	tundo_t
;

84 #i‚de‡
max


85 
	#max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

87 #i‚de‡
mö


88 
	#mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

91 
	#INC_MOD
(
l
, 
k
Ë(÷Ë+ 1 > (kË? 0 : (lË+ 1)

	)

92 
	#DEC_MOD
(
l
, 
k
Ë(÷Ë- 1 < 0 ? (kË: (lË- 1)

	)

95 
	#SPL1
(Ë
muãx
++

	)

98 
	#SPL0
() \

99 i‡(--
muãx
 == 0) { \

100 i‡(
sigÊags
 & (1 << (
SIGHUP
 - 1))Ë
	`h™dÀ_hup
(SIGHUP); \

101 i‡(
sigÊags
 & (1 << (
SIGINT
 - 1))Ë
	`h™dÀ_öt
(SIGINT); \

102 }

	)

105 
	#STRTOL
(
i
, 
p
) { \

106 i‡(((
i
 = 
	`°πﬁ
(
p
, &p, 10)Ë=
LONG_MIN
 || i =
LONG_MAX
) && \

107 
î∫o
 =
ERANGE
) { \

108 
îrmsg
 = "number out ofÑange"; \

109 
i
 = 0; \

110  
ERR
; \

112 }

	)

114 #i‡
deföed
(
sun
Ë|| deföed(
NO_REALLOC_NULL
)

116 
	#REALLOC
(
b
,
n
,
i
,
îr
) \

117 i‡((
i
Ë> (
n
)) { \

118 
ti
 = (
n
); \

119 *
ts
; \

120 
	`SPL1
(); \

121 i‡((
b
Ë!
NULL
) { \

122 i‡((
ts
 = (*Ë
	`ªÆloc
((
b
), 
ti
 +
	`max
((
i
), 
MINBUFSZ
))Ë=
NULL
) { \

123 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
)); \

124 
îrmsg
 = "out of memory"; \

125 
	`SPL0
(); \

126  
îr
; \

129 i‡((
ts
 = (*Ë
	`mÆloc
(
ti
 +
	`max
((
i
), 
MINBUFSZ
))Ë=
NULL
) { \

130 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
)); \

131 
îrmsg
 = "out of memory"; \

132 
	`SPL0
(); \

133  
îr
; \

136 (
n
Ë
ti
; \

137 (
b
Ë
ts
; \

138 
	`SPL0
(); \

139 }

	)

142 
	#REALLOC
(
b
,
n
,
i
,
îr
) \

143 i‡((
i
Ë> (
n
)) { \

144 
ti
 = (
n
); \

145 *
ts
; \

146 
	`SPL1
(); \

147 i‡((
ts
 = (*Ë
	`ªÆloc
((
b
), 
ti
 +
	`max
((
i
), 
MINBUFSZ
))Ë=
NULL
) { \

148 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
)); \

149 
îrmsg
 = "out of memory"; \

150 
	`SPL0
(); \

151  
îr
; \

153 (
n
Ë
ti
; \

154 (
b
Ë
ts
; \

155 
	`SPL0
(); \

156 }

	)

160 
	#REQUE
(
¥ed
, 
succ
Ë’ªd)->
q_f‹w
 = (succ), (succ)->
q_back
 = (¥ed)

	)

163 
	#INSQUE
(
ñem
, 
¥ed
) \

165 
	`REQUE
((
ñem
), (
¥ed
)->
q_f‹w
); \

166 
	`REQUE
((
¥ed
), 
ñem
); \

167 }

	)

170 
	#REMQUE
(
ñem
Ë
	`REQUE
(”Àm)->
q_back
, (ñem)->
q_f‹w
);

	)

173 
	#NUL_TO_NEWLINE
(
s
, 
l
Ë
	`å™¶ô_ãxt
(s,Ü, '\0', '\n')

	)

176 
	#NEWLINE_TO_NUL
(
s
, 
l
Ë
	`å™¶ô_ãxt
(s,Ü, '\n', '\0')

	)

178 #ifde‡
ED_DES_INCLUDES


179 
des_îr‹
(const *);

180 
ex∑nd_des_key
(*, *);

181 
£t_des_key
(
DES_cblock
 *);

185 
öô_des_cùhî
();

186 
Êush_des_fûe
(
FILE
 *);

187 
gë_des_ch¨
(
FILE
 *);

188 
put_des_ch¨
(, 
FILE
 *);

191 
add_löe_node
(
löe_t
 *);

192 
≠≥nd_löes
();

193 
≠∂y_sub°_ãm∂©e
(c⁄° *, 
ªgm©ch_t
 *, , );

194 
buûd_a˘ive_li°
();

195 
cbc_decode
(*, 
FILE
 *);

196 
cbc_ícode
(*, , 
FILE
 *);

197 
check_addr_ønge
(, );

198 
˛ór_a˘ive_li°
();

199 
˛ór_undo_°ack
();

200 
˛o£_sbuf
();

201 
c›y_löes
();

202 
dñëe_löes
(, );

203 
di•œy_löes
(, , );

204 
löe_t
 *
dup_löe_node
(line_t *);

205 
exec_comm™d
();

206 
exec_globÆ
(, );

207 
exåa˘_addr_ønge
();

208 *
exåa˘_∑âîn
();

209 
exåa˘_sub°_èû
(*, *);

210 *
exåa˘_sub°_ãm∂©e
();

211 
fûãr_löes
(, , *);

212 
löe_t
 *
gë_addªs£d_löe_node
();

213 
∑âîn_t
 *
gë_compûed_∑âîn
();

214 *
gë_exãnded_löe
(*, );

215 *
gë_fûíame
();

216 
gë_keyw‹d
();

217 
gë_löe_node_addr
(
löe_t
 *);

218 
gë_m©chög_node_addr
(
∑âîn_t
 *, );

219 
gë_m¨ked_node_addr
();

220 *
gë_sbuf_löe
(
löe_t
 *);

221 
gë_shñl_comm™d
();

222 
gë_°ªam_löe
(
FILE
 *);

223 
gë_ây_löe
();

224 
h™dÀ_hup
();

225 
h™dÀ_öt
();

226 
h™dÀ_wöch
();

227 
has_åaûög_esˇ≥
(*, *);

228 
hex_to_bö¨y
(, );

229 
öô_buf„rs
();

230 
is_ÀgÆ_fûíame
(*);

231 
joö_löes
(, );

232 
m¨k_löe_node
(
löe_t
 *, );

233 
move_löes
();

234 
löe_t
 *
√xt_a˘ive_node
();

235 
√xt_addr
();

236 
›í_sbuf
();

237 *
∑r£_ch¨_˛ass
(*);

238 
p›_undo_°ack
();

239 
undo_t
 *
push_undo_°ack
(, , );

240 c⁄° *
put_sbuf_löe
(const *);

241 
put_°ªam_löe
(
FILE
 *, const *, );

242 
put_ây_löe
(const *, , , );

243 
quô
();

244 
ªad_fûe
(*, );

245 
ªad_°ªam
(
FILE
 *, );

246 
£¨ch_™d_ª∂a˚
(
∑âîn_t
 *, , );

247 
£t_a˘ive_node
(
löe_t
 *);

248 
sig«l_hup
();

249 
sig«l_öt
();

250 *
°rù_esˇ≥s
(*);

251 
sub°ôuã_m©chög_ãxt
(
∑âîn_t
 *, 
löe_t
 *, , );

252 *
å™¶ô_ãxt
(*, , , );

253 
unm¨k_löe_node
(
löe_t
 *);

254 
un£t_a˘ive_nodes
(
löe_t
 *,Üine_t *);

255 
wrôe_fûe
(*, const *, , );

256 
wrôe_°ªam
(
FILE
 *, , );

259 
°döbuf
[];

260 *
ibuf
;

261 *
ibuÂ
;

262 
ibufsz
;

265 
isbö¨y
;

266 
isglobÆ
;

267 
modifõd
;

268 
muãx
;

269 
sigÊags
;

272 
addr_œ°
;

273 
cuºít_addr
;

274 c⁄° *
îrmsg
;

275 
fú°_addr
;

276 
löío
;

277 
£c⁄d_addr
;

278 
u_addr_œ°
;

279 
u_cuºít_addr
;

	@ed/glbl.c

29 
	~<sys/cdefs.h
>

30 
__FBSDID
("$FreeBSD: src/bin/ed/glbl.c,v 1.13.36.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

32 
	~<sys/ty≥s.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/waô.h
>

36 
	~"ed.h
"

41 
	$buûd_a˘ive_li°
(
isgcmd
)

43 
∑âîn_t
 *
∑t
;

44 
löe_t
 *
Õ
;

45 
n
;

46 *
s
;

47 
dñimôî
;

49 i‡((
dñimôî
 = *
ibuÂ
) == ' ' || delimiter == '\n') {

50 
îrmsg
 = "invalidÖattern delimiter";

51  
ERR
;

52 } i‡((
∑t
 = 
	`gë_compûed_∑âîn
()Ë=
NULL
)

53  
ERR
;

54 i‡(*
ibuÂ
 =
dñimôî
)

55 
ibuÂ
++;

56 
	`˛ór_a˘ive_li°
();

57 
Õ
 = 
	`gë_addªs£d_löe_node
(
fú°_addr
);

58 
n
 = 
fú°_addr
;Ç <
£c⁄d_addr
;Ç++, 
Õ
 =Üp->
q_f‹w
) {

59 i‡((
s
 = 
	`gë_sbuf_löe
(
Õ
)Ë=
NULL
)

60  
ERR
;

61 i‡(
isbö¨y
)

62 
	`NUL_TO_NEWLINE
(
s
, 
Õ
->
Àn
);

63 i‡(!
	`ªgexec
(
∑t
, 
s
, 0, 
NULL
, 0Ë=
isgcmd
 &&

64 
	`£t_a˘ive_node
(
Õ
) < 0)

65  
ERR
;

68 
	}
}

74 
	$exec_globÆ
(
öãø˘
, 
gÊag
)

76 *
ocmd
 = 
NULL
;

77 
ocmdsz
 = 0;

79 
löe_t
 *
Õ
 = 
NULL
;

80 
°©us
;

81 
n
;

82 *
cmd
 = 
NULL
;

84 #ifde‡
BACKWARDS


85 i‡(!
öãø˘
)

86 i‡(!
	`°rcmp
(
ibuÂ
, "\n"))

87 
cmd
 = "p\n";

88 i‡((
cmd
 = 
	`gë_exãnded_löe
(&
n
, 0)Ë=
NULL
)

89  
ERR
;

91 i‡(!
öãø˘
 && (
cmd
 = 
	`gë_exãnded_löe
(&
n
, 0)Ë=
NULL
)

92  
ERR
;

94 
	`˛ór_undo_°ack
();

95 (
Õ
 = 
	`√xt_a˘ive_node
()Ë!
NULL
) {

96 i‡((
cuºít_addr
 = 
	`gë_löe_node_addr
(
Õ
)) < 0)

97  
ERR
;

98 i‡(
öãø˘
) {

100 i‡(
	`di•œy_löes
(
cuºít_addr
, cuºít_addr, 
gÊag
) < 0)

101  
ERR
;

102 (
n
 = 
	`gë_ây_löe
()) > 0 &&

103 
ibuf
[
n
 - 1] != '\n')

104 
	`˛óªº
(
°dö
);

105 i‡(
n
 < 0)

106  
ERR
;

107 i‡(
n
 == 0) {

108 
îrmsg
 = "unexpectedÉnd-of-file";

109  
ERR
;

110 } i‡(
n
 =1 && !
	`°rcmp
(
ibuf
, "\n"))

112 i‡(
n
 =2 && !
	`°rcmp
(
ibuf
, "&\n")) {

113 i‡(
cmd
 =
NULL
) {

114 
îrmsg
 = "noÖrevious command";

115  
ERR
;

116 } 
cmd
 = 
ocmd
;

117 } i‡((
cmd
 = 
	`gë_exãnded_löe
(&
n
, 0)Ë=
NULL
)

118  
ERR
;

120 
	`REALLOC
(
ocmd
, 
ocmdsz
, 
n
 + 1, 
ERR
);

121 
	`mem˝y
(
ocmd
, 
cmd
, 
n
 + 1);

122 
cmd
 = 
ocmd
;

126 
ibuÂ
 = 
cmd
;

127 ; *
ibuÂ
;)

128 i‡((
°©us
 = 
	`exåa˘_addr_ønge
()) < 0 ||

129 (
°©us
 = 
	`exec_comm™d
()) < 0 ||

130 (
°©us
 > 0 && (°©u†
	`di•œy_löes
(

131 
cuºít_addr
, cuºít_addr, 
°©us
)) < 0))

132  
°©us
;

135 
	}
}

138 
löe_t
 **
	ga˘ive_li°
;

139 
	ga˘ive_œ°
;

140 
	ga˘ive_size
;

141 
	ga˘ive_±r
;

142 
	ga˘ive_ndx
;

146 
	$£t_a˘ive_node
(
löe_t
 *
Õ
)

148 i‡(
a˘ive_œ°
 + 1 > 
a˘ive_size
) {

149 
ti
 = 
a˘ive_size
;

150 
löe_t
 **
ts
;

151 
	`SPL1
();

152 #i‡
	`deföed
(
sun
Ë|| deföed(
NO_REALLOC_NULL
)

153 i‡(
a˘ive_li°
 !
NULL
) {

155 i‡((
ts
 = (
löe_t
 **Ë
	`ªÆloc
(
a˘ive_li°
,

156 (
ti
 +
MINBUFSZ
Ë* (
löe_t
 **))Ë=
NULL
) {

157 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

158 
îrmsg
 = "out of memory";

159 
	`SPL0
();

160  
ERR
;

162 #i‡
	`deföed
(
sun
Ë|| deföed(
NO_REALLOC_NULL
)

164 i‡((
ts
 = (
löe_t
 **Ë
	`mÆloc
((
ti
 +
MINBUFSZ
) *

165 (
löe_t
 **))Ë=
NULL
) {

166 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

167 
îrmsg
 = "out of memory";

168 
	`SPL0
();

169  
ERR
;

173 
a˘ive_size
 = 
ti
;

174 
a˘ive_li°
 = 
ts
;

175 
	`SPL0
();

177 
a˘ive_li°
[
a˘ive_œ°
++] = 
Õ
;

179 
	}
}

184 
	$un£t_a˘ive_nodes
(
löe_t
 *
≈
,Üöe_à*
mp
)

186 
löe_t
 *
Õ
;

187 
i
;

189 
Õ
 = 
≈
;Ü∞!
mp
;Ü∞Õ->
q_f‹w
)

190 
i
 = 0; i < 
a˘ive_œ°
; i++)

191 i‡(
a˘ive_li°
[
a˘ive_ndx
] =
Õ
) {

192 
a˘ive_li°
[
a˘ive_ndx
] = 
NULL
;

193 
a˘ive_ndx
 = 
	`INC_MOD
◊˘ive_ndx, 
a˘ive_œ°
 - 1);

195 } 
a˘ive_ndx
 = 
	`INC_MOD
◊˘ive_ndx, 
a˘ive_œ°
 - 1);

196 
	}
}

200 
löe_t
 *

201 
	$√xt_a˘ive_node
()

203 
a˘ive_±r
 < 
a˘ive_œ°
 && 
a˘ive_li°
[a˘ive_±r] =
NULL
)

204 
a˘ive_±r
++;

205  (
a˘ive_±r
 < 
a˘ive_œ°
Ë? 
a˘ive_li°
[a˘ive_±r++] : 
NULL
;

206 
	}
}

211 
	$˛ór_a˘ive_li°
()

213 
	`SPL1
();

214 
a˘ive_size
 = 
a˘ive_œ°
 = 
a˘ive_±r
 = 
a˘ive_ndx
 = 0;

215 
	`‰ì
(
a˘ive_li°
);

216 
a˘ive_li°
 = 
NULL
;

217 
	`SPL0
();

218 
	}
}

	@ed/io.c

28 
	~<sys/cdefs.h
>

29 
__FBSDID
("$FreeBSD: src/bin/ed/io.c,v 1.14.34.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

31 
	~"ed.h
"

34 
s¸ùãd
;

38 
	$ªad_fûe
(*
‚
, 
n
)

40 
FILE
 *
Â
;

41 
size
;

44 
Â
 = (*
‚
 ='!'Ë? 
	`p›í
(‚ + 1, "r"Ë: 
	`f›í
(
	`°rù_esˇ≥s
(fn), "r");

45 i‡(
Â
 =
NULL
) {

46 
	`Ârötf
(
°dîr
, "%s: %s\n", 
‚
, 
	`°ªº‹
(
î∫o
));

47 
îrmsg
 = "cannot open input file";

48  
ERR
;

49 } i‡((
size
 = 
	`ªad_°ªam
(
Â
, 
n
)) < 0)

50  
ERR
;

51 i‡(((*
‚
 ='!'Ë? 
	`p˛o£
(
Â
Ë: 
	`f˛o£
(fp)) < 0) {

52 
	`Ârötf
(
°dîr
, "%s: %s\n", 
‚
, 
	`°ªº‹
(
î∫o
));

53 
îrmsg
 = "cannot close input file";

54  
ERR
;

56 
	`Ârötf
(
°dout
, !
s¸ùãd
 ? "%lu\n" : "", 
size
);

57  
cuºít_addr
 - 
n
;

58 
	}
}

61 
des
;

63 *
	gsbuf
;

64 
	gsbufsz
;

65 
	g√wlöe_added
;

69 
	$ªad_°ªam
(
FILE
 *
Â
, 
n
)

71 
löe_t
 *
Õ
 = 
	`gë_addªs£d_löe_node
(
n
);

72 
undo_t
 *
up
 = 
NULL
;

73 
size
 = 0;

74 
o_√wlöe_added
 = 
√wlöe_added
;

75 
o_isbö¨y
 = 
isbö¨y
;

76 
≠≥nded
 = (
n
 =
addr_œ°
);

77 
Àn
;

79 
isbö¨y
 = 
√wlöe_added
 = 0;

80 i‡(
des
)

81 
	`öô_des_cùhî
();

82 
cuºít_addr
 = 
n
; (
Àn
 = 
	`gë_°ªam_löe
(
Â
)Ë> 0; 
size
 +=Üen) {

83 
	`SPL1
();

84 i‡(
	`put_sbuf_löe
(
sbuf
Ë=
NULL
) {

85 
	`SPL0
();

86  
ERR
;

88 
Õ
 =Üp->
q_f‹w
;

89 i‡(
up
)

90 
up
->
t
 = 
Õ
;

91 i‡((
up
 = 
	`push_undo_°ack
(
UADD
, 
cuºít_addr
,

92 
cuºít_addr
)Ë=
NULL
) {

93 
	`SPL0
();

94  
ERR
;

96 
	`SPL0
();

98 i‡(
Àn
 < 0)

99  
ERR
;

100 i‡(
≠≥nded
 && 
size
 && 
o_isbö¨y
 && 
o_√wlöe_added
)

101 
	`Âuts
("√wlöêö£πed\n", 
°dîr
);

102 i‡(
√wlöe_added
 && (!
≠≥nded
 || (!
isbö¨y
 && !
o_isbö¨y
)))

103 
	`Âuts
("√wlöê≠≥nded\n", 
°dîr
);

104 i‡(
isbö¨y
 && 
√wlöe_added
 && !
≠≥nded
)

105 
size
 += 1;

106 i‡(!
size
)

107 
√wlöe_added
 = 1;

108 
√wlöe_added
 = 
≠≥nded
 ?Çewlöe_added : 
o_√wlöe_added
;

109 
isbö¨y
 = isbö¨y | 
o_isbö¨y
;

110 i‡(
des
)

111 
size
 += 8 - size % 8;

112  
size
;

113 
	}
}

118 
	$gë_°ªam_löe
(
FILE
 *
Â
)

120 
c
;

121 
i
 = 0;

123 ((
c
 = 
des
 ? 
	`gë_des_ch¨
(
Â
Ë: 
	`gëc
(Â)Ë!
EOF
 || (!
	`„of
(fp) &&

124 !
	`„º‹
(
Â
))Ë&& 
c
 != '\n') {

125 
	`REALLOC
(
sbuf
, 
sbufsz
, 
i
 + 1, 
ERR
);

126 i‡(!(
sbuf
[
i
++] = 
c
))

127 
isbö¨y
 = 1;

129 
	`REALLOC
(
sbuf
, 
sbufsz
, 
i
 + 2, 
ERR
);

130 i‡(
c
 == '\n')

131 
sbuf
[
i
++] = 
c
;

132 i‡(
	`„º‹
(
Â
)) {

133 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

134 
îrmsg
 = "cannotÑead input file";

135  
ERR
;

136 } i‡(
i
) {

137 
sbuf
[
i
++] = '\n';

138 
√wlöe_added
 = 1;

140 
sbuf
[
i
] = '\0';

141  (
isbö¨y
 && 
√wlöe_added
 && 
i
) ? --i : i;

142 
	}
}

147 
	$wrôe_fûe
(*
‚
, c⁄° *
mode
, 
n
, 
m
)

149 
FILE
 *
Â
;

150 
size
;

152 
Â
 = (*
‚
 ='!'Ë? 
	`p›í
(‚+1, "w"Ë: 
	`f›í
(
	`°rù_esˇ≥s
(‚), 
mode
);

153 i‡(
Â
 =
NULL
) {

154 
	`Ârötf
(
°dîr
, "%s: %s\n", 
‚
, 
	`°ªº‹
(
î∫o
));

155 
îrmsg
 = "cannot open output file";

156  
ERR
;

157 } i‡((
size
 = 
	`wrôe_°ªam
(
Â
, 
n
, 
m
)) < 0)

158  
ERR
;

159 i‡(((*
‚
 ='!'Ë? 
	`p˛o£
(
Â
Ë: 
	`f˛o£
(fp)) < 0) {

160 
	`Ârötf
(
°dîr
, "%s: %s\n", 
‚
, 
	`°ªº‹
(
î∫o
));

161 
îrmsg
 = "cannot close output file";

162  
ERR
;

164 
	`Ârötf
(
°dout
, !
s¸ùãd
 ? "%lu\n" : "", 
size
);

165  
n
 ? 
m
 -Ç + 1 : 0;

166 
	}
}

171 
	$wrôe_°ªam
(
FILE
 *
Â
, 
n
, 
m
)

173 
löe_t
 *
Õ
 = 
	`gë_addªs£d_löe_node
(
n
);

174 
size
 = 0;

175 *
s
;

176 
Àn
;

178 i‡(
des
)

179 
	`öô_des_cùhî
();

180 ; 
n
 &&Ç <
m
;Ç++, 
Õ
 =Üp->
q_f‹w
) {

181 i‡((
s
 = 
	`gë_sbuf_löe
(
Õ
)Ë=
NULL
)

182  
ERR
;

183 
Àn
 = 
Õ
->len;

184 i‡(
n
 !
addr_œ°
 || !
isbö¨y
 || !
√wlöe_added
)

185 
s
[
Àn
++] = '\n';

186 i‡(
	`put_°ªam_löe
(
Â
, 
s
, 
Àn
) < 0)

187  
ERR
;

188 
size
 +
Àn
;

190 i‡(
des
) {

191 
	`Êush_des_fûe
(
Â
);

192 
size
 += 8 - size % 8;

194  
size
;

195 
	}
}

200 
	$put_°ªam_löe
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
)

202 
Àn
--)

203 i‡((
des
 ? 
	`put_des_ch¨
(*
s
++, 
Â
Ë: 
	`Âutc
(*s++, fp)) < 0) {

204 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

205 
îrmsg
 = "cannot write file";

206  
ERR
;

209 
	}
}

213 
	$gë_exãnded_löe
(*
sizï
, 
n⁄l
)

215 *
cvbuf
 = 
NULL
;

216 
cvbufsz
 = 0;

218 
l
, 
n
;

219 *
t
 = 
ibuÂ
;

221 *
t
++ != '\n')

223 i‡((
l
 = 
t
 - 
ibuÂ
Ë< 2 || !
	`has_åaûög_esˇ≥
(ibufp, ibufp +Ü - 1)) {

224 *
sizï
 = 
l
;

225  
ibuÂ
;

227 *
sizï
 = -1;

228 
	`REALLOC
(
cvbuf
, 
cvbufsz
, 
l
, 
NULL
);

229 
	`mem˝y
(
cvbuf
, 
ibuÂ
, 
l
);

230 *(
cvbuf
 + --
l
 - 1) = '\n';

231 i‡(
n⁄l
Ë
l
--;

233 i‡((
n
 = 
	`gë_ây_löe
()) < 0)

234  
NULL
;

235 i‡(
n
 =0 || 
ibuf
[n - 1] != '\n') {

236 
îrmsg
 = "unexpectedÉnd-of-file";

237  
NULL
;

239 
	`REALLOC
(
cvbuf
, 
cvbufsz
, 
l
 + 
n
, 
NULL
);

240 
	`mem˝y
(
cvbuf
 + 
l
, 
ibuf
, 
n
);

241 
l
 +
n
;

242 i‡(
n
 < 2 || !
	`has_åaûög_esˇ≥
(
cvbuf
, cvbu‡+ 
l
 - 1))

244 *(
cvbuf
 + --
l
 - 1) = '\n';

245 i‡(
n⁄l
Ë
l
--;

247 
	`REALLOC
(
cvbuf
, 
cvbufsz
, 
l
 + 1, 
NULL
);

248 
cvbuf
[
l
] = '\0';

249 *
sizï
 = 
l
;

250  
cvbuf
;

251 
	}
}

256 
	$gë_ây_löe
()

258 
oi
 = 0;

259 
i
 = 0;

260 
c
;

263 
c
 = 
	`gëch¨
()) {

265 
oi
 = 0;

266 
	`REALLOC
(
ibuf
, 
ibufsz
, 
i
 + 2, 
ERR
);

267 i‡(!(
ibuf
[
i
++] = 
c
)Ë
isbö¨y
 = 1;

268 i‡(
c
 != '\n')

270 
löío
++;

271 
ibuf
[
i
] = '\0';

272 
ibuÂ
 = 
ibuf
;

273  
i
;

274 
EOF
:

275 i‡(
	`„º‹
(
°dö
)) {

276 
	`Ârötf
(
°dîr
, "°dö: %s\n", 
	`°ªº‹
(
î∫o
));

277 
îrmsg
 = "cannotÑead stdin";

278 
	`˛óªº
(
°dö
);

279 
ibuÂ
 = 
NULL
;

280  
ERR
;

282 
	`˛óªº
(
°dö
);

283 i‡(
i
 !
oi
) {

284 
oi
 = 
i
;

286 } i‡(
i
)

287 
ibuf
[
i
] = '\0';

288 
ibuÂ
 = 
ibuf
;

289  
i
;

292 
	}
}

296 
	#ESCAPES
 "\a\b\f\n\r\t\v\\"

	)

297 
	#ESCCHARS
 "ab‚πv\\"

	)

299 
rows
;

300 
cﬁs
;

304 
	$put_ây_löe
(c⁄° *
s
, 
l
, 
n
, 
gÊag
)

306 
cﬁ
 = 0;

307 
lc
 = 0;

308 *
˝
;

310 i‡(
gÊag
 & 
GNP
) {

311 
	`¥ötf
("%ld\t", 
n
);

312 
cﬁ
 = 8;

314 ; 
l
--; 
s
++) {

315 i‡((
gÊag
 & 
GLS
Ë&& ++
cﬁ
 > 
cﬁs
) {

316 
	`Âuts
("\\\n", 
°dout
);

317 
cﬁ
 = 1;

318 #i‚de‡
BACKWARDS


319 i‡(!
s¸ùãd
 && !
isglobÆ
 && ++
lc
 > 
rows
) {

320 
lc
 = 0;

321 
	`Âuts
("Pªs†<RETURN>Åÿc⁄töue... ", 
°dout
);

322 
	`fÊush
(
°dout
);

323 i‡(
	`gë_ây_löe
() < 0)

324  
ERR
;

328 i‡(
gÊag
 & 
GLS
) {

329 i‡(31 < *
s
 && *s < 127 && *s != '\\')

330 
	`putch¨
(*
s
);

332 
	`putch¨
('\\');

333 
cﬁ
++;

334 i‡(*
s
 && (
˝
 = 
	`°rchr
(
ESCAPES
, *s)Ë!
NULL
)

335 
	`putch¨
(
ESCCHARS
[
˝
 - 
ESCAPES
]);

337 
	`putch¨
((((Ë*
s
 & 0300) >> 6) + '0');

338 
	`putch¨
((((Ë*
s
 & 070) >> 3) + '0');

339 
	`putch¨
(((Ë*
s
 & 07) + '0');

340 
cﬁ
 += 2;

345 
	`putch¨
(*
s
);

347 #i‚de‡
BACKWARDS


348 i‡(
gÊag
 & 
GLS
)

349 
	`putch¨
('$');

351 
	`putch¨
('\n');

353 
	}
}

	@ed/main.c

29 #i‚de‡
löt


31 c⁄° 
	gc›yright
[] =

37 
	~<sys/cdefs.h
>

38 
__FBSDID
("$FreeBSD: src/bin/ed/main.c,v 1.29.10.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

56 
	~<sys/ty≥s.h
>

58 
	~<sys/io˘l.h
>

59 
	~<sys/waô.h
>

60 
	~<˘y≥.h
>

61 
	~<loˇÀ.h
>

62 
	~<pwd.h
>

63 
	~<£tjmp.h
>

65 
	~"ed.h
"

68 #ifde‡
_POSIX_SOURCE


69 
sigjmp_buf
 
	gív
;

71 
jmp_buf
 
	gív
;

75 
	g°döbuf
[1];

76 *
	gshcmd
;

77 
	gshcmdsz
;

78 
	gshcmdi
;

79 *
	gibuf
;

80 
	gibufsz
;

81 *
	gibuÂ
;

84 
	gdes
 = 0;

85 
	gg¨rulous
 = 0;

86 
	gisbö¨y
;

87 
	gisglobÆ
;

88 
	gmodifõd
;

89 
	gmuãx
 = 0;

90 
	gªd
 = 0;

91 
	gs¸ùãd
 = 0;

92 
	gsigÊags
 = 0;

93 
	gsiga˘ive
 = 0;

95 
	gﬁd_fûíame
[
PATH_MAX
] = "";

96 
	gcuºít_addr
;

97 
	gaddr_œ°
;

98 
	glöío
;

99 c⁄° *
	g¥om±
;

100 c⁄° *
	gdps
 = "*";

102 c⁄° 
	gußge
[] = "usage: %s [-] [-sx] [-p string] [file]\n";

106 
	$maö
(
¨gc
, *
¨gv
[])

108 
c
, 
n
;

109 
°©us
 = 0;

110 #i‡
__GNUC__


112 (Ë&
¨gc
;

113 (Ë&
¨gv
;

116 ()
	`£éoˇÀ
(
LC_ALL
, "");

118 
ªd
 = (
n
 = 
	`°æí
(
¨gv
[0])) > 2 &&árgv[0][n - 3] == 'r';

119 
t›
:

120 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "p:sx")) != -1)

121 
c
) {

123 
¥om±
 = 
›èrg
;

126 
s¸ùãd
 = 1;

129 #ifde‡
DES


130 
des
 = 
	`gë_keyw‹d
();

132 
	`Ârötf
(
°dîr
, "crypt unavailable\n?\n");

137 
	`Ârötf
(
°dîr
, 
ußge
, 
ªd
 ? "red" : "ed");

138 
	`exô
(1);

140 
¨gv
 +
›töd
;

141 
¨gc
 -
›töd
;

142 i‡(
¨gc
 && **
¨gv
 == '-') {

143 
s¸ùãd
 = 1;

144 i‡(
¨gc
 > 1) {

145 
›töd
 = 1;

146 
t›
;

148 
¨gv
++;

149 
¨gc
--;

152 #ifde‡
SIGWINCH


153 
	`h™dÀ_wöch
(
SIGWINCH
);

154 i‡(
	`ißây
(0)Ë
	`sig«l
(
SIGWINCH
, 
h™dÀ_wöch
);

156 
	`sig«l
(
SIGHUP
, 
sig«l_hup
);

157 
	`sig«l
(
SIGQUIT
, 
SIG_IGN
);

158 
	`sig«l
(
SIGINT
, 
sig«l_öt
);

159 #ifde‡
_POSIX_SOURCE


160 i‡((
°©us
 = 
	`sig£tjmp
(
ív
, 1)))

162 i‡((
°©us
 = 
	`£tjmp
(
ív
)))

165 
	`Âuts
("\n?\n", 
°dîr
);

166 
îrmsg
 = "interrupt";

168 
	`öô_buf„rs
();

169 
siga˘ive
 = 1;

170 i‡(
¨gc
 && **
¨gv
 && 
	`is_ÀgÆ_fûíame
(*argv)) {

171 i‡(
	`ªad_fûe
(*
¨gv
, 0Ë< 0 && !
	`ißây
(0))

172 
	`quô
(2);

173 i‡(**
¨gv
 != '!')

174 i‡(
	`°æ˝y
(
ﬁd_fûíame
, *
¨gv
, (old_filename))

175 >(
ﬁd_fûíame
))

176 
	`quô
(2);

177 } i‡(
¨gc
) {

178 
	`Âuts
("?\n", 
°dîr
);

179 i‡(**
¨gv
 == '\0')

180 
îrmsg
 = "invalid filename";

181 i‡(!
	`ißây
(0))

182 
	`quô
(2);

186 i‡(
°©us
 < 0 && 
g¨rulous
)

187 
	`Ârötf
(
°dîr
, "%s\n", 
îrmsg
);

188 i‡(
¥om±
) {

189 
	`¥ötf
("%s", 
¥om±
);

190 
	`fÊush
(
°dout
);

192 i‡((
n
 = 
	`gë_ây_löe
()) < 0) {

193 
°©us
 = 
ERR
;

195 } i‡(
n
 == 0) {

196 i‡(
modifõd
 && !
s¸ùãd
) {

197 
	`Âuts
("?\n", 
°dîr
);

198 
îrmsg
 = "warning: file modified";

199 i‡(!
	`ißây
(0)) {

200 
	`Ârötf
(
°dîr
, 
g¨rulous
 ?

202 "", 
löío
, 
îrmsg
);

203 
	`quô
(2);

205 
	`˛óªº
(
°dö
);

206 
modifõd
 = 0;

207 
°©us
 = 
EMOD
;

210 
	`quô
(0);

211 } i‡(
ibuf
[
n
 - 1] != '\n') {

213 
îrmsg
 = "unexpectedÉnd-of-file";

214 
	`˛óªº
(
°dö
);

215 
°©us
 = 
ERR
;

218 
isglobÆ
 = 0;

219 i‡((
°©us
 = 
	`exåa˘_addr_ønge
()) >= 0 &&

220 (
°©us
 = 
	`exec_comm™d
()) >= 0)

221 i‡(!
°©us
 ||

222 (
°©us
 = 
	`di•œy_löes
(
cuºít_addr
, current_addr,

223 
°©us
)) >= 0)

225 
°©us
) {

226 
EOF
:

227 
	`quô
(0);

228 
EMOD
:

229 
modifõd
 = 0;

230 
	`Âuts
("?\n", 
°dîr
);

231 
îrmsg
 = "warning: file modified";

232 i‡(!
	`ißây
(0)) {

233 
	`Ârötf
(
°dîr
, 
g¨rulous
 ?

235 "", 
löío
, 
îrmsg
);

236 
	`quô
(2);

239 
FATAL
:

240 i‡(!
	`ißây
(0))

241 
	`Ârötf
(
°dîr
, 
g¨rulous
 ?

243 
löío
, 
îrmsg
);

245 
	`Ârötf
(
°dîr
, 
g¨rulous
 ? "%s\n" : "",

246 
îrmsg
);

247 
	`quô
(3);

249 
	`Âuts
("?\n", 
°dîr
);

250 i‡(!
	`ißây
(0)) {

251 
	`Ârötf
(
°dîr
, 
g¨rulous
 ?

253 
löío
, 
îrmsg
);

254 
	`quô
(2);

260 
	}
}

262 
	gfú°_addr
, 
	g£c⁄d_addr
, 
	gaddr_˙t
;

267 
	$exåa˘_addr_ønge
()

269 
addr
;

271 
addr_˙t
 = 0;

272 
fú°_addr
 = 
£c⁄d_addr
 = 
cuºít_addr
;

273 (
addr
 = 
	`√xt_addr
()) >= 0) {

274 
addr_˙t
++;

275 
fú°_addr
 = 
£c⁄d_addr
;

276 
£c⁄d_addr
 = 
addr
;

277 i‡(*
ibuÂ
 != ',' && *ibufp != ';')

279 i‡(*
ibuÂ
++ == ';')

280 
cuºít_addr
 = 
addr
;

282 i‡((
addr_˙t
 = 
	`mö
◊ddr_˙t, 2)Ë=1 || 
£c⁄d_addr
 !
addr
)

283 
fú°_addr
 = 
£c⁄d_addr
;

284  (
addr
 =
ERR
) ? ERR : 0;

285 
	}
}

288 
	#SKIP_BLANKS
(Ë
	`is•a˚
(()*
ibuÂ
Ë&& *ibuÂ !'\n'ËibuÂ++

	)

290 
	#MUST_BE_FIRST
() do { \

291 i‡(!
fú°
) { \

292 
îrmsg
 = "invalidáddress"; \

293  
ERR
; \

295 } 0)

	)

299 
	$√xt_addr
()

301 c⁄° *
hd
;

302 
addr
 = 
cuºít_addr
;

303 
n
;

304 
fú°
 = 1;

305 
c
;

307 
	`SKIP_BLANKS
();

308 
hd
 = 
ibuÂ
;; 
fú°
 = 0)

309 
c
 = *
ibuÂ
) {

315 
ibuÂ
++;

316 
	`SKIP_BLANKS
();

317 i‡(
	`isdigô
(()*
ibuÂ
)) {

318 
	`STRTOL
(
n
, 
ibuÂ
);

319 
addr
 +(
c
 ='-' || c ='^'Ë? -
n
 :Ç;

320 } i‡(!
	`is•a˚
(()
c
))

321 
addr
 +(
c
 == '-' || c == '^') ? -1 : 1;

326 
	`MUST_BE_FIRST
();

327 
	`STRTOL
(
addr
, 
ibuÂ
);

331 
	`MUST_BE_FIRST
();

332 
ibuÂ
++;

333 
addr
 = (
c
 ='.'Ë? 
cuºít_addr
 : 
addr_œ°
;

337 
	`MUST_BE_FIRST
();

338 i‡((
addr
 = 
	`gë_m©chög_node_addr
(

339 
	`gë_compûed_∑âîn
(), 
c
 == '/')) < 0)

340  
ERR
;

341 i‡(
c
 =*
ibuÂ
)

342 
ibuÂ
++;

345 
	`MUST_BE_FIRST
();

346 
ibuÂ
++;

347 i‡((
addr
 = 
	`gë_m¨ked_node_addr
(*
ibuÂ
++)) < 0)

348  
ERR
;

353 i‡(
fú°
) {

354 
ibuÂ
++;

355 
addr_˙t
++;

356 
£c⁄d_addr
 = (
c
 =';'Ë? 
cuºít_addr
 : 1;

357 
addr
 = 
addr_œ°
;

362 i‡(
ibuÂ
 =
hd
)

363  
EOF
;

364 i‡(
addr
 < 0 || 
addr_œ°
 <áddr) {

365 
îrmsg
 = "invalidáddress";

366  
ERR
;

368  
addr
;

371 
	}
}

374 #ifde‡
BACKWARDS


376 
	#GET_THIRD_ADDR
(
addr
) \

378 
ﬁ1
, 
ﬁ2
; \

380 
ﬁ1
 = 
fú°_addr
, 
ﬁ2
 = 
£c⁄d_addr
; \

381 i‡(
	`exåa˘_addr_ønge
() < 0) \

382  
ERR
; \

383 i‡(
addr_˙t
 == 0) { \

384 
îrmsg
 = "destinationÉxpected"; \

385  
ERR
; \

386 } i‡(
£c⁄d_addr
 < 0 || 
addr_œ°
 < second_addr) { \

387 
îrmsg
 = "invalidáddress"; \

388  
ERR
; \

390 
addr
 = 
£c⁄d_addr
; \

391 
fú°_addr
 = 
ﬁ1
, 
£c⁄d_addr
 = 
ﬁ2
; \

392 }

	)

395 
	#GET_THIRD_ADDR
(
addr
) \

397 
ﬁ1
, 
ﬁ2
; \

399 
ﬁ1
 = 
fú°_addr
, 
ﬁ2
 = 
£c⁄d_addr
; \

400 i‡(
	`exåa˘_addr_ønge
() < 0) \

401  
ERR
; \

402 i‡(
£c⁄d_addr
 < 0 || 
addr_œ°
 < second_addr) { \

403 
îrmsg
 = "invalidáddress"; \

404  
ERR
; \

406 
addr
 = 
£c⁄d_addr
; \

407 
fú°_addr
 = 
ﬁ1
, 
£c⁄d_addr
 = 
ﬁ2
; \

408 }

	)

413 
	#GET_COMMAND_SUFFIX
() { \

414 
d⁄e
 = 0; \

416 *
ibuÂ
) { \

418 
gÊag
 |
GPR
, 
ibuÂ
++; \

421 
gÊag
 |
GLS
, 
ibuÂ
++; \

424 
gÊag
 |
GNP
, 
ibuÂ
++; \

427 
d⁄e
++; \

429 } !
d⁄e
); \

430 i‡(*
ibuÂ
++ != '\n') { \

431 
îrmsg
 = "invalid command suffix"; \

432  
ERR
; \

434 }

	)

438 
	#SGG
 001

	)

439 
	#SGP
 002

	)

440 
	#SGR
 004

	)

441 
	#SGF
 010

	)

443 
	g∑éock
 = 0;

445 
	grows
 = 22;

450 
	$exec_comm™d
()

452 
∑âîn_t
 *
∑t
 = 
NULL
;

453 
sgÊag
 = 0;

454 
sgnum
 = 0;

456 
∑âîn_t
 *
ç©
;

457 *
‚p
;

458 
gÊag
 = 0;

459 
sÊags
 = 0;

460 
addr
 = 0;

461 
n
 = 0;

462 
c
;

464 
	`SKIP_BLANKS
();

465 
c
 = *
ibuÂ
++) {

467 
	`GET_COMMAND_SUFFIX
();

468 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

469 i‡(
	`≠≥nd_löes
(
£c⁄d_addr
) < 0)

470  
ERR
;

473 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr) < 0)

474  
ERR
;

475 
	`GET_COMMAND_SUFFIX
();

476 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

477 i‡(
	`dñëe_löes
(
fú°_addr
, 
£c⁄d_addr
) < 0 ||

478 
	`≠≥nd_löes
(
cuºít_addr
) < 0)

479  
ERR
;

482 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr) < 0)

483  
ERR
;

484 
	`GET_COMMAND_SUFFIX
();

485 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

486 i‡(
	`dñëe_löes
(
fú°_addr
, 
£c⁄d_addr
) < 0)

487  
ERR
;

488 i‡((
addr
 = 
	`INC_MOD
(
cuºít_addr
, 
addr_œ°
)) != 0)

489 
cuºít_addr
 = 
addr
;

492 i‡(
modifõd
 && !
s¸ùãd
)

493  
EMOD
;

496 i‡(
addr_˙t
 > 0) {

497 
îrmsg
 = "unexpectedáddress";

498  
ERR
;

499 } i‡(!
	`is•a˚
(()*
ibuÂ
)) {

500 
îrmsg
 = "unexpected command suffix";

501  
ERR
;

502 } i‡((
‚p
 = 
	`gë_fûíame
()Ë=
NULL
)

503  
ERR
;

504 
	`GET_COMMAND_SUFFIX
();

505 i‡(
	`dñëe_löes
(1, 
addr_œ°
) < 0)

506  
ERR
;

507 
	`˛ór_undo_°ack
();

508 i‡(
	`˛o£_sbuf
() < 0)

509  
ERR
;

510 i‡(
	`›í_sbuf
() < 0)

511  
FATAL
;

512 i‡(*
‚p
 && *‚∞!'!'Ë
	`°r˝y
(
ﬁd_fûíame
, fnp);

513 #ifde‡
BACKWARDS


514 i‡(*
‚p
 ='\0' && *
ﬁd_fûíame
 == '\0') {

515 
îrmsg
 = "no current filename";

516  
ERR
;

519 i‡(
	`ªad_fûe
(*
‚p
 ? f≈ : 
ﬁd_fûíame
, 0) < 0)

520  
ERR
;

521 
	`˛ór_undo_°ack
();

522 
modifõd
 = 0;

523 
u_cuºít_addr
 = 
u_addr_œ°
 = -1;

526 i‡(
addr_˙t
 > 0) {

527 
îrmsg
 = "unexpectedáddress";

528  
ERR
;

529 } i‡(!
	`is•a˚
(()*
ibuÂ
)) {

530 
îrmsg
 = "unexpected command suffix";

531  
ERR
;

532 } i‡((
‚p
 = 
	`gë_fûíame
()Ë=
NULL
)

533  
ERR
;

534 i‡(*
‚p
 == '!') {

535 
îrmsg
 = "invalidÑedirection";

536  
ERR
;

538 
	`GET_COMMAND_SUFFIX
();

539 i‡(*
‚p
Ë
	`°r˝y
(
ﬁd_fûíame
, fnp);

540 
	`¥ötf
("%s\n", 
	`°rù_esˇ≥s
(
ﬁd_fûíame
));

546 i‡(
isglobÆ
) {

547 
îrmsg
 = "cannotÇest global commands";

548  
ERR
;

549 } i‡(
	`check_addr_ønge
(1, 
addr_œ°
) < 0)

550  
ERR
;

551 i‡(
	`buûd_a˘ive_li°
(
c
 == 'g' || c == 'G') < 0)

552  
ERR
;

553 i‡((
n
 = (
c
 == 'G' || c == 'V')))

554 
	`GET_COMMAND_SUFFIX
();

555 
isglobÆ
++;

556 i‡(
	`exec_globÆ
(
n
, 
gÊag
) < 0)

557  
ERR
;

560 i‡(
addr_˙t
 > 0) {

561 
îrmsg
 = "unexpectedáddress";

562  
ERR
;

564 
	`GET_COMMAND_SUFFIX
();

565 i‡(*
îrmsg
Ë
	`Ârötf
(
°dîr
, "%s\n",Érrmsg);

568 i‡(
addr_˙t
 > 0) {

569 
îrmsg
 = "unexpectedáddress";

570  
ERR
;

572 
	`GET_COMMAND_SUFFIX
();

573 i‡((
g¨rulous
 = 1 - g¨rulousË&& *
îrmsg
)

574 
	`Ârötf
(
°dîr
, "%s\n", 
îrmsg
);

577 i‡(
£c⁄d_addr
 == 0) {

578 
îrmsg
 = "invalidáddress";

579  
ERR
;

581 
	`GET_COMMAND_SUFFIX
();

582 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

583 i‡(
	`≠≥nd_löes
(
£c⁄d_addr
 - 1) < 0)

584  
ERR
;

587 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr + 1) < 0)

588  
ERR
;

589 
	`GET_COMMAND_SUFFIX
();

590 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

591 i‡(
fú°_addr
 !
£c⁄d_addr
 &&

592 
	`joö_löes
(
fú°_addr
, 
£c⁄d_addr
) < 0)

593  
ERR
;

596 
c
 = *
ibuÂ
++;

597 i‡(
£c⁄d_addr
 == 0) {

598 
îrmsg
 = "invalidáddress";

599  
ERR
;

601 
	`GET_COMMAND_SUFFIX
();

602 i‡(
	`m¨k_löe_node
(
	`gë_addªs£d_löe_node
(
£c⁄d_addr
), 
c
) < 0)

603  
ERR
;

606 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr) < 0)

607  
ERR
;

608 
	`GET_COMMAND_SUFFIX
();

609 i‡(
	`di•œy_löes
(
fú°_addr
, 
£c⁄d_addr
, 
gÊag
 | 
GLS
) < 0)

610  
ERR
;

611 
gÊag
 = 0;

614 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr) < 0)

615  
ERR
;

616 
	`GET_THIRD_ADDR
(
addr
);

617 i‡(
fú°_addr
 <
addr
 &&ádd∏< 
£c⁄d_addr
) {

618 
îrmsg
 = "invalid destination";

619  
ERR
;

621 
	`GET_COMMAND_SUFFIX
();

622 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

623 i‡(
	`move_löes
(
addr
) < 0)

624  
ERR
;

627 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr) < 0)

628  
ERR
;

629 
	`GET_COMMAND_SUFFIX
();

630 i‡(
	`di•œy_löes
(
fú°_addr
, 
£c⁄d_addr
, 
gÊag
 | 
GNP
) < 0)

631  
ERR
;

632 
gÊag
 = 0;

635 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr) < 0)

636  
ERR
;

637 
	`GET_COMMAND_SUFFIX
();

638 i‡(
	`di•œy_löes
(
fú°_addr
, 
£c⁄d_addr
, 
gÊag
 | 
GPR
) < 0)

639  
ERR
;

640 
gÊag
 = 0;

643 i‡(
addr_˙t
 > 0) {

644 
îrmsg
 = "unexpectedáddress";

645  
ERR
;

647 
	`GET_COMMAND_SUFFIX
();

648 
¥om±
 =Örom± ? 
NULL
 : 
›èrg
 ? o±¨g : 
dps
;

652 i‡(
addr_˙t
 > 0) {

653 
îrmsg
 = "unexpectedáddress";

654  
ERR
;

656 
	`GET_COMMAND_SUFFIX
();

657 
gÊag
 = (
modifõd
 && !
s¸ùãd
 && 
c
 ='q'Ë? 
EMOD
 : 
EOF
;

660 i‡(!
	`is•a˚
(()*
ibuÂ
)) {

661 
îrmsg
 = "unexpected command suffix";

662  
ERR
;

663 } i‡(
addr_˙t
 == 0)

664 
£c⁄d_addr
 = 
addr_œ°
;

665 i‡((
‚p
 = 
	`gë_fûíame
()Ë=
NULL
)

666  
ERR
;

667 
	`GET_COMMAND_SUFFIX
();

668 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

669 i‡(*
ﬁd_fûíame
 ='\0' && *
‚p
 != '!')

670 
	`°r˝y
(
ﬁd_fûíame
, 
‚p
);

671 #ifde‡
BACKWARDS


672 i‡(*
‚p
 ='\0' && *
ﬁd_fûíame
 == '\0') {

673 
îrmsg
 = "no current filename";

674  
ERR
;

677 i‡((
addr
 = 
	`ªad_fûe
(*
‚p
 ? f≈ : 
ﬁd_fûíame
, 
£c⁄d_addr
)) < 0)

678  
ERR
;

679 i‡(
addr
 &&ádd∏!
addr_œ°
)

680 
modifõd
 = 1;

684 *
ibuÂ
) {

686 
sÊags
 |=
SGF
;

689 
sÊags
 |
SGG
;

690 
ibuÂ
++;

693 
sÊags
 |
SGP
;

694 
ibuÂ
++;

697 
sÊags
 |
SGR
;

698 
ibuÂ
++;

702 
	`STRTOL
(
sgnum
, 
ibuÂ
);

703 
sÊags
 |
SGF
;

704 
sgÊag
 &~
GSG
;

707 i‡(
sÊags
) {

708 
îrmsg
 = "invalid command suffix";

709  
ERR
;

712 } 
sÊags
 && *
ibuÂ
 != '\n');

713 i‡(
sÊags
 && !
∑t
) {

714 
îrmsg
 = "noÖrevious substitution";

715  
ERR
;

716 } i‡(
sÊags
 & 
SGG
)

717 
sgnum
 = 0;

718 i‡(*
ibuÂ
 != '\n' && *(ibufp + 1) == '\n') {

719 
îrmsg
 = "invalidÖattern delimiter";

720  
ERR
;

722 
ç©
 = 
∑t
;

723 
	`SPL1
();

724 i‡((!
sÊags
 || (sÊag†& 
SGR
)) &&

725 (
ç©
 = 
	`gë_compûed_∑âîn
()Ë=
NULL
) {

726 
	`SPL0
();

727  
ERR
;

728 } i‡(
ç©
 !
∑t
) {

729 i‡(
∑t
) {

730 
	`ªg‰ì
(
∑t
);

731 
	`‰ì
(
∑t
);

733 
∑t
 = 
ç©
;

734 
∑éock
 = 1;

736 
	`SPL0
();

737 i‡(!
sÊags
 && 
	`exåa˘_sub°_èû
(&
sgÊag
, &
sgnum
) < 0)

738  
ERR
;

739 i‡(
isglobÆ
)

740 
sgÊag
 |
GLB
;

742 
sgÊag
 &~
GLB
;

743 i‡(
sÊags
 & 
SGG
)

744 
sgÊag
 ^
GSG
;

745 i‡(
sÊags
 & 
SGP
)

746 
sgÊag
 ^
GPR
, sgÊag &~(
GLS
 | 
GNP
);

748 *
ibuÂ
) {

750 
sgÊag
 |
GPR
, 
ibuÂ
++;

753 
sgÊag
 |
GLS
, 
ibuÂ
++;

756 
sgÊag
 |
GNP
, 
ibuÂ
++;

759 
n
++;

761 } !
n
);

762 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr) < 0)

763  
ERR
;

764 
	`GET_COMMAND_SUFFIX
();

765 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

766 i‡(
	`£¨ch_™d_ª∂a˚
(
∑t
, 
sgÊag
, 
sgnum
) < 0)

767  
ERR
;

770 i‡(
	`check_addr_ønge
(
cuºít_addr
, current_addr) < 0)

771  
ERR
;

772 
	`GET_THIRD_ADDR
(
addr
);

773 
	`GET_COMMAND_SUFFIX
();

774 i‡(!
isglobÆ
Ë
	`˛ór_undo_°ack
();

775 i‡(
	`c›y_löes
(
addr
) < 0)

776  
ERR
;

779 i‡(
addr_˙t
 > 0) {

780 
îrmsg
 = "unexpectedáddress";

781  
ERR
;

783 
	`GET_COMMAND_SUFFIX
();

784 i‡(
	`p›_undo_°ack
() < 0)

785  
ERR
;

789 i‡((
n
 = *
ibuÂ
) == 'q' ||Ç == 'Q') {

790 
gÊag
 = 
EOF
;

791 
ibuÂ
++;

793 i‡(!
	`is•a˚
(()*
ibuÂ
)) {

794 
îrmsg
 = "unexpected command suffix";

795  
ERR
;

796 } i‡((
‚p
 = 
	`gë_fûíame
()Ë=
NULL
)

797  
ERR
;

798 i‡(
addr_˙t
 =0 && !
addr_œ°
)

799 
fú°_addr
 = 
£c⁄d_addr
 = 0;

800 i‡(
	`check_addr_ønge
(1, 
addr_œ°
) < 0)

801  
ERR
;

802 
	`GET_COMMAND_SUFFIX
();

803 i‡(*
ﬁd_fûíame
 ='\0' && *
‚p
 != '!')

804 
	`°r˝y
(
ﬁd_fûíame
, 
‚p
);

805 #ifde‡
BACKWARDS


806 i‡(*
‚p
 ='\0' && *
ﬁd_fûíame
 == '\0') {

807 
îrmsg
 = "no current filename";

808  
ERR
;

811 i‡((
addr
 = 
	`wrôe_fûe
(*
‚p
 ? f≈ : 
ﬁd_fûíame
,

812 (
c
 ='W'Ë? "a" : "w", 
fú°_addr
, 
£c⁄d_addr
)) < 0)

813  
ERR
;

814 i‡(
addr
 =
addr_œ°
)

815 
modifõd
 = 0;

816 i‡(
modifõd
 && !
s¸ùãd
 && 
n
 == 'q')

817 
gÊag
 = 
EMOD
;

820 i‡(
addr_˙t
 > 0) {

821 
îrmsg
 = "unexpectedáddress";

822  
ERR
;

824 
	`GET_COMMAND_SUFFIX
();

825 #ifde‡
DES


826 
des
 = 
	`gë_keyw‹d
();

829 
îrmsg
 = "crypt unavailable";

830  
ERR
;

833 #ifde‡
BACKWARDS


834 i‡(
	`check_addr_ønge
(
fú°_addr
 = 1, 
cuºít_addr
 + 1) < 0)

836 i‡(
	`check_addr_ønge
(
fú°_addr
 = 1, 
cuºít_addr
 + !
isglobÆ
) < 0)

838  
ERR
;

839 i‡('0' < *
ibuÂ
 && *ibufp <= '9')

840 
	`STRTOL
(
rows
, 
ibuÂ
);

841 
	`GET_COMMAND_SUFFIX
();

842 i‡(
	`di•œy_löes
(
£c⁄d_addr
, 
	`mö
(
addr_œ°
,

843 
£c⁄d_addr
 + 
rows
), 
gÊag
) < 0)

844  
ERR
;

845 
gÊag
 = 0;

848 
	`GET_COMMAND_SUFFIX
();

849 
	`¥ötf
("%ld\n", 
addr_˙t
 ? 
£c⁄d_addr
 : 
addr_œ°
);

852 i‡(
addr_˙t
 > 0) {

853 
îrmsg
 = "unexpectedáddress";

854  
ERR
;

855 } i‡((
sÊags
 = 
	`gë_shñl_comm™d
()) < 0)

856  
ERR
;

857 
	`GET_COMMAND_SUFFIX
();

858 i‡(
sÊags
Ë
	`¥ötf
("%s\n", 
shcmd
 + 1);

859 
	`sy°em
(
shcmd
 + 1);

860 i‡(!
s¸ùãd
Ë
	`¥ötf
("!\n");

863 #ifde‡
BACKWARDS


864 i‡(
	`check_addr_ønge
(
fú°_addr
 = 1, 
cuºít_addr
 + 1) < 0

866 i‡(
	`check_addr_ønge
(
fú°_addr
 = 1, 
cuºít_addr
 + !
isglobÆ
) < 0

868 || 
	`di•œy_löes
(
£c⁄d_addr
, second_addr, 0) < 0)

869  
ERR
;

872 
îrmsg
 = "unknown command";

873  
ERR
;

875  
gÊag
;

876 
	}
}

881 
	$check_addr_ønge
(
n
, 
m
)

883 i‡(
addr_˙t
 == 0) {

884 
fú°_addr
 = 
n
;

885 
£c⁄d_addr
 = 
m
;

887 i‡(
fú°_addr
 > 
£c⁄d_addr
 || 1 > first_addr ||

888 
£c⁄d_addr
 > 
addr_œ°
) {

889 
îrmsg
 = "invalidáddress";

890  
ERR
;

893 
	}
}

900 
	$gë_m©chög_node_addr
(
∑âîn_t
 *
∑t
, 
dú
)

902 *
s
;

903 
n
 = 
cuºít_addr
;

904 
löe_t
 *
Õ
;

906 i‡(!
∑t
Ë 
ERR
;

908 i‡((
n
 = 
dú
 ? 
	`INC_MOD
“, 
addr_œ°
Ë: 
	`DEC_MOD
(n,áddr_last))) {

909 
Õ
 = 
	`gë_addªs£d_löe_node
(
n
);

910 i‡((
s
 = 
	`gë_sbuf_löe
(
Õ
)Ë=
NULL
)

911  
ERR
;

912 i‡(
isbö¨y
)

913 
	`NUL_TO_NEWLINE
(
s
, 
Õ
->
Àn
);

914 i‡(!
	`ªgexec
(
∑t
, 
s
, 0, 
NULL
, 0))

915  
n
;

917 } 
n
 !
cuºít_addr
);

918 
îrmsg
 = "no match";

919  
ERR
;

920 
	}
}

925 
	$gë_fûíame
()

927 *
fûe
 = 
NULL
;

928 
fûesz
 = 0;

930 
n
;

932 i‡(*
ibuÂ
 != '\n') {

933 
	`SKIP_BLANKS
();

934 i‡(*
ibuÂ
 == '\n') {

935 
îrmsg
 = "invalid filename";

936  
NULL
;

937 } i‡((
ibuÂ
 = 
	`gë_exãnded_löe
(&
n
, 1)Ë=
NULL
)

938  
NULL
;

939 i‡(*
ibuÂ
 == '!') {

940 
ibuÂ
++;

941 i‡((
n
 = 
	`gë_shñl_comm™d
()) < 0)

942  
NULL
;

943 i‡(
n
)

944 
	`¥ötf
("%s\n", 
shcmd
 + 1);

945  
shcmd
;

946 } i‡(
n
 > 
PATH_MAX
 - 1) {

947 
îrmsg
 = "filenameÅooÜong";

948  
NULL
;

951 #i‚de‡
BACKWARDS


952 i‡(*
ﬁd_fûíame
 == '\0') {

953 
îrmsg
 = "no current filename";

954  
NULL
;

957 
	`REALLOC
(
fûe
, 
fûesz
, 
PATH_MAX
, 
NULL
);

958 
n
 = 0; *
ibuÂ
 != '\n';)

959 
fûe
[
n
++] = *
ibuÂ
++;

960 
fûe
[
n
] = '\0';

961  
	`is_ÀgÆ_fûíame
(
fûe
Ë? fûê: 
NULL
;

962 
	}
}

968 
	$gë_shñl_comm™d
()

970 *
buf
 = 
NULL
;

971 
n
 = 0;

973 *
s
;

974 
i
 = 0;

975 
j
 = 0;

977 i‡(
ªd
) {

978 
îrmsg
 = "shelláccessÑestricted";

979  
ERR
;

980 } i‡((
s
 = 
ibuÂ
 = 
	`gë_exãnded_löe
(&
j
, 1)Ë=
NULL
)

981  
ERR
;

982 
	`REALLOC
(
buf
, 
n
, 
j
 + 1, 
ERR
);

983 
buf
[
i
++] = '!';

984 *
ibuÂ
 != '\n')

985 *
ibuÂ
) {

987 
	`REALLOC
(
buf
, 
n
, 
i
 + 2, 
ERR
);

988 
buf
[
i
++] = *
ibuÂ
;

989 i‡(*
ibuÂ
++ == '\\')

990 
buf
[
i
++] = *
ibuÂ
++;

993 i‡(
s
 !
ibuÂ
) {

994 
	`REALLOC
(
buf
, 
n
, 
i
 + 1, 
ERR
);

995 
buf
[
i
++] = *
ibuÂ
++;

997 #ifde‡
BACKWARDS


998 i‡(
shcmd
 =
NULL
 || *(shcmd + 1) == '\0')

1000 i‡(
shcmd
 =
NULL
)

1003 
îrmsg
 = "noÖrevious command";

1004  
ERR
;

1006 
	`REALLOC
(
buf
, 
n
, 
i
 + 
shcmdi
, 
ERR
);

1007 
s
 = 
shcmd
 + 1; s < shcmd + 
shcmdi
;)

1008 
buf
[
i
++] = *
s
++;

1009 
s
 = 
ibuÂ
++;

1013 i‡(*
ﬁd_fûíame
 == '\0') {

1014 
îrmsg
 = "no current filename";

1015  
ERR
;

1017 
j
 = 
	`°æí
(
s
 = 
	`°rù_esˇ≥s
(
ﬁd_fûíame
));

1018 
	`REALLOC
(
buf
, 
n
, 
i
 + 
j
, 
ERR
);

1019 
j
--)

1020 
buf
[
i
++] = *
s
++;

1021 
s
 = 
ibuÂ
++;

1024 
	`REALLOC
(
shcmd
, 
shcmdsz
, 
i
 + 1, 
ERR
);

1025 
	`mem˝y
(
shcmd
, 
buf
, 
i
);

1026 
shcmd
[
shcmdi
 = 
i
] = '\0';

1027  *
s
 == '!' || *s == '%';

1028 
	}
}

1034 
	$≠≥nd_löes
(
n
)

1036 
l
;

1037 c⁄° *
Õ
 = 
ibuf
;

1038 c⁄° *
eŸ
;

1039 
undo_t
 *
up
 = 
NULL
;

1041 
cuºít_addr
 = 
n
;;) {

1042 i‡(!
isglobÆ
) {

1043 i‡((
l
 = 
	`gë_ây_löe
()) < 0)

1044  
ERR
;

1045 i‡(
l
 =0 || 
ibuf
[l - 1] != '\n') {

1046 
	`˛óªº
(
°dö
);

1047  
l
 ? 
EOF
 : 0;

1049 
Õ
 = 
ibuf
;

1050 } i‡(*(
Õ
 = 
ibuÂ
) == '\0')

1053 *
ibuÂ
++ != '\n')

1055 
l
 = 
ibuÂ
 - 
Õ
;

1057 i‡(
l
 =2 && 
Õ
[0] == '.' &&Üp[1] == '\n') {

1060 
eŸ
 = 
Õ
 + 
l
;

1061 
	`SPL1
();

1063 i‡((
Õ
 = 
	`put_sbuf_löe
÷p)Ë=
NULL
) {

1064 
	`SPL0
();

1065  
ERR
;

1066 } i‡(
up
)

1067 
up
->
t
 = 
	`gë_addªs£d_löe_node
(
cuºít_addr
);

1068 i‡((
up
 = 
	`push_undo_°ack
(
UADD
, 
cuºít_addr
,

1069 
cuºít_addr
)Ë=
NULL
) {

1070 
	`SPL0
();

1071  
ERR
;

1073 } 
Õ
 !
eŸ
);

1074 
modifõd
 = 1;

1075 
	`SPL0
();

1078 
	}
}

1083 
	$joö_löes
(
‰om
, 
to
)

1085 *
buf
 = 
NULL
;

1086 
n
;

1088 *
s
;

1089 
size
 = 0;

1090 
löe_t
 *
bp
, *
ï
;

1092 
ï
 = 
	`gë_addªs£d_löe_node
(
	`INC_MOD
(
to
, 
addr_œ°
));

1093 
bp
 = 
	`gë_addªs£d_löe_node
(
‰om
);

1094 ; 
bp
 !
ï
; b∞bp->
q_f‹w
) {

1095 i‡((
s
 = 
	`gë_sbuf_löe
(
bp
)Ë=
NULL
)

1096  
ERR
;

1097 
	`REALLOC
(
buf
, 
n
, 
size
 + 
bp
->
Àn
, 
ERR
);

1098 
	`mem˝y
(
buf
 + 
size
, 
s
, 
bp
->
Àn
);

1099 
size
 +
bp
->
Àn
;

1101 
	`REALLOC
(
buf
, 
n
, 
size
 + 2, 
ERR
);

1102 
	`mem˝y
(
buf
 + 
size
, "\n", 2);

1103 i‡(
	`dñëe_löes
(
‰om
, 
to
) < 0)

1104  
ERR
;

1105 
cuºít_addr
 = 
‰om
 - 1;

1106 
	`SPL1
();

1107 i‡(
	`put_sbuf_löe
(
buf
Ë=
NULL
 ||

1108 
	`push_undo_°ack
(
UADD
, 
cuºít_addr
, cuºít_addrË=
NULL
) {

1109 
	`SPL0
();

1110  
ERR
;

1112 
modifõd
 = 1;

1113 
	`SPL0
();

1115 
	}
}

1120 
	$move_löes
(
addr
)

1122 
löe_t
 *
b1
, *
a1
, *
b2
, *
a2
;

1123 
n
 = 
	`INC_MOD
(
£c⁄d_addr
, 
addr_œ°
);

1124 
p
 = 
fú°_addr
 - 1;

1125 
d⁄e
 = (
addr
 =
fú°_addr
 - 1 ||ádd∏=
£c⁄d_addr
);

1127 
	`SPL1
();

1128 i‡(
d⁄e
) {

1129 
a2
 = 
	`gë_addªs£d_löe_node
(
n
);

1130 
b2
 = 
	`gë_addªs£d_löe_node
(
p
);

1131 
cuºít_addr
 = 
£c⁄d_addr
;

1132 } i‡(
	`push_undo_°ack
(
UMOV
, 
p
, 
n
Ë=
NULL
 ||

1133 
	`push_undo_°ack
(
UMOV
, 
addr
, 
	`INC_MOD
◊ddr, 
addr_œ°
)Ë=
NULL
) {

1134 
	`SPL0
();

1135  
ERR
;

1137 
a1
 = 
	`gë_addªs£d_löe_node
(
n
);

1138 i‡(
addr
 < 
fú°_addr
) {

1139 
b1
 = 
	`gë_addªs£d_löe_node
(
p
);

1140 
b2
 = 
	`gë_addªs£d_löe_node
(
addr
);

1143 
b2
 = 
	`gë_addªs£d_löe_node
(
addr
);

1144 
b1
 = 
	`gë_addªs£d_löe_node
(
p
);

1147 
a2
 = 
b2
->
q_f‹w
;

1148 
	`REQUE
(
b2
, 
b1
->
q_f‹w
);

1149 
	`REQUE
(
a1
->
q_back
, 
a2
);

1150 
	`REQUE
(
b1
, 
a1
);

1151 
cuºít_addr
 = 
addr
 + (◊dd∏< 
fú°_addr
) ?

1152 
£c⁄d_addr
 - 
fú°_addr
 + 1 : 0);

1154 i‡(
isglobÆ
)

1155 
	`un£t_a˘ive_nodes
(
b2
->
q_f‹w
, 
a2
);

1156 
modifõd
 = 1;

1157 
	`SPL0
();

1159 
	}
}

1164 
	$c›y_löes
(
addr
)

1166 
löe_t
 *
Õ
, *
≈
 = 
	`gë_addªs£d_löe_node
(
fú°_addr
);

1167 
undo_t
 *
up
 = 
NULL
;

1168 
n
 = 
£c⁄d_addr
 - 
fú°_addr
 + 1;

1169 
m
 = 0;

1171 
cuºít_addr
 = 
addr
;

1172 i‡(
fú°_addr
 <
addr
 &&ádd∏< 
£c⁄d_addr
) {

1173 
n
 = 
addr
 - 
fú°_addr
 + 1;

1174 
m
 = 
£c⁄d_addr
 - 
addr
;

1176 ; 
n
 > 0;Ç=
m
, m=0, 
≈
 = 
	`gë_addªs£d_löe_node
(
cuºít_addr
 + 1))

1177 ; 
n
-- > 0; 
≈
 =Çp->
q_f‹w
) {

1178 
	`SPL1
();

1179 i‡((
Õ
 = 
	`dup_löe_node
(
≈
)Ë=
NULL
) {

1180 
	`SPL0
();

1181  
ERR
;

1183 
	`add_löe_node
(
Õ
);

1184 i‡(
up
)

1185 
up
->
t
 = 
Õ
;

1186 i‡((
up
 = 
	`push_undo_°ack
(
UADD
, 
cuºít_addr
,

1187 
cuºít_addr
)Ë=
NULL
) {

1188 
	`SPL0
();

1189  
ERR
;

1191 
modifõd
 = 1;

1192 
	`SPL0
();

1195 
	}
}

1200 
	$dñëe_löes
(
‰om
, 
to
)

1202 
löe_t
 *
n
, *
p
;

1204 
	`SPL1
();

1205 i‡(
	`push_undo_°ack
(
UDEL
, 
‰om
, 
to
Ë=
NULL
) {

1206 
	`SPL0
();

1207  
ERR
;

1209 
n
 = 
	`gë_addªs£d_löe_node
(
	`INC_MOD
(
to
, 
addr_œ°
));

1210 
p
 = 
	`gë_addªs£d_löe_node
(
‰om
 - 1);

1212 i‡(
isglobÆ
)

1213 
	`un£t_a˘ive_nodes
(
p
->
q_f‹w
, 
n
);

1214 
	`REQUE
(
p
, 
n
);

1215 
addr_œ°
 -
to
 - 
‰om
 + 1;

1216 
cuºít_addr
 = 
‰om
 - 1;

1217 
modifõd
 = 1;

1218 
	`SPL0
();

1220 
	}
}

1225 
	$di•œy_löes
(
‰om
, 
to
, 
gÊag
)

1227 
löe_t
 *
bp
;

1228 
löe_t
 *
ï
;

1229 *
s
;

1231 i‡(!
‰om
) {

1232 
îrmsg
 = "invalidáddress";

1233  
ERR
;

1235 
ï
 = 
	`gë_addªs£d_löe_node
(
	`INC_MOD
(
to
, 
addr_œ°
));

1236 
bp
 = 
	`gë_addªs£d_löe_node
(
‰om
);

1237 ; 
bp
 !
ï
; b∞bp->
q_f‹w
) {

1238 i‡((
s
 = 
	`gë_sbuf_löe
(
bp
)Ë=
NULL
)

1239  
ERR
;

1240 i‡(
	`put_ây_löe
(
s
, 
bp
->
Àn
, 
cuºít_addr
 = 
‰om
++, 
gÊag
) < 0)

1241  
ERR
;

1244 
	}
}

1247 
	#MAXMARK
 26

	)

1249 
löe_t
 *
	gm¨k
[
MAXMARK
];

1250 
	gm¨kno
;

1254 
	$m¨k_löe_node
(
löe_t
 *
Õ
, 
n
)

1256 i‡(!
	`i¶owî
(()
n
)) {

1257 
îrmsg
 = "invalid mark character";

1258  
ERR
;

1259 } i‡(
m¨k
[
n
 - 'a'] =
NULL
)

1260 
m¨kno
++;

1261 
m¨k
[
n
 - 'a'] = 
Õ
;

1263 
	}
}

1268 
	$gë_m¨ked_node_addr
(
n
)

1270 i‡(!
	`i¶owî
(()
n
)) {

1271 
îrmsg
 = "invalid mark character";

1272  
ERR
;

1274  
	`gë_löe_node_addr
(
m¨k
[
n
 - 'a']);

1275 
	}
}

1280 
	$unm¨k_löe_node
(
löe_t
 *
Õ
)

1282 
i
;

1284 
i
 = 0; 
m¨kno
 && i < 
MAXMARK
; i++)

1285 i‡(
m¨k
[
i
] =
Õ
) {

1286 
m¨k
[
i
] = 
NULL
;

1287 
m¨kno
--;

1289 
	}
}

1293 
löe_t
 *

1294 
	$dup_löe_node
(
löe_t
 *
Õ
)

1296 
löe_t
 *
≈
;

1298 i‡((
≈
 = (
löe_t
 *Ë
	`mÆloc
(÷öe_t))Ë=
NULL
) {

1299 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

1300 
îrmsg
 = "out of memory";

1301  
NULL
;

1303 
≈
->
£ek
 = 
Õ
->seek;

1304 
≈
->
Àn
 = 
Õ
->len;

1305  
≈
;

1306 
	}
}

1312 
	$has_åaûög_esˇ≥
(*
s
, *
t
)

1314  (
s
 =
t
 || *— - 1Ë!'\\'Ë? 0 : !
	`has_åaûög_esˇ≥
(s,Å - 1);

1315 
	}
}

1320 
	$°rù_esˇ≥s
(*
s
)

1322 *
fûe
 = 
NULL
;

1323 
fûesz
 = 0;

1325 
i
 = 0;

1327 
	`REALLOC
(
fûe
, 
fûesz
, 
PATH_MAX
, 
NULL
);

1328 
i
 < 
fûesz
 - 1

1329 && (
fûe
[
i
++] = (*
s
 == '\\') ? *++s : *s))

1330 
s
++;

1331  
fûe
;

1332 
	}
}

1336 
	$sig«l_hup
(
signo
)

1338 i‡(
muãx
)

1339 
sigÊags
 |(1 << (
signo
 - 1));

1341 
	`h™dÀ_hup
(
signo
);

1342 
	}
}

1346 
	$sig«l_öt
(
signo
)

1348 i‡(
muãx
)

1349 
sigÊags
 |(1 << (
signo
 - 1));

1351 
	`h™dÀ_öt
(
signo
);

1352 
	}
}

1356 
	$h™dÀ_hup
(
signo
)

1358 *
hup
 = 
NULL
;

1359 *
s
;

1360 
ed_hup
[] = "ed.hup";

1361 
n
;

1363 i‡(!
siga˘ive
)

1364 
	`quô
(1);

1365 
sigÊags
 &~(1 << (
signo
 - 1));

1366 i‡(
addr_œ°
 && 
	`wrôe_fûe
(
ed_hup
, "w", 1,áddr_last) < 0 &&

1367 (
s
 = 
	`gëív
("HOME")Ë!
NULL
 &&

1368 (
n
 = 
	`°æí
(
s
)Ë+ 8 <
PATH_MAX
 &&

1369 (
hup
 = (*Ë
	`mÆloc
(
n
 + 10)Ë!
NULL
) {

1370 
	`°r˝y
(
hup
, 
s
);

1371 i‡(
hup
[
n
 - 1] != '/')

1372 
hup
[
n
] = '/', hup[n+1] = '\0';

1373 
	`°rˇt
(
hup
, "ed.hup");

1374 
	`wrôe_fûe
(
hup
, "w", 1, 
addr_œ°
);

1376 
	`quô
(2);

1377 
	}
}

1381 
	$h™dÀ_öt
(
signo
)

1383 i‡(!
siga˘ive
)

1384 
	`quô
(1);

1385 
sigÊags
 &~(1 << (
signo
 - 1));

1386 #ifde‡
_POSIX_SOURCE


1387 
	`sigl⁄gjmp
(
ív
, -1);

1389 
	`l⁄gjmp
(
ív
, -1);

1391 
	}
}

1394 
	gcﬁs
 = 72;

1397 
	$h™dÀ_wöch
(
signo
)

1399 
ßve_î∫o
 = 
î∫o
;

1401 
wösize
 
ws
;

1403 
sigÊags
 &~(1 << (
signo
 - 1));

1404 i‡(
	`io˘l
(0, 
TIOCGWINSZ
, (*Ë&
ws
) >= 0) {

1405 i‡(
ws
.
ws_row
 > 2Ë
rows
 = ws.ws_row - 2;

1406 i‡(
ws
.
ws_cﬁ
 > 8Ë
cﬁs
 = ws.ws_col - 8;

1408 
î∫o
 = 
ßve_î∫o
;

1409 
	}
}

1414 
	$is_ÀgÆ_fûíame
(*
s
)

1416 i‡(
ªd
 && (*
s
 ='!' || !
	`°rcmp
(s, ".."Ë|| 
	`°rchr
(s, '/'))) {

1417 
îrmsg
 = "shelláccessÑestricted";

1421 
	}
}

	@ed/re.c

29 
	~<sys/cdefs.h
>

30 
__FBSDID
("$FreeBSD: src/bin/ed/re.c,v 1.20.32.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

32 
	~"ed.h
"

35 
∑éock
;

37 c⁄° *
	gîrmsg
 = "";

41 
∑âîn_t
 *

42 
	$gë_compûed_∑âîn
()

44 
∑âîn_t
 *
ex¥
 = 
NULL
;

45 
îr‹
[1024];

47 *
ex¥s
;

48 
dñimôî
;

49 
n
;

51 i‡((
dñimôî
 = *
ibuÂ
) == ' ') {

52 
îrmsg
 = "invalidÖattern delimiter";

53  
NULL
;

54 } i‡(
dñimôî
 ='\n' || *++
ibuÂ
 == '\n' || *ibufp == delimiter) {

55 i‡(!
ex¥
)

56 
îrmsg
 = "noÖreviousÖattern";

57  
ex¥
;

58 } i‡((
ex¥s
 = 
	`exåa˘_∑âîn
(
dñimôî
)Ë=
NULL
)

59  
NULL
;

61 i‡(
ex¥
 && !
∑éock
)

62 
	`ªg‰ì
(
ex¥
);

63 i‡((
ex¥
 = (
∑âîn_t
 *Ë
	`mÆloc
(’©ã∫_t))Ë=
NULL
) {

64 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

65 
îrmsg
 = "out of memory";

66  
NULL
;

68 
∑éock
 = 0;

69 i‡((
n
 = 
	`ªgcomp
(
ex¥
, 
ex¥s
, 0))) {

70 
	`ªgîr‹
(
n
, 
ex¥
, 
îr‹
, Érror);

71 
îrmsg
 = 
îr‹
;

72 
	`‰ì
(
ex¥
);

73  
ex¥
 = 
NULL
;

75  
ex¥
;

76 
	}
}

82 
	$exåa˘_∑âîn
(
dñimôî
)

84 *
lhbuf
 = 
NULL
;

85 
lhbufsz
 = 0;

87 *
nd
;

88 
Àn
;

90 
nd
 = 
ibuÂ
; *nd !
dñimôî
 && *nd != '\n';Çd++)

91 *
nd
) {

95 i‡((
nd
 = 
	`∑r£_ch¨_˛ass
(++nd)Ë=
NULL
) {

96 
îrmsg
 = "unbalanced brackets ([])";

97  
NULL
;

101 i‡(*++
nd
 == '\n') {

102 
îrmsg
 = "trailing backslash (\\)";

103  
NULL
;

107 
Àn
 = 
nd
 - 
ibuÂ
;

108 
	`REALLOC
(
lhbuf
, 
lhbufsz
, 
Àn
 + 1, 
NULL
);

109 
	`mem˝y
(
lhbuf
, 
ibuÂ
, 
Àn
);

110 
lhbuf
[
Àn
] = '\0';

111 
ibuÂ
 = 
nd
;

112  (
isbö¨y
Ë? 
	`NUL_TO_NEWLINE
(
lhbuf
, 
Àn
) :Ühbuf;

113 
	}
}

118 
	$∑r£_ch¨_˛ass
(*
s
)

120 
c
, 
d
;

122 i‡(*
s
 == '^')

123 
s
++;

124 i‡(*
s
 == ']')

125 
s
++;

126 ; *
s
 != ']' && *s != '\n'; s++)

127 i‡(*
s
 ='[' && ((
d
 = *(s+1)) == '.' || d == ':' || d == '='))

128 
s
++, 
c
 = *++s; *†!']' || c !
d
; s++)

129 i‡((
c
 = *
s
) == '\n')

130  
NULL
;

131  (*
s
 =']'Ë? s : 
NULL
;

132 
	}
}

	@ed/sub.c

29 
	~<sys/cdefs.h
>

30 
__FBSDID
("$FreeBSD: src/bin/ed/sub.c,v 1.15.36.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

32 
	~"ed.h
"

35 *
	grhbuf
;

36 
	grhbufsz
;

37 
	grhbufi
;

41 
	$exåa˘_sub°_èû
(*
Êagp
, *
≈
)

43 
dñimôî
;

45 *
Êagp
 = *
≈
 = 0;

46 i‡((
dñimôî
 = *
ibuÂ
) == '\n') {

47 
rhbufi
 = 0;

48 *
Êagp
 = 
GPR
;

50 } i‡(
	`exåa˘_sub°_ãm∂©e
(Ë=
NULL
)

51  
ERR
;

52 i‡(*
ibuÂ
 == '\n') {

53 *
Êagp
 = 
GPR
;

55 } i‡(*
ibuÂ
 =
dñimôî
)

56 
ibuÂ
++;

57 i‡('1' <*
ibuÂ
 && *ibufp <= '9') {

58 
	`STRTOL
(*
≈
, 
ibuÂ
);

60 } i‡(*
ibuÂ
 == 'g') {

61 
ibuÂ
++;

62 *
Êagp
 = 
GSG
;

66 
	}
}

72 
	$exåa˘_sub°_ãm∂©e
()

74 
n
 = 0;

75 
i
 = 0;

76 
c
;

77 
dñimôî
 = *
ibuÂ
++;

79 i‡(*
ibuÂ
 ='%' && *(ibuÂ + 1Ë=
dñimôî
) {

80 
ibuÂ
++;

81 i‡(!
rhbuf
)

82 
îrmsg
 = "noÖrevious substitution";

83  
rhbuf
;

85 *
ibuÂ
 !
dñimôî
) {

86 
	`REALLOC
(
rhbuf
, 
rhbufsz
, 
i
 + 2, 
NULL
);

87 i‡((
c
 = 
rhbuf
[
i
++] = *
ibuÂ
++) == '\n' && *ibufp == '\0') {

88 
i
--, 
ibuÂ
--;

90 } i‡(
c
 != '\\')

92 i‡((
rhbuf
[
i
++] = *
ibuÂ
++) != '\n')

94 i‡(!
isglobÆ
) {

95 (
n
 = 
	`gë_ây_löe
()) == 0 ||

96 (
n
 > 0 && 
ibuf
[n - 1] != '\n'))

97 
	`˛óªº
(
°dö
);

98 i‡(
n
 < 0)

99  
NULL
;

102 
	`REALLOC
(
rhbuf
, 
rhbufsz
, 
i
 + 1, 
NULL
);

103 
rhbuf
[
rhbufi
 = 
i
] = '\0';

104  
rhbuf
;

105 
	}
}

108 *
	grbuf
;

109 
	grbufsz
;

114 
	$£¨ch_™d_ª∂a˚
(
∑âîn_t
 *
∑t
, 
gÊag
, 
kth
)

116 
undo_t
 *
up
;

117 c⁄° *
txt
;

118 c⁄° *
eŸ
;

119 
lc
;

120 
xa
 = 
cuºít_addr
;

121 
nsubs
 = 0;

122 
löe_t
 *
Õ
;

123 
Àn
;

125 
cuºít_addr
 = 
fú°_addr
 - 1;

126 
lc
 = 0;Ü¯<
£c⁄d_addr
 - 
fú°_addr
;Üc++) {

127 
Õ
 = 
	`gë_addªs£d_löe_node
(++
cuºít_addr
);

128 i‡((
Àn
 = 
	`sub°ôuã_m©chög_ãxt
(
∑t
, 
Õ
, 
gÊag
, 
kth
)) < 0)

129  
ERR
;

130 i‡(
Àn
) {

131 
up
 = 
NULL
;

132 i‡(
	`dñëe_löes
(
cuºít_addr
, current_addr) < 0)

133  
ERR
;

134 
txt
 = 
rbuf
;

135 
eŸ
 = 
rbuf
 + 
Àn
;

136 
	`SPL1
();

138 i‡((
txt
 = 
	`put_sbuf_löe
—xt)Ë=
NULL
) {

139 
	`SPL0
();

140  
ERR
;

141 } i‡(
up
)

142 
up
->
t
 = 
	`gë_addªs£d_löe_node
(
cuºít_addr
);

143 i‡((
up
 = 
	`push_undo_°ack
(
UADD
,

144 
cuºít_addr
, cuºít_addr)Ë=
NULL
) {

145 
	`SPL0
();

146  
ERR
;

148 } 
txt
 !
eŸ
);

149 
	`SPL0
();

150 
nsubs
++;

151 
xa
 = 
cuºít_addr
;

154 
cuºít_addr
 = 
xa
;

155 i‡(
nsubs
 =0 && !(
gÊag
 & 
GLB
)) {

156 
îrmsg
 = "no match";

157  
ERR
;

158 } i‡((
gÊag
 & (
GPR
 | 
GLS
 | 
GNP
)) &&

159 
	`di•œy_löes
(
cuºít_addr
, cuºít_addr, 
gÊag
) < 0)

160  
ERR
;

162 
	}
}

168 
	$sub°ôuã_m©chög_ãxt
(
∑âîn_t
 *
∑t
, 
löe_t
 *
Õ
, 
gÊag
, 
kth
)

170 
off
 = 0;

171 
ch™ged
 = 0;

172 
m©chno
 = 0;

173 
i
 = 0;

174 
ªgm©ch_t
 
rm
[
SE_MAX
];

175 *
txt
;

176 *
eŸ
;

178 i‡((
txt
 = 
	`gë_sbuf_löe
(
Õ
)Ë=
NULL
)

179  
ERR
;

180 i‡(
isbö¨y
)

181 
	`NUL_TO_NEWLINE
(
txt
, 
Õ
->
Àn
);

182 
eŸ
 = 
txt
 + 
Õ
->
Àn
;

183 i‡(!
	`ªgexec
(
∑t
, 
txt
, 
SE_MAX
, 
rm
, 0)) {

185 i‡(!
kth
 || kth =++
m©chno
) {

186 
ch™ged
++;

187 
i
 = 
rm
[0].
rm_so
;

188 
	`REALLOC
(
rbuf
, 
rbufsz
, 
off
 + 
i
, 
ERR
);

189 i‡(
isbö¨y
)

190 
	`NEWLINE_TO_NUL
(
txt
, 
rm
[0].
rm_eo
);

191 
	`mem˝y
(
rbuf
 + 
off
, 
txt
, 
i
);

192 
off
 +
i
;

193 i‡((
off
 = 
	`≠∂y_sub°_ãm∂©e
(
txt
, 
rm
, off,

194 
∑t
->
ª_nsub
)) < 0)

195  
ERR
;

197 
i
 = 
rm
[0].
rm_eo
;

198 
	`REALLOC
(
rbuf
, 
rbufsz
, 
off
 + 
i
, 
ERR
);

199 i‡(
isbö¨y
)

200 
	`NEWLINE_TO_NUL
(
txt
, 
i
);

201 
	`mem˝y
(
rbuf
 + 
off
, 
txt
, 
i
);

202 
off
 +
i
;

204 
txt
 +
rm
[0].
rm_eo
;

205 } *
txt
 &&

206 (!
ch™ged
 || ((
gÊag
 & 
GSG
Ë&& 
rm
[0].
rm_eo
)) &&

207 !
	`ªgexec
(
∑t
, 
txt
, 
SE_MAX
, 
rm
, 
REG_NOTBOL
));

208 
i
 = 
eŸ
 - 
txt
;

209 
	`REALLOC
(
rbuf
, 
rbufsz
, 
off
 + 
i
 + 2, 
ERR
);

210 i‡(
i
 > 0 && !
rm
[0].
rm_eo
 && (
gÊag
 & 
GSG
)) {

211 
îrmsg
 = "infinite substitutionÜoop";

212  
ERR
;

214 i‡(
isbö¨y
)

215 
	`NEWLINE_TO_NUL
(
txt
, 
i
);

216 
	`mem˝y
(
rbuf
 + 
off
, 
txt
, 
i
);

217 
	`mem˝y
(
rbuf
 + 
off
 + 
i
, "\n", 2);

219  
ch™ged
 ? 
off
 + 
i
 + 1 : 0;

220 
	}
}

226 
	$≠∂y_sub°_ãm∂©e
(c⁄° *
bﬁn
, 
ªgm©ch_t
 *
rm
, 
off
, 
ª_nsub
)

228 
j
 = 0;

229 
k
 = 0;

230 
n
;

231 *
sub
 = 
rhbuf
;

233 ; 
sub
 - 
rhbuf
 < 
rhbufi
; sub++)

234 i‡(*
sub
 == '&') {

235 
j
 = 
rm
[0].
rm_so
;

236 
k
 = 
rm
[0].
rm_eo
;

237 
	`REALLOC
(
rbuf
, 
rbufsz
, 
off
 + 
k
 - 
j
, 
ERR
);

238 
j
 < 
k
)

239 
rbuf
[
off
++] = 
bﬁn
[
j
++];

240 } i‡(*
sub
 == '\\' && '1' <= *++sub && *sub <= '9' &&

241 (
n
 = *
sub
 - '0'Ë<
ª_nsub
) {

242 
j
 = 
rm
[
n
].
rm_so
;

243 
k
 = 
rm
[
n
].
rm_eo
;

244 
	`REALLOC
(
rbuf
, 
rbufsz
, 
off
 + 
k
 - 
j
, 
ERR
);

245 
j
 < 
k
)

246 
rbuf
[
off
++] = 
bﬁn
[
j
++];

248 
	`REALLOC
(
rbuf
, 
rbufsz
, 
off
 + 1, 
ERR
);

249 
rbuf
[
off
++] = *
sub
;

251 
	`REALLOC
(
rbuf
, 
rbufsz
, 
off
 + 1, 
ERR
);

252 
rbuf
[
off
] = '\0';

253  
off
;

254 
	}
}

	@ed/undo.c

28 
	~<sys/cdefs.h
>

29 
__FBSDID
("$FreeBSD: src/bin/ed/undo.c,v 1.12.36.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

31 
	~"ed.h
"

34 
	#USIZE
 100

	)

35 
undo_t
 *
	gu°ack
 = 
NULL
;

36 
	gusize
 = 0;

37 
	gu_p
 = 0;

40 
undo_t
 *

41 
	$push_undo_°ack
(
ty≥
, 
‰om
, 
to
)

43 
undo_t
 *
t
;

45 #i‡
	`deföed
(
sun
Ë|| deföed(
NO_REALLOC_NULL
)

46 i‡(
u°ack
 =
NULL
 &&

47 (
u°ack
 = (
undo_t
 *Ë
	`mÆloc
((
usize
 = 
USIZE
Ë* (undo_t))Ë=
NULL
) {

48 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

49 
îrmsg
 = "out of memory";

50  
NULL
;

53 
t
 = 
u°ack
;

54 i‡(
u_p
 < 
usize
 ||

55 (
t
 = (
undo_t
 *Ë
	`ªÆloc
(
u°ack
, (
usize
 +
USIZE
Ë* (undo_t))Ë!
NULL
) {

56 
u°ack
 = 
t
;

57 
u°ack
[
u_p
].
ty≥
 =Åype;

58 
u°ack
[
u_p
].
t
 = 
	`gë_addªs£d_löe_node
(
to
);

59 
u°ack
[
u_p
].
h
 = 
	`gë_addªs£d_löe_node
(
‰om
);

60  
u°ack
 + 
u_p
++;

63 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
î∫o
));

64 
îrmsg
 = "out of memory";

65 
	`˛ór_undo_°ack
();

66 
	`‰ì
(
u°ack
);

67 
u°ack
 = 
NULL
;

68 
usize
 = 0;

69  
NULL
;

70 
	}
}

74 
	#USWAP
(
x
,
y
) { \

75 
undo_t
 
utmp
; \

76 
utmp
 = 
x
, x = 
y
, y = utmp; \

77 }

	)

80 
	gu_cuºít_addr
 = -1;

81 
	gu_addr_œ°
 = -1;

85 
	$p›_undo_°ack
()

87 
n
;

88 
o_cuºít_addr
 = 
cuºít_addr
;

89 
o_addr_œ°
 = 
addr_œ°
;

91 i‡(
u_cuºít_addr
 =-1 || 
u_addr_œ°
 == -1) {

92 
îrmsg
 = "nothingÅo undo";

93  
ERR
;

94 } i‡(
u_p
)

95 
modifõd
 = 1;

96 
	`gë_addªs£d_löe_node
(0);

97 
	`SPL1
();

98 
n
 = 
u_p
;Ç-- > 0;) {

99 
u°ack
[
n
].
ty≥
) {

100 
UADD
:

101 
	`REQUE
(
u°ack
[
n
].
h
->
q_back
, u°ack[n].
t
->
q_f‹w
);

103 
UDEL
:

104 
	`REQUE
(
u°ack
[
n
].
h
->
q_back
, ustack[n].h);

105 
	`REQUE
(
u°ack
[
n
].
t
, u°ack[n].t->
q_f‹w
);

107 
UMOV
:

108 
VMOV
:

109 
	`REQUE
(
u°ack
[
n
 - 1].
h
, u°ack[n].h->
q_f‹w
);

110 
	`REQUE
(
u°ack
[
n
].
t
->
q_back
, ustack[n - 1].t);

111 
	`REQUE
(
u°ack
[
n
].
h
, u°ack[n].
t
);

112 
n
--;

118 
u°ack
[
n
].
ty≥
 ^= 1;

121 
n
 = 
u_p
;Ç-- > (u_p + 1)/ 2;)

122 
	`USWAP
(
u°ack
[
n
], u°ack[
u_p
 - 1 -Ç]);

123 i‡(
isglobÆ
)

124 
	`˛ór_a˘ive_li°
();

125 
cuºít_addr
 = 
u_cuºít_addr
, u_cuºít_add∏
o_cuºít_addr
;

126 
addr_œ°
 = 
u_addr_œ°
, u_addr_œ° = 
o_addr_œ°
;

127 
	`SPL0
();

129 
	}
}

134 
	$˛ór_undo_°ack
()

136 
löe_t
 *
Õ
, *
ï
, *
é
;

138 
u_p
--)

139 i‡(
u°ack
[
u_p
].
ty≥
 =
UDEL
) {

140 
ï
 = 
u°ack
[
u_p
].
t
->
q_f‹w
;

141 
Õ
 = 
u°ack
[
u_p
].
h
;Ü∞!
ï
;Ü∞
é
) {

142 
	`unm¨k_löe_node
(
Õ
);

143 
é
 = 
Õ
->
q_f‹w
;

144 
	`‰ì
(
Õ
);

147 
u_p
 = 0;

148 
u_cuºít_addr
 = 
cuºít_addr
;

149 
u_addr_œ°
 = 
addr_œ°
;

150 
	}
}

	@expr/expr.y

11 
	~<sys/ty≥s.h
>

13 
	~<˘y≥.h
>

14 
	~<îr.h
>

15 
	~<î∫o.h
>

16 
	~<öây≥s.h
>

17 
	~<limôs.h
>

18 
	~<loˇÀ.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<ªgex.h
>

23 
	~<uni°d.h
>

29 
	#ERR_EXIT
 2

	)

31 
	evÆty≥
 {

32 
	möãgî
, 
	mnumîic_°rög
, 
	m°rög


35 
	svÆ
 {

36 
vÆty≥
 
	mty≥
;

38 *
	ms
;

39 
ötmax_t
 
	mi
;

40 } 
	mu
;

43 
vÆ
 *
	gªsu…
;

45 
chk_div
(
ötmax_t
, intmax_t);

46 
chk_möus
(
ötmax_t
, intmax_t, intmax_t);

47 
chk_∂us
(
ötmax_t
, intmax_t, intmax_t);

48 
chk_times
(
ötmax_t
, intmax_t, intmax_t);

49 
‰ì_vÆue
(
vÆ
 *);

50 
is_zîo_‹_nuŒ
(
vÆ
 *);

51 
is°rög
(
vÆ
 *);

52 
vÆ
 *
make_öãgî
(
ötmax_t
);

53 
vÆ
 *
make_°r
(const *);

54 
vÆ
 *
›_™d
(val *, val *);

55 
vÆ
 *
›_cﬁ⁄
(val *, val *);

56 
vÆ
 *
›_div
(val *, val *);

57 
vÆ
 *
›_eq
(val *, val *);

58 
vÆ
 *
›_ge
(val *, val *);

59 
vÆ
 *
›_gt
(val *, val *);

60 
vÆ
 *
›_À
(val *, val *);

61 
vÆ
 *
›_…
(val *, val *);

62 
vÆ
 *
›_möus
(val *, val *);

63 
vÆ
 *
›_√
(val *, val *);

64 
vÆ
 *
›_‹
(val *, val *);

65 
vÆ
 *
›_∂us
(val *, val *);

66 
vÆ
 *
›_ªm
(val *, val *);

67 
vÆ
 *
›_times
(val *, val *);

68 
ötmax_t
 
to_öãgî
(
vÆ
 *);

69 
to_°rög
(
vÆ
 *);

70 
yyîr‹
(const *);

71 
yyÀx
();

72 
yy∑r£
();

74 
	geÊag
;

75 **
	gav
;

80 
vÆ
 *val;

83 %
À·
 <
vÆ
> '|'

84 %
À·
 <
vÆ
> '&'

85 %
À·
 <
vÆ
> '=' '>' '<' 
GE
 
LE
 
NE


86 %
À·
 <
vÆ
> '+' '-'

87 %
À·
 <
vÆ
> '*' '/' '%'

88 %
À·
 <
vÆ
> ':'

90 %
tokí
 <
vÆ
> 
TOKEN


91 %
ty≥
 <
vÆ
> 
°¨t
 
ex¥


93 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

95 
°¨t
: 
ex¥
 { 
ªsu…
 = 
$$
; }

97 
ex¥
: 
TOKEN


98 | '(' 
ex¥
 ')' { 
$$
 = 
$2
; }

99 | 
ex¥
 '|'Éx¥ { 
$$
 = 
	`›_‹
 (
$1
, 
$3
); }

100 | 
ex¥
 '&'Éx¥ { 
$$
 = 
	`›_™d
 (
$1
, 
$3
); }

101 | 
ex¥
 '='Éx¥ { 
$$
 = 
	`›_eq
 (
$1
, 
$3
); }

102 | 
ex¥
 '>'Éx¥ { 
$$
 = 
	`›_gt
 (
$1
, 
$3
); }

103 | 
ex¥
 '<'Éx¥ { 
$$
 = 
	`›_…
 (
$1
, 
$3
); }

104 | 
ex¥
 
GE
Éx¥ { 
$$
 = 
	`›_ge
 (
$1
, 
$3
); }

105 | 
ex¥
 
LE
Éx¥ { 
$$
 = 
	`›_À
 (
$1
, 
$3
); }

106 | 
ex¥
 
NE
Éx¥ { 
$$
 = 
	`›_√
 (
$1
, 
$3
); }

107 | 
ex¥
 '+'Éx¥ { 
$$
 = 
	`›_∂us
 (
$1
, 
$3
); }

108 | 
ex¥
 '-'Éx¥ { 
$$
 = 
	`›_möus
 (
$1
, 
$3
); }

109 | 
ex¥
 '*'Éx¥ { 
$$
 = 
	`›_times
 (
$1
, 
$3
); }

110 | 
ex¥
 '/'Éx¥ { 
$$
 = 
	`›_div
 (
$1
, 
$3
); }

111 | 
ex¥
 '%'Éx¥ { 
$$
 = 
	`›_ªm
 (
$1
, 
$3
); }

112 | 
ex¥
 ':'Éx¥ { 
$$
 = 
	`›_cﬁ⁄
 (
$1
, 
$3
); }

116 
	}
%%

118 
vÆ
 *

119 
	$make_öãgî
(
ötmax_t
 
i
)

121 
vÆ
 *
vp
;

123 
vp
 = (
vÆ
 *Ë
	`mÆloc
 ( (*vp));

124 i‡(
vp
 =
NULL
) {

125 
	`îrx
(
ERR_EXIT
, "malloc() failed");

128 
vp
->
ty≥
 = 
öãgî
;

129 
vp
->
u
.
i
 = i;

130  
vp
;

131 
	}
}

133 
vÆ
 *

134 
	$make_°r
(c⁄° *
s
)

136 
vÆ
 *
vp
;

137 *
ï
;

139 
vp
 = (
vÆ
 *Ë
	`mÆloc
 ( (*vp));

140 i‡(
vp
 =
NULL
 || ((vp->
u
.
s
 = 
	`°rdup
 (s)) == NULL)) {

141 
	`îrx
(
ERR_EXIT
, "malloc() failed");

159 i‡(
eÊag
)

160 ()
	`°πoimax
(
s
, &
ï
, 10);

162 ()
	`°πﬁ
(
s
, &
ï
, 10);

164 i‡(*
ï
 != '\0')

165 
vp
->
ty≥
 = 
°rög
;

167 
vp
->
ty≥
 = 
numîic_°rög
;

169  
vp
;

170 
	}
}

174 
	$‰ì_vÆue
(
vÆ
 *
vp
)

176 i‡(
vp
->
ty≥
 =
°rög
 || vp->ty≥ =
numîic_°rög
)

177 
	`‰ì
 (
vp
->
u
.
s
);

178 
	}
}

181 
ötmax_t


182 
	$to_öãgî
(
vÆ
 *
vp
)

184 
ötmax_t
 
i
;

186 i‡(
vp
->
ty≥
 =
öãgî
)

189 i‡(
vp
->
ty≥
 =
°rög
)

193 
î∫o
 = 0;

194 i‡(
eÊag
) {

195 
i
 = 
	`°πoimax
(
vp
->
u
.
s
, (**)
NULL
, 10);

196 i‡(
î∫o
 =
ERANGE
)

197 
	`îr
(
ERR_EXIT
, 
NULL
);

199 
i
 = 
	`°πﬁ
(
vp
->
u
.
s
, (**)
NULL
, 10);

202 
	`‰ì
 (
vp
->
u
.
s
);

203 
vp
->
u
.
i
 = i;

204 
vp
->
ty≥
 = 
öãgî
;

206 
	}
}

209 
	$to_°rög
(
vÆ
 *
vp
)

211 *
tmp
;

213 i‡(
vp
->
ty≥
 =
°rög
 || vp->ty≥ =
numîic_°rög
)

221 
	#NDIGITS
(
x
Ë(3 * ((xË* 
CHAR_BIT
Ë/ 10 + 1 + 1 + 1)

	)

222 
tmp
 = 
	`mÆloc
(
	`NDIGITS
(
vp
->
u
.
i
));

223 i‡(
tmp
 =
NULL
)

224 
	`îrx
(
ERR_EXIT
, "malloc() failed");

226 
	`•rötf
(
tmp
, "%jd", 
vp
->
u
.
i
);

227 
vp
->
ty≥
 = 
°rög
;

228 
vp
->
u
.
s
 = 
tmp
;

229 
	}
}

233 
	$is°rög
(
vÆ
 *
vp
)

236  (
vp
->
ty≥
 =
°rög
);

237 
	}
}

241 
	$yyÀx
()

243 *
p
;

245 i‡(*
av
 =
NULL
)

248 
p
 = *
av
++;

250 i‡(
	`°æí
 (
p
) == 1) {

251 i‡(
	`°rchr
 ("|&=<>+-*/%:()", *
p
))

252  (*
p
);

253 } i‡(
	`°æí
 (
p
) == 2 &&Ö[1] == '=') {

254 *
p
) {

255 '>':  (
GE
);

256 '<':  (
LE
);

257 '!':  (
NE
);

261 
yylvÆ
.
vÆ
 = 
	`make_°r
 (
p
);

262  (
TOKEN
);

263 
	}
}

266 
	$is_zîo_‹_nuŒ
(
vÆ
 *
vp
)

268 i‡(
vp
->
ty≥
 =
öãgî
) {

269  (
vp
->
u
.
i
 == 0);

271  (*
vp
->
u
.
s
 =0 || (
	`to_öãgî
 (vpË&& vp->u.
i
 == 0));

274 
	}
}

277 
	$maö
(
¨gc
, *
¨gv
[])

279 
c
;

281 
	`£éoˇÀ
 (
LC_ALL
, "");

282 i‡(
	`gëív
("EXPR_COMPAT"Ë!
NULL


283 || 
	`check_utûôy_com∑t
("expr")) {

284 
av
 = 
¨gv
 + 1;

285 
eÊag
 = 1;

287 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "e")) != -1)

288 
c
) {

290 
eÊag
 = 1;

294 
	`Ârötf
(
°dîr
,

296 
	`exô
(
ERR_EXIT
);

298 
av
 = 
¨gv
 + 
›töd
;

301 
	`yy∑r£
();

303 i‡(
ªsu…
->
ty≥
 =
öãgî
)

304 
	`¥ötf
("%jd\n", 
ªsu…
->
u
.
i
);

306 
	`¥ötf
("%s\n", 
ªsu…
->
u
.
s
);

308  (
	`is_zîo_‹_nuŒ
(
ªsu…
));

309 
	}
}

312 
	$yyîr‹
(c⁄° *
s
 
__unu£d
)

314 
	`îrx
(
ERR_EXIT
, "syntaxÉrror");

315 
	}
}

318 
vÆ
 *

319 
	$›_‹
(
vÆ
 *
a
, vÆ *
b
)

321 i‡(
	`is_zîo_‹_nuŒ
 (
a
)) {

322 
	`‰ì_vÆue
 (
a
);

323  (
b
);

325 
	`‰ì_vÆue
 (
b
);

326  (
a
);

328 
	}
}

330 
vÆ
 *

331 
	$›_™d
(
vÆ
 *
a
, vÆ *
b
)

333 i‡(
	`is_zîo_‹_nuŒ
 (
a
Ë|| is_zîo_‹_nuŒ (
b
)) {

334 
	`‰ì_vÆue
 (
a
);

335 
	`‰ì_vÆue
 (
b
);

336  (
	`make_öãgî
 ((
ötmax_t
)0));

338 
	`‰ì_vÆue
 (
b
);

339  (
a
);

341 
	}
}

343 
vÆ
 *

344 
	$›_eq
(
vÆ
 *
a
, vÆ *
b
)

346 
vÆ
 *
r
;

348 i‡(
	`is°rög
 (
a
Ë|| is°rög (
b
)) {

349 
	`to_°rög
 (
a
);

350 
	`to_°rög
 (
b
);

351 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
	`°rcﬁl
 (
a
->
u
.
s
, 
b
->u.s) == 0));

353 ()
	`to_öãgî
(
a
);

354 ()
	`to_öãgî
(
b
);

355 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
a
->
u
.
i
 =
b
->u.i));

358 
	`‰ì_vÆue
 (
a
);

359 
	`‰ì_vÆue
 (
b
);

360  
r
;

361 
	}
}

363 
vÆ
 *

364 
	$›_gt
(
vÆ
 *
a
, vÆ *
b
)

366 
vÆ
 *
r
;

368 i‡(
	`is°rög
 (
a
Ë|| is°rög (
b
)) {

369 
	`to_°rög
 (
a
);

370 
	`to_°rög
 (
b
);

371 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
	`°rcﬁl
 (
a
->
u
.
s
, 
b
->u.s) > 0));

373 ()
	`to_öãgî
(
a
);

374 ()
	`to_öãgî
(
b
);

375 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
a
->
u
.
i
 > 
b
->u.i));

378 
	`‰ì_vÆue
 (
a
);

379 
	`‰ì_vÆue
 (
b
);

380  
r
;

381 
	}
}

383 
vÆ
 *

384 
	$›_…
(
vÆ
 *
a
, vÆ *
b
)

386 
vÆ
 *
r
;

388 i‡(
	`is°rög
 (
a
Ë|| is°rög (
b
)) {

389 
	`to_°rög
 (
a
);

390 
	`to_°rög
 (
b
);

391 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
	`°rcﬁl
 (
a
->
u
.
s
, 
b
->u.s) < 0));

393 ()
	`to_öãgî
(
a
);

394 ()
	`to_öãgî
(
b
);

395 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
a
->
u
.
i
 < 
b
->u.i));

398 
	`‰ì_vÆue
 (
a
);

399 
	`‰ì_vÆue
 (
b
);

400  
r
;

401 
	}
}

403 
vÆ
 *

404 
	$›_ge
(
vÆ
 *
a
, vÆ *
b
)

406 
vÆ
 *
r
;

408 i‡(
	`is°rög
 (
a
Ë|| is°rög (
b
)) {

409 
	`to_°rög
 (
a
);

410 
	`to_°rög
 (
b
);

411 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
	`°rcﬁl
 (
a
->
u
.
s
, 
b
->u.s) >= 0));

413 ()
	`to_öãgî
(
a
);

414 ()
	`to_öãgî
(
b
);

415 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
a
->
u
.
i
 >
b
->u.i));

418 
	`‰ì_vÆue
 (
a
);

419 
	`‰ì_vÆue
 (
b
);

420  
r
;

421 
	}
}

423 
vÆ
 *

424 
	$›_À
(
vÆ
 *
a
, vÆ *
b
)

426 
vÆ
 *
r
;

428 i‡(
	`is°rög
 (
a
Ë|| is°rög (
b
)) {

429 
	`to_°rög
 (
a
);

430 
	`to_°rög
 (
b
);

431 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
	`°rcﬁl
 (
a
->
u
.
s
, 
b
->u.s) <= 0));

433 ()
	`to_öãgî
(
a
);

434 ()
	`to_öãgî
(
b
);

435 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
a
->
u
.
i
 <
b
->u.i));

438 
	`‰ì_vÆue
 (
a
);

439 
	`‰ì_vÆue
 (
b
);

440  
r
;

441 
	}
}

443 
vÆ
 *

444 
	$›_√
(
vÆ
 *
a
, vÆ *
b
)

446 
vÆ
 *
r
;

448 i‡(
	`is°rög
 (
a
Ë|| is°rög (
b
)) {

449 
	`to_°rög
 (
a
);

450 
	`to_°rög
 (
b
);

451 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
	`°rcﬁl
 (
a
->
u
.
s
, 
b
->u.s) != 0));

453 ()
	`to_öãgî
(
a
);

454 ()
	`to_öãgî
(
b
);

455 
r
 = 
	`make_öãgî
 ((
ötmax_t
)(
a
->
u
.
i
 !
b
->u.i));

458 
	`‰ì_vÆue
 (
a
);

459 
	`‰ì_vÆue
 (
b
);

460  
r
;

461 
	}
}

464 
	$chk_∂us
(
ötmax_t
 
a
, i¡max_à
b
, i¡max_à
r
)

468 i‡(
a
 > 0 && 
b
 > 0 && 
r
 <= 0)

471 i‡(
a
 < 0 && 
b
 < 0 && 
r
 >= 0)

475 
	}
}

477 
vÆ
 *

478 
	$›_∂us
(
vÆ
 *
a
, vÆ *
b
)

480 
vÆ
 *
r
;

482 i‡(!
	`to_öãgî
(
a
Ë|| !to_öãgî(
b
)) {

483 
	`îrx
(
ERR_EXIT
, "non-numericárgument");

486 i‡(
eÊag
) {

487 
r
 = 
	`make_öãgî
(
a
->
u
.
i
 + 
b
->u.i);

488 i‡(
	`chk_∂us
(
a
->
u
.
i
, 
b
->u.i, 
r
->u.i)) {

489 
	`îrx
(
ERR_EXIT
, "overflow");

492 
r
 = 
	`make_öãgî
(()
a
->
u
.
i
 + ()
b
->u.i);

494 
	`‰ì_vÆue
 (
a
);

495 
	`‰ì_vÆue
 (
b
);

496  
r
;

497 
	}
}

500 
	$chk_möus
(
ötmax_t
 
a
, i¡max_à
b
, i¡max_à
r
)

504 i‡(
b
 =
INTMAX_MIN
) {

505 i‡(
a
 >= 0)

511  
	`chk_∂us
 (
a
, -
b
, 
r
);

512 
	}
}

514 
vÆ
 *

515 
	$›_möus
(
vÆ
 *
a
, vÆ *
b
)

517 
vÆ
 *
r
;

519 i‡(!
	`to_öãgî
(
a
Ë|| !to_öãgî(
b
)) {

520 
	`îrx
(
ERR_EXIT
, "non-numericárgument");

523 i‡(
eÊag
) {

524 
r
 = 
	`make_öãgî
(
a
->
u
.
i
 - 
b
->u.i);

525 i‡(
	`chk_möus
(
a
->
u
.
i
, 
b
->u.i, 
r
->u.i)) {

526 
	`îrx
(
ERR_EXIT
, "overflow");

529 
r
 = 
	`make_öãgî
(()
a
->
u
.
i
 - ()
b
->u.i);

531 
	`‰ì_vÆue
 (
a
);

532 
	`‰ì_vÆue
 (
b
);

533  
r
;

534 
	}
}

537 
	$chk_times
(
ötmax_t
 
a
, i¡max_à
b
, i¡max_à
r
)

540 i‡(
a
 == 0)

543 i‡(
r
 / 
a
 !
b
)

546 
	}
}

548 
vÆ
 *

549 
	$›_times
(
vÆ
 *
a
, vÆ *
b
)

551 
vÆ
 *
r
;

553 i‡(!
	`to_öãgî
(
a
Ë|| !to_öãgî(
b
)) {

554 
	`îrx
(
ERR_EXIT
, "non-numericárgument");

557 i‡(
eÊag
) {

558 
r
 = 
	`make_öãgî
(
a
->
u
.
i
 * 
b
->u.i);

559 i‡(
	`chk_times
(
a
->
u
.
i
, 
b
->u.i, 
r
->u.i)) {

560 
	`îrx
(
ERR_EXIT
, "overflow");

563 
r
 = 
	`make_öãgî
(()
a
->
u
.
i
 * ()
b
->u.i);

565 
	`‰ì_vÆue
 (
a
);

566 
	`‰ì_vÆue
 (
b
);

567  (
r
);

568 
	}
}

571 
	$chk_div
(
ötmax_t
 
a
, i¡max_à
b
)

575 i‡(
a
 =
INTMAX_MIN
 && 
b
 == -1)

579 
	}
}

581 
vÆ
 *

582 
	$›_div
(
vÆ
 *
a
, vÆ *
b
)

584 
vÆ
 *
r
;

586 i‡(!
	`to_öãgî
(
a
Ë|| !to_öãgî(
b
)) {

587 
	`îrx
(
ERR_EXIT
, "non-numericárgument");

590 i‡(
b
->
u
.
i
 == 0) {

591 
	`îrx
(
ERR_EXIT
, "division by zero");

594 i‡(
eÊag
) {

595 
r
 = 
	`make_öãgî
(
a
->
u
.
i
 / 
b
->u.i);

596 i‡(
	`chk_div
(
a
->
u
.
i
, 
b
->u.i)) {

597 
	`îrx
(
ERR_EXIT
, "overflow");

600 
r
 = 
	`make_öãgî
(()
a
->
u
.
i
 / ()
b
->u.i);

602 
	`‰ì_vÆue
 (
a
);

603 
	`‰ì_vÆue
 (
b
);

604  
r
;

605 
	}
}

607 
vÆ
 *

608 
	$›_ªm
(
vÆ
 *
a
, vÆ *
b
)

610 
vÆ
 *
r
;

612 i‡(!
	`to_öãgî
(
a
Ë|| !to_öãgî(
b
)) {

613 
	`îrx
(
ERR_EXIT
, "non-numericárgument");

616 i‡(
b
->
u
.
i
 == 0) {

617 
	`îrx
(
ERR_EXIT
, "division by zero");

620 i‡(
eÊag
)

621 
r
 = 
	`make_öãgî
(
a
->
u
.
i
 % 
b
->u.i);

624 
r
 = 
	`make_öãgî
(()
a
->
u
.
i
 % ()
b
->u.i);

626 
	`‰ì_vÆue
 (
a
);

627 
	`‰ì_vÆue
 (
b
);

628  
r
;

629 
	}
}

631 
vÆ
 *

632 
	$›_cﬁ⁄
(
vÆ
 *
a
, vÆ *
b
)

634 
ªgex_t
 
Ω
;

635 
ªgm©ch_t
 
rm
[2];

636 
îrbuf
[256];

637 
evÆ
;

638 
vÆ
 *
v
;

641 
	`to_°rög
(
a
);

642 
	`to_°rög
(
b
);

645 i‡((
evÆ
 = 
	`ªgcomp
 (&
Ω
, 
b
->
u
.
s
, 0)) != 0) {

646 
	`ªgîr‹
 (
evÆ
, &
Ω
, 
îrbuf
, (errbuf));

647 
	`îrx
(
ERR_EXIT
, "%s", 
îrbuf
);

652 i‡(
	`ªgexec
(&
Ω
, 
a
->
u
.
s
, (
size_t
)2, 
rm
, 0Ë=0 &&Ñm[0].
rm_so
 == 0) {

653 i‡(
rm
[1].
rm_so
 >= 0) {

654 *(
a
->
u
.
s
 + 
rm
[1].
rm_eo
) = '\0';

655 
v
 = 
	`make_°r
 (
a
->
u
.
s
 + 
rm
[1].
rm_so
);

658 
v
 = 
	`make_öãgî
 ((
ötmax_t
)(
rm
[0].
rm_eo
 -Ñm[0].
rm_so
));

661 i‡(
Ω
.
ª_nsub
 == 0) {

662 
v
 = 
	`make_öãgî
 ((
ötmax_t
)0);

664 
v
 = 
	`make_°r
 ("");

669 
	`‰ì_vÆue
 (
a
);

670 
	`‰ì_vÆue
 (
b
);

671 
	`ªg‰ì
 (&
Ω
);

673  
v
;

674 
	}
}

	@getfacl/getfacl.c

34 
	~<sys/cdefs.h
>

35 
__FBSDID
("$FreeBSD: src/bin/getfacl/getfacl.c,v 1.12.10.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

37 
	~<sys/ty≥s.h
>

38 
	~<sys/∑øm.h
>

39 
	~<sys/a˛.h
>

40 
	~<sys/°©.h
>

42 
	~<îr.h
>

43 
	~<î∫o.h
>

44 
	~<gΩ.h
>

45 
	~<pwd.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<uni°d.h
>

51 
	gm‹e_th™_⁄e
 = 0;

54 
	$ußge
()

57 
	`Ârötf
(
°dîr
, "getfacl [-dhnqv] [file ...]\n");

58 
	}
}

61 
	$gëu«me
(
uid_t
 
uid
)

63 
∑sswd
 *
pw
;

64 
uids
[10];

66 i‡((
pw
 = 
	`gëpwuid
(
uid
)Ë=
NULL
) {

67 ()
	`¢¥ötf
(
uids
, (uids), "%u", 
uid
);

68  (
uids
);

70  (
pw
->
pw_«me
);

71 
	}
}

74 
	$gëg«me
(
gid_t
 
gid
)

76 
group
 *
gr
;

77 
gids
[10];

79 i‡((
gr
 = 
	`gëgrgid
(
gid
)Ë=
NULL
) {

80 ()
	`¢¥ötf
(
gids
, (gids), "%u", 
gid
);

81  (
gids
);

83  (
gr
->
gr_«me
);

84 
	}
}

90 
a˛_t


91 
	$a˛_‰om_°©
(
°©
 
sb
)

93 
a˛_t
 
a˛
;

94 
a˛_íåy_t
 
íåy
;

95 
a˛_≥rm£t_t
 
≥rms
;

98 
a˛
 = 
	`a˛_öô
(3);

99 i‡(!
a˛
)

100  
NULL
;

103 i‡(
	`a˛_¸óã_íåy
(&
a˛
, &
íåy
) == -1)

104  
NULL
;

105 i‡(
	`a˛_£t_èg_ty≥
(
íåy
, 
ACL_USER_OBJ
) == -1)

106  
NULL
;

108 i‡(
	`a˛_gë_≥rm£t
(
íåy
, &
≥rms
) == -1)

109  
NULL
;

110 i‡(
	`a˛_˛ór_≥rms
(
≥rms
) == -1)

111  
NULL
;

114 i‡(
sb
.
°_mode
 & 
S_IRUSR
)

115 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_READ
) == -1)

116  
NULL
;

117 i‡(
sb
.
°_mode
 & 
S_IWUSR
)

118 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_WRITE
) == -1)

119  
NULL
;

120 i‡(
sb
.
°_mode
 & 
S_IXUSR
)

121 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_EXECUTE
) == -1)

122  
NULL
;

123 i‡(
	`a˛_£t_≥rm£t
(
íåy
, 
≥rms
) == -1)

124  
NULL
;

127 i‡(
	`a˛_¸óã_íåy
(&
a˛
, &
íåy
) == -1)

128  
NULL
;

129 i‡(
	`a˛_£t_èg_ty≥
(
íåy
, 
ACL_GROUP_OBJ
) == -1)

130  
NULL
;

132 i‡(
	`a˛_gë_≥rm£t
(
íåy
, &
≥rms
) == -1)

133  
NULL
;

134 i‡(
	`a˛_˛ór_≥rms
(
≥rms
) == -1)

135  
NULL
;

138 i‡(
sb
.
°_mode
 & 
S_IRGRP
)

139 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_READ
) == -1)

140  
NULL
;

141 i‡(
sb
.
°_mode
 & 
S_IWGRP
)

142 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_WRITE
) == -1)

143  
NULL
;

144 i‡(
sb
.
°_mode
 & 
S_IXGRP
)

145 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_EXECUTE
) == -1)

146  
NULL
;

147 i‡(
	`a˛_£t_≥rm£t
(
íåy
, 
≥rms
) == -1)

148  
NULL
;

151 i‡(
	`a˛_¸óã_íåy
(&
a˛
, &
íåy
) == -1)

152  
NULL
;

153 i‡(
	`a˛_£t_èg_ty≥
(
íåy
, 
ACL_OTHER
) == -1)

154  
NULL
;

156 i‡(
	`a˛_gë_≥rm£t
(
íåy
, &
≥rms
) == -1)

157  
NULL
;

158 i‡(
	`a˛_˛ór_≥rms
(
≥rms
) == -1)

159  
NULL
;

162 i‡(
sb
.
°_mode
 & 
S_IROTH
)

163 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_READ
) == -1)

164  
NULL
;

165 i‡(
sb
.
°_mode
 & 
S_IWOTH
)

166 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_WRITE
) == -1)

167  
NULL
;

168 i‡(
sb
.
°_mode
 & 
S_IXOTH
)

169 i‡(
	`a˛_add_≥rm
(
≥rms
, 
ACL_EXECUTE
) == -1)

170  
NULL
;

171 i‡(
	`a˛_£t_≥rm£t
(
íåy
, 
≥rms
) == -1)

172  
NULL
;

174 (
a˛
);

175 
	}
}

178 
	$¥öt_a˛
(*
∑th
, 
a˛_ty≥_t
 
ty≥
, 
hÊag
, 
iÊag
, 
nÊag
,

179 
qÊag
, 
vÊag
)

181 
°©
 
sb
;

182 
a˛_t
 
a˛
;

183 *
a˛_ãxt
;

184 
îr‹
, 
Êags
 = 0, 
ªt
;

186 i‡(
hÊag
)

187 
îr‹
 = 
	`l°©
(
∑th
, &
sb
);

189 
îr‹
 = 
	`°©
(
∑th
, &
sb
);

190 i‡(
îr‹
 == -1) {

191 
	`w¨n
("%s: sèt(ËÁûed", 
∑th
);

195 i‡(
hÊag
)

196 
ªt
 = 
	`Õ©hc⁄f
(
∑th
, 
_PC_ACL_NFS4
);

198 
ªt
 = 
	`∑thc⁄f
(
∑th
, 
_PC_ACL_NFS4
);

199 i‡(
ªt
 > 0) {

200 i‡(
ty≥
 =
ACL_TYPE_DEFAULT
) {

201 
	`w¨nx
("%s:ÅhereáreÇo defaultÉntries in NFSv4 ACLs",

202 
∑th
);

205 
ty≥
 = 
ACL_TYPE_NFS4
;

206 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

207 
	`w¨n
("%s:Ö©hc⁄f(..., _PC_ACL_NFS4ËÁûed", 
∑th
);

211 i‡(
m‹e_th™_⁄e
)

212 
	`¥ötf
("\n");

214 
m‹e_th™_⁄e
++;

216 i‡(!
qÊag
)

217 
	`¥ötf
("# fûe: %s\n# ow√r: %s\n# group: %s\n", 
∑th
,

218 
	`gëu«me
(
sb
.
°_uid
), 
	`gëg«me
(sb.
°_gid
));

220 i‡(
hÊag
)

221 
a˛
 = 
	`a˛_gë_lök_≈
(
∑th
, 
ty≥
);

223 
a˛
 = 
	`a˛_gë_fûe
(
∑th
, 
ty≥
);

224 i‡(!
a˛
) {

225 i‡(
î∫o
 !
EOPNOTSUPP
) {

226 
	`w¨n
("%s", 
∑th
);

229 
î∫o
 = 0;

230 i‡(
ty≥
 =
ACL_TYPE_DEFAULT
)

232 
a˛
 = 
	`a˛_‰om_°©
(
sb
);

233 i‡(!
a˛
) {

234 
	`w¨n
("%s:á˛_‰om_°©(ËÁûed", 
∑th
);

239 i‡(
iÊag
)

240 
Êags
 |
ACL_TEXT_APPEND_ID
;

242 i‡(
nÊag
)

243 
Êags
 |
ACL_TEXT_NUMERIC_IDS
;

245 i‡(
vÊag
)

246 
Êags
 |
ACL_TEXT_VERBOSE
;

248 
a˛_ãxt
 = 
	`a˛_to_ãxt_≈
(
a˛
, 0, 
Êags
);

249 i‡(!
a˛_ãxt
) {

250 
	`w¨n
("%s:á˛_to_ãxt_≈(ËÁûed", 
∑th
);

254 
	`¥ötf
("%s", 
a˛_ãxt
);

256 ()
	`a˛_‰ì
(
a˛
);

257 ()
	`a˛_‰ì
(
a˛_ãxt
);

260 
	}
}

263 
	$¥öt_a˛_‰om_°dö
(
a˛_ty≥_t
 
ty≥
, 
hÊag
, 
iÊag
, 
nÊag
,

264 
qÊag
, 
vÊag
)

266 *
p
, 
∑th«me
[
PATH_MAX
];

267 
ˇºõd_îr‹
 = 0;

269 
	`fgës
(
∑th«me
, ()’©h«me), 
°dö
)) {

270 i‡((
p
 = 
	`°rchr
(
∑th«me
, '\n')Ë!
NULL
)

271 *
p
 = '\0';

272 i‡(
	`¥öt_a˛
(
∑th«me
, 
ty≥
, 
hÊag
, 
iÊag
, 
nÊag
,

273 
qÊag
, 
vÊag
) == -1) {

274 
ˇºõd_îr‹
 = -1;

278 (
ˇºõd_îr‹
);

279 
	}
}

282 
	$maö
(
¨gc
, *
¨gv
[])

284 
a˛_ty≥_t
 
ty≥
 = 
ACL_TYPE_ACCESS
;

285 
ˇºõd_îr‹
 = 0;

286 
ch
, 
îr‹
, 
i
;

287 
hÊag
, 
iÊag
, 
qÊag
, 
nÊag
, 
vÊag
;

289 
hÊag
 = 0;

290 
iÊag
 = 0;

291 
qÊag
 = 0;

292 
nÊag
 = 0;

293 
vÊag
 = 0;

294 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dhinqv")) != -1)

295 
ch
) {

297 
ty≥
 = 
ACL_TYPE_DEFAULT
;

300 
hÊag
 = 1;

303 
iÊag
 = 1;

306 
nÊag
 = 1;

309 
qÊag
 = 1;

312 
vÊag
 = 1;

315 
	`ußge
();

318 
¨gc
 -
›töd
;

319 
¨gv
 +
›töd
;

321 i‡(
¨gc
 == 0) {

322 
îr‹
 = 
	`¥öt_a˛_‰om_°dö
(
ty≥
, 
hÊag
, 
iÊag
, 
nÊag
,

323 
qÊag
, 
vÊag
);

324 (
îr‹
 ? 1 : 0);

327 
i
 = 0; i < 
¨gc
; i++) {

328 i‡(!
	`°rcmp
(
¨gv
[
i
], "-")) {

329 
îr‹
 = 
	`¥öt_a˛_‰om_°dö
(
ty≥
, 
hÊag
, 
iÊag
, 
nÊag
,

330 
qÊag
, 
vÊag
);

331 i‡(
îr‹
 == -1)

332 
ˇºõd_îr‹
 = -1;

334 
îr‹
 = 
	`¥öt_a˛
(
¨gv
[
i
], 
ty≥
, 
hÊag
, 
iÊag
, 
nÊag
,

335 
qÊag
, 
vÊag
);

336 i‡(
îr‹
 == -1)

337 
ˇºõd_îr‹
 = -1;

341 (
ˇºõd_îr‹
 ? 1 : 0);

342 
	}
}

	@hostname/hostname.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)hostname.c 8.1 (Berkeley) 5/31/93";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/hostname/hostname.c,v 1.20.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/∑øm.h
>

46 
	~<îr.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<uni°d.h
>

52 
ußge
();

55 
	$maö
(
¨gc
, *
¨gv
[])

57 
ch
, 
sÊag
;

58 *
p
, 
ho°«me
[
MAXHOSTNAMELEN
];

60 
sÊag
 = 0;

61 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "fs")) != -1)

62 
ch
) {

71 
sÊag
 = 1;

75 
	`ußge
();

77 
¨gc
 -
›töd
;

78 
¨gv
 +
›töd
;

80 i‡(
¨gc
 > 1)

81 
	`ußge
();

83 i‡(*
¨gv
) {

84 i‡(
	`£tho°«me
(*
¨gv
, ()
	`°æí
(*argv)))

85 
	`îr
(1, "sethostname");

87 i‡(
	`gëho°«me
(
ho°«me
, ()(hostname)))

88 
	`îr
(1, "gethostname");

89 i‡(
sÊag
) {

90 
p
 = 
	`°rchr
(
ho°«me
, '.');

91 i‡(
p
 !
NULL
)

92 *
p
 = '\0';

94 ()
	`¥ötf
("%s\n", 
ho°«me
);

96 
	`exô
(0);

97 
	}
}

100 
	$ußge
()

103 ()
	`Ârötf
(
°dîr
, "usage: hostname [-fs] [name-of-host]\n");

104 
	`exô
(1);

105 
	}
}

	@kenv/kenv.c

26 
	~<sys/cdefs.h
>

27 
__FBSDID
("$FreeBSD: src/bin/kenv/kenv.c,v 1.8.10.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

29 
	~<sys/ty≥s.h
>

30 
	~<sys/sys˘l.h
>

31 
	~<îr.h
>

32 
	~<kív.h
>

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<°rög.h
>

36 
	~<uni°d.h
>

38 
ußge
();

39 
kdum≥nv
();

40 
kgëív
(*);

41 
k£ãnv
(*, *);

42 
kun£ãnv
(*);

44 
	ghÊag
 = 0;

45 
	gqÊag
 = 0;

46 
	guÊag
 = 0;

49 
	$ußge
()

51 ()
	`Ârötf
(
°dîr
, "%s\n%s\n%s\n",

55 
	`exô
(1);

56 
	}
}

59 
	$maö
(
¨gc
, **
¨gv
)

61 *
ív
, *
eq
, *
vÆ
;

62 
ch
, 
îr‹
;

64 
îr‹
 = 0;

65 
vÆ
 = 
NULL
;

66 
ív
 = 
NULL
;

67 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "hqu")) != -1) {

68 
ch
) {

70 
hÊag
++;

73 
qÊag
++;

76 
uÊag
++;

79 
	`ußge
();

82 
¨gc
 -
›töd
;

83 
¨gv
 +
›töd
;

84 i‡(
¨gc
 > 0) {

85 
ív
 = 
¨gv
[0];

86 
eq
 = 
	`°rchr
(
ív
, '=');

87 i‡(
eq
 !
NULL
) {

88 *
eq
++ = '\0';

89 
vÆ
 = 
eq
;

91 
¨gv
++;

92 
¨gc
--;

94 i‡(
hÊag
 && (
ív
 !
NULL
))

95 
	`ußge
();

96 i‡((
¨gc
 > 0Ë|| (
uÊag
 && (
ív
 =
NULL
)))

97 
	`ußge
();

98 i‡(
ív
 =
NULL
) {

99 
îr‹
 = 
	`kdum≥nv
();

100 i‡(
îr‹
 && !
qÊag
)

101 
	`w¨n
("kdumpenv");

102 } i‡(
vÆ
 =
NULL
) {

103 i‡(
uÊag
) {

104 
îr‹
 = 
	`kun£ãnv
(
ív
);

105 i‡(
îr‹
 && !
qÊag
)

106 
	`w¨nx
("u«bÀÅÿun£à%s", 
ív
);

108 
îr‹
 = 
	`kgëív
(
ív
);

109 i‡(
îr‹
 && !
qÊag
)

110 
	`w¨nx
("u«bÀÅÿgë %s", 
ív
);

113 
îr‹
 = 
	`k£ãnv
(
ív
, 
vÆ
);

114 i‡(
îr‹
 && !
qÊag
)

115 
	`w¨nx
("u«bÀÅÿ£à%†tÿ%s", 
ív
, 
vÆ
);

117  (
îr‹
);

118 
	}
}

121 
	$kdum≥nv
()

123 *
buf
, *
˝
;

124 
buÊí
, 
ívÀn
;

126 
ívÀn
 = 
	`kív
(
KENV_DUMP
, 
NULL
, NULL, 0);

127 i‡(
ívÀn
 < 0)

130 
buÊí
 = 
ívÀn
 * 120 / 100;

131 
buf
 = 
	`mÆloc
(
buÊí
 + 1);

132 i‡(
buf
 =
NULL
)

134 
	`mem£t
(
buf
, 0, 
buÊí
 + 1);

135 
ívÀn
 = 
	`kív
(
KENV_DUMP
, 
NULL
, 
buf
, 
buÊí
);

136 i‡(
ívÀn
 < 0) {

137 
	`‰ì
(
buf
);

140 i‡(
ívÀn
 > 
buÊí
)

141 
	`‰ì
(
buf
);

146 ; *
buf
 !'\0'; bu‡+
	`°æí
(buf) + 1) {

147 i‡(
hÊag
) {

148 i‡(
	`°∫cmp
(
buf
, "hint.", 5) != 0)

151 
˝
 = 
	`°rchr
(
buf
, '=');

152 i‡(
˝
 =
NULL
)

154 *
˝
++ = '\0';

155 
	`¥ötf
("%s=\"%s\"\n", 
buf
, 
˝
);

156 
buf
 = 
˝
;

159 
	}
}

162 
	$kgëív
(*
ív
)

164 
buf
[1024];

165 
ªt
;

167 
ªt
 = 
	`kív
(
KENV_GET
, 
ív
, 
buf
, (buf));

168 i‡(
ªt
 == -1)

169  (
ªt
);

170 
	`¥ötf
("%s\n", 
buf
);

172 
	}
}

175 
	$k£ãnv
(*
ív
, *
vÆ
)

177 
ªt
;

179 
ªt
 = 
	`kív
(
KENV_SET
, 
ív
, 
vÆ
, 
	`°æí
(val)+1);

180 i‡(
ªt
 == 0)

181 
	`¥ötf
("%s=\"%s\"\n", 
ív
, 
vÆ
);

182  (
ªt
);

183 
	}
}

186 
	$kun£ãnv
(*
ív
)

188 
ªt
;

190 
ªt
 = 
	`kív
(
KENV_UNSET
, 
ív
, 
NULL
, 0);

191  (
ªt
);

192 
	}
}

	@kill/kill.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)kill.c 8.4 (Berkeley) 4/28/95";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/kill/kill.c,v 1.20.22.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<˘y≥.h
>

45 
	~<îr.h
>

46 
	~<î∫o.h
>

47 
	~<sig«l.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°rög.h
>

52 
nosig
(const *);

53 
¥ötsig«ls
(
FILE
 *);

54 
sig«me_to_signum
(const *);

55 
ußge
();

58 
	$maö
(
¨gc
, *
¨gv
[])

60 
îr‹s
, 
numsig
, 
pid
;

61 *
ï
;

63 i‡(
¨gc
 < 2)

64 
	`ußge
();

66 
numsig
 = 
SIGTERM
;

68 
¨gc
--, 
¨gv
++;

69 i‡(!
	`°rcmp
(*
¨gv
, "-l")) {

70 
¨gc
--, 
¨gv
++;

71 i‡(
¨gc
 > 1)

72 
	`ußge
();

73 i‡(
¨gc
 == 1) {

74 i‡(!
	`isdigô
(**
¨gv
))

75 
	`ußge
();

76 
numsig
 = 
	`°πﬁ
(*
¨gv
, &
ï
, 10);

77 i‡(!**
¨gv
 || *
ï
)

78 
	`îrx
(1, "ûÀgÆ sig«»numbî: %s", *
¨gv
);

79 i‡(
numsig
 >= 128)

80 
numsig
 -= 128;

81 i‡(
numsig
 <0 ||Çumsig >
sys_nsig
)

82 
	`nosig
(*
¨gv
);

83 
	`¥ötf
("%s\n", 
sys_sig«me
[
numsig
]);

84 
	`exô
(0);

86 
	`¥ötsig«ls
(
°dout
);

87 
	`exô
(0);

90 i‡(!
	`°rcmp
(*
¨gv
, "-s")) {

91 
¨gc
--, 
¨gv
++;

92 i‡(
¨gc
 < 1) {

93 
	`w¨nx
("optionÑequiresánárgument -- s");

94 
	`ußge
();

96 i‡(
	`°rcmp
(*
¨gv
, "0")) {

97 i‡((
numsig
 = 
	`sig«me_to_signum
(*
¨gv
)) < 0)

98 
	`nosig
(*
¨gv
);

100 
numsig
 = 0;

101 
¨gc
--, 
¨gv
++;

102 } i‡(**
¨gv
 == '-' && *(*argv + 1) != '-') {

103 ++*
¨gv
;

104 i‡(
	`ißÕha
(**
¨gv
)) {

105 i‡((
numsig
 = 
	`sig«me_to_signum
(*
¨gv
)) < 0)

106 
	`nosig
(*
¨gv
);

107 } i‡(
	`isdigô
(**
¨gv
)) {

108 
numsig
 = 
	`°πﬁ
(*
¨gv
, &
ï
, 10);

109 i‡(!**
¨gv
 || *
ï
)

110 
	`îrx
(1, "ûÀgÆ sig«»numbî: %s", *
¨gv
);

111 i‡(
numsig
 < 0)

112 
	`nosig
(*
¨gv
);

114 
	`nosig
(*
¨gv
);

115 
¨gc
--, 
¨gv
++;

118 i‡(
¨gc
 > 0 && 
	`°∫cmp
(*
¨gv
, "--", 2) == 0)

119 
¨gc
--, 
¨gv
++;

121 i‡(
¨gc
 == 0)

122 
	`ußge
();

124 
îr‹s
 = 0; 
¨gc
;árgc--, 
¨gv
++) {

125 
pid
 = 
	`°πﬁ
(*
¨gv
, &
ï
, 10);

126 i‡(!**
¨gv
 || *
ï
) {

127 
	`w¨nx
("ûÀgÆÖro˚s†id: %s", *
¨gv
);

128 
îr‹s
 = 1;

129 } i‡(
	`kûl
(
pid
, 
numsig
) == -1) {

130 
	`w¨n
("%s", *
¨gv
);

131 
îr‹s
 = 1;

135 
	`exô
(
îr‹s
);

136 
	}
}

139 
	$sig«me_to_signum
(c⁄° *
sig
)

141 
n
;

143 i‡(!
	`°∫ˇ£cmp
(
sig
, "sig", (
size_t
)3))

144 
sig
 += 3;

145 
n
 = 1;Ç < 
sys_nsig
;Ç++) {

146 i‡(!
	`°rˇ£cmp
(
sys_sig«me
[
n
], 
sig
))

147  (
n
);

150 
	}
}

153 
	$nosig
(c⁄° *
«me
)

156 
	`w¨nx
("unknow¿sig«»%s; vÆid sig«ls:", 
«me
);

157 
	`¥ötsig«ls
(
°dîr
);

158 
	`exô
(1);

159 
	}
}

162 
	$¥ötsig«ls
(
FILE
 *
Â
)

164 
n
;

166 
n
 = 1;Ç < 
sys_nsig
;Ç++) {

167 ()
	`Ârötf
(
Â
, "%s", 
sys_sig«me
[
n
]);

168 i‡(
n
 =(
sys_nsig
 / 2) ||Ç == (sys_nsig - 1))

169 ()
	`Ârötf
(
Â
, "\n");

171 ()
	`Ârötf
(
Â
, " ");

173 
	}
}

176 
	$ußge
()

179 ()
	`Ârötf
(
°dîr
, "%s\n%s\n%s\n%s\n",

184 
	`exô
(1);

185 
	}
}

	@ln/ln.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)ln.c 8.2 (Berkeley) 3/31/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/ln/ln.c,v 1.39.2.3.6.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/∑øm.h
>

45 
	~<sys/°©.h
>

47 
	~<îr.h
>

48 
	~<î∫o.h
>

49 
	~<f˙é.h
>

50 
	~<libgí.h
>

51 
	~<limôs.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

55 
	~<uni°d.h
>

57 
	gfÊag
;

58 
	gFÊag
;

59 
	ghÊag
;

60 
	giÊag
;

61 
	gPÊag
;

62 
	gsÊag
;

63 
	gvÊag
;

64 
	gwÊag
;

66 
	glökch
;

68 
lökô
(const *, const *, );

69 
ußge
();

72 
	$maö
(
¨gc
, *
¨gv
[])

74 
°©
 
sb
;

75 *
p
, *
èrgëdú
;

76 
ch
, 
exôvÆ
;

83 i‡((
p
 = 
	`rödex
(
¨gv
[0], '/')Ë=
NULL
)

84 
p
 = 
¨gv
[0];

86 ++
p
;

87 i‡(
	`°rcmp
(
p
, "link") == 0) {

88 
	`gë›t
(
¨gc
, 
¨gv
, "") != -1)

89 
	`ußge
();

90 
¨gc
 -
›töd
;

91 
¨gv
 +
›töd
;

92 i‡(
¨gc
 != 2)

93 
	`ußge
();

94 
	`exô
(
	`lökô
(
¨gv
[0],árgv[1], 0));

97 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "FLPfhinsvw")) != -1)

98 
ch
) {

100 
FÊag
 = 1;

103 
PÊag
 = 0;

106 
PÊag
 = 1;

109 
fÊag
 = 1;

110 
iÊag
 = 0;

111 
wÊag
 = 0;

115 
hÊag
 = 1;

118 
iÊag
 = 1;

119 
fÊag
 = 0;

122 
sÊag
 = 1;

125 
vÊag
 = 1;

128 
wÊag
 = 1;

132 
	`ußge
();

135 
¨gv
 +
›töd
;

136 
¨gc
 -
›töd
;

138 
lökch
 = 
sÊag
 ? '-' : '=';

139 i‡(
sÊag
 == 0)

140 
FÊag
 = 0;

141 i‡(
FÊag
 =1 && 
iÊag
 == 0) {

142 
fÊag
 = 1;

143 
wÊag
 = 0;

146 
¨gc
) {

148 
	`ußge
();

151 
	`exô
(
	`lökô
(
¨gv
[0], ".", 1));

153 
	`exô
(
	`lökô
(
¨gv
[0],árgv[1], 0));

158 
èrgëdú
 = 
¨gv
[
¨gc
 - 1];

159 i‡(
hÊag
 && 
	`l°©
(
èrgëdú
, &
sb
Ë=0 && 
	`S_ISLNK
(sb.
°_mode
)) {

164 
î∫o
 = 
ENOTDIR
;

165 
	`îr
(1, "%s", 
èrgëdú
);

167 i‡(
	`°©
(
èrgëdú
, &
sb
))

168 
	`îr
(1, "%s", 
èrgëdú
);

169 i‡(!
	`S_ISDIR
(
sb
.
°_mode
))

170 
	`ußge
();

171 
exôvÆ
 = 0; *
¨gv
 !
èrgëdú
; ++argv)

172 
exôvÆ
 |
	`lökô
(*
¨gv
, 
èrgëdú
, 1);

173 
	`exô
(
exôvÆ
);

174 
	}
}

181 
	$ßmedúít
(c⁄° *
∑th1
, c⁄° *
∑th2
)

183 c⁄° *
fûe1
, *
fûe2
;

184 
∑thbuf
[
PATH_MAX
];

185 
°©
 
sb1
, 
sb2
;

187 i‡(
	`°rcmp
(
∑th1
, 
∑th2
) == 0)

189 
fûe1
 = 
	`°ºchr
(
∑th1
, '/');

190 i‡(
fûe1
 !
NULL
)

191 
fûe1
++;

193 
fûe1
 = 
∑th1
;

194 
fûe2
 = 
	`°ºchr
(
∑th2
, '/');

195 i‡(
fûe2
 !
NULL
)

196 
fûe2
++;

198 
fûe2
 = 
∑th2
;

199 i‡(
	`°rcmp
(
fûe1
, 
fûe2
) != 0)

201 i‡(
fûe1
 - 
∑th1
 >
PATH_MAX
 || 
fûe2
 - 
∑th2
 >= PATH_MAX)

203 i‡(
fûe1
 =
∑th1
)

204 
	`mem˝y
(
∑thbuf
, ".", 2);

206 
	`mem˝y
(
∑thbuf
, 
∑th1
, 
fûe1
 -Öath1);

207 
∑thbuf
[
fûe1
 - 
∑th1
] = '\0';

209 i‡(
	`°©
(
∑thbuf
, &
sb1
) != 0)

211 i‡(
fûe2
 =
∑th2
)

212 
	`mem˝y
(
∑thbuf
, ".", 2);

214 
	`mem˝y
(
∑thbuf
, 
∑th2
, 
fûe2
 -Öath2);

215 
∑thbuf
[
fûe2
 - 
∑th2
] = '\0';

217 i‡(
	`°©
(
∑thbuf
, &
sb2
) != 0)

219  
sb1
.
°_dev
 =
sb2
.°_dev && sb1.
°_öo
 == sb2.st_ino;

220 
	}
}

223 
	$lökô
(c⁄° *
sour˚
, c⁄° *
èrgë
, 
isdú
)

225 
°©
 
sb
;

226 c⁄° *
p
;

227 
ch
, 
exi°s
, 
fú°
;

228 
∑th
[
PATH_MAX
];

229 
wbuf
[
PATH_MAX
];

230 
bbuf
[
PATH_MAX
];

232 i‡(!
sÊag
) {

234 i‡((
PÊag
 ? 
l°©
 : 
°©
)(
sour˚
, &
sb
)) {

235 
	`w¨n
("%s", 
sour˚
);

239 i‡(
	`S_ISDIR
(
sb
.
°_mode
)) {

240 
î∫o
 = 
EISDIR
;

241 
	`w¨n
("%s", 
sour˚
);

250 i‡(
isdú
 ||

251 (
	`l°©
(
èrgë
, &
sb
Ë=0 && 
	`S_ISDIR
(sb.
°_mode
)) ||

252 (!
hÊag
 && 
	`°©
(
èrgë
, &
sb
Ë=0 && 
	`S_ISDIR
(sb.
°_mode
))) {

253 i‡(
	`°æ˝y
(
bbuf
, 
sour˚
, (bbuf)) >= (bbuf) ||

254 (
p
 = 
	`ba£«me
(
bbuf
)Ë=
NULL
 ||

255 
	`¢¥ötf
(
∑th
, ’©h), "%s/%s", 
èrgë
, 
p
) >=

256 (
ssize_t
)(
∑th
)) {

257 
î∫o
 = 
ENAMETOOLONG
;

258 
	`w¨n
("%s", 
sour˚
);

261 
èrgë
 = 
∑th
;

268 i‡(
sÊag
 && 
wÊag
) {

269 i‡(*
sour˚
 == '/') {

271 i‡(
	`°©
(
sour˚
, &
sb
) != 0)

272 
	`w¨n
("w¨nög: %†öac˚ssibÀ", 
sour˚
);

279 
	`°æ˝y
(
bbuf
, 
èrgë
, (bbuf));

280 
p
 = 
	`dú«me
(
bbuf
);

281 i‡(
p
 !
NULL
) {

282 ()
	`¢¥ötf
(
wbuf
, (wbuf), "%s/%s",

283 
p
, 
sour˚
);

284 i‡(
	`°©
(
wbuf
, &
sb
) != 0)

285 
	`w¨n
("w¨nög: %s", 
sour˚
);

293 
exi°s
 = !
	`l°©
(
èrgë
, &
sb
);

294 i‡(
exi°s
) {

295 i‡(!
sÊag
 && 
	`ßmedúít
(
sour˚
, 
èrgë
)) {

296 
	`w¨nx
("%sánd %sáreÅhe same directoryÉntry",

297 
sour˚
, 
èrgë
);

305 i‡(
fÊag
 && 
exi°s
) {

306 i‡(
FÊag
 && 
	`S_ISDIR
(
sb
.
°_mode
)) {

307 i‡(
	`rmdú
(
èrgë
)) {

308 
	`w¨n
("%s", 
èrgë
);

311 } i‡(
	`u∆ök
(
èrgë
)) {

312 
	`w¨n
("%s", 
èrgë
);

315 } i‡(
iÊag
 && 
exi°s
) {

316 
	`fÊush
(
°dout
);

317 
	`Ârötf
(
°dîr
, "ª∂a˚ %s? ", 
èrgë
);

319 
fú°
 = 
ch
 = 
	`gëch¨
();

320 
ch
 !'\n' && ch !
EOF
)

321 
ch
 = 
	`gëch¨
();

322 i‡(
fú°
 != 'y' && first != 'Y') {

323 
	`Ârötf
(
°dîr
, "notÑeplaced\n");

327 i‡(
FÊag
 && 
	`S_ISDIR
(
sb
.
°_mode
)) {

328 i‡(
	`rmdú
(
èrgë
)) {

329 
	`w¨n
("%s", 
èrgë
);

332 } i‡(
	`u∆ök
(
èrgë
)) {

333 
	`w¨n
("%s", 
èrgë
);

339 i‡(
sÊag
 ? 
	`symlök
(
sour˚
, 
èrgë
) :

340 
	`lök©
(
AT_FDCWD
, 
sour˚
, AT_FDCWD, 
èrgë
,

341 
PÊag
 ? 0 : 
AT_SYMLINK_FOLLOW
)) {

342 
	`w¨n
("%s", 
èrgë
);

345 i‡(
vÊag
)

346 ()
	`¥ötf
("%†%c> %s\n", 
èrgë
, 
lökch
, 
sour˚
);

348 
	}
}

351 
	$ußge
()

353 ()
	`Ârötf
(
°dîr
, "%s\n%s\n%s\n",

357 
	`exô
(1);

358 
	}
}

	@ls/cmp.c

34 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)cmp.c 8.1 (Berkeley) 5/31/93";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/ls/cmp.c,v 1.18.10.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

45 
	~<·s.h
>

46 
	~<°rög.h
>

48 
	~"ls.h
"

49 
	~"exã∫.h
"

52 
	$«mecmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

55  (
	`°rcﬁl
(
a
->
·s_«me
, 
b
->fts_name));

56 
	}
}

59 
	$ªv«mecmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

62  (
	`°rcﬁl
(
b
->
·s_«me
, 
a
->fts_name));

63 
	}
}

66 
	$modcmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

69 i‡(
b
->
·s_°©p
->
°_mtime•ec
.
tv_£c
 >

70 
a
->
·s_°©p
->
°_mtime•ec
.
tv_£c
)

72 i‡(
b
->
·s_°©p
->
°_mtime•ec
.
tv_£c
 <

73 
a
->
·s_°©p
->
°_mtime•ec
.
tv_£c
)

75 i‡(
b
->
·s_°©p
->
°_mtime•ec
.
tv_n£c
 >

76 
a
->
·s_°©p
->
°_mtime•ec
.
tv_n£c
)

78 i‡(
b
->
·s_°©p
->
°_mtime•ec
.
tv_n£c
 <

79 
a
->
·s_°©p
->
°_mtime•ec
.
tv_n£c
)

81  (
	`°rcﬁl
(
a
->
·s_«me
, 
b
->fts_name));

82 
	}
}

85 
	$ªvmodcmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

88  (
	`modcmp
(
b
, 
a
));

89 
	}
}

92 
	$acccmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

95 i‡(
b
->
·s_°©p
->
°_©ime•ec
.
tv_£c
 >

96 
a
->
·s_°©p
->
°_©ime•ec
.
tv_£c
)

98 i‡(
b
->
·s_°©p
->
°_©ime•ec
.
tv_£c
 <

99 
a
->
·s_°©p
->
°_©ime•ec
.
tv_£c
)

101 i‡(
b
->
·s_°©p
->
°_©ime•ec
.
tv_n£c
 >

102 
a
->
·s_°©p
->
°_©ime•ec
.
tv_n£c
)

104 i‡(
b
->
·s_°©p
->
°_©ime•ec
.
tv_n£c
 <

105 
a
->
·s_°©p
->
°_©ime•ec
.
tv_n£c
)

107  (
	`°rcﬁl
(
a
->
·s_«me
, 
b
->fts_name));

108 
	}
}

111 
	$ªvacccmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

114  (
	`acccmp
(
b
, 
a
));

115 
	}
}

118 
	$búthcmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

121 i‡(
b
->
·s_°©p
->
°_búthtime•ec
.
tv_£c
 >

122 
a
->
·s_°©p
->
°_búthtime•ec
.
tv_£c
)

124 i‡(
b
->
·s_°©p
->
°_búthtime•ec
.
tv_£c
 <

125 
a
->
·s_°©p
->
°_búthtime•ec
.
tv_£c
)

127 i‡(
b
->
·s_°©p
->
°_búthtime•ec
.
tv_n£c
 >

128 
a
->
·s_°©p
->
°_búthtime•ec
.
tv_n£c
)

130 i‡(
b
->
·s_°©p
->
°_búthtime•ec
.
tv_n£c
 <

131 
a
->
·s_°©p
->
°_búthtime•ec
.
tv_n£c
)

133  (
	`°rcﬁl
(
a
->
·s_«me
, 
b
->fts_name));

134 
	}
}

137 
	$ªvbúthcmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

140  (
	`búthcmp
(
b
, 
a
));

141 
	}
}

144 
	$°©cmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

147 i‡(
b
->
·s_°©p
->
°_˘ime•ec
.
tv_£c
 >

148 
a
->
·s_°©p
->
°_˘ime•ec
.
tv_£c
)

150 i‡(
b
->
·s_°©p
->
°_˘ime•ec
.
tv_£c
 <

151 
a
->
·s_°©p
->
°_˘ime•ec
.
tv_£c
)

153 i‡(
b
->
·s_°©p
->
°_˘ime•ec
.
tv_n£c
 >

154 
a
->
·s_°©p
->
°_˘ime•ec
.
tv_n£c
)

156 i‡(
b
->
·s_°©p
->
°_˘ime•ec
.
tv_n£c
 <

157 
a
->
·s_°©p
->
°_˘ime•ec
.
tv_n£c
)

159  (
	`°rcﬁl
(
a
->
·s_«me
, 
b
->fts_name));

160 
	}
}

163 
	$ªv°©cmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

166  (
	`°©cmp
(
b
, 
a
));

167 
	}
}

170 
	$sizecmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

173 i‡(
b
->
·s_°©p
->
°_size
 > 
a
->fts_statp->st_size)

175 i‡(
b
->
·s_°©p
->
°_size
 < 
a
->fts_statp->st_size)

177  (
	`°rcﬁl
(
a
->
·s_«me
, 
b
->fts_name));

178 
	}
}

181 
	$ªvsizecmp
(c⁄° 
FTSENT
 *
a
, c⁄° FTSENT *
b
)

184  (
	`sizecmp
(
b
, 
a
));

185 
	}
}

	@ls/extern.h

33 
acccmp
(c⁄° 
FTSENT
 *, const FTSENT *);

34 
ªvacccmp
(c⁄° 
FTSENT
 *, const FTSENT *);

35 
búthcmp
(c⁄° 
FTSENT
 *, const FTSENT *);

36 
ªvbúthcmp
(c⁄° 
FTSENT
 *, const FTSENT *);

37 
modcmp
(c⁄° 
FTSENT
 *, const FTSENT *);

38 
ªvmodcmp
(c⁄° 
FTSENT
 *, const FTSENT *);

39 
«mecmp
(c⁄° 
FTSENT
 *, const FTSENT *);

40 
ªv«mecmp
(c⁄° 
FTSENT
 *, const FTSENT *);

41 
°©cmp
(c⁄° 
FTSENT
 *, const FTSENT *);

42 
ªv°©cmp
(c⁄° 
FTSENT
 *, const FTSENT *);

43 
sizecmp
(c⁄° 
FTSENT
 *, const FTSENT *);

44 
ªvsizecmp
(c⁄° 
FTSENT
 *, const FTSENT *);

46 
¥ötcﬁ
(c⁄° 
DISPLAY
 *);

47 
¥öé⁄g
(c⁄° 
DISPLAY
 *);

48 
¥öäame
(const *);

49 
¥ötscﬁ
(c⁄° 
DISPLAY
 *);

50 
¥öt°ªam
(c⁄° 
DISPLAY
 *);

51 
ußge
();

52 
¥n_n‹mÆ
(const *);

53 
size_t
 
Àn_o˘Æ
(const *, );

54 
¥n_o˘Æ
(const *);

55 
¥n_¥öèbÀ
(const *);

56 #ifde‡
COLORLS


57 
∑r£cﬁ‹s
(c⁄° *
cs
);

58 
cﬁ‹quô
();

60 *
™si_fgcﬁ
;

61 *
™si_bgcﬁ
;

62 *
™si_cﬁoff
;

63 *
©ås_off
;

64 *
íãr_bﬁd
;

66 
ãrmwidth
;

	@ls/ls.c

33 #i‚de‡
löt


34 c⁄° 
	gc›yright
[] =

40 #i‚de‡
löt


41 
	gsccsid
[] = "@(#)ls.c 8.5 (Berkeley) 4/2/94";

44 
	~<sys/cdefs.h
>

45 
__FBSDID
("$FreeBSD: src/bin/ls/ls.c,v 1.86.2.4.6.1 2012/03/03 06:15:13 kensmith Exp $");

47 
	~<sys/ty≥s.h
>

48 
	~<sys/°©.h
>

49 
	~<sys/io˘l.h
>

50 
	~<sys/mac.h
>

52 
	~<dúít.h
>

53 
	~<îr.h
>

54 
	~<î∫o.h
>

55 
	~<·s.h
>

56 
	~<gΩ.h
>

57 
	~<öây≥s.h
>

58 
	~<limôs.h
>

59 
	~<loˇÀ.h
>

60 
	~<pwd.h
>

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~<uni°d.h
>

65 #ifde‡
COLORLS


66 
	~<ãrmˇp.h
>

67 
	~<sig«l.h
>

70 
	~"ls.h
"

71 
	~"exã∫.h
"

78 
	#STRBUF_SIZEOF
(
t
Ë(1 + 
CHAR_BIT
 * —Ë/ 3 + 1)

	)

85 
	#MAKENINES
(
n
) \

87 
ötmax_t
 
i
; \

90 
i
 = 1; 
n
 > 0; i *= 10) \

91 
n
--; \

92 
n
 = 
i
 - 1; \

93 } 0)

	)

95 
di•œy
(c⁄° 
FTSENT
 *, FTSENT *, );

96 
ma°îcmp
(c⁄° 
FTSENT
 * const *, const FTSENT * const *);

97 
åavî£
(, **, );

99 (*
¥ötf˙
)(c⁄° 
DISPLAY
 *);

100 (*
s‹tf˙
)(c⁄° 
FTSENT
 *, const FTSENT *);

102 
blocksize
;

103 
ãrmwidth
 = 80;

106 
f_ac˚s°ime
;

107 
f_búthtime
;

108 
f_Êags
;

109 
f_hum™vÆ
;

110 
f_öode
;

111 
f_kblocks
;

112 
f_li°dú
;

113 
f_li°dŸ
;

114 
f_nﬂutodŸ
;

115 
f_l⁄gf‹m
;

116 
f_nofﬁlow
;

117 
f_n⁄¥öt
;

118 
f_nos‹t
;

119 
f_nŸabs
;

120 
f_numîic⁄ly
;

121 
f_o˘Æ
;

122 
f_o˘Æ_esˇ≥
;

123 
f_ªcursive
;

124 
f_ªvî£s‹t
;

125 
f_£˘ime
;

126 
f_sögÀcﬁ
;

127 
f_size
;

128 
f_¶ash
;

129 
f_s‹è¸oss
;

130 
f_°©u°ime
;

131 
f_°ªam
;

132 
f_times‹t
;

133 *
f_timef‹m©
;

134 
f_sizes‹t
;

135 
f_ty≥
;

136 
f_whôeout
;

137 
f_œbñ
;

138 #ifde‡
COLORLS


139 
f_cﬁ‹
;

141 *
™si_bgcﬁ
;

142 *
™si_fgcﬁ
;

143 *
™si_cﬁoff
;

144 *
©ås_off
;

145 *
íãr_bﬁd
;

148 
rvÆ
;

151 
	$maö
(
¨gc
, *
¨gv
[])

153 
dŸ
[] = ".", *
dŸav
[] = {dŸ, 
NULL
};

154 
wösize
 
wö
;

155 
ch
, 
·s_›ti⁄s
, 
nŸu£d
;

156 *
p
;

157 #ifde‡
COLORLS


158 
ãrmˇpbuf
[1024];

159 
tˇpbuf
[512];

160 *
bp
 = 
tˇpbuf
;

163 ()
	`£éoˇÀ
(
LC_ALL
, "");

166 i‡(
	`ißây
(
STDOUT_FILENO
)) {

167 
ãrmwidth
 = 80;

168 i‡((
p
 = 
	`gëív
("COLUMNS")Ë!
NULL
 && *p != '\0')

169 
ãrmwidth
 = 
	`©oi
(
p
);

170 i‡(
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
wö
) != -1 &&

171 
wö
.
ws_cﬁ
 > 0)

172 
ãrmwidth
 = 
wö
.
ws_cﬁ
;

173 
f_n⁄¥öt
 = 1;

175 
f_sögÀcﬁ
 = 1;

177 
p
 = 
	`gëív
("COLUMNS");

178 i‡(
p
)

179 
ãrmwidth
 = 
	`©oi
(
p
);

182 
·s_›ti⁄s
 = 
FTS_PHYSICAL
;

183 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
,

185 
ch
) {

191 
f_sögÀcﬁ
 = 1;

192 
f_l⁄gf‹m
 = 0;

193 
f_°ªam
 = 0;

196 
f_n⁄¥öt
 = 0;

197 
f_o˘Æ
 = 1;

198 
f_o˘Æ_esˇ≥
 = 0;

201 
f_s‹è¸oss
 = 
f_l⁄gf‹m
 = 
f_sögÀcﬁ
 = 0;

204 
f_timef‹m©
 = 
›èrg
;

207 
f_l⁄gf‹m
 = 1;

208 
f_sögÀcﬁ
 = 0;

209 
f_°ªam
 = 0;

212 
f_s‹è¸oss
 = 1;

213 
f_l⁄gf‹m
 = 0;

214 
f_sögÀcﬁ
 = 0;

218 
f_°©u°ime
 = 1;

219 
f_ac˚s°ime
 = 0;

220 
f_búthtime
 = 0;

223 
f_ac˚s°ime
 = 1;

224 
f_°©u°ime
 = 0;

225 
f_búthtime
 = 0;

228 
f_búthtime
 = 1;

229 
f_ac˚s°ime
 = 0;

230 
f_°©u°ime
 = 0;

233 
f_ty≥
 = 1;

234 
f_¶ash
 = 0;

237 
·s_›ti⁄s
 |
FTS_COMFOLLOW
;

238 
f_nofﬁlow
 = 0;

241 
	`£ãnv
("CLICOLOR", "", 1);

244 
·s_›ti⁄s
 &~
FTS_PHYSICAL
;

245 
·s_›ti⁄s
 |
FTS_LOGICAL
;

246 
f_nofﬁlow
 = 0;

249 
·s_›ti⁄s
 &~
FTS_COMFOLLOW
;

250 
·s_›ti⁄s
 &~
FTS_LOGICAL
;

251 
·s_›ti⁄s
 |
FTS_PHYSICAL
;

252 
f_nofﬁlow
 = 1;

255 
f_ªcursive
 = 1;

258 
·s_›ti⁄s
 |
FTS_SEEDOT
;

261 
f_li°dŸ
 = 1;

264 
f_nﬂutodŸ
 = 1;

268 
f_li°dú
 = 1;

269 
f_ªcursive
 = 0;

272 
f_nos‹t
 = 1;

277 
f_hum™vÆ
 = 1;

280 
f_öode
 = 1;

283 
f_hum™vÆ
 = 0;

284 
f_kblocks
 = 1;

287 
f_°ªam
 = 1;

288 
f_sögÀcﬁ
 = 0;

289 
f_l⁄gf‹m
 = 0;

292 
f_numîic⁄ly
 = 1;

295 
f_Êags
 = 1;

298 
f_¶ash
 = 1;

299 
f_ty≥
 = 1;

302 
f_n⁄¥öt
 = 1;

303 
f_o˘Æ
 = 0;

304 
f_o˘Æ_esˇ≥
 = 0;

307 
f_ªvî£s‹t
 = 1;

310 
f_size
 = 1;

313 
f_£˘ime
 = 1;

317 
f_times‹t
 = 1;

318 
f_sizes‹t
 = 0;

321 
f_sizes‹t
 = 1;

322 
f_times‹t
 = 0;

325 
f_whôeout
 = 1;

328 
f_n⁄¥öt
 = 0;

329 
f_o˘Æ
 = 0;

330 
f_o˘Æ_esˇ≥
 = 1;

333 
f_n⁄¥öt
 = 0;

334 
f_o˘Æ
 = 0;

335 
f_o˘Æ_esˇ≥
 = 0;

338 
f_œbñ
 = 1;

342 
	`ußge
();

345 
¨gc
 -
›töd
;

346 
¨gv
 +
›töd
;

349 i‡(!
f_li°dŸ
 && 
	`gëuid
(Ë=(
uid_t
)0 && !
f_nﬂutodŸ
)

350 
f_li°dŸ
 = 1;

353 i‡(
	`gëív
("CLICOLOR") &&

354 (
	`ißây
(
STDOUT_FILENO
Ë|| 
	`gëív
("CLICOLOR_FORCE")))

355 #ifde‡
COLORLS


356 i‡(
	`tgëít
(
ãrmˇpbuf
, 
	`gëív
("TERM")) == 1) {

357 
™si_fgcﬁ
 = 
	`tgë°r
("AF", &
bp
);

358 
™si_bgcﬁ
 = 
	`tgë°r
("AB", &
bp
);

359 
©ås_off
 = 
	`tgë°r
("me", &
bp
);

360 
íãr_bﬁd
 = 
	`tgë°r
("md", &
bp
);

365 
™si_cﬁoff
 = 
	`tgë°r
("›", &
bp
);

366 i‡(!
™si_cﬁoff
)

367 
™si_cﬁoff
 = 
	`tgë°r
("oc", &
bp
);

368 i‡(
™si_fgcﬁ
 && 
™si_bgcﬁ
 && 
™si_cﬁoff
)

369 
f_cﬁ‹
 = 1;

372 
	`w¨nx
("color supportÇot compiled in");

375 #ifde‡
COLORLS


376 i‡(
f_cﬁ‹
) {

382 
f_nŸabs
 = 1;

383 ()
	`sig«l
(
SIGINT
, 
cﬁ‹quô
);

384 ()
	`sig«l
(
SIGQUIT
, 
cﬁ‹quô
);

385 
	`∑r£cﬁ‹s
(
	`gëív
("LSCOLORS"));

394 i‡(!
f_öode
 && !
f_l⁄gf‹m
 && !
f_size
 && !
f_times‹t
 &&

395 !
f_sizes‹t
 && !
f_ty≥


396 #ifde‡
COLORLS


397 && !
f_cﬁ‹


400 
·s_›ti⁄s
 |
FTS_NOSTAT
;

406 i‡(!
f_nofﬁlow
 && !
f_l⁄gf‹m
 && !
f_li°dú
 && !
f_ty≥
)

407 
·s_›ti⁄s
 |
FTS_COMFOLLOW
;

412 #ifde‡
FTS_WHITEOUT


413 i‡(
f_whôeout
)

414 
·s_›ti⁄s
 |
FTS_WHITEOUT
;

418 i‡(
f_l⁄gf‹m
 || 
f_size
) {

419 i‡(
f_kblocks
)

420 
blocksize
 = 2;

422 ()
	`gëbsize
(&
nŸu£d
, &
blocksize
);

423 
blocksize
 /= 512;

427 i‡(
f_ªvî£s‹t
) {

428 i‡(!
f_times‹t
 && !
f_sizes‹t
)

429 
s‹tf˙
 = 
ªv«mecmp
;

430 i‡(
f_sizes‹t
)

431 
s‹tf˙
 = 
ªvsizecmp
;

432 i‡(
f_ac˚s°ime
)

433 
s‹tf˙
 = 
ªvacccmp
;

434 i‡(
f_búthtime
)

435 
s‹tf˙
 = 
ªvbúthcmp
;

436 i‡(
f_°©u°ime
)

437 
s‹tf˙
 = 
ªv°©cmp
;

439 
s‹tf˙
 = 
ªvmodcmp
;

441 i‡(!
f_times‹t
 && !
f_sizes‹t
)

442 
s‹tf˙
 = 
«mecmp
;

443 i‡(
f_sizes‹t
)

444 
s‹tf˙
 = 
sizecmp
;

445 i‡(
f_ac˚s°ime
)

446 
s‹tf˙
 = 
acccmp
;

447 i‡(
f_búthtime
)

448 
s‹tf˙
 = 
búthcmp
;

449 i‡(
f_°©u°ime
)

450 
s‹tf˙
 = 
°©cmp
;

452 
s‹tf˙
 = 
modcmp
;

456 i‡(
f_sögÀcﬁ
)

457 
¥ötf˙
 = 
¥ötscﬁ
;

458 i‡(
f_l⁄gf‹m
)

459 
¥ötf˙
 = 
¥öé⁄g
;

460 i‡(
f_°ªam
)

461 
¥ötf˙
 = 
¥öt°ªam
;

463 
¥ötf˙
 = 
¥ötcﬁ
;

465 i‡(
¨gc
)

466 
	`åavî£
(
¨gc
, 
¨gv
, 
·s_›ti⁄s
);

468 
	`åavî£
(1, 
dŸav
, 
·s_›ti⁄s
);

469 
	`exô
(
rvÆ
);

470 
	}
}

472 
	gouçut
;

481 
	$åavî£
(
¨gc
, *
¨gv
[], 
›ti⁄s
)

483 
FTS
 *
·•
;

484 
FTSENT
 *
p
, *
chp
;

485 
ch_›ti⁄s
;

487 i‡((
·•
 =

488 
	`·s_›í
(
¨gv
, 
›ti⁄s
, 
f_nos‹t
 ? 
NULL
 : 
ma°îcmp
)) == NULL)

489 
	`îr
(1, "fts_open");

495 
chp
 = 
	`·s_chûdªn
(
·•
, 0);

496 i‡(
chp
 !
NULL
)

497 
	`di•œy
(
NULL
, 
chp
, 
›ti⁄s
);

498 i‡(
f_li°dú
)

505 
ch_›ti⁄s
 = !
f_ªcursive
 && !
f_œbñ
 &&

506 
›ti⁄s
 & 
FTS_NOSTAT
 ? 
FTS_NAMEONLY
 : 0;

508 (
p
 = 
	`·s_ªad
(
·•
)Ë!
NULL
)

509 
p
->
·s_öfo
) {

510 
FTS_DC
:

511 
	`w¨nx
("%s: dúe˘‹y cau£†®cy˛e", 
p
->
·s_«me
);

513 
FTS_DNR
:

514 
FTS_ERR
:

515 
	`w¨nx
("%s: %s", 
p
->
·s_∑th
, 
	`°ªº‹
’->
·s_î∫o
));

516 
rvÆ
 = 1;

518 
FTS_D
:

519 i‡(
p
->
·s_Àvñ
 !
FTS_ROOTLEVEL
 &&

520 
p
->
·s_«me
[0] ='.' && !
f_li°dŸ
)

528 i‡(
ouçut
) {

529 
	`putch¨
('\n');

530 ()
	`¥öäame
(
p
->
·s_∑th
);

531 
	`puts
(":");

532 } i‡(
¨gc
 > 1) {

533 ()
	`¥öäame
(
p
->
·s_∑th
);

534 
	`puts
(":");

535 
ouçut
 = 1;

537 
chp
 = 
	`·s_chûdªn
(
·•
, 
ch_›ti⁄s
);

538 
	`di•œy
(
p
, 
chp
, 
›ti⁄s
);

540 i‡(!
f_ªcursive
 && 
chp
 !
NULL
)

541 ()
	`·s_£t
(
·•
, 
p
, 
FTS_SKIP
);

546 i‡(
î∫o
)

547 
	`îr
(1, "fts_read");

548 
	}
}

556 
	$di•œy
(c⁄° 
FTSENT
 *
p
, FTSENT *
li°
, 
›ti⁄s
)

558 
°©
 *
•
;

559 
DISPLAY
 
d
;

560 
FTSENT
 *
cur
;

561 
NAMES
 *
≈
;

562 
off_t
 
maxsize
;

563 
maxblock
;

564 
u_l⁄g
 
btŸÆ
, 
œbñ°æí
, 
maxöode
, 
maxÀn
, 
max∆ök
;

565 
u_l⁄g
 
maxœbñ°r
;

566 
u_öt
 
dev°æí
;

567 
maxÊags
;

568 
gid_t
 
maxgroup
;

569 
uid_t
 
maxu£r
;

570 
size_t
 
Êí
, 
uÀn
, 
gÀn
;

571 *
öômax
;

572 
íåõs
, 
√ed°©s
;

573 c⁄° *
u£r
, *
group
;

574 *
Êags
, *
œbñ°r
 = 
NULL
;

575 
buf
[
	`STRBUF_SIZEOF
(
u_quad_t
) + 1];

576 
ngroup
[
	`STRBUF_SIZEOF
(
uid_t
) + 1];

577 
nu£r
[
	`STRBUF_SIZEOF
(
gid_t
) + 1];

579 
√ed°©s
 = 
f_öode
 || 
f_l⁄gf‹m
 || 
f_size
;

580 
Êí
 = 0;

581 
btŸÆ
 = 0;

582 
öômax
 = 
	`gëív
("LS_COLWIDTHS");

584 
maxœbñ°r
 = 
maxblock
 = 
maxöode
 = 
maxÀn
 = 
max∆ök
 =

585 
maxu£r
 = 
maxgroup
 = 
maxÊags
 = 
maxsize
 = 0;

586 i‡(
öômax
 !
NULL
 && *initmax != '\0') {

587 *
öômax2
, *
jöômax
;

588 
nöômax
;

591 
jöômax
 = 
	`mÆloc
(
	`°æí
(
öômax
) * 2 + 2);

592 i‡(
jöômax
 =
NULL
)

593 
	`îr
(1, "malloc");

594 
öômax2
 = 
jöômax
;

595 i‡(*
öômax
 == ':')

596 
	`°r˝y
(
öômax2
, "0:"), initmax2 += 2;

598 *
öômax2
++ = *
öômax
, *initmax2 = '\0';

599 
öômax
++; *initmax != '\0'; initmax++) {

600 i‡(
öômax
[-1] == ':' && initmax[0] == ':') {

601 *
öômax2
++ = '0';

602 *
öômax2
++ = 
öômax
[0];

603 
öômax2
[1] = '\0';

605 *
öômax2
++ = 
öômax
[0];

606 
öômax2
[1] = '\0';

609 i‡(
öômax2
[-1] == ':')

610 
	`°r˝y
(
öômax2
, "0");

612 
nöômax
 = 
	`ssˇnf
(
jöômax
,

614 &
maxöode
, &
maxblock
, &
max∆ök
, &
maxu£r
,

615 &
maxgroup
, &
maxÊags
, &
maxsize
, &
maxÀn
, &
maxœbñ°r
);

616 
f_nŸabs
 = 1;

617 
nöômax
) {

619 
maxöode
 = 0;

622 
maxblock
 = 0;

625 
max∆ök
 = 0;

628 
maxu£r
 = 0;

631 
maxgroup
 = 0;

634 
maxÊags
 = 0;

637 
maxsize
 = 0;

640 
maxÀn
 = 0;

643 
maxœbñ°r
 = 0;

645 #ifde‡
COLORLS


646 i‡(!
f_cﬁ‹
)

648 
f_nŸabs
 = 0;

653 
	`MAKENINES
(
maxöode
);

654 
	`MAKENINES
(
maxblock
);

655 
	`MAKENINES
(
max∆ök
);

656 
	`MAKENINES
(
maxsize
);

657 
	`‰ì
(
jöômax
);

659 
dev°æí
 = 0;

660 
Êags
 = 
NULL
;

661 
cur
 = 
li°
, 
íåõs
 = 0; cur; cu∏cur->
·s_lök
) {

662 i‡(
cur
->
·s_öfo
 =
FTS_ERR
 || cur->·s_öfÿ=
FTS_NS
) {

663 
	`w¨nx
("%s: %s",

664 
cur
->
·s_«me
, 
	`°ªº‹
(cur->
·s_î∫o
));

665 
cur
->
·s_numbî
 = 
NO_PRINT
;

666 
rvÆ
 = 1;

673 i‡(
p
 =
NULL
) {

675 i‡(
cur
->
·s_öfo
 =
FTS_D
 && !
f_li°dú
) {

676 
cur
->
·s_numbî
 = 
NO_PRINT
;

681 i‡(
cur
->
·s_«me
[0] ='.' && !
f_li°dŸ
) {

682 
cur
->
·s_numbî
 = 
NO_PRINT
;

686 i‡(
cur
->
·s_«mñí
 > 
maxÀn
)

687 
maxÀn
 = 
cur
->
·s_«mñí
;

688 i‡(
f_o˘Æ
 || 
f_o˘Æ_esˇ≥
) {

689 
u_l⁄g
 
t
 = 
	`Àn_o˘Æ
(
cur
->
·s_«me
, cur->
·s_«mñí
);

691 i‡(
t
 > 
maxÀn
)

692 
maxÀn
 = 
t
;

694 i‡(
√ed°©s
) {

695 
•
 = 
cur
->
·s_°©p
;

696 i‡(
•
->
°_blocks
 > 
maxblock
)

697 
maxblock
 = 
•
->
°_blocks
;

698 i‡(
•
->
°_öo
 > 
maxöode
)

699 
maxöode
 = 
•
->
°_öo
;

700 i‡(
•
->
°_∆ök
 > 
max∆ök
)

701 
max∆ök
 = 
•
->
°_∆ök
;

702 i‡(
•
->
°_size
 > 
maxsize
)

703 
maxsize
 = 
•
->
°_size
;

705 
btŸÆ
 +
•
->
°_blocks
;

706 i‡(
f_l⁄gf‹m
) {

707 i‡(
f_numîic⁄ly
) {

708 ()
	`¢¥ötf
(
nu£r
, (nuser),

709 "%u", 
•
->
°_uid
);

710 ()
	`¢¥ötf
(
ngroup
, (ngroup),

711 "%u", 
•
->
°_gid
);

712 
u£r
 = 
nu£r
;

713 
group
 = 
ngroup
;

715 
u£r
 = 
	`u£r_‰om_uid
(
•
->
°_uid
, 0);

716 
group
 = 
	`group_‰om_gid
(
•
->
°_gid
, 0);

718 i‡((
uÀn
 = 
	`°æí
(
u£r
)Ë> 
maxu£r
)

719 
maxu£r
 = 
uÀn
;

720 i‡((
gÀn
 = 
	`°æí
(
group
)Ë> 
maxgroup
)

721 
maxgroup
 = 
gÀn
;

722 i‡(
f_Êags
) {

723 
Êags
 = 
	`fÊag°o°r
(
•
->
°_Êags
);

724 i‡(
Êags
 !
NULL
 && *flags == '\0') {

725 
	`‰ì
(
Êags
);

726 
Êags
 = 
	`°rdup
("-");

728 i‡(
Êags
 =
NULL
)

729 
	`îr
(1, "fflagstostr");

730 
Êí
 = 
	`°æí
(
Êags
);

731 i‡(
Êí
 > (
size_t
)
maxÊags
)

732 
maxÊags
 = 
Êí
;

734 
Êí
 = 0;

735 
œbñ°r
 = 
NULL
;

736 i‡(
f_œbñ
) {

737 
«me
[
PATH_MAX
 + 1];

738 
mac_t
 
œbñ
;

739 
îr‹
;

741 
îr‹
 = 
	`mac_¥ï¨e_fûe_œbñ
(&
œbñ
);

742 i‡(
îr‹
 == -1) {

743 
	`w¨n
("MACÜabel for %s/%s",

744 
cur
->
·s_∑ª¡
->
·s_∑th
,

745 
cur
->
·s_«me
);

746 
œbñ_out
;

749 i‡(
cur
->
·s_Àvñ
 =
FTS_ROOTLEVEL
)

750 
	`¢¥ötf
(
«me
, (name),

751 "%s", 
cur
->
·s_«me
);

753 
	`¢¥ötf
(
«me
, (name),

754 "%s/%s", 
cur
->
·s_∑ª¡
->

755 
·s_ac˝©h
, 
cur
->
·s_«me
);

757 i‡(
›ti⁄s
 & 
FTS_LOGICAL
)

758 
îr‹
 = 
	`mac_gë_fûe
(
«me
,

759 
œbñ
);

761 
îr‹
 = 
	`mac_gë_lök
(
«me
,

762 
œbñ
);

763 i‡(
îr‹
 == -1) {

764 
	`w¨n
("MACÜabel for %s/%s",

765 
cur
->
·s_∑ª¡
->
·s_∑th
,

766 
cur
->
·s_«me
);

767 
	`mac_‰ì
(
œbñ
);

768 
œbñ_out
;

771 
îr‹
 = 
	`mac_to_ãxt
(
œbñ
,

772 &
œbñ°r
);

773 i‡(
îr‹
 == -1) {

774 
	`w¨n
("MACÜabel for %s/%s",

775 
cur
->
·s_∑ª¡
->
·s_∑th
,

776 
cur
->
·s_«me
);

777 
	`mac_‰ì
(
œbñ
);

778 
œbñ_out
;

780 
	`mac_‰ì
(
œbñ
);

781 
œbñ_out
:

782 i‡(
œbñ°r
 =
NULL
)

783 
œbñ°r
 = 
	`°rdup
("-");

784 
œbñ°æí
 = 
	`°æí
(
œbñ°r
);

785 i‡(
œbñ°æí
 > 
maxœbñ°r
)

786 
maxœbñ°r
 = 
œbñ°æí
;

788 
œbñ°æí
 = 0;

790 i‡((
≈
 = 
	`mÆloc
((
NAMES
Ë+ 
œbñ°æí
 +

791 
uÀn
 + 
gÀn
 + 
Êí
 + 4)Ë=
NULL
)

792 
	`îr
(1, "malloc");

794 
≈
->
u£r
 = &≈->
d©a
[0];

795 ()
	`°r˝y
(
≈
->
u£r
, user);

796 
≈
->
group
 = &≈->
d©a
[
uÀn
 + 1];

797 ()
	`°r˝y
(
≈
->
group
, group);

799 i‡((
	`S_ISCHR
(
•
->
°_mode
) ||

800 
	`S_ISBLK
(
•
->
°_mode
)) &&

801 
dev°æí
 < 
DEVSTR_HEX_LEN
) {

802 i‡(
	`mö‹
(
•
->
°_rdev
) > 255 ||

803 
	`mö‹
(
•
->
°_rdev
) < 0)

804 
dev°æí
 = 
DEVSTR_HEX_LEN
;

806 
dev°æí
 = 
DEVSTR_LEN
;

809 i‡(
f_Êags
) {

810 
≈
->
Êags
 = &≈->
d©a
[
uÀn
 + 
gÀn
 + 2];

811 ()
	`°r˝y
(
≈
->
Êags
, flags);

812 
	`‰ì
(
Êags
);

814 i‡(
f_œbñ
) {

815 
≈
->
œbñ
 = &≈->
d©a
[
uÀn
 + 
gÀn
 + 2

816 + (
f_Êags
 ? 
Êí
 + 1 : 0)];

817 ()
	`°r˝y
(
≈
->
œbñ
, 
œbñ°r
);

818 
	`‰ì
(
œbñ°r
);

820 
cur
->
·s_poöãr
 = 
≈
;

823 ++
íåõs
;

832 i‡(!
íåõs
 && (!(
f_l⁄gf‹m
 || 
f_size
Ë|| 
p
 =
NULL
))

835 
d
.
li°
 =Üist;

836 
d
.
íåõs
 =Éntries;

837 
d
.
maxÀn
 = maxlen;

838 i‡(
√ed°©s
) {

839 
d
.
btŸÆ
 = btotal;

840 ()
	`¢¥ötf
(
buf
, (buf), "%lu", 
maxblock
);

841 
d
.
s_block
 = 
	`°æí
(
buf
);

842 
d
.
s_Êags
 = 
maxÊags
;

843 
d
.
s_œbñ
 = 
maxœbñ°r
;

844 
d
.
s_group
 = 
maxgroup
;

845 ()
	`¢¥ötf
(
buf
, (buf), "%lu", 
maxöode
);

846 
d
.
s_öode
 = 
	`°æí
(
buf
);

847 ()
	`¢¥ötf
(
buf
, (buf), "%lu", 
max∆ök
);

848 
d
.
s_∆ök
 = 
	`°æí
(
buf
);

849 i‡(
f_hum™vÆ
)

850 
d
.
s_size
 = 
HUMANVALSTR_LEN
;

852 ()
	`¢¥ötf
(
buf
, (buf), "%ju", 
maxsize
);

853 
d
.
s_size
 = 
	`°æí
(
buf
);

855 i‡(
d
.
s_size
 < 
dev°æí
)

856 
d
.
s_size
 = 
dev°æí
;

857 
d
.
s_u£r
 = 
maxu£r
;

859 
	`¥ötf˙
(&
d
);

860 
ouçut
 = 1;

862 i‡(
f_l⁄gf‹m
)

863 
cur
 = 
li°
; cur; cu∏cur->
·s_lök
)

864 
	`‰ì
(
cur
->
·s_poöãr
);

865 
	}
}

874 
	$ma°îcmp
(c⁄° 
FTSENT
 * c⁄° *
a
, c⁄° FTSENT * c⁄° *
b
)

876 
a_öfo
, 
b_öfo
;

878 
a_öfo
 = (*
a
)->
·s_öfo
;

879 i‡(
a_öfo
 =
FTS_ERR
)

881 
b_öfo
 = (*
b
)->
·s_öfo
;

882 i‡(
b_öfo
 =
FTS_ERR
)

885 i‡(
a_öfo
 =
FTS_NS
 || 
b_öfo
 == FTS_NS)

886  (
	`«mecmp
(*
a
, *
b
));

888 i‡(
a_öfo
 !
b_öfo
 &&

889 (*
a
)->
·s_Àvñ
 =
FTS_ROOTLEVEL
 && !
f_li°dú
) {

890 i‡(
a_öfo
 =
FTS_D
)

892 i‡(
b_öfo
 =
FTS_D
)

895  (
	`s‹tf˙
(*
a
, *
b
));

896 
	}
}

	@ls/ls.h

36 
	#NO_PRINT
 1

	)

38 
	#HUMANVALSTR_LEN
 5

	)

39 
	#DEVSTR_LEN
 8

	)

40 
	#DEVSTR_HEX_LEN
 15

	)

42 
blocksize
;

44 
f_ac˚s°ime
;

45 
f_búthtime
;

46 
f_Êags
;

47 
f_hum™vÆ
;

48 
f_œbñ
;

49 
f_öode
;

50 
f_l⁄gf‹m
;

51 
f_o˘Æ
;

52 
f_o˘Æ_esˇ≥
;

53 
f_n⁄¥öt
;

54 
f_£˘ime
;

55 
f_size
;

56 
f_¶ash
;

57 
f_s‹è¸oss
;

58 
f_°©u°ime
;

59 *
f_timef‹m©
;

60 
f_nŸabs
;

61 
f_ty≥
;

62 #ifde‡
COLORLS


63 
f_cﬁ‹
;

67 
FTSENT
 *
	mli°
;

68 
u_l⁄g
 
	mbtŸÆ
;

69 
	míåõs
;

70 
	mmaxÀn
;

71 
u_öt
 
	ms_block
;

72 
u_öt
 
	ms_Êags
;

73 
u_öt
 
	ms_œbñ
;

74 
u_öt
 
	ms_group
;

75 
u_öt
 
	ms_öode
;

76 
u_öt
 
	ms_∆ök
;

77 
u_öt
 
	ms_size
;

78 
u_öt
 
	ms_u£r
;

79 } 
	tDISPLAY
;

82 *
	mu£r
;

83 *
	mgroup
;

84 *
	mÊags
;

85 *
	mœbñ
;

86 
	md©a
[1];

87 } 
	tNAMES
;

	@ls/print.c

34 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)print.c 8.4 (Berkeley) 4/17/94";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/ls/print.c,v 1.78.2.3.6.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sys/∑øm.h
>

42 
	~<sys/°©.h
>

43 
	~<sys/a˛.h
>

45 
	~<îr.h
>

46 
	~<î∫o.h
>

47 
	~<·s.h
>

48 
	~<œngöfo.h
>

49 
	~<libutû.h
>

50 
	~<°dio.h
>

51 
	~<°dlib.h
>

52 
	~<°rög.h
>

53 
	~<time.h
>

54 
	~<uni°d.h
>

55 #ifde‡
COLORLS


56 
	~<˘y≥.h
>

57 
	~<ãrmˇp.h
>

58 
	~<sig«l.h
>

61 
	~"ls.h
"

62 
	~"exã∫.h
"

64 
¥öè«me
(c⁄° 
FTSENT
 *, 
u_l⁄g
, u_long);

65 
¥ötdev
(
size_t
, 
dev_t
);

66 
¥öéök
(c⁄° 
FTSENT
 *);

67 
¥öâime
(
time_t
);

68 
¥öây≥
(
u_öt
);

69 
¥ötsize
(
size_t
, 
off_t
);

70 #ifde‡
COLORLS


71 
ídcﬁ‹
();

72 
cﬁ‹ty≥
(
mode_t
);

74 
a˛mode
(*, c⁄° 
FTSENT
 *);

76 
	#IS_NOPRINT
(
p
Ë(’)->
·s_numbî
 =
NO_PRINT
)

	)

78 #ifde‡
COLORLS


80 
	eCﬁ‹s
 {

81 
	mC_DIR
,

82 
	mC_LNK
,

83 
	mC_SOCK
,

84 
	mC_FIFO
,

85 
	mC_EXEC
,

86 
	mC_BLK
,

87 
	mC_CHR
,

88 
	mC_SUID
,

89 
	mC_SGID
,

90 
	mC_WSDIR
,

92 
	mC_WDIR
,

94 
	mC_NUMCOLORS


95 } 
	tCﬁ‹s
;

97 c⁄° *
	gdefcﬁ‹s
 = "exfxcxdxbxegedabagacad";

101 
	mnum
[2];

102 
	mbﬁd
;

103 } 
	gcﬁ‹s
[
C_NUMCOLORS
];

107 
	$¥ötscﬁ
(c⁄° 
DISPLAY
 *
dp
)

109 
FTSENT
 *
p
;

111 
p
 = 
dp
->
li°
;Ö;Ö =Ö->
·s_lök
) {

112 i‡(
	`IS_NOPRINT
(
p
))

114 ()
	`¥öè«me
(
p
, 
dp
->
s_öode
, dp->
s_block
);

115 ()
	`putch¨
('\n');

117 
	}
}

123 
	$¥öäame
(c⁄° *
«me
)

125 i‡(
f_o˘Æ
 || 
f_o˘Æ_esˇ≥
)

126  
	`¥n_o˘Æ
(
«me
);

127 i‡(
f_n⁄¥öt
)

128  
	`¥n_¥öèbÀ
(
«me
);

130  
	`¥n_n‹mÆ
(
«me
);

131 
	}
}

134 
	$¥öé⁄g
(c⁄° 
DISPLAY
 *
dp
)

136 
°©
 *
•
;

137 
FTSENT
 *
p
;

138 
NAMES
 *
≈
;

139 
buf
[20];

140 #ifde‡
COLORLS


141 
cﬁ‹_¥öãd
 = 0;

144 i‡((
dp
->
li°
 =
NULL
 || dp->li°->
·s_Àvñ
 !
FTS_ROOTLEVEL
) &&

145 (
f_l⁄gf‹m
 || 
f_size
)) {

146 ()
	`¥ötf
("tŸÆ %lu\n", 
	`howm™y
(
dp
->
btŸÆ
, 
blocksize
));

149 
p
 = 
dp
->
li°
;Ö;Ö =Ö->
·s_lök
) {

150 i‡(
	`IS_NOPRINT
(
p
))

152 
•
 = 
p
->
·s_°©p
;

153 i‡(
f_öode
)

154 ()
	`¥ötf
("%*lu ", 
dp
->
s_öode
, (
u_l⁄g
)
•
->
°_öo
);

155 i‡(
f_size
)

156 ()
	`¥ötf
("%*jd ",

157 
dp
->
s_block
, 
	`howm™y
(
•
->
°_blocks
, 
blocksize
));

158 
	`°rmode
(
•
->
°_mode
, 
buf
);

159 
	`a˛mode
(
buf
, 
p
);

160 
≈
 = 
p
->
·s_poöãr
;

161 ()
	`¥ötf
("%†%*u %-*† %-*† ", 
buf
, 
dp
->
s_∆ök
,

162 
•
->
°_∆ök
, 
dp
->
s_u£r
, 
≈
->
u£r
, dp->
s_group
,

163 
≈
->
group
);

164 i‡(
f_Êags
)

165 ()
	`¥ötf
("%-*†", 
dp
->
s_Êags
, 
≈
->
Êags
);

166 i‡(
f_œbñ
)

167 ()
	`¥ötf
("%-*†", 
dp
->
s_œbñ
, 
≈
->
œbñ
);

168 i‡(
	`S_ISCHR
(
•
->
°_mode
Ë|| 
	`S_ISBLK
(sp->st_mode))

169 
	`¥ötdev
(
dp
->
s_size
, 
•
->
°_rdev
);

171 
	`¥ötsize
(
dp
->
s_size
, 
•
->
°_size
);

172 i‡(
f_ac˚s°ime
)

173 
	`¥öâime
(
•
->
°_©ime
);

174 i‡(
f_búthtime
)

175 
	`¥öâime
(
•
->
°_búthtime
);

176 i‡(
f_°©u°ime
)

177 
	`¥öâime
(
•
->
°_˘ime
);

179 
	`¥öâime
(
•
->
°_mtime
);

180 #ifde‡
COLORLS


181 i‡(
f_cﬁ‹
)

182 
cﬁ‹_¥öãd
 = 
	`cﬁ‹ty≥
(
•
->
°_mode
);

184 ()
	`¥öäame
(
p
->
·s_«me
);

185 #ifde‡
COLORLS


186 i‡(
f_cﬁ‹
 && 
cﬁ‹_¥öãd
)

187 
	`ídcﬁ‹
(0);

189 i‡(
f_ty≥
)

190 ()
	`¥öây≥
(
•
->
°_mode
);

191 i‡(
	`S_ISLNK
(
•
->
°_mode
))

192 
	`¥öéök
(
p
);

193 ()
	`putch¨
('\n');

195 
	}
}

198 
	$¥öt°ªam
(c⁄° 
DISPLAY
 *
dp
)

200 
FTSENT
 *
p
;

201 
ch˙t
;

203 
p
 = 
dp
->
li°
, 
ch˙t
 = 0;Ö;Ö =Ö->
·s_lök
) {

204 i‡(
p
->
·s_numbî
 =
NO_PRINT
)

207 i‡(
	`°æí
(
p
->
·s_«me
Ë+ 
ch˙t
 +

208 (
p
->
·s_lök
 ? 2 : 0Ë>()
ãrmwidth
) {

209 
	`putch¨
('\n');

210 
ch˙t
 = 0;

212 
ch˙t
 +
	`¥öè«me
(
p
, 
dp
->
s_öode
, dp->
s_block
);

213 i‡(
p
->
·s_lök
) {

214 
	`¥ötf
(", ");

215 
ch˙t
 += 2;

218 i‡(
ch˙t
)

219 
	`putch¨
('\n');

220 
	}
}

223 
	$¥ötcﬁ
(c⁄° 
DISPLAY
 *
dp
)

225 
FTSENT
 **
¨øy
;

226 
œ°íåõs
 = -1;

227 
FTSENT
 *
p
;

228 
FTSENT
 **
«ºay
;

229 
ba£
;

230 
ch˙t
;

231 
˙t
;

232 
cﬁ
;

233 
cﬁwidth
;

234 
ídcﬁ
;

235 
num
;

236 
numcﬁs
;

237 
numrows
;

238 
row
;

239 
èbwidth
;

241 i‡(
f_nŸabs
)

242 
èbwidth
 = 1;

244 
èbwidth
 = 8;

250 i‡(
dp
->
íåõs
 > 
œ°íåõs
) {

251 i‡((
«ºay
 =

252 
	`ªÆloc
(
¨øy
, 
dp
->
íåõs
 * (
FTSENT
 *))Ë=
NULL
) {

253 
	`w¨n
(
NULL
);

254 
	`¥ötscﬁ
(
dp
);

257 
œ°íåõs
 = 
dp
->
íåõs
;

258 
¨øy
 = 
«ºay
;

260 
p
 = 
dp
->
li°
, 
num
 = 0;Ö;Ö =Ö->
·s_lök
)

261 i‡(
p
->
·s_numbî
 !
NO_PRINT
)

262 
¨øy
[
num
++] = 
p
;

264 
cﬁwidth
 = 
dp
->
maxÀn
;

265 i‡(
f_öode
)

266 
cﬁwidth
 +
dp
->
s_öode
 + 1;

267 i‡(
f_size
)

268 
cﬁwidth
 +
dp
->
s_block
 + 1;

269 i‡(
f_ty≥
)

270 
cﬁwidth
 += 1;

272 
cﬁwidth
 = (cﬁwidth + 
èbwidth
) & ~(tabwidth - 1);

273 i‡(
ãrmwidth
 < 2 * 
cﬁwidth
) {

274 
	`¥ötscﬁ
(
dp
);

277 
numcﬁs
 = 
ãrmwidth
 / 
cﬁwidth
;

278 
numrows
 = 
num
 / 
numcﬁs
;

279 i‡(
num
 % 
numcﬁs
)

280 ++
numrows
;

282 i‡((
dp
->
li°
 =
NULL
 || dp->li°->
·s_Àvñ
 !
FTS_ROOTLEVEL
) &&

283 (
f_l⁄gf‹m
 || 
f_size
)) {

284 ()
	`¥ötf
("tŸÆ %lu\n", 
	`howm™y
(
dp
->
btŸÆ
, 
blocksize
));

287 
ba£
 = 0;

288 
row
 = 0;Ñow < 
numrows
; ++row) {

289 
ídcﬁ
 = 
cﬁwidth
;

290 i‡(!
f_s‹è¸oss
)

291 
ba£
 = 
row
;

292 
cﬁ
 = 0, 
ch˙t
 = 0; cﬁ < 
numcﬁs
; ++col) {

293 
ch˙t
 +
	`¥öè«me
(
¨øy
[
ba£
], 
dp
->
s_öode
,

294 
dp
->
s_block
);

295 i‡(
f_s‹è¸oss
)

296 
ba£
++;

298 
ba£
 +
numrows
;

299 i‡(
ba£
 >
num
)

301 (
˙t
 = ((
ch˙t
 + 
èbwidth
) & ~(tabwidth - 1)))

302 <
ídcﬁ
) {

303 i‡(
f_s‹è¸oss
 && 
cﬁ
 + 1 >
numcﬁs
)

305 ()
	`putch¨
(
f_nŸabs
 ? ' ' : '\t');

306 
ch˙t
 = 
˙t
;

308 
ídcﬁ
 +
cﬁwidth
;

310 ()
	`putch¨
('\n');

312 
	}
}

319 
	$¥öè«me
(c⁄° 
FTSENT
 *
p
, 
u_l⁄g
 
öodefõld
, u_l⁄g 
sizefõld
)

321 
°©
 *
•
;

322 
ch˙t
;

323 #ifde‡
COLORLS


324 
cﬁ‹_¥öãd
 = 0;

327 
•
 = 
p
->
·s_°©p
;

328 
ch˙t
 = 0;

329 i‡(
f_öode
)

330 
ch˙t
 +
	`¥ötf
("%*lu ", ()
öodefõld
, (
u_l⁄g
)
•
->
°_öo
);

331 i‡(
f_size
)

332 
ch˙t
 +
	`¥ötf
("%*jd ",

333 ()
sizefõld
, 
	`howm™y
(
•
->
°_blocks
, 
blocksize
));

334 #ifde‡
COLORLS


335 i‡(
f_cﬁ‹
)

336 
cﬁ‹_¥öãd
 = 
	`cﬁ‹ty≥
(
•
->
°_mode
);

338 
ch˙t
 +
	`¥öäame
(
p
->
·s_«me
);

339 #ifde‡
COLORLS


340 i‡(
f_cﬁ‹
 && 
cﬁ‹_¥öãd
)

341 
	`ídcﬁ‹
(0);

343 i‡(
f_ty≥
)

344 
ch˙t
 +
	`¥öây≥
(
•
->
°_mode
);

345  (
ch˙t
);

346 
	}
}

352 
	$¥ötdev
(
size_t
 
width
, 
dev_t
 
dev
)

354 
buf
[
DEVSTR_HEX_LEN
 + 1];

356 i‡(
	`mö‹
(
dev
) > 255 || minor(dev) < 0)

357 ()
	`¢¥ötf
(
buf
, (buf), "%3d, 0x%08x",

358 
	`maj‹
(
dev
), (
u_öt
)
	`mö‹
(dev));

360 ()
	`¢¥ötf
(
buf
, (buf), "%3d, %3d",

361 
	`maj‹
(
dev
), 
	`mö‹
(dev));

363 ()
	`¥ötf
("%*†", (
u_öt
)
width
, 
buf
);

364 
	}
}

367 
	$¥öâime
(
time_t
 
·ime
)

369 
l⁄g°rög
[80];

370 
time_t
 
now
 = 0;

371 c⁄° *
f‹m©
;

372 
d_fú°
 = -1;

374 i‡(
d_fú°
 < 0)

375 
d_fú°
 = (*
	`∆_œngöfo
(
D_MD_ORDER
) == 'd');

376 i‡(
now
 == 0)

377 
now
 = 
	`time
(
NULL
);

379 
	#SIXMONTHS
 ((365 / 2Ë* 86400)

	)

380 i‡(
f_timef‹m©
)

381 
f‹m©
 = 
f_timef‹m©
;

382 i‡(
f_£˘ime
)

384 
f‹m©
 = 
d_fú°
 ? "%e %b %T %Y" : "%b %e %T %Y";

385 i‡(
·ime
 + 
SIXMONTHS
 > 
now
 && ftime <Çow + SIXMONTHS)

387 
f‹m©
 = 
d_fú°
 ? "%e %b %R" : "%b %e %R";

390 
f‹m©
 = 
d_fú°
 ? "%e %b %Y" : "%b %e %Y";

391 
	`°r·ime
(
l⁄g°rög
, ÷⁄g°rög), 
f‹m©
, 
	`loˇ…ime
(&
·ime
));

392 
	`Âuts
(
l⁄g°rög
, 
°dout
);

393 
	`Âutc
(' ', 
°dout
);

394 
	}
}

397 
	$¥öây≥
(
u_öt
 
mode
)

400 i‡(
f_¶ash
) {

401 i‡((
mode
 & 
S_IFMT
Ë=
S_IFDIR
) {

402 ()
	`putch¨
('/');

408 
mode
 & 
S_IFMT
) {

409 
S_IFDIR
:

410 ()
	`putch¨
('/');

412 
S_IFIFO
:

413 ()
	`putch¨
('|');

415 
S_IFLNK
:

416 ()
	`putch¨
('@');

418 
S_IFSOCK
:

419 ()
	`putch¨
('=');

421 
S_IFWHT
:

422 ()
	`putch¨
('%');

427 i‡(
mode
 & (
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)) {

428 ()
	`putch¨
('*');

432 
	}
}

434 #ifde‡
COLORLS


436 
	$putch
(
c
)

438 ()
	`putch¨
(
c
);

440 
	}
}

443 
	$wrôech
(
c
)

445 
tmp
 = ()
c
;

447 ()
	`wrôe
(
STDOUT_FILENO
, &
tmp
, 1);

449 
	}
}

452 
	$¥ötcﬁ‹
(
Cﬁ‹s
 
c
)

454 *
™si£q
;

456 i‡(
cﬁ‹s
[
c
].
bﬁd
)

457 
	`çuts
(
íãr_bﬁd
, 1, 
putch
);

459 i‡(
cﬁ‹s
[
c
].
num
[0] != -1) {

460 
™si£q
 = 
	`tgŸo
(
™si_fgcﬁ
, 0, 
cﬁ‹s
[
c
].
num
[0]);

461 i‡(
™si£q
)

462 
	`çuts
(
™si£q
, 1, 
putch
);

464 i‡(
cﬁ‹s
[
c
].
num
[1] != -1) {

465 
™si£q
 = 
	`tgŸo
(
™si_bgcﬁ
, 0, 
cﬁ‹s
[
c
].
num
[1]);

466 i‡(
™si£q
)

467 
	`çuts
(
™si£q
, 1, 
putch
);

469 
	}
}

472 
	$ídcﬁ‹
(
sig
)

474 
	`çuts
(
™si_cﬁoff
, 1, 
sig
 ? 
wrôech
 : 
putch
);

475 
	`çuts
(
©ås_off
, 1, 
sig
 ? 
wrôech
 : 
putch
);

476 
	}
}

479 
	$cﬁ‹ty≥
(
mode_t
 
mode
)

481 
mode
 & 
S_IFMT
) {

482 
S_IFDIR
:

483 i‡(
mode
 & 
S_IWOTH
)

484 i‡(
mode
 & 
S_ISTXT
)

485 
	`¥ötcﬁ‹
(
C_WSDIR
);

487 
	`¥ötcﬁ‹
(
C_WDIR
);

489 
	`¥ötcﬁ‹
(
C_DIR
);

491 
S_IFLNK
:

492 
	`¥ötcﬁ‹
(
C_LNK
);

494 
S_IFSOCK
:

495 
	`¥ötcﬁ‹
(
C_SOCK
);

497 
S_IFIFO
:

498 
	`¥ötcﬁ‹
(
C_FIFO
);

500 
S_IFBLK
:

501 
	`¥ötcﬁ‹
(
C_BLK
);

503 
S_IFCHR
:

504 
	`¥ötcﬁ‹
(
C_CHR
);

508 i‡(
mode
 & (
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)) {

509 i‡(
mode
 & 
S_ISUID
)

510 
	`¥ötcﬁ‹
(
C_SUID
);

511 i‡(
mode
 & 
S_ISGID
)

512 
	`¥ötcﬁ‹
(
C_SGID
);

514 
	`¥ötcﬁ‹
(
C_EXEC
);

518 
	}
}

521 
	$∑r£cﬁ‹s
(c⁄° *
cs
)

523 
i
;

524 
j
;

525 
size_t
 
Àn
;

526 
c
[2];

527 
Àgacy_w¨n
 = 0;

529 i‡(
cs
 =
NULL
)

530 
cs
 = "";

531 
Àn
 = 
	`°æí
(
cs
);

532 
i
 = 0; i < ()
C_NUMCOLORS
; i++) {

533 
cﬁ‹s
[
i
].
bﬁd
 = 0;

535 i‡(
Àn
 <2 * (
size_t
)
i
) {

536 
c
[0] = 
defcﬁ‹s
[2 * 
i
];

537 
c
[1] = 
defcﬁ‹s
[2 * 
i
 + 1];

539 
c
[0] = 
cs
[2 * 
i
];

540 
c
[1] = 
cs
[2 * 
i
 + 1];

542 
j
 = 0; j < 2; j++) {

544 i‡(
c
[
j
] >= '0' && c[j] <= '7') {

545 
cﬁ‹s
[
i
].
num
[
j
] = 
c
[j] - '0';

546 i‡(!
Àgacy_w¨n
) {

547 
	`w¨nx
("LSCOLORS should use "

551 
Àgacy_w¨n
 = 1;

552 } i‡(
c
[
j
] >= 'a' && c[j] <= 'h')

553 
cﬁ‹s
[
i
].
num
[
j
] = 
c
[j] - 'a';

554 i‡(
c
[
j
] >= 'A' && c[j] <= 'H') {

555 
cﬁ‹s
[
i
].
num
[
j
] = 
c
[j] - 'A';

556 
cﬁ‹s
[
i
].
bﬁd
 = 1;

557 } i‡(
	`tﬁowî
(()
c
[
j
]) == 'x')

558 
cﬁ‹s
[
i
].
num
[
j
] = -1;

560 
	`w¨nx
("invalid character '%c' in LSCOLORS"

561 "Énv v¨", 
c
[
j
]);

562 
cﬁ‹s
[
i
].
num
[
j
] = -1;

566 
	}
}

569 
	$cﬁ‹quô
(
sig
)

571 
	`ídcﬁ‹
(
sig
);

573 ()
	`sig«l
(
sig
, 
SIG_DFL
);

574 ()
	`kûl
(
	`gëpid
(), 
sig
);

575 
	}
}

580 
	$¥öéök
(c⁄° 
FTSENT
 *
p
)

582 
 kÀn
;

583 
«me
[
MAXPATHLEN
 + 1];

584 
∑th
[
MAXPATHLEN
 + 1];

586 i‡(
p
->
·s_Àvñ
 =
FTS_ROOTLEVEL
)

587 ()
	`¢¥ötf
(
«me
, “ame), "%s", 
p
->
·s_«me
);

589 ()
	`¢¥ötf
(
«me
, (name),

590 "%s/%s", 
p
->
·s_∑ª¡
->
·s_ac˝©h
,Ö->
·s_«me
);

591 i‡((
 kÀn
 = 
	`ªadlök
(
«me
, 
∑th
, (path) - 1)) == -1) {

592 ()
	`Ârötf
(
°dîr
, "\∆s: %s: %s\n", 
«me
, 
	`°ªº‹
(
î∫o
));

595 
∑th
[
 kÀn
] = '\0';

596 ()
	`¥ötf
(" -> ");

597 ()
	`¥öäame
(
∑th
);

598 
	}
}

601 
	$¥ötsize
(
size_t
 
width
, 
off_t
 
byãs
)

604 i‡(
f_hum™vÆ
) {

609 
buf
[
HUMANVALSTR_LEN
 - 1 + 1];

611 
	`hum™ize_numbî
(
buf
, (buf), (
öt64_t
)
byãs
, "",

612 
HN_AUTOSCALE
, 
HN_B
 | 
HN_NOSPACE
 | 
HN_DECIMAL
);

613 ()
	`¥ötf
("%*†", (
u_öt
)
width
, 
buf
);

615 ()
	`¥ötf
("%*jd ", (
u_öt
)
width
, 
byãs
);

616 
	}
}

623 
	$a˛mode
(*
buf
, c⁄° 
FTSENT
 *
p
)

625 
«me
[
MAXPATHLEN
 + 1];

626 
ªt
, 
åivül
;

627 
dev_t
 
¥evious_dev
 = 
NODEV
;

628 
suµ‹ts_a˛s
 = -1;

629 
ty≥
 = 
ACL_TYPE_ACCESS
;

630 
a˛_t
 
Á˛
;

636 i‡(
	`S_ISCHR
(
p
->
·s_°©p
->
°_mode
Ë|| 
	`S_ISBLK
(p->fts_statp->st_mode) ||

637 
	`S_ISWHT
(
p
->
·s_°©p
->
°_mode
))

640 i‡(
¥evious_dev
 =
p
->
·s_°©p
->
°_dev
 && 
suµ‹ts_a˛s
 == 0)

643 i‡(
p
->
·s_Àvñ
 =
FTS_ROOTLEVEL
)

644 
	`¢¥ötf
(
«me
, “ame), "%s", 
p
->
·s_«me
);

646 
	`¢¥ötf
(
«me
, (name), "%s/%s",

647 
p
->
·s_∑ª¡
->
·s_ac˝©h
,Ö->
·s_«me
);

649 i‡(
¥evious_dev
 !
p
->
·s_°©p
->
°_dev
) {

650 
¥evious_dev
 = 
p
->
·s_°©p
->
°_dev
;

651 
suµ‹ts_a˛s
 = 0;

653 
ªt
 = 
	`Õ©hc⁄f
(
«me
, 
_PC_ACL_NFS4
);

654 i‡(
ªt
 > 0) {

655 
ty≥
 = 
ACL_TYPE_NFS4
;

656 
suµ‹ts_a˛s
 = 1;

657 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

658 
	`w¨n
("%s", 
«me
);

661 i‡(
suµ‹ts_a˛s
 == 0) {

662 
ªt
 = 
	`Õ©hc⁄f
(
«me
, 
_PC_ACL_EXTENDED
);

663 i‡(
ªt
 > 0) {

664 
ty≥
 = 
ACL_TYPE_ACCESS
;

665 
suµ‹ts_a˛s
 = 1;

666 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

667 
	`w¨n
("%s", 
«me
);

672 i‡(
suµ‹ts_a˛s
 == 0)

674 
Á˛
 = 
	`a˛_gë_lök_≈
(
«me
, 
ty≥
);

675 i‡(
Á˛
 =
NULL
) {

676 
	`w¨n
("%s", 
«me
);

679 i‡(
	`a˛_is_åivül_≈
(
Á˛
, &
åivül
)) {

680 
	`a˛_‰ì
(
Á˛
);

681 
	`w¨n
("%s", 
«me
);

684 i‡(!
åivül
)

685 
buf
[10] = '+';

686 
	`a˛_‰ì
(
Á˛
);

687 
	}
}

	@ls/util.c

34 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)util.c 8.3 (Berkeley) 4/2/94";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/ls/util.c,v 1.41.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sys/ty≥s.h
>

42 
	~<sys/°©.h
>

44 
	~<˘y≥.h
>

45 
	~<îr.h
>

46 
	~<·s.h
>

47 
	~<limôs.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°rög.h
>

51 
	~<wch¨.h
>

52 
	~<w˘y≥.h
>

54 
	~"ls.h
"

55 
	~"exã∫.h
"

58 
	$¥n_n‹mÆ
(c⁄° *
s
)

60 
mb°©e_t
 
mbs
;

61 
wch¨_t
 
wc
;

62 
i
, 
n
;

63 
size_t
 
˛í
;

65 
	`mem£t
(&
mbs
, 0, (mbs));

66 
n
 = 0;

67 (
˛í
 = 
	`mbπowc
(&
wc
, 
s
, 
MB_LEN_MAX
, &
mbs
)) != 0) {

68 i‡(
˛í
 =(
size_t
)-2) {

69 
n
 +
	`¥ötf
("%s", 
s
);

72 i‡(
˛í
 =(
size_t
)-1) {

73 
	`mem£t
(&
mbs
, 0, (mbs));

74 
	`putch¨
(()*
s
);

75 
s
++;

76 
n
++;

79 
i
 = 0; i < ()
˛í
; i++)

80 
	`putch¨
(()
s
[
i
]);

81 
s
 +
˛í
;

82 i‡(
	`isw¥öt
(
wc
))

83 
n
 +
	`wcwidth
(
wc
);

85  (
n
);

86 
	}
}

89 
	$¥n_¥öèbÀ
(c⁄° *
s
)

91 
mb°©e_t
 
mbs
;

92 
wch¨_t
 
wc
;

93 
i
, 
n
;

94 
size_t
 
˛í
;

96 
	`mem£t
(&
mbs
, 0, (mbs));

97 
n
 = 0;

98 (
˛í
 = 
	`mbπowc
(&
wc
, 
s
, 
MB_LEN_MAX
, &
mbs
)) != 0) {

99 i‡(
˛í
 =(
size_t
)-1) {

100 
	`putch¨
('?');

101 
s
++;

102 
n
++;

103 
	`mem£t
(&
mbs
, 0, (mbs));

106 i‡(
˛í
 =(
size_t
)-2) {

107 
	`putch¨
('?');

108 
n
++;

111 i‡(!
	`isw¥öt
(
wc
)) {

112 
	`putch¨
('?');

113 
s
 +
˛í
;

114 
n
++;

117 
i
 = 0; i < ()
˛í
; i++)

118 
	`putch¨
(()
s
[
i
]);

119 
s
 +
˛í
;

120 
n
 +
	`wcwidth
(
wc
);

122  (
n
);

123 
	}
}

138 
size_t


139 
	$Àn_o˘Æ
(c⁄° *
s
, 
Àn
)

141 
mb°©e_t
 
mbs
;

142 
wch¨_t
 
wc
;

143 
size_t
 
˛í
, 
r
;

145 
	`mem£t
(&
mbs
, 0, (mbs));

146 
r
 = 0;

147 
Àn
 !0 && (
˛í
 = 
	`mbπowc
(&
wc
, 
s
,Üí, &
mbs
)) != 0) {

148 i‡(
˛í
 =(
size_t
)-1) {

149 
r
 += 4;

150 
s
++;

151 
Àn
--;

152 
	`mem£t
(&
mbs
, 0, (mbs));

155 i‡(
˛í
 =(
size_t
)-2) {

156 
r
 +4 * 
Àn
;

159 i‡(
	`isw¥öt
(
wc
))

160 
r
++;

162 
r
 +4 * 
˛í
;

163 
s
 +
˛í
;

165  (
r
);

166 
	}
}

169 
	$¥n_o˘Æ
(c⁄° *
s
)

171 c⁄° 
esc
[] = "\\\\\"\"\aa\bb\ff\nn\rr\tt\vv";

172 c⁄° *
p
;

173 
mb°©e_t
 
mbs
;

174 
wch¨_t
 
wc
;

175 
size_t
 
˛í
;

176 
ch
;

177 
goodch¨
, 
i
, 
Àn
, 
¥éí
;

179 
	`mem£t
(&
mbs
, 0, (mbs));

180 
Àn
 = 0;

181 (
˛í
 = 
	`mbπowc
(&
wc
, 
s
, 
MB_LEN_MAX
, &
mbs
)) != 0) {

182 
goodch¨
 = 
˛í
 !(
size_t
)-1 && clen != (size_t)-2;

183 i‡(
goodch¨
 && 
	`isw¥öt
(
wc
Ë&& w¯!
L
'\"' && wc != L'\\') {

184 
i
 = 0; i < ()
˛í
; i++)

185 
	`putch¨
(()
s
[
i
]);

186 
Àn
 +
	`wcwidth
(
wc
);

187 } i‡(
goodch¨
 && 
f_o˘Æ_esˇ≥
 && 
wc
 >= 0 &&

188 
wc
 <(
wch¨_t
)
UCHAR_MAX
 &&

189 (
p
 = 
	`°rchr
(
esc
, ()
wc
)Ë!
NULL
) {

190 
	`putch¨
('\\');

191 
	`putch¨
(
p
[1]);

192 
Àn
 += 2;

194 i‡(
goodch¨
)

195 
¥éí
 = 
˛í
;

196 i‡(
˛í
 =(
size_t
)-1)

197 
¥éí
 = 1;

199 
¥éí
 = 
	`°æí
(
s
);

200 
i
 = 0; i < 
¥éí
; i++) {

201 
ch
 = ()
s
[
i
];

202 
	`putch¨
('\\');

203 
	`putch¨
('0' + (
ch
 >> 6));

204 
	`putch¨
('0' + ((
ch
 >> 3) & 7));

205 
	`putch¨
('0' + (
ch
 & 7));

206 
Àn
 += 4;

209 i‡(
˛í
 =(
size_t
)-2)

211 i‡(
˛í
 =(
size_t
)-1) {

212 
	`mem£t
(&
mbs
, 0, (mbs));

213 
s
++;

215 
s
 +
˛í
;

217  (
Àn
);

218 
	}
}

221 
	$ußge
()

223 ()
	`Ârötf
(
°dîr
,

224 #ifde‡
COLORLS


230 
	`exô
(1);

231 
	}
}

	@mkdir/mkdir.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)mkdir.c 8.2 (Berkeley) 1/25/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/mkdir/mkdir.c,v 1.33.10.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/ty≥s.h
>

45 
	~<sys/°©.h
>

47 
	~<îr.h
>

48 
	~<î∫o.h
>

49 
	~<libgí.h
>

50 
	~<°dio.h
>

51 
	~<°dlib.h
>

52 
	~<°rög.h
>

53 
	~<sy£xôs.h
>

54 
	~<uni°d.h
>

56 
buûd
(*, 
mode_t
);

57 
ußge
();

59 
	gvÊag
;

62 
	$maö
(
¨gc
, *
¨gv
[])

64 
ch
, 
exôvÆ
, 
suc˚ss
, 
pÊag
;

65 
mode_t
 
omode
;

66 *
£t
 = 
NULL
;

67 *
mode
;

69 
omode
 = 
pÊag
 = 0;

70 
mode
 = 
NULL
;

71 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "m:pv")) != -1)

72 
ch
) {

74 
mode
 = 
›èrg
;

77 
pÊag
 = 1;

80 
vÊag
 = 1;

84 
	`ußge
();

87 
¨gc
 -
›töd
;

88 
¨gv
 +
›töd
;

89 i‡(
¨gv
[0] =
NULL
)

90 
	`ußge
();

92 i‡(
mode
 =
NULL
) {

93 
omode
 = 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
;

95 i‡((
£t
 = 
	`£tmode
(
mode
)Ë=
NULL
)

96 
	`îrx
(1, "övÆid fûêmode: %s", 
mode
);

97 
omode
 = 
	`gëmode
(
£t
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
);

98 
	`‰ì
(
£t
);

101 
exôvÆ
 = 0; *
¨gv
 !
NULL
; ++argv) {

102 i‡(
pÊag
) {

103 
suc˚ss
 = 
	`buûd
(*
¨gv
, 
omode
);

104 } i‡(
	`mkdú
(*
¨gv
, 
omode
) < 0) {

105 i‡(
î∫o
 =
ENOTDIR
 ||Éºnÿ=
ENOENT
)

106 
	`w¨n
("%s", 
	`dú«me
(*
¨gv
));

108 
	`w¨n
("%s", *
¨gv
);

109 
suc˚ss
 = 0;

111 
suc˚ss
 = 1;

112 i‡(
vÊag
)

113 ()
	`¥ötf
("%s\n", *
¨gv
);

115 i‡(!
suc˚ss
)

116 
exôvÆ
 = 1;

125 i‡(
suc˚ss
 =1 && 
mode
 !
NULL
 && 
	`chmod
(*
¨gv
, 
omode
) == -1) {

126 
	`w¨n
("%s", *
¨gv
);

127 
exôvÆ
 = 1;

130 
	`exô
(
exôvÆ
);

131 
	}
}

139 
	$buûd
(*
∑th
, 
mode_t
 
omode
)

141 
°©
 
sb
;

142 
mode_t
 
numask
, 
oumask
;

143 
fú°
, 
œ°
, 
ªtvÆ
;

144 *
p
;

146 
p
 = 
∑th
;

147 
oumask
 = 0;

148 
ªtvÆ
 = 1;

149 i‡(
p
[0] == '/')

150 ++
p
;

151 
fú°
 = 1, 
œ°
 = 0; !œ° ; ++
p
) {

152 i‡(
p
[0] == '\0')

153 
œ°
 = 1;

154 i‡(
p
[0] != '/')

156 *
p
 = '\0';

157 i‡(!
œ°
 && 
p
[1] == '\0')

158 
œ°
 = 1;

159 i‡(
fú°
) {

172 
oumask
 = 
	`umask
(0);

173 
numask
 = 
oumask
 & ~(
S_IWUSR
 | 
S_IXUSR
);

174 ()
	`umask
(
numask
);

175 
fú°
 = 0;

177 i‡(
œ°
)

178 ()
	`umask
(
oumask
);

179 i‡(
	`mkdú
(
∑th
, 
œ°
 ? 
omode
 : 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
) < 0) {

180 i‡(
î∫o
 =
EEXIST
 ||Éºnÿ=
EISDIR
) {

181 i‡(
	`°©
(
∑th
, &
sb
) < 0) {

182 
	`w¨n
("%s", 
∑th
);

183 
ªtvÆ
 = 0;

185 } i‡(!
	`S_ISDIR
(
sb
.
°_mode
)) {

186 i‡(
œ°
)

187 
î∫o
 = 
EEXIST
;

189 
î∫o
 = 
ENOTDIR
;

190 
	`w¨n
("%s", 
∑th
);

191 
ªtvÆ
 = 0;

194 i‡(
œ°
)

195 
ªtvÆ
 = 2;

197 
	`w¨n
("%s", 
∑th
);

198 
ªtvÆ
 = 0;

201 } i‡(
vÊag
)

202 
	`¥ötf
("%s\n", 
∑th
);

203 i‡(!
œ°
)

204 *
p
 = '/';

206 i‡(!
fú°
 && !
œ°
)

207 ()
	`umask
(
oumask
);

208  (
ªtvÆ
);

209 
	}
}

212 
	$ußge
()

215 ()
	`Ârötf
(
°dîr
,

217 
	`exô
 (
EX_USAGE
);

218 
	}
}

	@mv/mv.c

34 #i‚de‡
löt


35 c⁄° 
	gc›yright
[] =

40 #i‚de‡
löt


41 
	gsccsid
[] = "@(#)mv.c 8.2 (Berkeley) 4/2/94";

44 
	~<sys/cdefs.h
>

45 
__FBSDID
("$FreeBSD: src/bin/mv/mv.c,v 1.51.2.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

47 
	~<sys/ty≥s.h
>

48 
	~<sys/a˛.h
>

49 
	~<sys/∑øm.h
>

50 
	~<sys/time.h
>

51 
	~<sys/waô.h
>

52 
	~<sys/°©.h
>

53 
	~<sys/mou¡.h
>

55 
	~<îr.h
>

56 
	~<î∫o.h
>

57 
	~<f˙é.h
>

58 
	~<gΩ.h
>

59 
	~<limôs.h
>

60 
	~<∑ths.h
>

61 
	~<pwd.h
>

62 
	~<°dio.h
>

63 
	~<°dlib.h
>

64 
	~<°rög.h
>

65 
	~<sy£xôs.h
>

66 
	~<uni°d.h
>

69 
	#EXEC_FAILED
 127

	)

71 
	gfÊg
, 
	giÊg
, 
	gnÊg
, 
	gvÊg
;

73 
c›y
(const *, const *);

74 
do_move
(const *, const *);

75 
Á°c›y
(c⁄° *, c⁄° *, 
°©
 *);

76 
ußge
();

77 
¥e£rve_fd_a˛s
(
sour˚_fd
, 
de°_fd
, c⁄° *
sour˚_∑th
,

78 c⁄° *
de°_∑th
);

81 
	$maö
(
¨gc
, *
¨gv
[])

83 
size_t
 
ba£Àn
, 
Àn
;

84 
rvÆ
;

85 *
p
, *
ídp
;

86 
°©
 
sb
;

87 
ch
;

88 
∑th
[
PATH_MAX
];

90 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "finv")) != -1)

91 
ch
) {

93 
iÊg
 = 1;

94 
fÊg
 = 
nÊg
 = 0;

97 
fÊg
 = 1;

98 
iÊg
 = 
nÊg
 = 0;

101 
nÊg
 = 1;

102 
fÊg
 = 
iÊg
 = 0;

105 
vÊg
 = 1;

108 
	`ußge
();

110 
¨gc
 -
›töd
;

111 
¨gv
 +
›töd
;

113 i‡(
¨gc
 < 2)

114 
	`ußge
();

120 i‡(
	`°©
(
¨gv
[
¨gc
 - 1], &
sb
Ë|| !
	`S_ISDIR
(sb.
°_mode
)) {

121 i‡(
¨gc
 > 2)

122 
	`ußge
();

123 
	`exô
(
	`do_move
(
¨gv
[0],árgv[1]));

127 i‡(
	`°æí
(
¨gv
[
¨gc
 - 1]Ë> (
∑th
) - 1)

128 
	`îrx
(1, "%s: de°ö©i⁄Ö©h«mêtoÿl⁄g", *
¨gv
);

129 ()
	`°r˝y
(
∑th
, 
¨gv
[
¨gc
 - 1]);

130 
ba£Àn
 = 
	`°æí
(
∑th
);

131 
ídp
 = &
∑th
[
ba£Àn
];

132 i‡(!
ba£Àn
 || *(
ídp
 - 1) != '/') {

133 *
ídp
++ = '/';

134 ++
ba£Àn
;

136 
rvÆ
 = 0; --
¨gc
; ++
¨gv
) {

141 
p
 = *
¨gv
 + 
	`°æí
(*argv);

142 
p
 !*
¨gv
 &&Ö[-1] == '/')

143 --
p
;

144 
p
 !*
¨gv
 &&Ö[-1] != '/')

145 --
p
;

147 i‡((
ba£Àn
 + (
Àn
 = 
	`°æí
(
p
))Ë>
PATH_MAX
) {

148 
	`w¨nx
("%s: de°ö©i⁄Ö©h«mêtoÿl⁄g", *
¨gv
);

149 
rvÆ
 = 1;

151 
	`memmove
(
ídp
, 
p
, (
size_t
)
Àn
 + 1);

152 i‡(
	`do_move
(*
¨gv
, 
∑th
))

153 
rvÆ
 = 1;

156 
	`exô
(
rvÆ
);

157 
	}
}

160 
	$do_move
(c⁄° *
‰om
, c⁄° *
to
)

162 
°©
 
sb
;

163 
ask
, 
ch
, 
fú°
;

164 
modï
[15];

171 i‡(!
fÊg
 && !
	`ac˚ss
(
to
, 
F_OK
)) {

174 i‡(
	`l°©
(
‰om
, &
sb
) == -1) {

175 
	`w¨n
("%s", 
‰om
);

179 
	#YESNO
 "(y/¿[n]Ë"

	)

180 
ask
 = 0;

181 i‡(
nÊg
) {

182 i‡(
vÊg
)

183 
	`¥ötf
("%†nŸ ovîwrôãn\n", 
to
);

185 } i‡(
iÊg
) {

186 ()
	`Ârötf
(
°dîr
, "ovîwrôê%s? %s", 
to
, 
YESNO
);

187 
ask
 = 1;

188 } i‡(
	`ac˚ss
(
to
, 
W_OK
Ë&& !
	`°©
—o, &
sb
)) {

189 
	`°rmode
(
sb
.
°_mode
, 
modï
);

190 ()
	`Ârötf
(
°dîr
, "override %s%s%s/%s for %s? %s",

191 
modï
 + 1, modep[9] == ' ' ? "" : " ",

192 
	`u£r_‰om_uid
(()
sb
.
°_uid
, 0),

193 
	`group_‰om_gid
(()
sb
.
°_gid
, 0), 
to
, 
YESNO
);

194 
ask
 = 1;

196 i‡(
ask
) {

197 
fú°
 = 
ch
 = 
	`gëch¨
();

198 
ch
 !'\n' && ch !
EOF
)

199 
ch
 = 
	`gëch¨
();

200 i‡(
fú°
 != 'y' && first != 'Y') {

201 ()
	`Ârötf
(
°dîr
, "not overwritten\n");

211 i‡(!
	`ª«me
(
‰om
, 
to
)) {

212 i‡(
vÊg
)

213 
	`¥ötf
("%†-> %s\n", 
‰om
, 
to
);

217 i‡(
î∫o
 =
EXDEV
) {

218 
°©fs
 
sfs
;

219 
∑th
[
PATH_MAX
];

225 i‡(
	`l°©
(
‰om
, &
sb
) == -1) {

226 
	`w¨n
("%s", 
‰om
);

229 i‡(!
	`S_ISLNK
(
sb
.
°_mode
)) {

231 i‡(
	`ªÆ∑th
(
‰om
, 
∑th
Ë=
NULL
) {

232 
	`w¨n
("ˇ¬ŸÑesﬁvê%s: %s", 
‰om
, 
∑th
);

235 i‡(!
	`°©fs
(
∑th
, &
sfs
) &&

236 !
	`°rcmp
(
∑th
, 
sfs
.
f_m¡⁄«me
)) {

237 
	`w¨nx
("cannotÑenameá mountÖoint");

242 
	`w¨n
("ª«mê%†tÿ%s", 
‰om
, 
to
);

251 i‡(
	`l°©
(
‰om
, &
sb
)) {

252 
	`w¨n
("%s", 
‰om
);

255  (
	`S_ISREG
(
sb
.
°_mode
) ?

256 
	`Á°c›y
(
‰om
, 
to
, &
sb
Ë: 
	`c›y
(from,Åo));

257 
	}
}

260 
	$Á°c›y
(c⁄° *
‰om
, c⁄° *
to
, 
°©
 *
sbp
)

262 
timevÆ
 
tvÆ
[2];

263 
u_öt
 
bÀn
;

264 *
bp
;

265 
mode_t
 
ﬁdmode
;

266 
ƒód
, 
‰om_fd
, 
to_fd
;

268 i‡((
‰om_fd
 = 
	`›í
(
‰om
, 
O_RDONLY
, 0)) < 0) {

269 
	`w¨n
("%s", 
‰om
);

272 i‡(
bÀn
 < 
sbp
->
°_blksize
) {

273 i‡(
bp
 !
NULL
)

274 
	`‰ì
(
bp
);

275 i‡((
bp
 = 
	`mÆloc
((
size_t
)
sbp
->
°_blksize
)Ë=
NULL
) {

276 
bÀn
 = 0;

277 
	`w¨nx
("malloc failed");

280 
bÀn
 = 
sbp
->
°_blksize
;

282 (
to_fd
 =

283 
	`›í
(
to
, 
O_CREAT
 | 
O_EXCL
 | 
O_TRUNC
 | 
O_WRONLY
, 0)) < 0) {

284 i‡(
î∫o
 =
EEXIST
 && 
	`u∆ök
(
to
) == 0)

286 
	`w¨n
("%s", 
to
);

287 ()
	`˛o£
(
‰om_fd
);

290 (
ƒód
 = 
	`ªad
(
‰om_fd
, 
bp
, (
size_t
)
bÀn
)) > 0)

291 i‡(
	`wrôe
(
to_fd
, 
bp
, (
size_t
)
ƒód
) !=Çread) {

292 
	`w¨n
("%s", 
to
);

293 
îr
;

295 i‡(
ƒód
 < 0) {

296 
	`w¨n
("%s", 
‰om
);

297 
îr
: i‡(
	`u∆ök
(
to
))

298 
	`w¨n
("%s:Ñemove", 
to
);

299 ()
	`˛o£
(
‰om_fd
);

300 ()
	`˛o£
(
to_fd
);

304 
ﬁdmode
 = 
sbp
->
°_mode
 & 
ALLPERMS
;

305 i‡(
	`fchown
(
to_fd
, 
sbp
->
°_uid
, sbp->
°_gid
)) {

306 
	`w¨n
("%s: së ow√r/grou∞(was: %lu/%lu)", 
to
,

307 (
u_l⁄g
)
sbp
->
°_uid
, (u_l⁄g)sbp->
°_gid
);

308 i‡(
ﬁdmode
 & (
S_ISUID
 | 
S_ISGID
)) {

309 
	`w¨nx
(

311 
to
, 
ﬁdmode
);

312 
sbp
->
°_mode
 &~(
S_ISUID
 | 
S_ISGID
);

315 i‡(
	`fchmod
(
to_fd
, 
sbp
->
°_mode
))

316 
	`w¨n
("%s: së modê(was: 0%03o)", 
to
, 
ﬁdmode
);

322 
	`¥e£rve_fd_a˛s
(
‰om_fd
, 
to_fd
, 
‰om
, 
to
);

323 ()
	`˛o£
(
‰om_fd
);

331 
î∫o
 = 0;

332 i‡(
	`fchÊags
(
to_fd
, (
u_l⁄g
)
sbp
->
°_Êags
))

333 i‡(
î∫o
 !
EOPNOTSUPP
 || 
sbp
->
°_Êags
 != 0)

334 
	`w¨n
("%s: së fœg†(was: 0%07o)", 
to
, 
sbp
->
°_Êags
);

336 
tvÆ
[0].
tv_£c
 = 
sbp
->
°_©ime
;

337 
tvÆ
[1].
tv_£c
 = 
sbp
->
°_mtime
;

338 
tvÆ
[0].
tv_u£c
 =Åval[1].tv_usec = 0;

339 i‡(
	`utimes
(
to
, 
tvÆ
))

340 
	`w¨n
("%s: sëÅimes", 
to
);

342 i‡(
	`˛o£
(
to_fd
)) {

343 
	`w¨n
("%s", 
to
);

347 i‡(
	`u∆ök
(
‰om
)) {

348 
	`w¨n
("%s:Ñemove", 
‰om
);

351 i‡(
vÊg
)

352 
	`¥ötf
("%†-> %s\n", 
‰om
, 
to
);

354 
	}
}

357 
	$c›y
(c⁄° *
‰om
, c⁄° *
to
)

359 
°©
 
sb
;

360 
pid
, 
°©us
;

362 i‡(
	`l°©
(
to
, &
sb
) == 0) {

364 i‡(
	`S_ISDIR
(
sb
.
°_mode
)) {

365 i‡(
	`rmdú
(
to
) != 0) {

366 
	`w¨n
("rmdú %s", 
to
);

370 i‡(
	`u∆ök
(
to
) != 0) {

371 
	`w¨n
("u∆ök %s", 
to
);

375 } i‡(
î∫o
 !
ENOENT
) {

376 
	`w¨n
("%s", 
to
);

381 i‡(!(
pid
 = 
	`vf‹k
())) {

382 
	`exe˛
(
_PATH_CP
, "mv", 
vÊg
 ? "-PRpv" : "-PRp", "--", 
‰om
, 
to
,

383 (*)
NULL
);

384 
	`_exô
(
EXEC_FAILED
);

386 i‡(
	`waôpid
(
pid
, &
°©us
, 0) == -1) {

387 
	`w¨n
("%†%†%s: waôpid", 
_PATH_CP
, 
‰om
, 
to
);

390 i‡(!
	`WIFEXITED
(
°©us
)) {

391 
	`w¨nx
("%s %s %s: didÇotÅerminateÇormally",

392 
_PATH_CP
, 
‰om
, 
to
);

395 
	`WEXITSTATUS
(
°©us
)) {

398 
EXEC_FAILED
:

399 
	`w¨nx
("%†%†%s:Éxe¯Áûed", 
_PATH_CP
, 
‰om
, 
to
);

402 
	`w¨nx
("%s %s %s:Åerminated with %d (non-zero) status",

403 
_PATH_CP
, 
‰om
, 
to
, 
	`WEXITSTATUS
(
°©us
));

408 i‡(!(
pid
 = 
	`vf‹k
())) {

409 
	`exe˛
(
_PATH_RM
, "mv", "-rf", "--", 
‰om
, (*)
NULL
);

410 
	`_exô
(
EXEC_FAILED
);

412 i‡(
	`waôpid
(
pid
, &
°©us
, 0) == -1) {

413 
	`w¨n
("%†%s: waôpid", 
_PATH_RM
, 
‰om
);

416 i‡(!
	`WIFEXITED
(
°©us
)) {

417 
	`w¨nx
("%†%s: didÇŸÅîmö©ên‹mÆly", 
_PATH_RM
, 
‰om
);

420 
	`WEXITSTATUS
(
°©us
)) {

423 
EXEC_FAILED
:

424 
	`w¨nx
("%†%s:Éxe¯Áûed", 
_PATH_RM
, 
‰om
);

427 
	`w¨nx
("%s %s:Åerminated with %d (non-zero) status",

428 
_PATH_RM
, 
‰om
, 
	`WEXITSTATUS
(
°©us
));

432 
	}
}

435 
	$¥e£rve_fd_a˛s
(
sour˚_fd
, 
de°_fd
, c⁄° *
sour˚_∑th
,

436 c⁄° *
de°_∑th
)

438 
a˛_t
 
a˛
;

439 
a˛_ty≥_t
 
a˛_ty≥
;

440 
a˛_suµ‹ãd
 = 0, 
ªt
, 
åivül
;

442 
ªt
 = 
	`Â©hc⁄f
(
sour˚_fd
, 
_PC_ACL_NFS4
);

443 i‡(
ªt
 > 0 ) {

444 
a˛_suµ‹ãd
 = 1;

445 
a˛_ty≥
 = 
ACL_TYPE_NFS4
;

446 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

447 
	`w¨n
("fpathconf(..., _PC_ACL_NFS4) failed for %s",

448 
sour˚_∑th
);

451 i‡(
a˛_suµ‹ãd
 == 0) {

452 
ªt
 = 
	`Â©hc⁄f
(
sour˚_fd
, 
_PC_ACL_EXTENDED
);

453 i‡(
ªt
 > 0 ) {

454 
a˛_suµ‹ãd
 = 1;

455 
a˛_ty≥
 = 
ACL_TYPE_ACCESS
;

456 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

457 
	`w¨n
("fpathconf(..., _PC_ACL_EXTENDED) failed for %s",

458 
sour˚_∑th
);

462 i‡(
a˛_suµ‹ãd
 == 0)

465 
a˛
 = 
	`a˛_gë_fd_≈
(
sour˚_fd
, 
a˛_ty≥
);

466 i‡(
a˛
 =
NULL
) {

467 
	`w¨n
("ÁûedÅÿgëá˛É¡rõ†f‹ %s", 
sour˚_∑th
);

470 i‡(
	`a˛_is_åivül_≈
(
a˛
, &
åivül
)) {

471 
	`w¨n
("a˛_is_åivül(ËÁûed f‹ %s", 
sour˚_∑th
);

472 
	`a˛_‰ì
(
a˛
);

475 i‡(
åivül
) {

476 
	`a˛_‰ì
(
a˛
);

479 i‡(
	`a˛_£t_fd_≈
(
de°_fd
, 
a˛
, 
a˛_ty≥
) < 0) {

480 
	`w¨n
("ÁûedÅÿ£àa˛É¡rõ†f‹ %s", 
de°_∑th
);

481 
	`a˛_‰ì
(
a˛
);

484 
	`a˛_‰ì
(
a˛
);

485 
	}
}

488 
	$ußge
()

491 ()
	`Ârötf
(
°dîr
, "%s\n%s\n",

494 
	`exô
(
EX_USAGE
);

495 
	}
}

	@pax/ar_io.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)ar_io.c 8.2 (Berkeley) 4/18/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/ar_io.c,v 1.28.10.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/io˘l.h
>

44 
	~<sys/mtio.h
>

45 
	~<sys/°©.h
>

46 
	~<sys/waô.h
>

47 
	~<îr.h
>

48 
	~<î∫o.h
>

49 
	~<f˙é.h
>

50 
	~<sig«l.h
>

51 
	~<°döt.h
>

52 
	~<°dio.h
>

53 
	~<°rög.h
>

54 
	~<°dlib.h
>

55 
	~<uni°d.h
>

56 
	~"∑x.h
"

57 
	~"›ti⁄s.h
"

58 
	~"exã∫.h
"

64 
	#DMOD
 0666

	)

65 
	#EXT_MODE
 
O_RDONLY


	)

66 
	#AR_MODE
 (
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
Ë

	)

67 
	#APP_MODE
 
O_RDWR


	)

69 
	gn⁄e
[] = "<NONE>";

70 
	g°do
[] = "<STDOUT>";

71 
	g°dn
[] = "<STDIN>";

72 
	g¨fd
 = -1;

73 
	g¨typ
 = 
ISREG
;

74 
	g¨vﬁ
 = 1;

75 
	gl°rvÆ
 = -1;

76 
	gio_ok
;

77 
	gdid_io
;

78 
	gd⁄e
;

79 
°©
 
	g¨sb
;

80 
	gövld_ªc
;

81 
	gwr_åaû
 = 1;

82 
	gˇn_u∆nk
 = 0;

83 c⁄° *
	g¨˙ame
;

84 c⁄° *
	ggzù_¥ogøm
;

85 
pid_t
 
	gzpid
 = -1;

87 
gë_phys
();

88 
sig£t_t
 
s_mask
;

89 
¨_°¨t_gzù
(, const *, );

101 
	$¨_›í
(c⁄° *
«me
)

103 
mtgë
 
mb
;

105 i‡(
¨fd
 != -1)

106 ()
	`˛o£
(
¨fd
);

107 
¨fd
 = -1;

108 
ˇn_u∆nk
 = 
did_io
 = 
io_ok
 = 
övld_ªc
 = 0;

109 
¨typ
 = 
ISREG
;

110 
Ê˙t
 = 0;

115 
a˘
) {

116 
LIST
:

117 
EXTRACT
:

118 i‡(
«me
 =
NULL
) {

119 
¨fd
 = 
STDIN_FILENO
;

120 
¨˙ame
 = 
°dn
;

121 } i‡((
¨fd
 = 
	`›í
(
«me
, 
EXT_MODE
, 
DMOD
)) < 0)

122 
	`sysw¨n
(0, 
î∫o
, "Faûed o≥¿tÿªad o¿%s", 
«me
);

123 i‡(
¨fd
 !-1 && 
gzù_¥ogøm
 !
NULL
)

124 
	`¨_°¨t_gzù
(
¨fd
, 
gzù_¥ogøm
, 0);

126 
ARCHIVE
:

127 i‡(
«me
 =
NULL
) {

128 
¨fd
 = 
STDOUT_FILENO
;

129 
¨˙ame
 = 
°do
;

130 } i‡((
¨fd
 = 
	`›í
(
«me
, 
AR_MODE
, 
DMOD
)) < 0)

131 
	`sysw¨n
(0, 
î∫o
, "Faûed o≥¿tÿwrôê⁄ %s", 
«me
);

133 
ˇn_u∆nk
 = 1;

134 i‡(
¨fd
 !-1 && 
gzù_¥ogøm
 !
NULL
)

135 
	`¨_°¨t_gzù
(
¨fd
, 
gzù_¥ogøm
, 1);

137 
APPND
:

138 i‡(
«me
 =
NULL
) {

139 
¨fd
 = 
STDOUT_FILENO
;

140 
¨˙ame
 = 
°do
;

141 } i‡((
¨fd
 = 
	`›í
(
«me
, 
APP_MODE
, 
DMOD
)) < 0)

142 
	`sysw¨n
(0, 
î∫o
, "Failed openÅoÑead/write on %s",

143 
«me
);

145 
COPY
:

149 
¨˙ame
 = 
n⁄e
;

150 
l°rvÆ
 = 1;

153 i‡(
¨fd
 < 0)

156 i‡(
chd«me
 !
NULL
)

157 i‡(
	`chdú
(
chd«me
) != 0) {

158 
	`sysw¨n
(1, 
î∫o
, "Faûed chdúÅÿ%s", 
chd«me
);

164 i‡(
	`f°©
(
¨fd
, &
¨sb
) < 0) {

165 
	`sysw¨n
(0, 
î∫o
, "Faûed sèà⁄ %s", 
¨˙ame
);

166 ()
	`˛o£
(
¨fd
);

167 
¨fd
 = -1;

168 
ˇn_u∆nk
 = 0;

171 i‡(
	`S_ISDIR
(
¨sb
.
°_mode
)) {

172 
	`∑xw¨n
(0, "Cannot writeánárchive onÅop ofá directory %s",

173 
¨˙ame
);

174 ()
	`˛o£
(
¨fd
);

175 
¨fd
 = -1;

176 
ˇn_u∆nk
 = 0;

180 i‡(
	`S_ISCHR
(
¨sb
.
°_mode
))

181 
¨typ
 = 
	`io˘l
(
¨fd
, 
MTIOCGET
, &
mb
Ë? 
ISCHR
 : 
ISTAPE
;

182 i‡(
	`S_ISBLK
(
¨sb
.
°_mode
))

183 
¨typ
 = 
ISBLK
;

184 i‡((
	`l£ek
(
¨fd
, (
off_t
)0L, 
SEEK_CUR
Ë=-1Ë&& (
î∫o
 =
ESPIPE
))

185 
¨typ
 = 
ISPIPE
;

187 
¨typ
 = 
ISREG
;

193 i‡(
¨typ
 !
ISREG
)

194 
ˇn_u∆nk
 = 0;

198 i‡(
a˘
 =
ARCHIVE
) {

199 
blksz
 = 
rdblksz
 = 
wrblksz
;

200 
l°rvÆ
 = 1;

211 
¨typ
) {

212 
ISTAPE
:

227 
blksz
 = 
rdblksz
 = 
MAXBLK
;

229 
ISPIPE
:

230 
ISBLK
:

231 
ISCHR
:

240 i‡((
a˘
 =
APPND
Ë&& 
wrblksz
) {

241 
blksz
 = 
rdblksz
 = 
wrblksz
;

245 i‡((
¨sb
.
°_blksize
 > 0Ë&& (¨sb.°_blksizê< 
MAXBLK
) &&

246 ((
¨sb
.
°_blksize
 % 
BLKMULT
) == 0))

247 
rdblksz
 = 
¨sb
.
°_blksize
;

249 
rdblksz
 = 
DEVBLK
;

253 i‡((
a˘
 =
APPND
Ë|| (
¨typ
 =
ISCHR
))

254 
blksz
 = 
rdblksz
;

256 
blksz
 = 
MAXBLK
;

258 
ISREG
:

263 i‡((
a˘
 =
APPND
Ë&& 
wrblksz
 && ((
¨sb
.
°_size
%wrblksz)==0)){

264 
blksz
 = 
rdblksz
 = 
wrblksz
;

270 
rdblksz
 = 
MAXBLK
;Ñdblksz > 0;Ñdblksz -
BLKMULT
)

271 i‡((
¨sb
.
°_size
 % 
rdblksz
) == 0)

276 i‡(
rdblksz
 <= 0)

277 
rdblksz
 = 
FILEBLK
;

281 i‡(
a˘
 =
APPND
)

282 
blksz
 = 
rdblksz
;

284 
blksz
 = 
MAXBLK
;

290 
blksz
 = 
rdblksz
 = 
BLKMULT
;

293 
l°rvÆ
 = 1;

295 
	}
}

302 
	$¨_˛o£
()

304 
°©us
;

306 i‡(
¨fd
 < 0) {

307 
did_io
 = 
io_ok
 = 
Ê˙t
 = 0;

317 i‡(
vÊag
 && (
¨typ
 =
ISTAPE
)) {

318 i‡(
vÂ¨t
)

319 ()
	`putc
('\n', 
li°f
);

320 ()
	`Ârötf
(
li°f
,

322 
¨gv0
);

323 ()
	`fÊush
(
li°f
);

330 i‡(
ˇn_u∆nk
 && (
	`f°©
(
¨fd
, &
¨sb
Ë=0Ë&& (
	`S_ISREG
◊rsb.
°_mode
)) &&

331 (
¨sb
.
°_size
 == 0)) {

332 ()
	`u∆ök
(
¨˙ame
);

333 
ˇn_u∆nk
 = 0;

340 i‡((
a˘
 =
LIST
 ||á˘ =
EXTRACT
Ë&& 
nÊag
 && 
zpid
 > 0)

341 
	`kûl
(
zpid
, 
SIGINT
);

343 ()
	`˛o£
(
¨fd
);

346 i‡(
zpid
 > 0)

347 
	`waôpid
(
zpid
, &
°©us
, 0);

349 i‡(
vÊag
 && (
¨typ
 =
ISTAPE
)) {

350 ()
	`Âuts
("d⁄e.\n", 
li°f
);

351 
vÂ¨t
 = 0;

352 ()
	`fÊush
(
li°f
);

354 
¨fd
 = -1;

356 i‡(!
io_ok
 && !
did_io
) {

357 
Ê˙t
 = 0;

360 
did_io
 = 
io_ok
 = 0;

366 i‡(
‰mt
 !
NULL
)

367 ++
¨vﬁ
;

369 i‡(!
vÊag
) {

370 
Ê˙t
 = 0;

377 i‡(
vÂ¨t
) {

378 ()
	`putc
('\n', 
li°f
);

379 
vÂ¨t
 = 0;

387 i‡(
‰mt
 =
NULL
) {

388 #ifde‡
NET2_STAT


389 ()
	`Ârötf
(
li°f
, "%s: unknown format, %lu bytes skipped.\n",

390 
¨gv0
, 
rd˙t
);

392 ()
	`Ârötf
(
li°f
, "%s: unknown format, %ju bytes skipped.\n",

393 
¨gv0
, (
uötmax_t
)
rd˙t
);

395 ()
	`fÊush
(
li°f
);

396 
Ê˙t
 = 0;

400 i‡(
	`°rcmp
(
NM_CPIO
, 
¨gv0
) == 0)

401 ()
	`Ârötf
(
li°f
, "%llu blocks\n",

402 ()((
rd˙t
 ?Ñd˙à: 
wr˙t
) / 5120));

403 i‡(
	`°rcmp
(
NM_TAR
, 
¨gv0
) != 0)

404 ()
	`Ârötf
(
li°f
,

405 #ifde‡
NET2_STAT


407 
¨gv0
, 
‰mt
->
«me
, 
¨vﬁ
-1, 
Ê˙t
, 
rd˙t
, 
wr˙t
);

410 
¨gv0
, 
‰mt
->
«me
, 
¨vﬁ
-1, (
uötmax_t
)
Ê˙t
,

411 (
uötmax_t
)
rd˙t
, (uötmax_t)
wr˙t
);

413 ()
	`fÊush
(
li°f
);

414 
Ê˙t
 = 0;

415 
	}
}

425 
	$¨_døö
()

427 
ªs
;

428 
drbuf
[
MAXBLK
];

435 i‡((
¨typ
 !
ISPIPE
Ë|| (
l°rvÆ
 <= 0))

441 (
ªs
 = 
	`ªad
(
¨fd
, 
drbuf
, (drbuf))) > 0)

443 
l°rvÆ
 = 
ªs
;

444 
	}
}

457 
	$¨_£t_wr
()

459 
off_t
 
˝os
;

465 
wr_åaû
 = 0;

470 i‡(
¨typ
 !
ISREG
)

477 i‡(((
˝os
 = 
	`l£ek
(
¨fd
, (
off_t
)0L, 
SEEK_CUR
)) < 0) ||

478 (
	`·runˇã
(
¨fd
, 
˝os
) < 0)) {

479 
	`sysw¨n
(1, 
î∫o
, "UnableÅoÅruncateárchive file");

483 
	}
}

495 
	$¨_≠p_ok
()

497 i‡(
¨typ
 =
ISPIPE
) {

498 
	`∑xw¨n
(1, "CannotáppendÅoánárchive obtained fromáÖipe.");

502 i‡(!
övld_ªc
)

504 
	`∑xw¨n
(1,"Cannotáppend, deviceÑecord size %d doesÇot support %s spec",

505 
rdblksz
, 
¨gv0
);

507 
	}
}

519 
	$¨_ªad
(*
buf
, 
˙t
)

521 
ªs
 = 0;

526 i‡(
l°rvÆ
 <= 0)

527 (
l°rvÆ
);

532 
¨typ
) {

533 
ISTAPE
:

534 i‡((
ªs
 = 
	`ªad
(
¨fd
, 
buf
, 
˙t
)) > 0) {

542 
io_ok
 = 1;

543 i‡(
ªs
 !
rdblksz
) {

553 
rdblksz
 = 
ªs
;

554 i‡(
rdblksz
 % 
BLKMULT
)

555 
övld_ªc
 = 1;

557 (
ªs
);

560 
ISREG
:

561 
ISBLK
:

562 
ISCHR
:

563 
ISPIPE
:

572 i‡((
ªs
 = 
	`ªad
(
¨fd
, 
buf
, 
˙t
)) > 0) {

573 
io_ok
 = 1;

574 (
ªs
);

582 
l°rvÆ
 = 
ªs
;

583 i‡(
ªs
 < 0)

584 
	`sysw¨n
(1, 
î∫o
, "FaûedÑód o¿¨chivêvﬁumê%d", 
¨vﬁ
);

586 
	`∑xw¨n
(0, "End o‡¨chivêvﬁumê%dÑóched", 
¨vﬁ
);

587 (
ªs
);

588 
	}
}

602 
	$¨_wrôe
(*
buf
, 
bsz
)

604 
ªs
;

605 
off_t
 
˝os
;

611 i‡(
l°rvÆ
 <= 0)

612 (
l°rvÆ
);

614 i‡((
ªs
 = 
	`wrôe
(
¨fd
, 
buf
, 
bsz
)) == bsz) {

615 
wr_åaû
 = 1;

616 
io_ok
 = 1;

617 (
bsz
);

623 i‡(
ªs
 < 0)

624 
l°rvÆ
 = 
ªs
;

626 
l°rvÆ
 = 0;

628 
¨typ
) {

629 
ISREG
:

630 i‡((
ªs
 > 0Ë&& (ª†% 
BLKMULT
)) {

636 i‡((
˝os
 = 
	`l£ek
(
¨fd
, (
off_t
)0L, 
SEEK_CUR
)) < 0)

638 
˝os
 -(
off_t
)
ªs
;

639 i‡(
	`·runˇã
(
¨fd
, 
˝os
) < 0)

641 
ªs
 = 
l°rvÆ
 = 0;

644 i‡(
ªs
 >= 0)

649 i‡((
î∫o
 =
ENOSPC
Ë|| (î∫ÿ=
EFBIG
Ë|| (î∫ÿ=
EDQUOT
))

650 
ªs
 = 
l°rvÆ
 = 0;

652 
ISTAPE
:

653 
ISCHR
:

654 
ISBLK
:

655 i‡(
ªs
 >= 0)

657 i‡(
î∫o
 =
EACCES
) {

658 
	`∑xw¨n
(0, "Write failed,árchive is writeÖrotected.");

659 
ªs
 = 
l°rvÆ
 = 0;

666 i‡((
î∫o
 =
ENOSPC
Ë|| (î∫ÿ=
EIO
Ë|| (î∫ÿ=
ENXIO
))

667 
ªs
 = 
l°rvÆ
 = 0;

669 
ISPIPE
:

685 i‡(
ªs
 >= 0) {

686 i‡(
ªs
 > 0)

687 
wr_åaû
 = 1;

688 
io_ok
 = 1;

695 i‡(!
wr_åaû
 && (
ªs
 <= 0)) {

696 
	`∑xw¨n
(1,"UnableÅoáppend,ÅrailerÑe-write failed. Quitting.");

697 (
ªs
);

700 i‡(
ªs
 == 0)

701 
	`∑xw¨n
(0, "End o‡¨chivêvﬁumê%dÑóched", 
¨vﬁ
);

702 i‡(
ªs
 < 0)

703 
	`sysw¨n
(1, 
î∫o
, "Faûed wrôêtÿ¨chivêvﬁume: %d", 
¨vﬁ
);

704 i‡(!
‰mt
->
blkÆgn
 || ((
ªs
 % frmt->blkalgn) == 0))

705 
	`∑xw¨n
(0,"WARNING:Öartialárchive write. Archive MAY BE FLAWED");

707 
	`∑xw¨n
(1,"WARNING:Öartialárchive write. Archive IS FLAWED");

708 (
ªs
);

709 
	}
}

720 
	$¨_rdsync
()

722 
fsbz
;

723 
off_t
 
˝os
;

724 
off_t
 
mpos
;

725 
mt›
 
mb
;

732 i‡((
d⁄e
 > 0Ë|| (
l°rvÆ
 == 0))

735 i‡((
a˘
 =
APPND
Ë|| (a˘ =
ARCHIVE
)) {

736 
	`∑xw¨n
(1, "Cannotállow updatesÅoánárchive with flaws.");

739 i‡(
io_ok
)

740 
did_io
 = 1;

742 
¨typ
) {

743 
ISTAPE
:

752 i‡(
io_ok
) {

753 
io_ok
 = 0;

754 
l°rvÆ
 = 1;

757 
mb
.
mt_›
 = 
MTFSR
;

758 
mb
.
mt_cou¡
 = 1;

759 i‡(
	`io˘l
(
¨fd
, 
MTIOCTOP
, &
mb
) < 0)

761 
l°rvÆ
 = 1;

763 
ISREG
:

764 
ISCHR
:

765 
ISBLK
:

769 
io_ok
 = 0;

770 i‡(((
fsbz
 = 
¨sb
.
°_blksize
Ë<0Ë|| (
¨typ
 !
ISREG
))

771 
fsbz
 = 
BLKMULT
;

772 i‡((
˝os
 = 
	`l£ek
(
¨fd
, (
off_t
)0L, 
SEEK_CUR
)) < 0)

774 
mpos
 = 
fsbz
 - (
˝os
 % (
off_t
)fsbz);

775 i‡(
	`l£ek
(
¨fd
, 
mpos
, 
SEEK_CUR
) < 0)

777 
l°rvÆ
 = 1;

779 
ISPIPE
:

784 
io_ok
 = 0;

787 i‡(
l°rvÆ
 <= 0) {

788 
	`∑xw¨n
(1, "UnableÅoÑecover frománárchiveÑead failure.");

791 
	`∑xw¨n
(0, "AttemptingÅoÑecover frománárchiveÑead failure.");

793 
	}
}

806 
	$¨_fow
(
off_t
 
sksz
, off_à*
skù≥d
)

808 
off_t
 
˝os
;

809 
off_t
 
mpos
;

811 *
skù≥d
 = 0;

812 i‡(
sksz
 <= 0)

818 i‡(
l°rvÆ
 <= 0)

819 (
l°rvÆ
);

827 i‡(
¨typ
 !
ISREG
)

833 i‡((
˝os
 = 
	`l£ek
(
¨fd
, (
off_t
)0L, 
SEEK_CUR
)) >= 0) {

840 i‡((
mpos
 = 
˝os
 + 
sksz
Ë> 
¨sb
.
°_size
) {

841 *
skù≥d
 = 
¨sb
.
°_size
 - 
˝os
;

842 
mpos
 = 
¨sb
.
°_size
;

844 *
skù≥d
 = 
sksz
;

845 i‡(
	`l£ek
(
¨fd
, 
mpos
, 
SEEK_SET
) >= 0)

848 
	`sysw¨n
(1, 
î∫o
, "ForwardÖositioning operation onárchive failed");

849 
l°rvÆ
 = -1;

851 
	}
}

865 
	$¨_ªv
(
off_t
 
sksz
)

867 
off_t
 
˝os
;

868 
mt›
 
mb
;

869 
phyblk
;

874 i‡(
l°rvÆ
 < 0)

875 (
l°rvÆ
);

877 
¨typ
) {

878 
ISPIPE
:

879 i‡(
sksz
 <= 0)

884 
	`∑xw¨n
(1, "ReverseÖositioning onÖipes isÇot supported.");

885 
l°rvÆ
 = -1;

887 
ISREG
:

888 
ISBLK
:

889 
ISCHR
:

891 i‡(
sksz
 <= 0)

901 i‡((
˝os
 = 
	`l£ek
(
¨fd
, (
off_t
)0L, 
SEEK_CUR
)) < 0) {

902 
	`sysw¨n
(1, 
î∫o
,

904 
l°rvÆ
 = -1;

915 i‡((
˝os
 -
sksz
Ë< (
off_t
)0L) {

916 i‡(
¨vﬁ
 > 1) {

920 
	`∑xw¨n
(1,"ReverseÖosition onÖrevious volume.");

921 
l°rvÆ
 = -1;

924 
˝os
 = (
off_t
)0L;

926 i‡(
	`l£ek
(
¨fd
, 
˝os
, 
SEEK_SET
) < 0) {

927 
	`sysw¨n
(1, 
î∫o
, "UnableÅo seekárchive backwards");

928 
l°rvÆ
 = -1;

932 
ISTAPE
:

940 i‡((
phyblk
 = 
	`gë_phys
()) <= 0) {

941 
l°rvÆ
 = -1;

949 
rdblksz
 = 
phyblk
;

955 i‡(
sksz
 <= 0)

961 i‡(
sksz
 % 
phyblk
) {

962 
	`∑xw¨n
(1,

964 
l°rvÆ
 = -1;

971 
mb
.
mt_›
 = 
MTBSR
;

972 
mb
.
mt_cou¡
 = 
sksz
/
phyblk
;

973 i‡(
	`io˘l
(
¨fd
, 
MTIOCTOP
, &
mb
) < 0) {

974 
	`sysw¨n
(1,
î∫o
, "UnableÅo backspaceÅape %d blocks.",

975 
mb
.
mt_cou¡
);

976 
l°rvÆ
 = -1;

981 
l°rvÆ
 = 1;

983 
	}
}

997 
	$gë_phys
()

999 
∑dsz
 = 0;

1000 
ªs
;

1001 
phyblk
;

1002 
mt›
 
mb
;

1003 
scbuf
[
MAXBLK
];

1009 i‡(
l°rvÆ
 == 1) {

1014 (
ªs
 = 
	`ªad
(
¨fd
, 
scbuf
, (scbuf))) > 0)

1015 
∑dsz
 +
ªs
;

1016 i‡(
ªs
 < 0) {

1017 
	`sysw¨n
(1, 
î∫o
, "UnableÅoÜocateÅape filemark.");

1026 
mb
.
mt_›
 = 
MTBSF
;

1027 
mb
.
mt_cou¡
 = 1;

1028 i‡(
	`io˘l
(
¨fd
, 
MTIOCTOP
, &
mb
) < 0) {

1029 
	`sysw¨n
(1, 
î∫o
, "UnableÅo backspace overÅape filemark.");

1037 
mb
.
mt_›
 = 
MTBSR
;

1038 
mb
.
mt_cou¡
 = 1;

1039 i‡(
	`io˘l
(
¨fd
, 
MTIOCTOP
, &
mb
) < 0) {

1040 
	`sysw¨n
(1, 
î∫o
, "UnableÅo backspace overÜastÅape block.");

1043 i‡((
phyblk
 = 
	`ªad
(
¨fd
, 
scbuf
, (scbuf))) <= 0) {

1044 
	`sysw¨n
(1, 
î∫o
, "Cannot determineárchiveÅape blocksize.");

1052 (
ªs
 = 
	`ªad
(
¨fd
, 
scbuf
, (scbuf))) > 0)

1054 i‡(
ªs
 < 0) {

1055 
	`sysw¨n
(1, 
î∫o
, "UnableÅoÜocateÅape filemark.");

1058 
mb
.
mt_›
 = 
MTBSF
;

1059 
mb
.
mt_cou¡
 = 1;

1060 i‡(
	`io˘l
(
¨fd
, 
MTIOCTOP
, &
mb
) < 0) {

1061 
	`sysw¨n
(1, 
î∫o
, "UnableÅo backspace overÅape filemark.");

1068 
l°rvÆ
 = 1;

1073 i‡(
∑dsz
 == 0)

1074 (
phyblk
);

1080 i‡(
∑dsz
 % 
phyblk
) {

1081 
	`∑xw¨n
(1, "Tape drive unableÅo backspaceÑequestedámount");

1089 
mb
.
mt_›
 = 
MTBSR
;

1090 
mb
.
mt_cou¡
 = 
∑dsz
/
phyblk
;

1091 i‡(
	`io˘l
(
¨fd
, 
MTIOCTOP
, &
mb
) < 0) {

1092 
	`sysw¨n
(1,
î∫o
,"UnableÅo backspaceÅape over %dÖad blocks",

1093 
mb
.
mt_cou¡
);

1096 (
phyblk
);

1097 
	}
}

1110 
	$¨_√xt
()

1112 *
¨cbuf
;

1113 
buf
[
PAXPATHLEN
+2];

1114 
sig£t_t
 
o_mask
;

1121 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
s_mask
, &
o_mask
) < 0)

1122 
	`sysw¨n
(0, 
î∫o
, "UnableÅo set signal mask");

1123 
	`¨_˛o£
();

1124 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
o_mask
, 
NULL
) < 0)

1125 
	`sysw¨n
(0, 
î∫o
, "UnableÅoÑestore signal mask");

1127 i‡(
d⁄e
 || !
wr_åaû
 || 
	`°rcmp
(
NM_TAR
, 
¨gv0
) == 0)

1130 
	`ây_¥¡
("\nATTENTION! %†¨chivêvﬁumêch™gêªquúed.\n", 
¨gv0
);

1136 i‡(
	`°rcmp
(
¨˙ame
, 
°do
Ë&& såcmp◊r˙ame, 
°dn
Ë&& (
¨typ
 !
ISREG
)

1137 && (
¨typ
 !
ISPIPE
)) {

1138 i‡(
¨typ
 =
ISTAPE
) {

1139 
	`ây_¥¡
("%sÑeady forárchiveÅape volume: %d\n",

1140 
¨˙ame
, 
¨vﬁ
);

1141 
	`ây_¥¡
("LoadÅhe NEXT TAPE onÅheÅape drive");

1143 
	`ây_¥¡
("%sÑeady forárchive volume: %d\n",

1144 
¨˙ame
, 
¨vﬁ
);

1145 
	`ây_¥¡
("LoadÅhe NEXT STORAGE MEDIA (ifÑequired)");

1148 i‡((
a˘
 =
ARCHIVE
Ë|| (a˘ =
APPND
))

1149 
	`ây_¥¡
("ánd make sure it is WRITE ENABLED.\n");

1151 
	`ây_¥¡
("\n");

1154 
	`ây_¥¡
("Type \"y\"Åo continue, \".\"Åo quit %s,",

1155 
¨gv0
);

1156 
	`ây_¥¡
(" or \"s\"Åo switchÅoÇew device.\nIf you");

1157 
	`ây_¥¡
(" cannot change storage media,Åype \"s\"\n");

1158 
	`ây_¥¡
("IsÅhe deviceÑeadyánd online? > ");

1160 i‡((
	`ây_ªad
(
buf
,(buf))<0Ë|| !
	`°rcmp
(buf,".")){

1161 
d⁄e
 = 1;

1162 
l°rvÆ
 = -1;

1163 
	`ây_¥¡
("Quôtög %s!\n", 
¨gv0
);

1164 
vÂ¨t
 = 0;

1168 i‡((
buf
[0] == '\0') || (buf[1] != '\0')) {

1169 
	`ây_¥¡
("%†unknow¿comm™d,Åryágaö\n",
buf
);

1173 
buf
[0]) {

1179 i‡(
	`¨_›í
(
¨˙ame
) >= 0)

1181 
	`ây_¥¡
("CannotÑe-open %s,Åryágain\n",

1182 
¨˙ame
);

1189 
	`ây_¥¡
("SwitchingÅoá differentárchive\n");

1192 
	`ây_¥¡
("%†unknow¿comm™d,Åryágaö\n",
buf
);

1198 
	`ây_¥¡
("Ródy f‹árchivêvﬁume: %d\n", 
¨vﬁ
);

1204 
	`ây_¥¡
("I≈uà¨chivê«mê‹ \".\"Åÿquô %s.\n", 
¨gv0
);

1205 
	`ây_¥¡
("ArchiveÇame > ");

1207 i‡((
	`ây_ªad
(
buf
, (buf)Ë< 0Ë|| !
	`°rcmp
(buf, ".")) {

1208 
d⁄e
 = 1;

1209 
l°rvÆ
 = -1;

1210 
	`ây_¥¡
("Quôtög %s!\n", 
¨gv0
);

1211 
vÂ¨t
 = 0;

1214 i‡(
buf
[0] == '\0') {

1215 
	`ây_¥¡
("Empty fileÇame,Åryágain\n");

1218 i‡(!
	`°rcmp
(
buf
, "..")) {

1219 
	`ây_¥¡
("Illegal fileÇame: ..Åryágain\n");

1222 i‡(
	`°æí
(
buf
Ë> 
PAXPATHLEN
) {

1223 
	`ây_¥¡
("FileÇameÅooÜong,Åryágain\n");

1230 i‡(
	`¨_›í
(
buf
) >= 0) {

1231 
	`‰ì
(
¨cbuf
);

1232 i‡((
¨cbuf
 = 
	`°rdup
(
buf
)Ë=
NULL
) {

1233 
d⁄e
 = 1;

1234 
l°rvÆ
 = -1;

1235 
	`∑xw¨n
(0, "Cannot saveárchiveÇame.");

1238 
¨˙ame
 = 
¨cbuf
;

1241 
	`ây_¥¡
("C™nŸ o≥¿%s,Åryágaö\n", 
buf
);

1245 
	}
}

1253 
	$¨_°¨t_gzù
(
fd
, c⁄° *
gzù_¥og
, 
wr
)

1255 
fds
[2];

1256 c⁄° *
gzù_Êags
;

1258 i‡(
	`pùe
(
fds
) < 0)

1259 
	`îr
(1, "couldÇotÖipe");

1260 
zpid
 = 
	`f‹k
();

1261 i‡(
zpid
 < 0)

1262 
	`îr
(1, "couldÇot fork");

1265 i‡(
zpid
) {

1266 i‡(
wr
)

1267 
	`dup2
(
fds
[1], 
fd
);

1269 
	`dup2
(
fds
[0], 
fd
);

1270 
	`˛o£
(
fds
[0]);

1271 
	`˛o£
(
fds
[1]);

1273 i‡(
wr
) {

1274 
	`dup2
(
fds
[0], 
STDIN_FILENO
);

1275 
	`dup2
(
fd
, 
STDOUT_FILENO
);

1276 
gzù_Êags
 = "-c";

1278 
	`dup2
(
fds
[1], 
STDOUT_FILENO
);

1279 
	`dup2
(
fd
, 
STDIN_FILENO
);

1280 
gzù_Êags
 = "-dc";

1282 
	`˛o£
(
fds
[0]);

1283 
	`˛o£
(
fds
[1]);

1284 i‡(
	`exe˛p
(
gzù_¥og
, gzù_¥og, 
gzù_Êags
,

1285 (*)
NULL
) < 0)

1286 
	`îr
(1, "couldÇotÉxec");

1289 
	}
}

	@pax/ar_subs.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)ar_subs.c 8.2 (Berkeley) 4/18/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/ar_subs.c,v 1.24.22.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

44 
	~<sys/°©.h
>

45 
	~<sig«l.h
>

46 
	~<°rög.h
>

47 
	~<°dio.h
>

48 
	~<f˙é.h
>

49 
	~<î∫o.h
>

50 
	~<uni°d.h
>

51 
	~<°dlib.h
>

52 
	~"∑x.h
"

53 
	~"exã∫.h
"

55 
wr_¨chive
(
ARCHD
 *, 
is_≠p
);

56 
gë_¨c
();

57 
√xt_hód
(
ARCHD
 *);

58 
sig£t_t
 
s_mask
;

65 
	ghdbuf
[
BLKMULT
];

66 
u_l⁄g
 
	gÊ˙t
;

75 
	$li°
()

77 
ARCHD
 *
¨˙
;

78 
ªs
;

79 
ARCHD
 
¨chd
;

80 
time_t
 
now
;

82 
¨˙
 = &
¨chd
;

90 i‡((
	`gë_¨c
(Ë< 0Ë|| ((*
‰mt
->
›ti⁄s
)() < 0) ||

91 ((*
‰mt
->
°_rd
)() < 0))

94 i‡(
vÊag
 && ((
	`uidtb_°¨t
(Ë< 0Ë|| (
	`gidtb_°¨t
() < 0)))

97 
now
 = 
	`time
(
NULL
);

102 
	`√xt_hód
(
¨˙
) == 0) {

107 i‡((
ªs
 = 
	`∑t_m©ch
(
¨˙
)) < 0)

110 i‡((
ªs
 =0Ë&& (
	`£l_chk
(
¨˙
) == 0)) {

114 i‡(
	`∑t_£l
(
¨˙
) < 0)

121 i‡((
ªs
 = 
	`mod_«me
(
¨˙
)) < 0)

123 i‡(
ªs
 == 0)

124 
	`ls_li°
(
¨˙
, 
now
, 
°dout
);

131 i‡(
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
) == 1)

139 ()(*
‰mt
->
íd_rd
)();

140 ()
	`sig¥ocmask
(
SIG_BLOCK
, &
s_mask
, 
NULL
);

141 
	`¨_˛o£
();

142 
	`∑t_chk
();

143 
	}
}

152 
	$exåa˘
()

154 
ARCHD
 *
¨˙
;

155 
ªs
;

156 
off_t
 
˙t
;

157 
ARCHD
 
¨chd
;

158 
°©
 
sb
;

159 
fd
;

160 
time_t
 
now
;

162 
¨˙
 = &
¨chd
;

168 i‡((
	`gë_¨c
(Ë< 0Ë|| ((*
‰mt
->
›ti⁄s
)() < 0) ||

169 ((*
‰mt
->
°_rd
)(Ë< 0Ë|| (
	`dú_°¨t
() < 0))

176 i‡(
iÊag
 && (
	`«me_°¨t
() < 0))

179 
now
 = 
	`time
(
NULL
);

185 
	`√xt_hód
(
¨˙
) == 0) {

191 i‡((
ªs
 = 
	`∑t_m©ch
(
¨˙
)) < 0)

194 i‡((
ªs
 > 0Ë|| (
	`£l_chk
(
¨˙
) != 0)) {

199 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

213 i‡((
uÊag
 || 
DÊag
Ë&& ((
	`l°©
(
¨˙
->
«me
, &
sb
) == 0))) {

214 i‡(
uÊag
 && 
DÊag
) {

215 i‡((
¨˙
->
sb
.
°_mtime
 <= sb.st_mtime) &&

216 (
¨˙
->
sb
.
°_˘ime
 <= sb.st_ctime)) {

217 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

220 } i‡(
DÊag
) {

221 i‡(
¨˙
->
sb
.
°_˘ime
 <= sb.st_ctime) {

222 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

225 } i‡(
¨˙
->
sb
.
°_mtime
 <= sb.st_mtime) {

226 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

234 i‡((
	`∑t_£l
(
¨˙
Ë< 0Ë|| ((
ªs
 = 
	`mod_«me
(arcn)) < 0))

236 i‡(
ªs
 > 0) {

240 
	`purg_ k
(
¨˙
);

241 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

249 i‡((
YÊag
 || 
ZÊag
Ë&& ((
	`l°©
(
¨˙
->
«me
, &
sb
) == 0))) {

250 i‡(
YÊag
 && 
ZÊag
) {

251 i‡((
¨˙
->
sb
.
°_mtime
 <= sb.st_mtime) &&

252 (
¨˙
->
sb
.
°_˘ime
 <= sb.st_ctime)) {

253 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

256 } i‡(
YÊag
) {

257 i‡(
¨˙
->
sb
.
°_˘ime
 <= sb.st_ctime) {

258 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

261 } i‡(
¨˙
->
sb
.
°_mtime
 <= sb.st_mtime) {

262 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

267 i‡(
vÊag
) {

268 i‡(
vÊag
 > 1)

269 
	`ls_li°
(
¨˙
, 
now
, 
li°f
);

271 ()
	`Âuts
(
¨˙
->
«me
, 
li°f
);

272 
vÂ¨t
 = 1;

279 i‡((
¨˙
->
∑t
 !
NULL
Ë&& (¨˙->∑t->
chd«me
 != NULL))

280 i‡(
	`chdú
(
¨˙
->
∑t
->
chd«me
) != 0)

281 
	`sysw¨n
(1, 
î∫o
, "Cannot chdirÅo %s",

282 
¨˙
->
∑t
->
chd«me
);

287 i‡((
¨˙
->
ty≥
 !
PAX_REG
Ë&& (¨˙->ty≥ !
PAX_CTG
)) {

293 i‡((
¨˙
->
ty≥
 =
PAX_HLK
Ë|| (¨˙->ty≥ =
PAX_HRG
))

294 
ªs
 = 
	` k_¸ót
(
¨˙
);

296 
ªs
 = 
	`node_¸ót
(
¨˙
);

298 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

299 i‡(
ªs
 < 0)

300 
	`purg_ k
(
¨˙
);

302 i‡(
vÊag
 && 
vÂ¨t
) {

303 ()
	`putc
('\n', 
li°f
);

304 
vÂ¨t
 = 0;

312 i‡((
fd
 = 
	`fûe_¸ót
(
¨˙
)) < 0) {

313 ()
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
);

314 
	`purg_ k
(
¨˙
);

321 
ªs
 = (*
‰mt
->
rd_d©a
)(
¨˙
, 
fd
, &
˙t
);

322 
	`fûe_˛o£
(
¨˙
, 
fd
);

323 i‡(
vÊag
 && 
vÂ¨t
) {

324 ()
	`putc
('\n', 
li°f
);

325 
vÂ¨t
 = 0;

327 i‡(!
ªs
)

328 ()
	`rd_skù
(
˙t
 + 
¨˙
->
∑d
);

333 i‡((
¨˙
->
∑t
 !
NULL
Ë&& (¨˙->∑t->
chd«me
 != NULL))

334 i‡(
	`fchdú
(
cwdfd
) != 0)

335 
	`sysw¨n
(1, 
î∫o
,

344 ()(*
‰mt
->
íd_rd
)();

345 ()
	`sig¥ocmask
(
SIG_BLOCK
, &
s_mask
, 
NULL
);

346 
	`¨_˛o£
();

347 
	`¥oc_dú
();

348 
	`∑t_chk
();

349 
	}
}

358 
	$wr_¨chive
(
ARCHD
 *
¨˙
, 
is_≠p
)

360 
ªs
;

361 
hlk
;

362 
wr_⁄e
;

363 
off_t
 
˙t
;

364 (*
wrf
)(
ARCHD
 *);

365 
fd
 = -1;

366 
time_t
 
now
;

372 i‡(((
hlk
 = 
‰mt
->hlkË=1Ë&& (
	` k_°¨t
() < 0))

378 i‡((
	`·ªe_°¨t
(Ë< 0Ë|| ((*
‰mt
->
°_wr
)() < 0))

380 
wrf
 = 
‰mt
->
wr
;

386 i‡(
iÊag
 && (
	`«me_°¨t
() < 0))

392 
wr_⁄e
 = 
is_≠p
;

394 
now
 = 
	`time
(
NULL
);

399 
	`√xt_fûe
(
¨˙
) == 0) {

403 i‡(
	`£l_chk
(
¨˙
) != 0) {

404 
	`·ªe_nŸ£l
();

407 
fd
 = -1;

408 i‡(
uÊag
) {

413 i‡((
ªs
 = 
	`chk_·ime
(
¨˙
)) < 0)

415 i‡(
ªs
 > 0)

423 
	`·ªe_£l
(
¨˙
);

424 i‡(
hlk
 && (
	`chk_ k
(
¨˙
) < 0))

427 i‡((
¨˙
->
ty≥
 =
PAX_REG
Ë|| (¨˙->ty≥ =
PAX_HRG
) ||

428 (
¨˙
->
ty≥
 =
PAX_CTG
)) {

435 i‡((
fd
 = 
	`›í
(
¨˙
->
‹g_«me
, 
O_RDONLY
, 0)) < 0) {

436 
	`sysw¨n
(1,
î∫o
, "UnableÅo open %sÅoÑead",

437 
¨˙
->
‹g_«me
);

438 
	`purg_ k
(
¨˙
);

446 i‡((
ªs
 = 
	`mod_«me
(
¨˙
)) < 0) {

451 
	`rdfûe_˛o£
(
¨˙
, &
fd
);

452 
	`purg_ k
(
¨˙
);

456 i‡((
ªs
 > 0Ë|| (
do¸c
 && (
	`£t_¸c
(
¨˙
, 
fd
) < 0))) {

461 
	`rdfûe_˛o£
(
¨˙
, &
fd
);

462 
	`purg_ k
(
¨˙
);

466 i‡(
vÊag
) {

467 i‡(
vÊag
 > 1)

468 
	`ls_li°
(
¨˙
, 
now
, 
li°f
);

470 ()
	`Âuts
(
¨˙
->
«me
, 
li°f
);

471 
vÂ¨t
 = 1;

474 ++
Ê˙t
;

480 i‡((
ªs
 = (*
wrf
)(
¨˙
)) < 0) {

481 
	`rdfûe_˛o£
(
¨˙
, &
fd
);

484 
wr_⁄e
 = 1;

485 i‡(
ªs
 > 0) {

490 i‡(
vÊag
 && 
vÂ¨t
) {

491 ()
	`putc
('\n', 
li°f
);

492 
vÂ¨t
 = 0;

494 
	`rdfûe_˛o£
(
¨˙
, &
fd
);

506 
ªs
 = (*
‰mt
->
wr_d©a
)(
¨˙
, 
fd
, &
˙t
);

507 
	`rdfûe_˛o£
(
¨˙
, &
fd
);

508 i‡(
vÊag
 && 
vÂ¨t
) {

509 ()
	`putc
('\n', 
li°f
);

510 
vÂ¨t
 = 0;

512 i‡(
ªs
 < 0)

518 i‡(((
˙t
 > 0Ë&& (
	`wr_skù
(cnt) < 0)) ||

519 ((
¨˙
->
∑d
 > 0Ë&& (
	`wr_skù
(arcn->pad) < 0)))

529 i‡(
wr_⁄e
) {

530 (*
‰mt
->
íd_wr
)();

531 
	`wr_fö
();

533 ()
	`sig¥ocmask
(
SIG_BLOCK
, &
s_mask
, 
NULL
);

534 
	`¨_˛o£
();

535 i‡(
tÊag
)

536 
	`¥oc_dú
();

537 
	`·ªe_chk
();

538 
	}
}

563 
	$≠≥nd
()

565 
ARCHD
 *
¨˙
;

566 
ªs
;

567 
ARCHD
 
¨chd
;

568 
FSUB
 *
‹g‰mt
;

569 
udev
;

570 
off_t
 
éí
;

572 
¨˙
 = &
¨chd
;

573 
‹g‰mt
 = 
‰mt
;

579 i‡(
	`gë_¨c
() < 0)

581 i‡((
‹g‰mt
 !
NULL
Ë&& (‹g‰mà!
‰mt
)) {

582 
	`∑xw¨n
(1, "Cannot mix currentárchive format %s with %s",

583 
‰mt
->
«me
, 
‹g‰mt
->name);

590 i‡(((*
‰mt
->
›ti⁄s
)(Ë< 0Ë|| ((*‰mt->
°_rd
)() < 0))

597 i‡(
uÊag
 && (
	`·ime_°¨t
() < 0))

614 i‡((
udev
 = 
‰mt
->udevË&& (
	`dev_°¨t
() < 0))

620 i‡(
vÊag
) {

621 ()
	`Ârötf
(
li°f
,

622 "%s: Ródögárchivêtÿposôi⁄áàthêíd...", 
¨gv0
);

623 
vÂ¨t
 = 1;

629 
	`√xt_hód
(
¨˙
) == 0) {

633 i‡(
	`£l_chk
(
¨˙
) != 0) {

634 i‡(
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
) == 1)

639 i‡(
uÊag
) {

644 i‡((
ªs
 = 
	`chk_·ime
(
¨˙
)) < 0)

646 i‡(
ªs
 > 0) {

647 i‡(
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
) == 1)

659 i‡((
udev
 && (
	`add_dev
(
¨˙
) < 0)) ||

660 (
	`rd_skù
(
¨˙
->
skù
 +ár˙->
∑d
) == 1))

669 
éí
 = (*
‰mt
->
íd_rd
)();

670 
	` k_íd
();

676 i‡(
	`≠≤d_°¨t
(
éí
) < 0)

682 i‡(
vÊag
 && 
vÂ¨t
) {

683 ()
	`Âuts
("d⁄e.\n", 
li°f
);

684 
vÂ¨t
 = 0;

690 
	`wr_¨chive
(
¨˙
, 1);

691 
	}
}

699 
	$¨chive
()

701 
ARCHD
 
¨chd
;

708 i‡((
uÊag
 && (
	`·ime_°¨t
(Ë< 0)Ë|| (
	`wr_°¨t
() < 0))

710 i‡((*
‰mt
->
›ti⁄s
)() < 0)

713 
	`wr_¨chive
(&
¨chd
, 0);

714 
	}
}

725 
	$c›y
()

727 
ARCHD
 *
¨˙
;

728 
ªs
;

729 
fdde°
;

730 *
de°_±
;

731 
dÀn
;

732 
dªm
;

733 
fd§c
 = -1;

734 
°©
 
sb
;

735 
ARCHD
 
¨chd
;

736 
dúbuf
[
PAXPATHLEN
+1];

738 
¨˙
 = &
¨chd
;

743 
dÀn
 = 
	`l_°∫˝y
(
dúbuf
, 
dú±r
, (dirbuf) - 1);

744 
de°_±
 = 
dúbuf
 + 
dÀn
;

745 i‡(*(
de°_±
-1) != '/') {

746 *
de°_±
++ = '/';

747 ++
dÀn
;

749 *
de°_±
 = '\0';

750 
dªm
 = 
PAXPATHLEN
 - 
dÀn
;

752 i‡(
	`°©
(
dú±r
, &
sb
) < 0) {

753 
	`sysw¨n
(1, 
î∫o
, "Cannotáccess destination directory %s",

754 
dú±r
);

757 i‡(!
	`S_ISDIR
(
sb
.
°_mode
)) {

758 
	`∑xw¨n
(1, "De°ö©i⁄ i†nŸá dúe˘‹y %s", 
dú±r
);

766 i‡((
	` k_°¨t
(Ë< 0Ë|| (
	`·ªe_°¨t
(Ë< 0Ë|| (
	`dú_°¨t
() < 0))

773 i‡(
iÊag
 && (
	`«me_°¨t
() < 0))

779 
	`˝_°¨t
();

784 
	`√xt_fûe
(
¨˙
) == 0) {

785 
fd§c
 = -1;

790 i‡(
	`£l_chk
(
¨˙
) != 0) {

791 
	`·ªe_nŸ£l
();

805 i‡(
uÊag
 || 
DÊag
) {

809 i‡(*(
¨˙
->
«me
) == '/')

810 
ªs
 = 1;

812 
ªs
 = 0;

813 i‡((
¨˙
->
∆í
 - 
ªs
Ë> 
dªm
) {

814 
	`∑xw¨n
(1, "DestinationÖathnameÅooÜong %s",

815 
¨˙
->
«me
);

818 ()
	`°∫˝y
(
de°_±
, 
¨˙
->
«me
 + 
ªs
, 
dªm
);

819 
dúbuf
[
PAXPATHLEN
] = '\0';

824 
ªs
 = 
	`l°©
(
dúbuf
, &
sb
);

825 *
de°_±
 = '\0';

827 i‡(
ªs
 == 0) {

828 i‡(
uÊag
 && 
DÊag
) {

829 i‡((
¨˙
->
sb
.
°_mtime
<=sb.st_mtime) &&

830 (
¨˙
->
sb
.
°_˘ime
<=sb.st_ctime))

832 } i‡(
DÊag
) {

833 i‡(
¨˙
->
sb
.
°_˘ime
 <= sb.st_ctime)

835 } i‡(
¨˙
->
sb
.
°_mtime
 <= sb.st_mtime)

845 
	`·ªe_£l
(
¨˙
);

846 i‡((
	`chk_ k
(
¨˙
Ë< 0Ë|| ((
ªs
 = 
	`mod_«me
(arcn)) < 0))

848 i‡((
ªs
 > 0Ë|| (
	`£t_de°
(
¨˙
, 
dúbuf
, 
dÀn
) < 0)) {

852 
	`purg_ k
(
¨˙
);

860 i‡((
YÊag
 || 
ZÊag
Ë&& ((
	`l°©
(
¨˙
->
«me
, &
sb
) == 0))) {

861 i‡(
YÊag
 && 
ZÊag
) {

862 i‡((
¨˙
->
sb
.
°_mtime
 <= sb.st_mtime) &&

863 (
¨˙
->
sb
.
°_˘ime
 <= sb.st_ctime))

865 } i‡(
YÊag
) {

866 i‡(
¨˙
->
sb
.
°_˘ime
 <= sb.st_ctime)

868 } i‡(
¨˙
->
sb
.
°_mtime
 <= sb.st_mtime)

872 i‡(
vÊag
) {

873 ()
	`Âuts
(
¨˙
->
«me
, 
li°f
);

874 
vÂ¨t
 = 1;

876 ++
Ê˙t
;

882 i‡(
lÊag
)

883 
ªs
 = 
	`¸oss_ k
(
¨˙
);

885 
ªs
 = 
	`chk_ßme
(
¨˙
);

886 i‡(
ªs
 <= 0) {

887 i‡(
vÊag
 && 
vÂ¨t
) {

888 ()
	`putc
('\n', 
li°f
);

889 
vÂ¨t
 = 0;

897 i‡((
¨˙
->
ty≥
 !
PAX_REG
Ë&& (¨˙->ty≥ !
PAX_CTG
)) {

901 i‡((
¨˙
->
ty≥
 =
PAX_HLK
Ë|| (¨˙->ty≥ =
PAX_HRG
))

902 
ªs
 = 
	` k_¸ót
(
¨˙
);

904 
ªs
 = 
	`node_¸ót
(
¨˙
);

905 i‡(
ªs
 < 0)

906 
	`purg_ k
(
¨˙
);

907 i‡(
vÊag
 && 
vÂ¨t
) {

908 ()
	`putc
('\n', 
li°f
);

909 
vÂ¨t
 = 0;

918 i‡((
fd§c
 = 
	`›í
(
¨˙
->
‹g_«me
, 
O_RDONLY
, 0)) < 0) {

919 
	`sysw¨n
(1, 
î∫o
, "UnableÅo open %sÅoÑead",

920 
¨˙
->
‹g_«me
);

921 
	`purg_ k
(
¨˙
);

924 i‡((
fdde°
 = 
	`fûe_¸ót
(
¨˙
)) < 0) {

925 
	`rdfûe_˛o£
(
¨˙
, &
fd§c
);

926 
	`purg_ k
(
¨˙
);

933 
	`˝_fûe
(
¨˙
, 
fd§c
, 
fdde°
);

934 
	`fûe_˛o£
(
¨˙
, 
fdde°
);

935 
	`rdfûe_˛o£
(
¨˙
, &
fd§c
);

937 i‡(
vÊag
 && 
vÂ¨t
) {

938 ()
	`putc
('\n', 
li°f
);

939 
vÂ¨t
 = 0;

948 ()
	`sig¥ocmask
(
SIG_BLOCK
, &
s_mask
, 
NULL
);

949 
	`¨_˛o£
();

950 
	`¥oc_dú
();

951 
	`·ªe_chk
();

952 
	}
}

974 
	$√xt_hód
(
ARCHD
 *
¨˙
)

976 
ªt
;

977 *
hdíd
;

978 
ªs
;

979 
sh·sz
;

980 
hsz
;

981 
ö_ªsync
 = 0;

982 
˙t
 = 0;

983 
fú°
 = 1;

989 
ªs
 = 
hsz
 = 
‰mt
->hsz;

990 
hdíd
 = 
hdbuf
;

991 
sh·sz
 = 
hsz
 - 1;

998 i‡((
ªt
 = 
	`rd_wrbuf
(
hdíd
, 
ªs
)) ==Ñes)

1008 i‡(
fú°
 && 
ªt
 == 0)

1010 
fú°
 = 0;

1016 i‡((
ªt
 =0Ë|| (
	`rd_sync
() < 0)) {

1017 
	`∑xw¨n
(1,"PrematureÉnd of file onárchiveÑead");

1020 i‡(!
ö_ªsync
) {

1021 i‡(
a˘
 =
APPND
) {

1022 
	`∑xw¨n
(1,

1026 
	`∑xw¨n
(1,"Archive I/OÉrror. TryingÅoÑecover.");

1027 ++
ö_ªsync
;

1033 
ªs
 = 
hsz
;

1034 
hdíd
 = 
hdbuf
;

1049 i‡((*
‰mt
->
rd
)(
¨˙
, 
hdbuf
) == 0)

1052 i‡(!
‰mt
->
öhód
) {

1056 i‡((
ªt
 = (*
‰mt
->
åaû_èr
)(
hdbuf
,
ö_ªsync
,&
˙t
)) == 0){

1060 
	`¨_døö
();

1064 i‡(
ªt
 == 1) {

1071 
ªs
 = 
hsz
;

1072 
hdíd
 = 
hdbuf
;

1085 i‡(!
ö_ªsync
) {

1086 i‡(
a˘
 =
APPND
) {

1087 
	`∑xw¨n
(1,"UnableÅoáppend,árchive header flaw");

1090 
	`∑xw¨n
(1,"Invalid header, starting valid header search.");

1091 ++
ö_ªsync
;

1093 
	`memmove
(
hdbuf
, hdbuf+1, 
sh·sz
);

1094 
ªs
 = 1;

1095 
hdíd
 = 
hdbuf
 + 
sh·sz
;

1102 i‡(
‰mt
->
öhód
 && ((*‰mt->
åaû_˝io
)(
¨˙
) == 0)) {

1106 
	`¨_døö
();

1110 ++
Ê˙t
;

1112 
	}
}

1125 
	$gë_¨c
()

1127 
i
;

1128 
hdsz
 = 0;

1129 
ªs
;

1130 
möhd
 = 
BLKMULT
;

1131 *
hdíd
;

1132 
nŸi˚
 = 0;

1138 
i
 = 0; 
f‹d
[i] >= 0; ++i) {

1139 i‡(
fsub
[
f‹d
[
i
]].
hsz
 < 
möhd
)

1140 
möhd
 = 
fsub
[
f‹d
[
i
]].
hsz
;

1142 i‡(
	`rd_°¨t
() < 0)

1144 
ªs
 = 
BLKMULT
;

1145 
hdsz
 = 0;

1146 
hdíd
 = 
hdbuf
;

1152 
i
 = 
	`rd_wrbuf
(
hdíd
, 
ªs
);

1153 i‡(
i
 > 0)

1154 
hdsz
 +
i
;

1155 i‡(
hdsz
 >
möhd
)

1161 i‡((
i
 =0Ë|| (
	`rd_sync
() < 0))

1162 
out
;

1170 
ªs
 = 
BLKMULT
;

1171 
hdsz
 = 0;

1172 
hdíd
 = 
hdbuf
;

1173 i‡(!
nŸi˚
) {

1174 i‡(
a˘
 =
APPND
)

1176 
	`∑xw¨n
(1,"Cannot identify format. Searching...");

1177 ++
nŸi˚
;

1189 
i
 = 0; 
f‹d
[i] >= 0; ++i) {

1190 i‡((*
fsub
[
f‹d
[
i
]].
id
)(
hdbuf
, 
hdsz
) < 0)

1192 
‰mt
 = &(
fsub
[
f‹d
[
i
]]);

1200 
	`pback
(
hdbuf
, 
hdsz
);

1208 i‡(!
nŸi˚
) {

1209 i‡(
a˘
 =
APPND
)

1211 
	`∑xw¨n
(1, "Cannot identify format. Searching...");

1212 ++
nŸi˚
;

1221 i‡(--
hdsz
 > 0) {

1222 
	`memmove
(
hdbuf
, hdbuf+1, 
hdsz
);

1223 
ªs
 = 
BLKMULT
 - 
hdsz
;

1224 
hdíd
 = 
hdbuf
 + 
hdsz
;

1226 
ªs
 = 
BLKMULT
;

1227 
hdíd
 = 
hdbuf
;

1228 
hdsz
 = 0;

1232 
out
:

1236 
	`∑xw¨n
(1, "Sorry, unableÅo determineárchive format.");

1238 
	}
}

	@pax/buf_subs.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)buf_subs.c 8.2 (Berkeley) 4/18/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/buf_subs.c,v 1.23.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<î∫o.h
>

45 
	~<uni°d.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~"∑x.h
"

50 
	~"exã∫.h
"

56 
	#MINFBSZ
 512

	)

57 
	#MAXFLT
 10

	)

64 
	gbufmem
[
MAXBLK
+
BLKMULT
];

65 *
	gbuf
;

66 *
	gbu„nd
;

67 *
	gbuÂt
;

68 
	gblksz
 = 
MAXBLK
;

69 
	gwrblksz
;

70 
	gmaxÊt
 = 
MAXFLT
;

71 
	grdblksz
;

72 
off_t
 
	gwæimô
;

73 
off_t
 
	gwr˙t
;

74 
off_t
 
	grd˙t
;

84 
	$wr_°¨t
()

86 
buf
 = &(
bufmem
[
BLKMULT
]);

94 i‡(!
wrblksz
)

95 
wrblksz
 = 
‰mt
->
bsz
;

96 i‡(
wrblksz
 > 
MAXBLK
) {

97 
	`∑xw¨n
(1, "Write block size of %dÅooÜarge, maximum is: %d",

98 
wrblksz
, 
MAXBLK
);

101 i‡(
wrblksz
 % 
BLKMULT
) {

102 
	`∑xw¨n
(1, "Write block size of %d isÇotá %d byte multiple",

103 
wrblksz
, 
BLKMULT
);

106 i‡(
wrblksz
 > 
MAXBLK_POSIX
) {

107 
	`∑xw¨n
(0, "Write block size of %dÜargerÅhan POSIX max %d,árchive mayÇot beÖortable",

108 
wrblksz
, 
MAXBLK_POSIX
);

115 
blksz
 = 
rdblksz
 = 
wrblksz
;

116 i‡((
	`¨_›í
(
¨˙ame
Ë< 0Ë&& (
	`¨_√xt
() < 0))

118 
wr˙t
 = 0;

119 
bu„nd
 = 
buf
 + 
wrblksz
;

120 
buÂt
 = 
buf
;

122 
	}
}

132 
	$rd_°¨t
()

139 
buf
 = &(
bufmem
[
BLKMULT
]);

140 i‡((
a˘
 =
APPND
Ë&& 
wrblksz
) {

141 i‡(
wrblksz
 > 
MAXBLK
) {

142 
	`∑xw¨n
(1,"Write block size %dÅooÜarge, maximum is: %d",

143 
wrblksz
, 
MAXBLK
);

146 i‡(
wrblksz
 % 
BLKMULT
) {

147 
	`∑xw¨n
(1, "Write block size %d isÇotá %d byte multiple",

148 
wrblksz
, 
BLKMULT
);

156 i‡((
	`¨_›í
(
¨˙ame
Ë< 0Ë&& (
	`¨_√xt
() < 0))

158 
bu„nd
 = 
buf
 + 
rdblksz
;

159 
buÂt
 = 
bu„nd
;

160 
rd˙t
 = 0;

162 
	}
}

170 
	$˝_°¨t
()

172 
buf
 = &(
bufmem
[
BLKMULT
]);

173 
rdblksz
 = 
blksz
 = 
MAXBLK
;

174 
	}
}

209 
	$≠≤d_°¨t
(
off_t
 
sk˙t
)

211 
ªs
;

212 
off_t
 
˙t
;

214 i‡(
exô_vÆ
 != 0) {

215 
	`∑xw¨n
(0, "CannotáppendÅoánárchiveÅhat may have flaws.");

223 i‡(!
wrblksz
)

224 
wrblksz
 = 
blksz
 = 
rdblksz
;

226 
blksz
 = 
rdblksz
;

231 i‡(
	`¨_≠p_ok
() < 0)

240 
sk˙t
 +
bu„nd
 - 
buÂt
;

241 i‡((
˙t
 = (
sk˙t
/
blksz
) * blksz) < skcnt)

242 
˙t
 +
blksz
;

243 i‡(
	`¨_ªv
((
off_t
)
˙t
) < 0)

244 
out
;

251 i‡((
˙t
 -
sk˙t
) > 0) {

258 
buÂt
 = 
buf
;

259 
bu„nd
 = 
buf
 + 
blksz
;

260 
buÂt
 < 
bu„nd
) {

261 i‡((
ªs
 = 
	`¨_ªad
(
buÂt
, 
rdblksz
)) <= 0)

262 
out
;

263 
buÂt
 +
ªs
;

265 i‡(
	`¨_ªv
((
off_t
)(
buÂt
 - 
buf
)) < 0)

266 
out
;

267 
buÂt
 = 
buf
 + 
˙t
;

268 
bu„nd
 = 
buf
 + 
blksz
;

273 
bu„nd
 = 
buf
 + 
blksz
;

274 
buÂt
 = 
buf
;

276 
rdblksz
 = 
blksz
;

277 
rd˙t
 -
sk˙t
;

278 
wr˙t
 = 0;

286 i‡(
	`¨_£t_wr
() < 0)

288 
a˘
 = 
ARCHIVE
;

291 
out
:

292 
	`∑xw¨n
(1, "UnableÅoÑewriteárchiveÅrailer, cannotáppend.");

294 
	}
}

308 
	$rd_sync
()

310 
îr˙t
 = 0;

311 
ªs
;

316 i‡(
maxÊt
 == 0)

318 i‡(
a˘
 =
APPND
) {

319 
	`∑xw¨n
(1, "UnableÅoáppend whenÅhereáreárchiveÑeadÉrrors.");

326 i‡(
	`¨_rdsync
() < 0) {

327 i‡(
	`¨_√xt
() < 0)

330 
rd˙t
 = 0;

334 i‡((
ªs
 = 
	`¨_ªad
(
buf
, 
blksz
)) > 0) {

338 
buÂt
 = 
buf
;

339 
bu„nd
 = 
buf
 + 
ªs
;

340 
rd˙t
 +
ªs
;

352 i‡((
maxÊt
 > 0Ë&& (++
îr˙t
 > maxflt))

353 
	`∑xw¨n
(0,"ArchivêªadÉº‹Üimô (%dËªached",
maxÊt
);

354 i‡(
	`¨_rdsync
() == 0)

356 i‡(
	`¨_√xt
() < 0)

358 
rd˙t
 = 0;

359 
îr˙t
 = 0;

362 
	}
}

376 
	$pback
(*
±
, 
˙t
)

378 
buÂt
 -
˙t
;

379 
	`mem˝y
(
buÂt
, 
±
, 
˙t
);

381 
	}
}

392 
	$rd_skù
(
off_t
 
sk˙t
)

394 
off_t
 
ªs
;

395 
off_t
 
˙t
;

396 
off_t
 
skù≥d
 = 0;

404 i‡(
sk˙t
 == 0)

406 
ªs
 = 
	`MIN
((
bu„nd
 - 
buÂt
), 
sk˙t
);

407 
buÂt
 +
ªs
;

408 
sk˙t
 -
ªs
;

413 i‡(
sk˙t
 == 0)

420 
ªs
 = 
sk˙t
%
rdblksz
;

421 
˙t
 = (
sk˙t
/
rdblksz
) *Ñdblksz;

427 i‡(
	`¨_fow
(
˙t
, &
skù≥d
) < 0)

429 
ªs
 +
˙t
 - 
skù≥d
;

430 
rd˙t
 +
skù≥d
;

436 
ªs
 > 0L) {

437 
˙t
 = 
bu„nd
 - 
buÂt
;

441 i‡((
˙t
 <0Ë&& ((˙à
	`buf_fûl
()) < 0))

443 i‡(
˙t
 == 0)

445 
˙t
 = 
	`MIN
(˙t, 
ªs
);

446 
buÂt
 +
˙t
;

447 
ªs
 -
˙t
;

450 
	}
}

461 
	$wr_fö
()

463 i‡(
buÂt
 > 
buf
) {

464 
	`mem£t
(
buÂt
, 0, 
bu„nd
 - bufpt);

465 
buÂt
 = 
bu„nd
;

466 ()
	`buf_Êush
(
blksz
);

468 
	}
}

482 
	$wr_rdbuf
(*
out
, 
out˙t
)

484 
˙t
;

490 
out˙t
 > 0) {

491 
˙t
 = 
bu„nd
 - 
buÂt
;

492 i‡((
˙t
 <0Ë&& ((˙à
	`buf_Êush
(
blksz
)) < 0))

497 
˙t
 = 
	`MIN
(˙t, 
out˙t
);

498 
	`mem˝y
(
buÂt
, 
out
, 
˙t
);

499 
buÂt
 +
˙t
;

500 
out
 +
˙t
;

501 
out˙t
 -
˙t
;

504 
	}
}

518 
	$rd_wrbuf
(*
ö
, 
˝˙t
)

520 
ªs
;

521 
˙t
;

522 
ö˙t
 = 
˝˙t
;

527 
ö˙t
 > 0) {

528 
˙t
 = 
bu„nd
 - 
buÂt
;

529 i‡((
˙t
 <0Ë&& ((˙à
	`buf_fûl
()) <= 0)) {

536 i‡((
ªs
 = 
˝˙t
 - 
ö˙t
) > 0)

537 (
ªs
);

538 (
˙t
);

545 
˙t
 = 
	`MIN
(˙t, 
ö˙t
);

546 
	`mem˝y
(
ö
, 
buÂt
, 
˙t
);

547 
buÂt
 +
˙t
;

548 
ö˙t
 -
˙t
;

549 
ö
 +
˙t
;

551 (
˝˙t
);

552 
	}
}

566 
	$wr_skù
(
off_t
 
sk˙t
)

568 
˙t
;

573 
sk˙t
 > 0L) {

574 
˙t
 = 
bu„nd
 - 
buÂt
;

575 i‡((
˙t
 <0Ë&& ((˙à
	`buf_Êush
(
blksz
)) < 0))

577 
˙t
 = 
	`MIN
(˙t, 
sk˙t
);

578 
	`mem£t
(
buÂt
, 0, 
˙t
);

579 
buÂt
 +
˙t
;

580 
sk˙t
 -
˙t
;

583 
	}
}

604 
	$wr_rdfûe
(
ARCHD
 *
¨˙
, 
ifd
, 
off_t
 *
À·
)

606 
˙t
;

607 
ªs
 = 0;

608 
off_t
 
size
 = 
¨˙
->
sb
.
°_size
;

609 
°©
 
sb
;

614 
size
 > 0L) {

615 
˙t
 = 
bu„nd
 - 
buÂt
;

616 i‡((
˙t
 <0Ë&& ((˙à
	`buf_Êush
(
blksz
)) < 0)) {

617 *
À·
 = 
size
;

620 
˙t
 = 
	`MIN
(˙t, 
size
);

621 i‡((
ªs
 = 
	`ªad
(
ifd
, 
buÂt
, 
˙t
)) <= 0)

623 
size
 -
ªs
;

624 
buÂt
 +
ªs
;

631 i‡(
ªs
 < 0)

632 
	`sysw¨n
(1, 
î∫o
, "Ród fau… o¿%s", 
¨˙
->
‹g_«me
);

633 i‡(
size
 != 0L)

634 
	`∑xw¨n
(1, "Fûêch™ged sizêdurögÑód %s", 
¨˙
->
‹g_«me
);

635 i‡(
	`f°©
(
ifd
, &
sb
) < 0)

636 
	`sysw¨n
(1, 
î∫o
, "Faûed sèà⁄ %s", 
¨˙
->
‹g_«me
);

637 i‡(
¨˙
->
sb
.
°_mtime
 != sb.st_mtime)

638 
	`∑xw¨n
(1, "File %s was modified during copyÅoárchive",

639 
¨˙
->
‹g_«me
);

640 *
À·
 = 
size
;

642 
	}
}

665 
	$rd_wrfûe
(
ARCHD
 *
¨˙
, 
ofd
, 
off_t
 *
À·
)

667 
˙t
 = 0;

668 
off_t
 
size
 = 
¨˙
->
sb
.
°_size
;

669 
ªs
 = 0;

670 *
‚m
 = 
¨˙
->
«me
;

671 
i£m
 = 1;

672 
ªm
;

673 
sz
 = 
MINFBSZ
;

674 
°©
 
sb
;

675 
u_l⁄g
 
¸c
 = 0L;

681 i‡(
	`f°©
(
ofd
, &
sb
) == 0) {

682 i‡(
sb
.
°_blksize
 > 0)

683 
sz
 = ()
sb
.
°_blksize
;

685 
	`sysw¨n
(0,
î∫o
,"U«bÀÅÿobèö block sizêf‹ fûê%s",
‚m
);

686 
ªm
 = 
sz
;

687 *
À·
 = 0L;

694 
size
 > 0L) {

695 
˙t
 = 
bu„nd
 - 
buÂt
;

701 i‡((
˙t
 <0Ë&& ((˙à
	`buf_fûl
()) <= 0))

703 
˙t
 = 
	`MIN
(˙t, 
size
);

704 i‡((
ªs
 = 
	`fûe_wrôe
(
ofd
,
buÂt
,
˙t
,&
ªm
,&
i£m
,
sz
,
‚m
)) <= 0) {

705 *
À·
 = 
size
;

709 i‡(
do¸c
) {

713 
˙t
 = 
ªs
;

714 --
˙t
 >= 0)

715 
¸c
 +*
buÂt
++ & 0xff;

717 
buÂt
 +
ªs
;

718 
size
 -
ªs
;

727 i‡(
i£m
 && (
¨˙
->
sb
.
°_size
 > 0L))

728 
	`fûe_Êush
(
ofd
, 
‚m
, 
i£m
);

733 i‡((
size
 > 0LË&& (*
À·
 == 0L))

740 i‡(
do¸c
 && (
size
 =0LË&& (
¨˙
->
¸c
 != crc))

741 
	`∑xw¨n
(1,"A˘uÆ cr¯d€†nŸ m©chÉx≥˘ed cr¯%s",
¨˙
->
«me
);

743 
	}
}

753 
	$˝_fûe
(
ARCHD
 *
¨˙
, 
fd1
, 
fd2
)

755 
˙t
;

756 
off_t
 
˝˙t
 = 0L;

757 
ªs
 = 0;

758 *
‚m
 = 
¨˙
->
«me
;

759 
no_hﬁe
 = 0;

760 
i£m
 = 1;

761 
ªm
;

762 
sz
 = 
MINFBSZ
;

763 
°©
 
sb
;

769 i‡(((
off_t
)(
¨˙
->
sb
.
°_blocks
 * 
BLKMULT
)Ë>¨˙->sb.
°_size
)

770 ++
no_hﬁe
;

776 i‡(
	`f°©
(
fd2
, &
sb
) == 0) {

777 i‡(
sb
.
°_blksize
 > 0)

778 
sz
 = 
sb
.
°_blksize
;

780 
	`sysw¨n
(0,
î∫o
,"U«bÀÅÿobèö block sizêf‹ fûê%s",
‚m
);

781 
ªm
 = 
sz
;

787 i‡((
˙t
 = 
	`ªad
(
fd1
, 
buf
, 
blksz
)) <= 0)

789 i‡(
no_hﬁe
)

790 
ªs
 = 
	`wrôe
(
fd2
, 
buf
, 
˙t
);

792 
ªs
 = 
	`fûe_wrôe
(
fd2
, 
buf
, 
˙t
, &
ªm
, &
i£m
, 
sz
, 
‚m
);

793 i‡(
ªs
 !
˙t
)

795 
˝˙t
 +
˙t
;

801 i‡(
ªs
 < 0)

802 
	`sysw¨n
(1, 
î∫o
, "Failed write during copy of %sÅo %s",

803 
¨˙
->
‹g_«me
,ár˙->
«me
);

804 i‡(
˝˙t
 !
¨˙
->
sb
.
°_size
)

805 
	`∑xw¨n
(1, "File %s changed size during copyÅo %s",

806 
¨˙
->
‹g_«me
,ár˙->
«me
);

807 i‡(
	`f°©
(
fd1
, &
sb
) < 0)

808 
	`sysw¨n
(1, 
î∫o
, "Faûed sèào‡%s", 
¨˙
->
‹g_«me
);

809 i‡(
¨˙
->
sb
.
°_mtime
 != sb.st_mtime)

810 
	`∑xw¨n
(1, "File %s was modified during copyÅo %s",

811 
¨˙
->
‹g_«me
,ár˙->
«me
);

819 i‡(!
no_hﬁe
 && 
i£m
 && (
¨˙
->
sb
.
°_size
 > 0L))

820 
	`fûe_Êush
(
fd2
, 
‚m
, 
i£m
);

822 
	}
}

834 
	$buf_fûl
()

836 
˙t
;

837 
föi
 = 0;

839 i‡(
föi
)

847 i‡((
˙t
 = 
	`¨_ªad
(
buf
, 
blksz
)) > 0) {

848 
buÂt
 = 
buf
;

849 
bu„nd
 = 
buf
 + 
˙t
;

850 
rd˙t
 +
˙t
;

851 (
˙t
);

857 i‡(
˙t
 < 0)

859 i‡(
	`¨_√xt
() < 0) {

860 
föi
 = 1;

863 
rd˙t
 = 0;

865 
exô_vÆ
 = 1;

867 
	}
}

879 
	$buf_Êush
(
buf˙t
)

881 
˙t
;

882 
push
 = 0;

883 
tŸ˙t
 = 0;

891 i‡((
wæimô
 > 0Ë&& (
wr˙t
 > wrlimit)) {

892 
	`∑xw¨n
(0, "User specifiedárchive volume byteÜimitÑeached.");

893 i‡(
	`¨_√xt
() < 0) {

894 
wr˙t
 = 0;

895 
exô_vÆ
 = 1;

898 
wr˙t
 = 0;

909 
bu„nd
 = 
buf
 + 
blksz
;

910 i‡(
blksz
 > 
buf˙t
)

912 i‡(
blksz
 < 
buf˙t
)

913 
push
 = 
buf˙t
 - 
blksz
;

923 
˙t
 = 
	`¨_wrôe
(
buf
, 
blksz
);

924 i‡(
˙t
 =
blksz
) {

928 
wr˙t
 +
˙t
;

929 
tŸ˙t
 +
˙t
;

930 i‡(
push
 > 0) {

935 
	`mem˝y
(
buf
, 
bu„nd
, 
push
);

936 
buÂt
 = 
buf
 + 
push
;

937 i‡(
push
 >
blksz
) {

938 
push
 -
blksz
;

942 
buÂt
 = 
buf
;

943 (
tŸ˙t
);

944 } i‡(
˙t
 > 0) {

951 
tŸ˙t
 +
˙t
;

952 
wr˙t
 +
˙t
;

953 
buÂt
 = 
buf
 + 
˙t
;

954 
˙t
 = 
buf˙t
 - cnt;

955 
	`mem˝y
(
buf
, 
buÂt
, 
˙t
);

956 
buÂt
 = 
buf
 + 
˙t
;

957 i‡(!
‰mt
->
blkÆgn
 || ((
˙t
 % frmt->blkalgn) == 0))

958 (
tŸ˙t
);

965 
wr˙t
 = 0;

966 i‡(
	`¨_√xt
() < 0)

974 
bu„nd
 = 
buf
 + 
blksz
;

975 i‡(
blksz
 > 
buf˙t
)

977 i‡(
blksz
 < 
buf˙t
)

978 
push
 = 
buf˙t
 - 
blksz
;

984 
exô_vÆ
 = 1;

986 
	}
}

	@pax/cache.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)cache.c 8.1 (Berkeley) 5/31/93";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/cache.c,v 1.21.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<°rög.h
>

45 
	~<°dio.h
>

46 
	~<pwd.h
>

47 
	~<gΩ.h
>

48 
	~<uni°d.h
>

49 
	~<°dlib.h
>

50 
	~"∑x.h
"

51 
	~"ˇche.h
"

52 
	~"exã∫.h
"

61 
	gpw›n
 = 0;

62 
	ggr›n
 = 0;

63 
UIDC
 **
	guidtb
 = 
NULL
;

64 
GIDC
 **
	ggidtb
 = 
NULL
;

65 
UIDC
 **
	gu§tb
 = 
NULL
;

66 
GIDC
 **
	ggΩtb
 = 
NULL
;

76 
	$uidtb_°¨t
()

78 
Áû
 = 0;

80 i‡(
uidtb
 !
NULL
)

82 i‡(
Áû
)

84 i‡((
uidtb
 = (
UIDC
 **)
	`ˇŒoc
(
UID_SZ
, (UIDC *))Ë=
NULL
) {

85 ++
Áû
;

86 
	`∑xw¨n
(1, "UnableÅoállocate memory for user id cacheÅable");

90 
	}
}

100 
	$gidtb_°¨t
()

102 
Áû
 = 0;

104 i‡(
gidtb
 !
NULL
)

106 i‡(
Áû
)

108 i‡((
gidtb
 = (
GIDC
 **)
	`ˇŒoc
(
GID_SZ
, (GIDC *))Ë=
NULL
) {

109 ++
Áû
;

110 
	`∑xw¨n
(1, "UnableÅoállocate memory for group id cacheÅable");

114 
	}
}

124 
	$u§tb_°¨t
()

126 
Áû
 = 0;

128 i‡(
u§tb
 !
NULL
)

130 i‡(
Áû
)

132 i‡((
u§tb
 = (
UIDC
 **)
	`ˇŒoc
(
UNM_SZ
, (UIDC *))Ë=
NULL
) {

133 ++
Áû
;

134 
	`∑xw¨n
(1, "UnableÅoállocate memory for userÇame cacheÅable");

138 
	}
}

148 
	$gΩtb_°¨t
()

150 
Áû
 = 0;

152 i‡(
gΩtb
 !
NULL
)

154 i‡(
Áû
)

156 i‡((
gΩtb
 = (
GIDC
 **)
	`ˇŒoc
(
GNM_SZ
, (GIDC *))Ë=
NULL
) {

157 ++
Áû
;

158 
	`∑xw¨n
(1,"UnableÅoállocate memory for groupÇame cacheÅable");

162 
	}
}

173 
	$«me_uid
(
uid_t
 
uid
, 
‰c
)

175 
∑sswd
 *
pw
;

176 
UIDC
 *
±r
;

178 i‡((
uidtb
 =
NULL
Ë&& (
	`uidtb_°¨t
() < 0))

184 
±r
 = 
uidtb
[
uid
 % 
UID_SZ
];

185 i‡((
±r
 !
NULL
Ë&& (±r->
vÆid
 > 0Ë&& (±r->
uid
 == uid)) {

189 i‡(
‰c
 || (
±r
->
vÆid
 =
VALID
))

190 (
±r
->
«me
);

197 i‡(!
pw›n
) {

198 
	`£ças£¡
(1);

199 ++
pw›n
;

201 i‡(
±r
 =
NULL
)

202 
±r
 = 
uidtb
[
uid
 % 
UID_SZ
] = (
UIDC
 *)
	`mÆloc
((UIDC));

204 i‡((
pw
 = 
	`gëpwuid
(
uid
)Ë=
NULL
) {

209 i‡(
±r
 =
NULL
)

211 
±r
->
uid
 = uid;

212 
±r
->
vÆid
 = 
INVALID
;

213 #ifde‡
NET2_STAT


214 ()
	`¢¥ötf
(
±r
->
«me
, ’å->«me), "%u", 
uid
);

216 ()
	`¢¥ötf
(
±r
->
«me
, (ptr->name), "%lu",

217 ()
uid
);

219 i‡(
‰c
 == 0)

225 i‡(
±r
 =
NULL
)

226 (
pw
->
pw_«me
);

227 
±r
->
uid
 = uid;

228 ()
	`°∫˝y
(
±r
->
«me
, 
pw
->
pw_«me
, 
UNMLEN
 - 1);

229 
±r
->
«me
[
UNMLEN
-1] = '\0';

230 
±r
->
vÆid
 = 
VALID
;

232 (
±r
->
«me
);

233 
	}
}

244 
	$«me_gid
(
gid_t
 
gid
, 
‰c
)

246 
group
 *
gr
;

247 
GIDC
 *
±r
;

249 i‡((
gidtb
 =
NULL
Ë&& (
	`gidtb_°¨t
() < 0))

255 
±r
 = 
gidtb
[
gid
 % 
GID_SZ
];

256 i‡((
±r
 !
NULL
Ë&& (±r->
vÆid
 > 0Ë&& (±r->
gid
 == gid)) {

260 i‡(
‰c
 || (
±r
->
vÆid
 =
VALID
))

261 (
±r
->
«me
);

268 i‡(!
gr›n
) {

269 
	`£tgrou≥¡
(1);

270 ++
gr›n
;

272 i‡(
±r
 =
NULL
)

273 
±r
 = 
gidtb
[
gid
 % 
GID_SZ
] = (
GIDC
 *)
	`mÆloc
((GIDC));

275 i‡((
gr
 = 
	`gëgrgid
(
gid
)Ë=
NULL
) {

280 i‡(
±r
 =
NULL
)

282 
±r
->
gid
 = gid;

283 
±r
->
vÆid
 = 
INVALID
;

284 #ifde‡
NET2_STAT


285 ()
	`¢¥ötf
(
±r
->
«me
, ’å->«me), "%u", 
gid
);

287 ()
	`¢¥ötf
(
±r
->
«me
, (ptr->name), "%lu",

288 ()
gid
);

290 i‡(
‰c
 == 0)

296 i‡(
±r
 =
NULL
)

297 (
gr
->
gr_«me
);

298 
±r
->
gid
 = gid;

299 ()
	`°∫˝y
(
±r
->
«me
, 
gr
->
gr_«me
, 
GNMLEN
 - 1);

300 
±r
->
«me
[
GNMLEN
-1] = '\0';

301 
±r
->
vÆid
 = 
VALID
;

303 (
±r
->
«me
);

304 
	}
}

314 
	$uid_«me
(*
«me
, 
uid_t
 *
uid
)

316 
∑sswd
 *
pw
;

317 
UIDC
 *
±r
;

318 
«mñí
;

323 i‡(((
«mñí
 = 
	`°æí
(
«me
)) == 0) || (name[0] == '\0'))

325 i‡((
u§tb
 =
NULL
Ë&& (
	`u§tb_°¨t
() < 0))

332 
±r
 = 
u§tb
[
	`°_hash
(
«me
, 
«mñí
, 
UNM_SZ
)];

333 i‡((
±r
 !
NULL
Ë&& (±r->
vÆid
 > 0Ë&& !
	`°rcmp
(
«me
,Ötr->name)) {

334 i‡(
±r
->
vÆid
 =
INVALID
)

336 *
uid
 = 
±r
->uid;

340 i‡(!
pw›n
) {

341 
	`£ças£¡
(1);

342 ++
pw›n
;

345 i‡(
±r
 =
NULL
)

346 
±r
 = 
u§tb
[
	`°_hash
(
«me
, 
«mñí
, 
UNM_SZ
)] =

347 (
UIDC
 *)
	`mÆloc
((UIDC));

353 i‡(
±r
 =
NULL
) {

354 i‡((
pw
 = 
	`gëpw«m
(
«me
)Ë=
NULL
)

356 *
uid
 = 
pw
->
pw_uid
;

359 ()
	`°∫˝y
(
±r
->
«me
,Çame, 
UNMLEN
 - 1);

360 
±r
->
«me
[
UNMLEN
-1] = '\0';

361 i‡((
pw
 = 
	`gëpw«m
(
«me
)Ë=
NULL
) {

362 
±r
->
vÆid
 = 
INVALID
;

365 
±r
->
vÆid
 = 
VALID
;

366 *
uid
 = 
±r
->uid = 
pw
->
pw_uid
;

368 
	}
}

378 
	$gid_«me
(*
«me
, 
gid_t
 *
gid
)

380 
group
 *
gr
;

381 
GIDC
 *
±r
;

382 
«mñí
;

387 i‡(((
«mñí
 = 
	`°æí
(
«me
)) == 0) || (name[0] == '\0'))

389 i‡((
gΩtb
 =
NULL
Ë&& (
	`gΩtb_°¨t
() < 0))

396 
±r
 = 
gΩtb
[
	`°_hash
(
«me
, 
«mñí
, 
GID_SZ
)];

397 i‡((
±r
 !
NULL
Ë&& (±r->
vÆid
 > 0Ë&& !
	`°rcmp
(
«me
,Ötr->name)) {

398 i‡(
±r
->
vÆid
 =
INVALID
)

400 *
gid
 = 
±r
->gid;

404 i‡(!
gr›n
) {

405 
	`£tgrou≥¡
(1);

406 ++
gr›n
;

408 i‡(
±r
 =
NULL
)

409 
±r
 = 
gΩtb
[
	`°_hash
(
«me
, 
«mñí
, 
GID_SZ
)] =

410 (
GIDC
 *)
	`mÆloc
((GIDC));

416 i‡(
±r
 =
NULL
) {

417 i‡((
gr
 = 
	`gëg∫am
(
«me
)Ë=
NULL
)

419 *
gid
 = 
gr
->
gr_gid
;

423 ()
	`°∫˝y
(
±r
->
«me
,Çame, 
GNMLEN
 - 1);

424 
±r
->
«me
[
GNMLEN
-1] = '\0';

425 i‡((
gr
 = 
	`gëg∫am
(
«me
)Ë=
NULL
) {

426 
±r
->
vÆid
 = 
INVALID
;

429 
±r
->
vÆid
 = 
VALID
;

430 *
gid
 = 
±r
->gid = 
gr
->
gr_gid
;

432 
	}
}

	@pax/cache.h

48 
	#UNMLEN
 32

	)

49 
	#GNMLEN
 32

	)

50 
	#UID_SZ
 317

	)

51 
	#UNM_SZ
 317

	)

52 
	#GID_SZ
 251

	)

53 
	#GNM_SZ
 317

	)

54 
	#VALID
 1

	)

55 
	#INVALID
 2

	)

61 
	suidc
 {

62 
	mvÆid
;

63 
	m«me
[
UNMLEN
];

64 
uid_t
 
	muid
;

65 } 
	tUIDC
;

67 
	sgidc
 {

68 
	mvÆid
;

69 
	m«me
[
GNMLEN
];

70 
gid_t
 
	mgid
;

71 } 
	tGIDC
;

	@pax/cpio.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)cpio.c 8.1 (Berkeley) 5/31/93";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/cpio.c,v 1.24.10.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

44 
	~<sys/°©.h
>

45 
	~<°rög.h
>

46 
	~<°döt.h
>

47 
	~<°dio.h
>

48 
	~<uni°d.h
>

49 
	~<°dlib.h
>

50 
	~"∑x.h
"

51 
	~"˝io.h
"

52 
	~"exã∫.h
"

54 
rd_nm
(
ARCHD
 *, );

55 
rd_ _nm
(
ARCHD
 *);

56 
com_rd
(
ARCHD
 *);

62 
	gswp_hód
;

76 
	$˝io_°rd
()

78 (
	` k_°¨t
());

79 
	}
}

92 
	$˝io_åaû
(
ARCHD
 *
¨˙
)

97 i‡((
	`°rcmp
(
¨˙
->
«me
, 
TRAILER
Ë=0Ë&& (¨˙->
sb
.
°_size
 == 0))

100 
	}
}

110 
	$com_rd
(
ARCHD
 *
¨˙
)

112 
¨˙
->
skù
 = 0;

113 
¨˙
->
∑t
 = 
NULL
;

114 
¨˙
->
‹g_«me
 =ár˙->
«me
;

115 
¨˙
->
sb
.
°_mode
 & 
C_IFMT
) {

116 
C_ISFIFO
:

117 
¨˙
->
ty≥
 = 
PAX_FIF
;

119 
C_ISDIR
:

120 
¨˙
->
ty≥
 = 
PAX_DIR
;

122 
C_ISBLK
:

123 
¨˙
->
ty≥
 = 
PAX_BLK
;

125 
C_ISCHR
:

126 
¨˙
->
ty≥
 = 
PAX_CHR
;

128 
C_ISLNK
:

129 
¨˙
->
ty≥
 = 
PAX_SLK
;

131 
C_ISOCK
:

132 
¨˙
->
ty≥
 = 
PAX_SCK
;

134 
C_ISCTG
:

135 
C_ISREG
:

141 
¨˙
->
sb
.
°_mode
 = (¨˙->sb.°_modê& 0xfffË| 
C_ISREG
;

142 
¨˙
->
ty≥
 = 
PAX_REG
;

143 
¨˙
->
skù
 =ár˙->
sb
.
°_size
;

146 i‡(
	`chk_ k
(
¨˙
) < 0)

149 
	}
}

159 
	$˝io_ídwr
()

161 
ARCHD
 
œ°
;

166 
	`mem£t
(&
œ°
, 0, (last));

167 
œ°
.
∆í
 = (
TRAILER
) - 1;

168 
œ°
.
ty≥
 = 
PAX_REG
;

169 
œ°
.
sb
.
°_∆ök
 = 1;

170 ()
	`°r˝y
(
œ°
.
«me
, 
TRAILER
);

171 ((*
‰mt
->
wr
)(&
œ°
));

172 
	}
}

182 
	$rd_nm
(
ARCHD
 *
¨˙
, 
nsz
)

187 i‡((
nsz
 =0Ë|| (nsz > ()(
¨˙
->
«me
))) {

188 
	`∑xw¨n
(1, "Cpiÿfûê«mêÀngth %d i†ouào‡ønge", 
nsz
);

195 i‡((
	`rd_wrbuf
(
¨˙
->
«me
,
nsz
) !=Çsz) || (arcn->name[nsz-1] != '\0') ||

196 (
¨˙
->
«me
[0] == '\0')) {

197 
	`∑xw¨n
(1, "Cpio fileÇame in header is corrupted");

201 
	}
}

212 
	$rd_ _nm
(
ARCHD
 *
¨˙
)

217 i‡((
¨˙
->
sb
.
°_size
 == 0) ||

218 ((
size_t
)
¨˙
->
sb
.
°_size
 >◊r˙->
 _«me
))) {

219 #ifde‡
NET2_STAT


220 
	`∑xw¨n
(1, "CpioÜinkÇameÜength is invalid: %lu",

221 
¨˙
->
sb
.
°_size
);

223 
	`∑xw¨n
(1, "CpioÜinkÇameÜength is invalid: %ju",

224 (
uötmax_t
)
¨˙
->
sb
.
°_size
);

232 i‡(
	`rd_wrbuf
(
¨˙
->
 _«me
, (Ôr˙->
sb
.
°_size
) !=

233 ()
¨˙
->
sb
.
°_size
) {

234 
	`∑xw¨n
(1, "CpioÜinkÇameÑeadÉrror");

237 
¨˙
->
 _∆í
 =ár˙->
sb
.
°_size
;

238 
¨˙
->
 _«me
[¨˙->
 _∆í
] = '\0';

243 i‡(
¨˙
->
 _«me
[0] == '\0') {

244 
	`∑xw¨n
(1, "CpioÜinkÇame is corrupt");

248 
	}
}

263 
	$˝io_id
(*
blk
, 
size
)

265 i‡((
size
 < ()(
HD_CPIO
)) ||

266 (
	`°∫cmp
(
blk
, 
AMAGIC
, (AMAGIC) - 1) != 0))

269 
	}
}

280 
	$˝io_rd
(
ARCHD
 *
¨˙
, *
buf
)

282 
nsz
;

283 
HD_CPIO
 *
hd
;

288 i‡(
	`˝io_id
(
buf
, (
HD_CPIO
)) < 0)

290 
hd
 = (
HD_CPIO
 *)
buf
;

296 
¨˙
->
∑d
 = 0L;

297 
¨˙
->
sb
.
°_dev
 = (
dev_t
)
	`asc_ul
(
hd
->
c_dev
, (hd->c_dev), 
OCT
);

298 
¨˙
->
sb
.
°_öo
 = (
öo_t
)
	`asc_ul
(
hd
->
c_öo
, (hd->c_öo), 
OCT
);

299 
¨˙
->
sb
.
°_mode
 = (
mode_t
)
	`asc_ul
(
hd
->
c_mode
, (hd->c_mode), 
OCT
);

300 
¨˙
->
sb
.
°_uid
 = (
uid_t
)
	`asc_ul
(
hd
->
c_uid
, (hd->c_uid), 
OCT
);

301 
¨˙
->
sb
.
°_gid
 = (
gid_t
)
	`asc_ul
(
hd
->
c_gid
, (hd->c_gid), 
OCT
);

302 
¨˙
->
sb
.
°_∆ök
 = (
∆ök_t
)
	`asc_ul
(
hd
->
c_∆ök
, (hd->c_nlink),

303 
OCT
);

304 
¨˙
->
sb
.
°_rdev
 = (
dev_t
)
	`asc_ul
(
hd
->
c_rdev
, (hd->c_rdev), 
OCT
);

305 #ifde‡
NET2_STAT


306 
¨˙
->
sb
.
°_mtime
 = (
time_t
)
	`asc_ul
(
hd
->
c_mtime
, (hd->c_mtime),

307 
OCT
);

309 
¨˙
->
sb
.
°_mtime
 = (
time_t
)
	`asc_uqd
(
hd
->
c_mtime
, (hd->c_mtime),

310 
OCT
);

312 
¨˙
->
sb
.
°_˘ime
 =ár˙->sb.
°_©ime
 =ár˙->sb.
°_mtime
;

313 #ifde‡
NET2_STAT


314 
¨˙
->
sb
.
°_size
 = (
off_t
)
	`asc_ul
(
hd
->
c_fûesize
,(hd->c_filesize),

315 
OCT
);

317 
¨˙
->
sb
.
°_size
 = (
off_t
)
	`asc_uqd
(
hd
->
c_fûesize
,(hd->c_filesize),

318 
OCT
);

325 i‡((
nsz
 = ()
	`asc_ul
(
hd
->
c_«mesize
,(hd->c_«mesize),
OCT
)) < 2)

327 
¨˙
->
∆í
 = 
nsz
 - 1;

328 i‡(
	`rd_nm
(
¨˙
, 
nsz
) < 0)

331 i‡(((
¨˙
->
sb
.
°_mode
&
C_IFMT
Ë!
C_ISLNK
)||◊r˙->sb.
°_size
 == 0)) {

335 
¨˙
->
 _∆í
 = 0;

336 
¨˙
->
 _«me
[0] = '\0';

337 (
	`com_rd
(
¨˙
));

344 i‡(
	`rd_ _nm
(
¨˙
) < 0)

350 (
	`com_rd
(
¨˙
));

351 
	}
}

360 
off_t


361 
	$˝io_ídrd
()

363 ((
off_t
)((
HD_CPIO
Ë+ (
TRAILER
)));

364 
	}
}

374 
	$˝io_°wr
()

376 (
	`dev_°¨t
());

377 
	}
}

389 
	$˝io_wr
(
ARCHD
 *
¨˙
)

391 
HD_CPIO
 *
hd
;

392 
nsz
;

393 
HD_CPIO
 
hdblk
;

398 i‡(
	`m≠_dev
(
¨˙
, (
u_l⁄g
)
CPIO_MASK
, (u_long)CPIO_MASK) < 0)

401 
¨˙
->
∑d
 = 0L;

402 
nsz
 = 
¨˙
->
∆í
 + 1;

403 
hd
 = &
hdblk
;

404 i‡((
¨˙
->
ty≥
 !
PAX_BLK
Ë&& (¨˙->ty≥ !
PAX_CHR
))

405 
¨˙
->
sb
.
°_rdev
 = 0;

407 
¨˙
->
ty≥
) {

408 
PAX_CTG
:

409 
PAX_REG
:

410 
PAX_HRG
:

414 #ifde‡
NET2_STAT


415 i‡(
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_size
, 
hd
->
c_fûesize
,

416 (
hd
->
c_fûesize
), 
OCT
)) {

418 i‡(
	`uqd_asc
((
u_quad_t
)
¨˙
->
sb
.
°_size
, 
hd
->
c_fûesize
,

419 (
hd
->
c_fûesize
), 
OCT
)) {

421 
	`∑xw¨n
(1,"File isÅooÜarge for cpio format %s",

422 
¨˙
->
‹g_«me
);

426 
PAX_SLK
:

430 i‡(
	`ul_asc
((
u_l⁄g
)
¨˙
->
 _∆í
, 
hd
->
c_fûesize
,

431 (
hd
->
c_fûesize
), 
OCT
))

432 
out
;

438 i‡(
	`ul_asc
((
u_l⁄g
)0, 
hd
->
c_fûesize
, (hd->c_filesize),

439 
OCT
))

440 
out
;

447 i‡(
	`ul_asc
((
u_l⁄g
)
MAGIC
, 
hd
->
c_magic
, (hd->c_magic), 
OCT
) ||

448 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_dev
, 
hd
->
c_dev
, (hd->c_dev),

449 
OCT
) ||

450 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_öo
, 
hd
->
c_öo
, (hd->c_ino),

451 
OCT
) ||

452 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_mode
, 
hd
->
c_mode
, (hd->c_mode),

453 
OCT
) ||

454 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_uid
, 
hd
->
c_uid
, (hd->c_uid),

455 
OCT
) ||

456 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_gid
, 
hd
->
c_gid
, (hd->c_gid),

457 
OCT
) ||

458 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_∆ök
, 
hd
->
c_∆ök
, (hd->c_nlink),

459 
OCT
) ||

460 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_rdev
, 
hd
->
c_rdev
, (hd->c_rdev),

461 
OCT
) ||

462 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_mtime
,
hd
->
c_mtime
,(hd->c_mtime),

463 
OCT
) ||

464 
	`ul_asc
((
u_l⁄g
)
nsz
, 
hd
->
c_«mesize
, (hd->c_«mesize), 
OCT
))

465 
out
;

470 i‡((
	`wr_rdbuf
((*)&
hdblk
, ()(
HD_CPIO
)) < 0) ||

471 (
	`wr_rdbuf
(
¨˙
->
«me
, 
nsz
) < 0)) {

472 
	`∑xw¨n
(1, "U«bÀÅÿwrôê˝iÿhódî f‹ %s", 
¨˙
->
‹g_«me
);

480 i‡((
¨˙
->
ty≥
 =
PAX_CTG
Ë|| (¨˙->ty≥ =
PAX_REG
) ||

481 (
¨˙
->
ty≥
 =
PAX_HRG
))

483 i‡(
¨˙
->
ty≥
 !
PAX_SLK
)

490 i‡(
	`wr_rdbuf
(
¨˙
->
 _«me
,ár˙->
 _∆í
) < 0) {

491 
	`∑xw¨n
(1,"U«bÀÅÿwrôê˝iÿlökÇamêf‹ %s",
¨˙
->
‹g_«me
);

496 
out
:

500 
	`∑xw¨n
(1, "Cpio header field isÅoo smallÅo store file %s",

501 
¨˙
->
‹g_«me
);

503 
	}
}

519 
	$v˝io_id
(*
blk
, 
size
)

521 i‡((
size
 < ()(
HD_VCPIO
)) ||

522 (
	`°∫cmp
(
blk
, 
AVMAGIC
, (AVMAGIC) - 1) != 0))

525 
	}
}

536 
	$¸c_id
(*
blk
, 
size
)

538 i‡((
size
 < ()(
HD_VCPIO
)) ||

539 (
	`°∫cmp
(
blk
, 
AVCMAGIC
, ()(AVCMAGIC) - 1) != 0))

542 
	}
}

552 
	$¸c_°rd
()

554 
do¸c
 = 1;

555 (
	` k_°¨t
());

556 
	}
}

567 
	$v˝io_rd
(
ARCHD
 *
¨˙
, *
buf
)

569 
HD_VCPIO
 *
hd
;

570 
dev_t
 
devmö‹
;

571 
dev_t
 
devmaj‹
;

572 
nsz
;

578 i‡(
do¸c
) {

579 i‡(
	`¸c_id
(
buf
, (
HD_VCPIO
)) < 0)

582 i‡(
	`v˝io_id
(
buf
, (
HD_VCPIO
)) < 0)

586 
hd
 = (
HD_VCPIO
 *)
buf
;

587 
¨˙
->
∑d
 = 0L;

592 
¨˙
->
sb
.
°_öo
 = (
öo_t
)
	`asc_ul
(
hd
->
c_öo
, (hd->c_öo), 
HEX
);

593 
¨˙
->
sb
.
°_mode
 = (
mode_t
)
	`asc_ul
(
hd
->
c_mode
, (hd->c_mode), 
HEX
);

594 
¨˙
->
sb
.
°_uid
 = (
uid_t
)
	`asc_ul
(
hd
->
c_uid
, (hd->c_uid), 
HEX
);

595 
¨˙
->
sb
.
°_gid
 = (
gid_t
)
	`asc_ul
(
hd
->
c_gid
, (hd->c_gid), 
HEX
);

596 #ifde‡
NET2_STAT


597 
¨˙
->
sb
.
°_mtime
 = (
time_t
)
	`asc_ul
(
hd
->
c_mtime
,(hd->c_mtime),
HEX
);

599 
¨˙
->
sb
.
°_mtime
 = (
time_t
)
	`asc_uqd
(
hd
->
c_mtime
,(hd->c_mtime),
HEX
);

601 
¨˙
->
sb
.
°_˘ime
 =ár˙->sb.
°_©ime
 =ár˙->sb.
°_mtime
;

602 #ifde‡
NET2_STAT


603 
¨˙
->
sb
.
°_size
 = (
off_t
)
	`asc_ul
(
hd
->
c_fûesize
,

604 (
hd
->
c_fûesize
), 
HEX
);

606 
¨˙
->
sb
.
°_size
 = (
off_t
)
	`asc_uqd
(
hd
->
c_fûesize
,

607 (
hd
->
c_fûesize
), 
HEX
);

609 
¨˙
->
sb
.
°_∆ök
 = (
∆ök_t
)
	`asc_ul
(
hd
->
c_∆ök
, (hd->c_nlink),

610 
HEX
);

611 
devmaj‹
 = (
dev_t
)
	`asc_ul
(
hd
->
c_maj
, (hd->c_maj), 
HEX
);

612 
devmö‹
 = (
dev_t
)
	`asc_ul
(
hd
->
c_mö
, (hd->c_mö), 
HEX
);

613 
¨˙
->
sb
.
°_dev
 = 
	`TODEV
(
devmaj‹
, 
devmö‹
);

614 
devmaj‹
 = (
dev_t
)
	`asc_ul
(
hd
->
c_rmaj
, (hd->
c_maj
), 
HEX
);

615 
devmö‹
 = (
dev_t
)
	`asc_ul
(
hd
->
c_rmö
, (hd->
c_mö
), 
HEX
);

616 
¨˙
->
sb
.
°_rdev
 = 
	`TODEV
(
devmaj‹
, 
devmö‹
);

617 
¨˙
->
¸c
 = 
	`asc_ul
(
hd
->
c_chksum
, (hd->c_chksum), 
HEX
);

623 i‡((
nsz
 = ()
	`asc_ul
(
hd
->
c_«mesize
,(hd->c_«mesize),
HEX
)) < 2)

625 
¨˙
->
∆í
 = 
nsz
 - 1;

626 i‡(
	`rd_nm
(
¨˙
, 
nsz
) < 0)

632 i‡(
	`rd_skù
((
off_t
)(
	`VCPIO_PAD
((
HD_VCPIO
Ë+ 
nsz
))) < 0)

639 i‡(((
¨˙
->
sb
.
°_mode
&
C_IFMT
Ë!
C_ISLNK
)||◊r˙->sb.
°_size
 == 0)) {

643 
¨˙
->
 _∆í
 = 0;

644 
¨˙
->
 _«me
[0] = '\0';

645 
¨˙
->
∑d
 = 
	`VCPIO_PAD
◊r˙->
sb
.
°_size
);

646 (
	`com_rd
(
¨˙
));

652 i‡((
	`rd_ _nm
(
¨˙
) < 0) ||

653 (
	`rd_skù
((
off_t
)(
	`VCPIO_PAD
(
¨˙
->
sb
.
°_size
))) < 0))

659 (
	`com_rd
(
¨˙
));

660 
	}
}

669 
off_t


670 
	$v˝io_ídrd
()

672 ((
off_t
)((
HD_VCPIO
Ë+ (
TRAILER
) +

673 (
	`VCPIO_PAD
((
HD_VCPIO
Ë+ (
TRAILER
)))));

674 
	}
}

684 
	$¸c_°wr
()

686 
do¸c
 = 1;

687 (
	`dev_°¨t
());

688 
	}
}

700 
	$v˝io_wr
(
ARCHD
 *
¨˙
)

702 
HD_VCPIO
 *
hd
;

703 
nsz
;

704 
HD_VCPIO
 
hdblk
;

710 i‡(
	`m≠_dev
(
¨˙
, (
u_l⁄g
)
VCPIO_MASK
, (u_long)VCPIO_MASK) < 0)

712 
nsz
 = 
¨˙
->
∆í
 + 1;

713 
hd
 = &
hdblk
;

714 i‡((
¨˙
->
ty≥
 !
PAX_BLK
Ë&& (¨˙->ty≥ !
PAX_CHR
))

715 
¨˙
->
sb
.
°_rdev
 = 0;

721 i‡(
do¸c
) {

722 i‡(
	`ul_asc
((
u_l⁄g
)
VCMAGIC
, 
hd
->
c_magic
, (hd->c_magic),

723 
OCT
) ||

724 
	`ul_asc
((
u_l⁄g
)
¨˙
->
¸c
,
hd
->
c_chksum
,(hd->c_chksum),

725 
HEX
))

726 
out
;

728 i‡(
	`ul_asc
((
u_l⁄g
)
VMAGIC
, 
hd
->
c_magic
, (hd->c_magic),

729 
OCT
) ||

730 
	`ul_asc
((
u_l⁄g
)0L, 
hd
->
c_chksum
, (hd->c_chksum),
HEX
))

731 
out
;

734 
¨˙
->
ty≥
) {

735 
PAX_CTG
:

736 
PAX_REG
:

737 
PAX_HRG
:

742 
¨˙
->
∑d
 = 
	`VCPIO_PAD
◊r˙->
sb
.
°_size
);

743 #ifde‡
NET2_STAT


744 i‡(
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_size
, 
hd
->
c_fûesize
,

745 (
hd
->
c_fûesize
), 
HEX
)) {

747 i‡(
	`uqd_asc
((
u_quad_t
)
¨˙
->
sb
.
°_size
, 
hd
->
c_fûesize
,

748 (
hd
->
c_fûesize
), 
HEX
)) {

750 
	`∑xw¨n
(1,"File isÅooÜarge for sv4cpio format %s",

751 
¨˙
->
‹g_«me
);

755 
PAX_SLK
:

760 
¨˙
->
∑d
 = 0L;

761 i‡(
	`ul_asc
((
u_l⁄g
)
¨˙
->
 _∆í
, 
hd
->
c_fûesize
,

762 (
hd
->
c_fûesize
), 
HEX
))

763 
out
;

769 
¨˙
->
∑d
 = 0L;

770 i‡(
	`ul_asc
((
u_l⁄g
)0L, 
hd
->
c_fûesize
, (hd->c_filesize),

771 
HEX
))

772 
out
;

779 i‡(
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_öo
, 
hd
->
c_öo
, (hd->c_ino),

780 
HEX
) ||

781 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_mode
, 
hd
->
c_mode
, (hd->c_mode),

782 
HEX
) ||

783 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_uid
, 
hd
->
c_uid
, (hd->c_uid),

784 
HEX
) ||

785 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_gid
, 
hd
->
c_gid
, (hd->c_gid),

786 
HEX
) ||

787 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_mtime
, 
hd
->
c_mtime
, (hd->c_mtime),

788 
HEX
) ||

789 
	`ul_asc
((
u_l⁄g
)
¨˙
->
sb
.
°_∆ök
, 
hd
->
c_∆ök
, (hd->c_nlink),

790 
HEX
) ||

791 
	`ul_asc
((
u_l⁄g
)
	`MAJOR
(
¨˙
->
sb
.
°_dev
),
hd
->
c_maj
, (hd->c_maj),

792 
HEX
) ||

793 
	`ul_asc
((
u_l⁄g
)
	`MINOR
(
¨˙
->
sb
.
°_dev
),
hd
->
c_mö
, (hd->c_min),

794 
HEX
) ||

795 
	`ul_asc
((
u_l⁄g
)
	`MAJOR
(
¨˙
->
sb
.
°_rdev
),
hd
->
c_rmaj
,(hd->
c_maj
),

796 
HEX
) ||

797 
	`ul_asc
((
u_l⁄g
)
	`MINOR
(
¨˙
->
sb
.
°_rdev
),
hd
->
c_rmö
,(hd->
c_mö
),

798 
HEX
) ||

799 
	`ul_asc
((
u_l⁄g
)
nsz
, 
hd
->
c_«mesize
, (hd->c_«mesize), 
HEX
))

800 
out
;

805 i‡((
	`wr_rdbuf
((*)&
hdblk
, ()(
HD_VCPIO
)) < 0) ||

806 (
	`wr_rdbuf
(
¨˙
->
«me
, ()
nsz
) < 0) ||

807 (
	`wr_skù
((
off_t
)(
	`VCPIO_PAD
((
HD_VCPIO
Ë+ 
nsz
))) < 0)) {

808 
	`∑xw¨n
(1,"CouldÇŸ wrôêsv4˝iÿhódî f‹ %s",
¨˙
->
‹g_«me
);

815 i‡((
¨˙
->
ty≥
 =
PAX_CTG
Ë|| (¨˙->ty≥ =
PAX_REG
) ||

816 (
¨˙
->
ty≥
 =
PAX_HRG
))

822 i‡(
¨˙
->
ty≥
 !
PAX_SLK
)

828 i‡((
	`wr_rdbuf
(
¨˙
->
 _«me
,ár˙->
 _∆í
) < 0) ||

829 (
	`wr_skù
((
off_t
)(
	`VCPIO_PAD
(
¨˙
->
 _∆í
))) < 0)) {

830 
	`∑xw¨n
(1,"CouldÇot write sv4cpioÜinkÇame for %s",

831 
¨˙
->
‹g_«me
);

836 
out
:

840 
	`∑xw¨n
(1,"Sv4˝iÿhódî fõld i†toÿsmÆ»f‹ fûê%s",
¨˙
->
‹g_«me
);

842 
	}
}

857 
	$b˝io_id
(*
blk
, 
size
)

859 i‡(
size
 < ()(
HD_BCPIO
))

865 i‡(((
u_sh‹t
)
	`SHRT_EXT
(
blk
)Ë=
MAGIC
)

867 i‡(((
u_sh‹t
)
	`RSHRT_EXT
(
blk
)Ë=
MAGIC
) {

868 i‡(!
swp_hód
)

869 ++
swp_hód
;

873 
	}
}

885 
	$b˝io_rd
(
ARCHD
 *
¨˙
, *
buf
)

887 
HD_BCPIO
 *
hd
;

888 
nsz
;

893 i‡(
	`b˝io_id
(
buf
, (
HD_BCPIO
)) < 0)

896 
¨˙
->
∑d
 = 0L;

897 
hd
 = (
HD_BCPIO
 *)
buf
;

898 i‡(
swp_hód
) {

902 
¨˙
->
sb
.
°_dev
 = (
dev_t
)(
	`RSHRT_EXT
(
hd
->
h_dev
));

903 
¨˙
->
sb
.
°_öo
 = (
öo_t
)(
	`RSHRT_EXT
(
hd
->
h_öo
));

904 
¨˙
->
sb
.
°_mode
 = (
mode_t
)(
	`RSHRT_EXT
(
hd
->
h_mode
));

905 
¨˙
->
sb
.
°_uid
 = (
uid_t
)(
	`RSHRT_EXT
(
hd
->
h_uid
));

906 
¨˙
->
sb
.
°_gid
 = (
gid_t
)(
	`RSHRT_EXT
(
hd
->
h_gid
));

907 
¨˙
->
sb
.
°_∆ök
 = (
∆ök_t
)(
	`RSHRT_EXT
(
hd
->
h_∆ök
));

908 
¨˙
->
sb
.
°_rdev
 = (
dev_t
)(
	`RSHRT_EXT
(
hd
->
h_rdev
));

909 
¨˙
->
sb
.
°_mtime
 = (
time_t
)(
	`RSHRT_EXT
(
hd
->
h_mtime_1
));

910 
¨˙
->
sb
.
°_mtime
 = (arcn->sb.st_mtime << 16) |

911 ((
time_t
)(
	`RSHRT_EXT
(
hd
->
h_mtime_2
)));

912 
¨˙
->
sb
.
°_size
 = (
off_t
)(
	`RSHRT_EXT
(
hd
->
h_fûesize_1
));

913 
¨˙
->
sb
.
°_size
 = (arcn->sb.st_size << 16) |

914 ((
off_t
)(
	`RSHRT_EXT
(
hd
->
h_fûesize_2
)));

915 
nsz
 = ()(
	`RSHRT_EXT
(
hd
->
h_«mesize
));

917 
¨˙
->
sb
.
°_dev
 = (
dev_t
)(
	`SHRT_EXT
(
hd
->
h_dev
));

918 
¨˙
->
sb
.
°_öo
 = (
öo_t
)(
	`SHRT_EXT
(
hd
->
h_öo
));

919 
¨˙
->
sb
.
°_mode
 = (
mode_t
)(
	`SHRT_EXT
(
hd
->
h_mode
));

920 
¨˙
->
sb
.
°_uid
 = (
uid_t
)(
	`SHRT_EXT
(
hd
->
h_uid
));

921 
¨˙
->
sb
.
°_gid
 = (
gid_t
)(
	`SHRT_EXT
(
hd
->
h_gid
));

922 
¨˙
->
sb
.
°_∆ök
 = (
∆ök_t
)(
	`SHRT_EXT
(
hd
->
h_∆ök
));

923 
¨˙
->
sb
.
°_rdev
 = (
dev_t
)(
	`SHRT_EXT
(
hd
->
h_rdev
));

924 
¨˙
->
sb
.
°_mtime
 = (
time_t
)(
	`SHRT_EXT
(
hd
->
h_mtime_1
));

925 
¨˙
->
sb
.
°_mtime
 = (arcn->sb.st_mtime << 16) |

926 ((
time_t
)(
	`SHRT_EXT
(
hd
->
h_mtime_2
)));

927 
¨˙
->
sb
.
°_size
 = (
off_t
)(
	`SHRT_EXT
(
hd
->
h_fûesize_1
));

928 
¨˙
->
sb
.
°_size
 = (arcn->sb.st_size << 16) |

929 ((
off_t
)(
	`SHRT_EXT
(
hd
->
h_fûesize_2
)));

930 
nsz
 = ()(
	`SHRT_EXT
(
hd
->
h_«mesize
));

932 
¨˙
->
sb
.
°_˘ime
 =ár˙->sb.
°_©ime
 =ár˙->sb.
°_mtime
;

938 i‡(
nsz
 < 2)

940 
¨˙
->
∆í
 = 
nsz
 - 1;

941 i‡(
	`rd_nm
(
¨˙
, 
nsz
) < 0)

947 i‡(
	`rd_skù
((
off_t
)(
	`BCPIO_PAD
((
HD_BCPIO
Ë+ 
nsz
))) < 0)

954 i‡(((
¨˙
->
sb
.
°_mode
 & 
C_IFMT
Ë!
C_ISLNK
)||◊r˙->sb.
°_size
 == 0)){

958 
¨˙
->
 _∆í
 = 0;

959 
¨˙
->
 _«me
[0] = '\0';

960 
¨˙
->
∑d
 = 
	`BCPIO_PAD
◊r˙->
sb
.
°_size
);

961 (
	`com_rd
(
¨˙
));

964 i‡((
	`rd_ _nm
(
¨˙
) < 0) ||

965 (
	`rd_skù
((
off_t
)(
	`BCPIO_PAD
(
¨˙
->
sb
.
°_size
))) < 0))

971 (
	`com_rd
(
¨˙
));

972 
	}
}

981 
off_t


982 
	$b˝io_ídrd
()

984 ((
off_t
)((
HD_BCPIO
Ë+ (
TRAILER
) +

985 (
	`BCPIO_PAD
((
HD_BCPIO
Ë+ (
TRAILER
)))));

986 
	}
}

1000 
	$b˝io_wr
(
ARCHD
 *
¨˙
)

1002 
HD_BCPIO
 *
hd
;

1003 
nsz
;

1004 
HD_BCPIO
 
hdblk
;

1005 
off_t
 
t_of·
;

1006 
t_öt
;

1007 
time_t
 
t_timë
;

1013 i‡(
	`m≠_dev
(
¨˙
, (
u_l⁄g
)
BCPIO_MASK
, (u_long)BCPIO_MASK) < 0)

1016 i‡((
¨˙
->
ty≥
 !
PAX_BLK
Ë&& (¨˙->ty≥ !
PAX_CHR
))

1017 
¨˙
->
sb
.
°_rdev
 = 0;

1018 
hd
 = &
hdblk
;

1020 
¨˙
->
ty≥
) {

1021 
PAX_CTG
:

1022 
PAX_REG
:

1023 
PAX_HRG
:

1028 
¨˙
->
∑d
 = 
	`BCPIO_PAD
◊r˙->
sb
.
°_size
);

1029 
hd
->
h_fûesize_1
[0] = 
	`CHR_WR_0
(
¨˙
->
sb
.
°_size
);

1030 
hd
->
h_fûesize_1
[1] = 
	`CHR_WR_1
(
¨˙
->
sb
.
°_size
);

1031 
hd
->
h_fûesize_2
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_size
);

1032 
hd
->
h_fûesize_2
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_size
);

1033 
t_of·
 = (
off_t
)(
	`SHRT_EXT
(
hd
->
h_fûesize_1
));

1034 
t_of·
 = (t_of·<<16Ë| ((
off_t
)(
	`SHRT_EXT
(
hd
->
h_fûesize_2
)));

1035 i‡(
¨˙
->
sb
.
°_size
 !
t_of·
) {

1036 
	`∑xw¨n
(1,"File isÅooÜarge for bcpio format %s",

1037 
¨˙
->
‹g_«me
);

1041 
PAX_SLK
:

1046 
¨˙
->
∑d
 = 0L;

1047 
hd
->
h_fûesize_1
[0] = 
	`CHR_WR_0
(
¨˙
->
 _∆í
);

1048 
hd
->
h_fûesize_1
[1] = 
	`CHR_WR_1
(
¨˙
->
 _∆í
);

1049 
hd
->
h_fûesize_2
[0] = 
	`CHR_WR_2
(
¨˙
->
 _∆í
);

1050 
hd
->
h_fûesize_2
[1] = 
	`CHR_WR_3
(
¨˙
->
 _∆í
);

1051 
t_öt
 = ()(
	`SHRT_EXT
(
hd
->
h_fûesize_1
));

1052 
t_öt
 = (t_öà<< 16Ë| (()(
	`SHRT_EXT
(
hd
->
h_fûesize_2
)));

1053 i‡(
¨˙
->
 _∆í
 !
t_öt
)

1054 
out
;

1060 
¨˙
->
∑d
 = 0L;

1061 
hd
->
h_fûesize_1
[0] = ()0;

1062 
hd
->
h_fûesize_1
[1] = ()0;

1063 
hd
->
h_fûesize_2
[0] = ()0;

1064 
hd
->
h_fûesize_2
[1] = ()0;

1071 
hd
->
h_magic
[0] = 
	`CHR_WR_2
(
MAGIC
);

1072 
hd
->
h_magic
[1] = 
	`CHR_WR_3
(
MAGIC
);

1073 
hd
->
h_dev
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_dev
);

1074 
hd
->
h_dev
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_dev
);

1075 i‡(
¨˙
->
sb
.
°_dev
 !(
dev_t
)(
	`SHRT_EXT
(
hd
->
h_dev
)))

1076 
out
;

1077 
hd
->
h_öo
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_öo
);

1078 
hd
->
h_öo
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_öo
);

1079 i‡(
¨˙
->
sb
.
°_öo
 !(
öo_t
)(
	`SHRT_EXT
(
hd
->
h_öo
)))

1080 
out
;

1081 
hd
->
h_mode
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_mode
);

1082 
hd
->
h_mode
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_mode
);

1083 i‡(
¨˙
->
sb
.
°_mode
 !(
mode_t
)(
	`SHRT_EXT
(
hd
->
h_mode
)))

1084 
out
;

1085 
hd
->
h_uid
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_uid
);

1086 
hd
->
h_uid
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_uid
);

1087 i‡(
¨˙
->
sb
.
°_uid
 !(
uid_t
)(
	`SHRT_EXT
(
hd
->
h_uid
)))

1088 
out
;

1089 
hd
->
h_gid
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_gid
);

1090 
hd
->
h_gid
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_gid
);

1091 i‡(
¨˙
->
sb
.
°_gid
 !(
gid_t
)(
	`SHRT_EXT
(
hd
->
h_gid
)))

1092 
out
;

1093 
hd
->
h_∆ök
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_∆ök
);

1094 
hd
->
h_∆ök
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_∆ök
);

1095 i‡(
¨˙
->
sb
.
°_∆ök
 !(
∆ök_t
)(
	`SHRT_EXT
(
hd
->
h_∆ök
)))

1096 
out
;

1097 
hd
->
h_rdev
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_rdev
);

1098 
hd
->
h_rdev
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_rdev
);

1099 i‡(
¨˙
->
sb
.
°_rdev
 !(
dev_t
)(
	`SHRT_EXT
(
hd
->
h_rdev
)))

1100 
out
;

1101 
hd
->
h_mtime_1
[0] = 
	`CHR_WR_0
(
¨˙
->
sb
.
°_mtime
);

1102 
hd
->
h_mtime_1
[1] = 
	`CHR_WR_1
(
¨˙
->
sb
.
°_mtime
);

1103 
hd
->
h_mtime_2
[0] = 
	`CHR_WR_2
(
¨˙
->
sb
.
°_mtime
);

1104 
hd
->
h_mtime_2
[1] = 
	`CHR_WR_3
(
¨˙
->
sb
.
°_mtime
);

1105 
t_timë
 = (
time_t
)(
	`SHRT_EXT
(
hd
->
h_mtime_1
));

1106 
t_timë
 = (t_timë << 16Ë| ((
time_t
)(
	`SHRT_EXT
(
hd
->
h_mtime_2
)));

1107 i‡(
¨˙
->
sb
.
°_mtime
 !
t_timë
)

1108 
out
;

1109 
nsz
 = 
¨˙
->
∆í
 + 1;

1110 
hd
->
h_«mesize
[0] = 
	`CHR_WR_2
(
nsz
);

1111 
hd
->
h_«mesize
[1] = 
	`CHR_WR_3
(
nsz
);

1112 i‡(
nsz
 !()(
	`SHRT_EXT
(
hd
->
h_«mesize
)))

1113 
out
;

1118 i‡((
	`wr_rdbuf
((*)&
hdblk
, ()(
HD_BCPIO
)) < 0) ||

1119 (
	`wr_rdbuf
(
¨˙
->
«me
, 
nsz
) < 0) ||

1120 (
	`wr_skù
((
off_t
)(
	`BCPIO_PAD
((
HD_BCPIO
Ë+ 
nsz
))) < 0)) {

1121 
	`∑xw¨n
(1, "CouldÇŸ wrôêb˝iÿhódî f‹ %s", 
¨˙
->
‹g_«me
);

1128 i‡((
¨˙
->
ty≥
 =
PAX_CTG
Ë|| (¨˙->ty≥ =
PAX_REG
) ||

1129 (
¨˙
->
ty≥
 =
PAX_HRG
))

1135 i‡(
¨˙
->
ty≥
 !
PAX_SLK
)

1141 i‡((
	`wr_rdbuf
(
¨˙
->
 _«me
,ár˙->
 _∆í
) < 0) ||

1142 (
	`wr_skù
((
off_t
)(
	`BCPIO_PAD
(
¨˙
->
 _∆í
))) < 0)) {

1143 
	`∑xw¨n
(1,"CouldÇŸ wrôêb˝iÿlökÇamêf‹ %s",
¨˙
->
‹g_«me
);

1148 
out
:

1152 
	`∑xw¨n
(1,"B˝iÿhódî fõld i†toÿsmÆ»f‹ fûê%s", 
¨˙
->
‹g_«me
);

1154 
	}
}

	@pax/cpio.h

40 
	#TRAILER
 "TRAILER!!!"

	)

45 
	#C_ISDIR
 040000

	)

46 
	#C_ISFIFO
 010000

	)

47 
	#C_ISREG
 0100000

	)

48 
	#C_ISBLK
 060000

	)

49 
	#C_ISCHR
 020000

	)

50 
	#C_ISCTG
 0110000

	)

51 
	#C_ISLNK
 0120000

	)

52 
	#C_ISOCK
 0140000

	)

53 
	#C_IFMT
 0170000

	)

59 
	mc_magic
[6];

60 
	mc_dev
[6];

61 
	mc_öo
[6];

62 
	mc_mode
[6];

63 
	mc_uid
[6];

64 
	mc_gid
[6];

65 
	mc_∆ök
[6];

66 
	mc_rdev
[6];

67 
	mc_mtime
[11];

68 
	mc_«mesize
[6];

69 
	mc_fûesize
[11];

70 } 
	tHD_CPIO
;

72 
	#MAGIC
 070707

	)

74 #ifde‡
_PAX_


75 
	#AMAGIC
 "070707"

	)

76 
	#CPIO_MASK
 0x3fff‡

	)

88 
u_ch¨
 
	mh_magic
[2];

89 
u_ch¨
 
	mh_dev
[2];

90 
u_ch¨
 
	mh_öo
[2];

91 
u_ch¨
 
	mh_mode
[2];

92 
u_ch¨
 
	mh_uid
[2];

93 
u_ch¨
 
	mh_gid
[2];

94 
u_ch¨
 
	mh_∆ök
[2];

95 
u_ch¨
 
	mh_rdev
[2];

96 
u_ch¨
 
	mh_mtime_1
[2];

97 
u_ch¨
 
	mh_mtime_2
[2];

98 
u_ch¨
 
	mh_«mesize
[2];

99 
u_ch¨
 
	mh_fûesize_1
[2];

100 
u_ch¨
 
	mh_fûesize_2
[2];

101 } 
	tHD_BCPIO
;

103 #ifde‡
_PAX_


107 
	#SHRT_EXT
(
ch
Ë(((()(ch)[0])<<8Ë| ((()(ch)[1])&0xff))

	)

108 
	#RSHRT_EXT
(
ch
Ë(((()(ch)[1])<<8Ë| ((()(ch)[0])&0xff))

	)

109 
	#CHR_WR_0
(
vÆ
Ë(()(((vÆË>> 24Ë& 0xff))

	)

110 
	#CHR_WR_1
(
vÆ
Ë(()(((vÆË>> 16Ë& 0xff))

	)

111 
	#CHR_WR_2
(
vÆ
Ë(()(((vÆË>> 8Ë& 0xff))

	)

112 
	#CHR_WR_3
(
vÆ
Ë(()((vÆË& 0xff))

	)

117 
	#BCPIO_PAD
(
x
Ë((2 - ((xË& 1)Ë& 1Ë

	)

118 
	#BCPIO_MASK
 0xfff‡

	)

125 
	mc_magic
[6];

126 
	mc_öo
[8];

127 
	mc_mode
[8];

128 
	mc_uid
[8];

129 
	mc_gid
[8];

130 
	mc_∆ök
[8];

131 
	mc_mtime
[8];

132 
	mc_fûesize
[8];

133 
	mc_maj
[8];

134 
	mc_mö
[8];

135 
	mc_rmaj
[8];

136 
	mc_rmö
[8];

137 
	mc_«mesize
[8];

138 
	mc_chksum
[8];

139 } 
	tHD_VCPIO
;

141 
	#VMAGIC
 070701

	)

142 
	#VCMAGIC
 070702

	)

143 #ifde‡
_PAX_


144 
	#AVMAGIC
 "070701"

	)

145 
	#AVCMAGIC
 "070702"

	)

146 
	#VCPIO_PAD
(
x
Ë((4 - ((xË& 3)Ë& 3Ë

	)

147 
	#VCPIO_MASK
 0xfffffff‡

	)

	@pax/extern.h

41 
	~<sys/cdefs.h
>

46 c⁄° *
¨˙ame
;

47 c⁄° *
gzù_¥ogøm
;

48 
¨_›í
(const *);

49 
¨_˛o£
();

50 
¨_døö
();

51 
¨_£t_wr
();

52 
¨_≠p_ok
();

53 
¨_ªad
(*, );

54 
¨_wrôe
(*, );

55 
¨_rdsync
();

56 
¨_fow
(
off_t
, off_t *);

57 
¨_ªv
(
off_t
 );

58 
¨_√xt
();

63 
u_l⁄g
 
Ê˙t
;

64 
li°
();

65 
exåa˘
();

66 
≠≥nd
();

67 
¨chive
();

68 
c›y
();

73 
blksz
;

74 
wrblksz
;

75 
maxÊt
;

76 
rdblksz
;

77 
off_t
 
wæimô
;

78 
off_t
 
rd˙t
;

79 
off_t
 
wr˙t
;

80 
wr_°¨t
();

81 
rd_°¨t
();

82 
˝_°¨t
();

83 
≠≤d_°¨t
(
off_t
);

84 
rd_sync
();

85 
pback
(*, );

86 
rd_skù
(
off_t
);

87 
wr_fö
();

88 
wr_rdbuf
(*, );

89 
rd_wrbuf
(*, );

90 
wr_skù
(
off_t
);

91 
wr_rdfûe
(
ARCHD
 *, , 
off_t
 *);

92 
rd_wrfûe
(
ARCHD
 *, , 
off_t
 *);

93 
˝_fûe
(
ARCHD
 *, , );

94 
buf_fûl
();

95 
buf_Êush
();

100 
uidtb_°¨t
();

101 
gidtb_°¨t
();

102 
u§tb_°¨t
();

103 
gΩtb_°¨t
();

104 c⁄° * 
«me_uid
(
uid_t
, );

105 c⁄° * 
«me_gid
(
gid_t
, );

106 
uid_«me
(*, 
uid_t
 *);

107 
gid_«me
(*, 
gid_t
 *);

112 
˝io_°rd
();

113 
˝io_åaû
(
ARCHD
 *);

114 
˝io_ídwr
();

115 
˝io_id
(*, );

116 
˝io_rd
(
ARCHD
 *, *);

117 
off_t
 
˝io_ídrd
();

118 
˝io_°wr
();

119 
˝io_wr
(
ARCHD
 *);

120 
v˝io_id
(*, );

121 
¸c_id
(*, );

122 
¸c_°rd
();

123 
v˝io_rd
(
ARCHD
 *, *);

124 
off_t
 
v˝io_ídrd
();

125 
¸c_°wr
();

126 
v˝io_wr
(
ARCHD
 *);

127 
b˝io_id
(*, );

128 
b˝io_rd
(
ARCHD
 *, *);

129 
off_t
 
b˝io_ídrd
();

130 
b˝io_wr
(
ARCHD
 *);

135 
fûe_¸ót
(
ARCHD
 *);

136 
fûe_˛o£
(
ARCHD
 *, );

137 
 k_¸ót
(
ARCHD
 *);

138 
¸oss_ k
(
ARCHD
 *);

139 
chk_ßme
(
ARCHD
 *);

140 
node_¸ót
(
ARCHD
 *);

141 
u∆nk_exi°
(*, );

142 
chk_∑th
(*, 
uid_t
, 
gid_t
);

143 
£t_·ime
(*
‚m
, 
time_t
 
mtime
,Åime_à
©ime
, 
‰c
);

144 
£t_ids
(*, 
uid_t
, 
gid_t
);

145 
£t_lids
(*, 
uid_t
, 
gid_t
);

146 
£t_pmode
(*, 
mode_t
);

147 
fûe_wrôe
(, *, , *, *, , *);

148 
fûe_Êush
(, *, );

149 
rdfûe_˛o£
(
ARCHD
 *, *);

150 
£t_¸c
(
ARCHD
 *, );

155 
·ªe_°¨t
();

156 
·ªe_add
(*, );

157 
·ªe_£l
(
ARCHD
 *);

158 
·ªe_nŸ£l
();

159 
·ªe_chk
();

160 
√xt_fûe
(
ARCHD
 *);

165 
ls_li°
(
ARCHD
 *, 
time_t
, 
FILE
 *);

166 
ls_ây
(
ARCHD
 *);

167 
l_°∫˝y
(*, const *, );

168 
u_l⁄g
 
asc_ul
(*, , );

169 
ul_asc
(
u_l⁄g
, *, , );

170 #i‚de‡
NET2_STAT


171 
u_quad_t
 
asc_uqd
(*, , );

172 
uqd_asc
(
u_quad_t
, *, , );

178 
gëﬁd›t
(, **, const *);

183 
FSUB
 
fsub
[];

184 
f‹d
[];

185 
›ti⁄s
(, **);

186 
OPLIST
 * 
›t_√xt
();

187 
›t_add
(const *);

188 
bad_›t
();

189 *
	gchd«me
;

194 
ªp_add
(*);

195 
∑t_add
(*, *);

196 
∑t_chk
();

197 
∑t_£l
(
ARCHD
 *);

198 
∑t_m©ch
(
ARCHD
 *);

199 
mod_«me
(
ARCHD
 *);

200 
£t_de°
(
ARCHD
 *, *, );

205 
a˘
;

206 
FSUB
 *
‰mt
;

207 
cÊag
;

208 
cwdfd
;

209 
dÊag
;

210 
iÊag
;

211 
kÊag
;

212 
lÊag
;

213 
nÊag
;

214 
tÊag
;

215 
uÊag
;

216 
vÊag
;

217 
DÊag
;

218 
HÊag
;

219 
LÊag
;

220 
XÊag
;

221 
YÊag
;

222 
ZÊag
;

223 
vÂ¨t
;

224 
∑time
;

225 
pmtime
;

226 
nodús
;

227 
pmode
;

228 
pids
;

229 
rmÀad¶ash
;

230 
exô_vÆ
;

231 
do¸c
;

232 *
dú±r
;

233 c⁄° *
¨gv0
;

234 
FILE
 *
li°f
;

235 *
ãmpfûe
;

236 *
ãmpba£
;

238 
sig_˛ónup
();

243 
£l_chk
(
ARCHD
 *);

244 
gΩ_add
(*);

245 
u§_add
(*);

246 
ång_add
(*);

251 
 k_°¨t
();

252 
chk_ k
(
ARCHD
 *);

253 
purg_ k
(
ARCHD
 *);

254 
 k_íd
();

255 
·ime_°¨t
();

256 
chk_·ime
(
ARCHD
 *);

257 
«me_°¨t
();

258 
add_«me
(*, , *);

259 
sub_«me
(*, *, 
size_t
);

260 
dev_°¨t
();

261 
add_dev
(
ARCHD
 *);

262 
m≠_dev
(
ARCHD
 *, 
u_l⁄g
, u_long);

263 
©dú_°¨t
();

264 
©dú_íd
();

265 
add_©dú
(*, 
dev_t
, 
öo_t
, 
time_t
,Åime_t);

266 
gë_©dú
(
dev_t
, 
öo_t
, 
time_t
 *,Åime_t *);

267 
dú_°¨t
();

268 
add_dú
(*, , 
°©
 *, );

269 
¥oc_dú
();

270 
u_öt
 
°_hash
(*, , );

275 
èr_ídwr
();

276 
off_t
 
èr_ídrd
();

277 
èr_åaû
(*, , *);

278 
èr_id
(*, );

279 
èr_›t
();

280 
èr_rd
(
ARCHD
 *, *);

281 
èr_wr
(
ARCHD
 *);

282 
u°¨_°rd
();

283 
u°¨_°wr
();

284 
u°¨_id
(*, );

285 
u°¨_rd
(
ARCHD
 *, *);

286 
u°¨_wr
(
ARCHD
 *);

291 
ây_öô
();

292 
	$ây_¥¡
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

293 
	`ây_ªad
(*, );

294 
	$∑xw¨n
(, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

295 
	$sysw¨n
(, , c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

	@pax/file_subs.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)file_subs.c 8.1 (Berkeley) 5/31/93";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/file_subs.c,v 1.23.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

44 
	~<sys/°©.h
>

45 
	~<uni°d.h
>

46 
	~<f˙é.h
>

47 
	~<°rög.h
>

48 
	~<°dio.h
>

49 
	~<î∫o.h
>

50 
	~<sys/uio.h
>

51 
	~<°dlib.h
>

52 
	~"∑x.h
"

53 
	~"›ti⁄s.h
"

54 
	~"exã∫.h
"

57 
mk_lök
(*,
°©
 *,*, );

64 
	#FILEBITS
 (
S_ISVTX
 | 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
)

	)

65 
	#SETBITS
 (
S_ISUID
 | 
S_ISGID
)

	)

66 
	#ABITS
 (
FILEBITS
 | 
SETBITS
)

	)

76 
	$fûe_¸ót
(
ARCHD
 *
¨˙
)

78 
fd
 = -1;

79 
mode_t
 
fûe_mode
;

80 
€ºno
;

93 
fûe_mode
 = 
¨˙
->
sb
.
°_mode
 & 
FILEBITS
;

94 i‡((
fd
 = 
	`›í
(
¨˙
->
«me
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
,

95 
fûe_mode
)) >= 0)

96 (
fd
);

103 i‡(
	`u∆nk_exi°
(
¨˙
->
«me
,ár˙->
ty≥
) != 0)

112 i‡((
fd
 = 
	`›í
(
¨˙
->
«me
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
,

113 
fûe_mode
)) >= 0)

115 
€ºno
 = 
î∫o
;

116 i‡(
nodús
 || 
	`chk_∑th
(
¨˙
->
«me
,¨˙->
sb
.
°_uid
,¨˙->sb.
°_gid
) < 0) {

117 
	`sysw¨n
(1, 
€ºno
, "U«bÀÅÿ¸óã %s", 
¨˙
->
«me
);

121 (
fd
);

122 
	}
}

133 
	$fûe_˛o£
(
ARCHD
 *
¨˙
, 
fd
)

135 
ªs
 = 0;

137 i‡(
fd
 < 0)

139 i‡(
	`˛o£
(
fd
) < 0)

140 
	`sysw¨n
(0, 
î∫o
, "UnableÅo close file descriptor on %s",

141 
¨˙
->
«me
);

148 i‡(
pids
)

149 
ªs
 = 
	`£t_ids
(
¨˙
->
«me
,ár˙->
sb
.
°_uid
,ár˙->sb.
°_gid
);

156 i‡(!
pmode
 || 
ªs
)

157 
¨˙
->
sb
.
°_mode
 &~(
SETBITS
);

158 i‡(
pmode
)

159 
	`£t_pmode
(
¨˙
->
«me
,ár˙->
sb
.
°_mode
);

160 i‡(
∑time
 || 
pmtime
)

161 
	`£t_·ime
(
¨˙
->
«me
,ár˙->
sb
.
°_mtime
,ár˙->sb.
°_©ime
, 0);

162 
	}
}

173 
	$ k_¸ót
(
ARCHD
 *
¨˙
)

175 
°©
 
sb
;

181 i‡(
	`l°©
(
¨˙
->
 _«me
, &
sb
) < 0) {

182 
	`sysw¨n
(1,
î∫o
,"U«bÀÅÿlökÅÿ%†‰om %s", 
¨˙
->
 _«me
,

183 
¨˙
->
«me
);

187 i‡(
	`S_ISDIR
(
sb
.
°_mode
)) {

188 
	`∑xw¨n
(1, "A hardÜinkÅoÅhe directory %s isÇotállowed",

189 
¨˙
->
 _«me
);

193 (
	`mk_lök
(
¨˙
->
 _«me
, &
sb
,ár˙->
«me
, 0));

194 
	}
}

207 
	$¸oss_ k
(
ARCHD
 *
¨˙
)

214 i‡(
¨˙
->
ty≥
 =
PAX_DIR
)

216 (
	`mk_lök
(
¨˙
->
‹g_«me
, &◊r˙->
sb
),ár˙->
«me
, 1));

217 
	}
}

231 
	$chk_ßme
(
ARCHD
 *
¨˙
)

233 
°©
 
sb
;

239 i‡(
	`l°©
(
¨˙
->
«me
, &
sb
) < 0)

241 i‡(
kÊag
)

247 i‡((
¨˙
->
sb
.
°_dev
 =sb.°_devË&& (¨˙->sb.
°_öo
 == sb.st_ino)) {

248 
	`∑xw¨n
(1, "UnableÅo copy %s, file would overwrite itself",

249 
¨˙
->
«me
);

253 
	}
}

268 
	$mk_lök
(*
to
, 
°©
 *
to_sb
, *
‰om
,

269 
ign
)

271 
°©
 
sb
;

272 
€ºno
;

278 i‡(
	`l°©
(
‰om
, &
sb
) == 0) {

279 i‡(
kÊag
)

285 i‡((
to_sb
->
°_dev
==
sb
.°_dev)&&—o_sb->
°_öo
 == sb.st_ino)) {

286 
	`∑xw¨n
(1, "U«bÀÅÿlök fûê%†tÿô£lf", 
to
);

293 i‡(
	`S_ISDIR
(
sb
.
°_mode
)) {

294 i‡(
	`rmdú
(
‰om
) < 0) {

295 
	`sysw¨n
(1, 
î∫o
, "U«bÀÅÿªmovê%s", 
‰om
);

298 } i‡(
	`u∆ök
(
‰om
) < 0) {

299 i‡(!
ign
) {

300 
	`sysw¨n
(1, 
î∫o
, "U«bÀÅÿªmovê%s", 
‰om
);

313 i‡(
	`lök
(
to
, 
‰om
) == 0)

315 
€ºno
 = 
î∫o
;

316 i‡(!
nodús
 && 
	`chk_∑th
(
‰om
, 
to_sb
->
°_uid
,Åo_sb->
°_gid
) == 0)

318 i‡(!
ign
) {

319 
	`sysw¨n
(1, 
€ºno
, "CouldÇŸÜökÅÿ%†‰om %s", 
to
,

320 
‰om
);

330 
	}
}

341 
	$node_¸ót
(
ARCHD
 *
¨˙
)

343 
ªs
;

344 
ign
 = 0;

345 
€ºno
;

346 
∑ss
 = 0;

347 
mode_t
 
fûe_mode
;

348 
°©
 
sb
;

356 
fûe_mode
 = 
¨˙
->
sb
.
°_mode
 & 
FILEBITS
;

359 
¨˙
->
ty≥
) {

360 
PAX_DIR
:

361 
ªs
 = 
	`mkdú
(
¨˙
->
«me
, 
fûe_mode
);

362 i‡(
ign
)

363 
ªs
 = 0;

365 
PAX_CHR
:

366 
fûe_mode
 |
S_IFCHR
;

367 
ªs
 = 
	`mknod
(
¨˙
->
«me
, 
fûe_mode
,ár˙->
sb
.
°_rdev
);

369 
PAX_BLK
:

370 
fûe_mode
 |
S_IFBLK
;

371 
ªs
 = 
	`mknod
(
¨˙
->
«me
, 
fûe_mode
,ár˙->
sb
.
°_rdev
);

373 
PAX_FIF
:

374 
ªs
 = 
	`mkfifo
(
¨˙
->
«me
, 
fûe_mode
);

376 
PAX_SCK
:

380 
	`∑xw¨n
(0,

382 
¨˙
->
«me
);

384 
PAX_SLK
:

385 
ªs
 = 
	`symlök
(
¨˙
->
 _«me
,ár˙->
«me
);

387 
PAX_CTG
:

388 
PAX_HLK
:

389 
PAX_HRG
:

390 
PAX_REG
:

395 
	`∑xw¨n
(0, "%s hasán unknown fileÅype, skipping",

396 
¨˙
->
«me
);

405 i‡(
ªs
 == 0)

411 
€ºno
 = 
î∫o
;

412 i‡((
ign
 = 
	`u∆nk_exi°
(
¨˙
->
«me
,ár˙->
ty≥
)) < 0)

415 i‡(++
∑ss
 <= 1)

418 i‡(
nodús
 || 
	`chk_∑th
(
¨˙
->
«me
,¨˙->
sb
.
°_uid
,¨˙->sb.
°_gid
) < 0) {

419 
	`sysw¨n
(1, 
€ºno
, "CouldÇŸ cª©e: %s", 
¨˙
->
«me
);

427 i‡(
pids
)

428 
ªs
 = 
	`£t_ids
(
¨˙
->
«me
,ár˙->
sb
.
°_uid
,ár˙->sb.
°_gid
);

430 
ªs
 = 0;

437 i‡(!
pmode
 || 
ªs
)

438 
¨˙
->
sb
.
°_mode
 &~(
SETBITS
);

439 i‡(
pmode
)

440 
	`£t_pmode
(
¨˙
->
«me
,ár˙->
sb
.
°_mode
);

442 i‡(
¨˙
->
ty≥
 =
PAX_DIR
 && 
	`°rcmp
(
NM_CPIO
, 
¨gv0
) != 0) {

452 i‡(
	`ac˚ss
(
¨˙
->
«me
, 
R_OK
 | 
W_OK
 | 
X_OK
) < 0) {

453 i‡(
	`l°©
(
¨˙
->
«me
, &
sb
) < 0) {

454 
	`sysw¨n
(0, 
î∫o
,"CouldÇotáccess %s (stat)",

455 
¨˙
->
«me
);

456 
	`£t_pmode
(
¨˙
->
«me
,
fûe_mode
 | 
S_IRWXU
);

464 
	`£t_pmode
(
¨˙
->
«me
,

465 ((
sb
.
°_mode
 & 
FILEBITS
Ë| 
S_IRWXU
));

466 i‡(!
pmode
)

467 
¨˙
->
sb
.
°_mode
 = sb.st_mode;

474 
	`add_dú
(
¨˙
->
«me
,ár˙->
∆í
, &◊r˙->
sb
), 1);

475 } i‡(
pmode
 || 
∑time
 || 
pmtime
)

476 
	`add_dú
(
¨˙
->
«me
,ár˙->
∆í
, &◊r˙->
sb
), 0);

479 i‡(
∑time
 || 
pmtime
)

480 
	`£t_·ime
(
¨˙
->
«me
,ár˙->
sb
.
°_mtime
,ár˙->sb.
°_©ime
, 0);

482 
	}
}

497 
	$u∆nk_exi°
(*
«me
, 
ty≥
)

499 
°©
 
sb
;

504 i‡(
	`l°©
(
«me
, &
sb
) < 0)

506 i‡(
kÊag
)

509 i‡(
	`S_ISDIR
(
sb
.
°_mode
)) {

514 i‡(
	`rmdú
(
«me
) < 0) {

515 i‡(
ty≥
 =
PAX_DIR
)

517 
	`sysw¨n
(1,
î∫o
,"U«bÀÅÿªmovêdúe˘‹y %s", 
«me
);

526 i‡(
	`u∆ök
(
«me
) < 0) {

527 
	`sysw¨n
(1, 
î∫o
, "CouldÇŸ u∆ök %s", 
«me
);

531 
	}
}

548 
	$chk_∑th
–*
«me
, 
uid_t
 
°_uid
, 
gid_t
 
°_gid
)

550 *
•t
 = 
«me
;

551 
°©
 
sb
;

552 
ªtvÆ
 = -1;

557 i‡(*
•t
 == '/')

558 ++
•t
;

564 
•t
 = 
	`°rchr
(spt, '/');

565 i‡(
•t
 =
NULL
)

567 *
•t
 = '\0';

578 i‡(
	`l°©
(
«me
, &
sb
) == 0) {

579 *(
•t
++) = '/';

587 i‡(
	`mkdú
(
«me
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
) < 0) {

588 *
•t
 = '/';

589 
ªtvÆ
 = -1;

598 
ªtvÆ
 = 0;

599 i‡(
pids
)

600 ()
	`£t_ids
(
«me
, 
°_uid
, 
°_gid
);

608 i‡((
	`ac˚ss
(
«me
, 
R_OK
 | 
W_OK
 | 
X_OK
) < 0) &&

609 (
	`l°©
(
«me
, &
sb
) == 0)) {

610 
	`£t_pmode
(
«me
, ((
sb
.
°_mode
 & 
FILEBITS
Ë| 
S_IRWXU
));

611 
	`add_dú
(
«me
, 
•t
 -Çame, &
sb
, 1);

613 *(
•t
++) = '/';

616 (
ªtvÆ
);

617 
	}
}

632 
	$£t_·ime
(*
‚m
, 
time_t
 
mtime
,Åime_à
©ime
, 
‰c
)

634 
timevÆ
 
tv
[2] = {{0L, 0L}, {0L, 0L}};

635 
°©
 
sb
;

637 
tv
[0].
tv_£c
 = 
©ime
;

638 
tv
[1].
tv_£c
 = 
mtime
;

639 i‡(!
‰c
 && (!
∑time
 || !
pmtime
)) {

644 i‡(
	`l°©
(
‚m
, &
sb
) == 0) {

645 i‡(!
∑time
)

646 
tv
[0].
tv_£c
 = 
sb
.
°_©ime
;

647 i‡(!
pmtime
)

648 
tv
[1].
tv_£c
 = 
sb
.
°_mtime
;

650 
	`sysw¨n
(0,
î∫o
,"U«bÀÅÿobèö fûê°©†%s", 
‚m
);

656 i‡(
	`lutimes
(
‚m
, 
tv
) < 0)

657 
	`sysw¨n
(1, 
î∫o
, "Access/modificationÅime set failed on: %s",

658 
‚m
);

660 
	}
}

670 
	$£t_ids
(*
‚m
, 
uid_t
 
uid
, 
gid_t
 
gid
)

672 i‡(
	`lchown
(
‚m
, 
uid
, 
gid
) < 0) {

677 i‡(
	`°rcmp
(
NM_PAX
, 
¨gv0
Ë=0 || 
î∫o
 !
EPERM
 || 
vÊag
 ||

678 
	`gëeuid
() == 0)

679 
	`sysw¨n
(1, 
î∫o
, "UnableÅo set file uid/gid of %s",

680 
‚m
);

684 
	}
}

692 
	$£t_pmode
(*
‚m
, 
mode_t
 
mode
)

694 
mode
 &
ABITS
;

695 i‡(
	`lchmod
(
‚m
, 
mode
) < 0)

696 
	`sysw¨n
(1, 
î∫o
, "CouldÇŸ sëÖîmissi⁄†⁄ %s", 
‚m
);

698 
	}
}

749 
	$fûe_wrôe
(
fd
, *
°r
, 
˙t
, *
ªm
, *
i£m±
, 
sz
,

750 *
«me
)

752 *
±
;

753 *
íd
;

754 
w˙t
;

755 *
°
 = 
°r
;

760 
˙t
) {

761 i‡(!*
ªm
) {

767 *
i£m±
 = 1;

768 *
ªm
 = 
sz
;

775 
w˙t
 = 
	`MIN
(
˙t
, *
ªm
);

776 
˙t
 -
w˙t
;

777 *
ªm
 -
w˙t
;

778 i‡(*
i£m±
) {

783 
±
 = 
°
;

784 
íd
 = 
°
 + 
w˙t
;

789 (
±
 < 
íd
) && (*pt == '\0'))

790 ++
±
;

792 i‡(
±
 =
íd
) {

796 i‡(
	`l£ek
(
fd
, (
off_t
)
w˙t
, 
SEEK_CUR
) < 0) {

797 
	`sysw¨n
(1,
î∫o
,"File seek on %s",

798 
«me
);

801 
°
 = 
±
;

807 *
i£m±
 = 0;

813 i‡(
	`wrôe
(
fd
, 
°
, 
w˙t
) != wcnt) {

814 
	`sysw¨n
(1, 
î∫o
, "Faûed wrôêtÿfûê%s", 
«me
);

817 
°
 +
w˙t
;

819 (
°
 - 
°r
);

820 
	}
}

830 
	$fûe_Êush
(
fd
, *
‚ame
, 
i£m±
)

832 
b k
[] = "\0";

838 i‡(!
i£m±
)

844 i‡(
	`l£ek
(
fd
, (
off_t
)-1, 
SEEK_CUR
) < 0) {

845 
	`sysw¨n
(1, 
î∫o
, "Faûed sìk o¿fûê%s", 
‚ame
);

849 i‡(
	`wrôe
(
fd
, 
b k
, 1) < 0)

850 
	`sysw¨n
(1, 
î∫o
, "Faûed wrôêtÿfûê%s", 
‚ame
);

852 
	}
}

861 
	$rdfûe_˛o£
(
ARCHD
 *
¨˙
, *
fd
)

866 i‡(*
fd
 < 0)

869 ()
	`˛o£
(*
fd
);

870 *
fd
 = -1;

871 i‡(!
tÊag
)

877 
	`£t_·ime
(
¨˙
->
‹g_«me
,ár˙->
sb
.
°_mtime
,ár˙->sb.
°_©ime
, 1);

879 
	}
}

891 
	$£t_¸c
(
ARCHD
 *
¨˙
, 
fd
)

893 
i
;

894 
ªs
;

895 
off_t
 
˝˙t
 = 0L;

896 
u_l⁄g
 
size
;

897 
¸c
 = 0L;

898 
tbuf
[
FILEBLK
];

899 
°©
 
sb
;

901 i‡(
fd
 < 0) {

905 
¨˙
->
¸c
 = 0L;

909 i‡((
size
 = (
u_l⁄g
)
¨˙
->
sb
.
°_blksize
Ë> (u_l⁄g)(
tbuf
))

910 
size
 = (
u_l⁄g
)(
tbuf
);

917 i‡((
ªs
 = 
	`ªad
(
fd
, 
tbuf
, 
size
)) <= 0)

919 
˝˙t
 +
ªs
;

920 
i
 = 0; i < 
ªs
; ++i)

921 
¸c
 +(
tbuf
[
i
] & 0xff);

928 i‡(
˝˙t
 !
¨˙
->
sb
.
°_size
)

929 
	`∑xw¨n
(1, "Fûêch™ged sizê%s", 
¨˙
->
‹g_«me
);

930 i‡(
	`f°©
(
fd
, &
sb
) < 0)

931 
	`sysw¨n
(1, 
î∫o
, "Faûed sèà⁄ %s", 
¨˙
->
‹g_«me
);

932 i‡(
¨˙
->
sb
.
°_mtime
 != sb.st_mtime)

933 
	`∑xw¨n
(1, "Fûê%†wa†modifõd durögÑód", 
¨˙
->
‹g_«me
);

934 i‡(
	`l£ek
(
fd
, (
off_t
)0L, 
SEEK_SET
) < 0)

935 
	`sysw¨n
(1, 
î∫o
, "Fûêªwöd faûed on: %s", 
¨˙
->
‹g_«me
);

937 
¨˙
->
¸c
 = crc;

941 
	}
}

	@pax/ftree.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)ftree.c 8.2 (Berkeley) 4/18/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/ftree.c,v 1.24.22.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

44 
	~<sys/°©.h
>

45 
	~<uni°d.h
>

46 
	~<°rög.h
>

47 
	~<°dio.h
>

48 
	~<î∫o.h
>

49 
	~<°dlib.h
>

50 
	~<·s.h
>

51 
	~"∑x.h
"

52 
	~"·ªe.h
"

53 
	~"exã∫.h
"

69 
FTS
 *
	g·•
 = 
NULL
;

70 
	g·s›ts
;

71 *
	gÁºay
[2];

72 
FTREE
 *
	g·hód
 = 
NULL
;

73 
FTREE
 *
	g·èû
 = 
NULL
;

74 
FTREE
 *
	g·cur
 = 
NULL
;

75 
FTSENT
 *
	g·ít
 = 
NULL
;

76 
	g·ªe_skù
;

78 
·ªe_¨g
();

91 
	$·ªe_°¨t
()

99 
·s›ts
 = 
FTS_NOCHDIR
;

111 i‡(
LÊag
)

112 
·s›ts
 |
FTS_LOGICAL
;

114 
·s›ts
 |
FTS_PHYSICAL
;

115 i‡(
HÊag
)

116 #ifde‡
NET2_FTS


117 
	`∑xw¨n
(0, "The -H flag isÇot supported onÅhis version");

119 
·s›ts
 |
FTS_COMFOLLOW
;

121 i‡(
XÊag
)

122 
·s›ts
 |
FTS_XDEV
;

124 i‡((
·hód
 =
NULL
Ë&& ((
Áºay
[0] = 
	`mÆloc
(
PAXPATHLEN
+2)) == NULL)) {

125 
	`∑xw¨n
(1, "UnableÅoállocate memory for fileÇame buffer");

129 i‡(
	`·ªe_¨g
() < 0)

131 i‡(
tÊag
 && (
	`©dú_°¨t
() < 0))

134 
	}
}

145 
	$·ªe_add
(*
°r
, 
chÊg
)

147 
FTREE
 *
·
;

148 
Àn
;

153 i‡((
°r
 =
NULL
) || (*str == '\0')) {

154 
	`∑xw¨n
(0, "Invalid fileÇameárgument");

163 i‡((
·
 = (
FTREE
 *)
	`mÆloc
((FTREE))Ë=
NULL
) {

164 
	`∑xw¨n
(0, "UnableÅoállocate memory for filename");

168 i‡(((
Àn
 = 
	`°æí
(
°r
) - 1) > 0) && (str[len] == '/'))

169 
°r
[
Àn
] = '\0';

170 
·
->
‚ame
 = 
°r
;

171 
·
->
ªf˙t
 = 0;

172 
·
->
chÊg
 = chflg;

173 
·
->
fow
 = 
NULL
;

174 i‡(
·hód
 =
NULL
) {

175 
·èû
 = 
·hód
 = 
·
;

178 
·èû
->
fow
 = 
·
;

179 
·èû
 = 
·
;

181 
	}
}

190 
	$·ªe_£l
(
ARCHD
 *
¨˙
)

197 i‡(
·cur
 !
NULL
)

198 
·cur
->
ªf˙t
 = 1;

206 i‡(
nÊag
)

207 
·ªe_skù
 = 1;

209 i‡(!
dÊag
 || (
¨˙
->
ty≥
 !
PAX_DIR
))

212 i‡(
·ít
 !
NULL
)

213 ()
	`·s_£t
(
·•
, 
·ít
, 
FTS_SKIP
);

214 
	}
}

222 
	$·ªe_nŸ£l
()

224 i‡(
·ít
 !
NULL
)

225 ()
	`·s_£t
(
·•
, 
·ít
, 
FTS_SKIP
);

226 
	}
}

235 
	$·ªe_chk
()

237 
FTREE
 *
·
;

238 
wb™
 = 0;

243 i‡(
tÊag
)

244 
	`©dú_íd
();

250 
·
 = 
·hód
; fà!
NULL
; fà·->
fow
) {

251 i‡((
·
->
ªf˙t
 > 0Ë|| ft->
chÊg
)

253 i‡(
wb™
 == 0) {

254 
	`∑xw¨n
(1,"WARNING! These fileÇames wereÇot selected:");

255 ++
wb™
;

257 ()
	`Ârötf
(
°dîr
, "%s\n", 
·
->
‚ame
);

259 
	}
}

272 
	$·ªe_¨g
()

274 *
±
;

279 i‡(
·•
 !
NULL
) {

280 ()
	`·s_˛o£
(
·•
);

281 
·•
 = 
NULL
;

289 i‡(
·hód
 =
NULL
) {

294 i‡(
	`fgës
(
Áºay
[0], 
PAXPATHLEN
+1, 
°dö
Ë=
NULL
)

296 i‡((
±
 = 
	`°rchr
(
Áºay
[0], '\n')Ë!
NULL
)

297 *
±
 = '\0';

302 i‡(
·cur
 =
NULL
)

303 
·cur
 = 
·hód
;

304 i‡((
·cur
 = ftcur->
fow
Ë=
NULL
)

306 i‡(
·cur
->
chÊg
) {

308 i‡(
	`fchdú
(
cwdfd
) < 0) {

309 
	`sysw¨n
(1, 
î∫o
,

313 i‡(
	`chdú
(
·cur
->
‚ame
) < 0) {

314 
	`sysw¨n
(1, 
î∫o
, "Can't chdirÅo %s",

315 
·cur
->
‚ame
);

320 
Áºay
[0] = 
·cur
->
‚ame
;

332 i‡((
·•
 = 
	`·s_›í
(
Áºay
, 
·s›ts
, 
NULL
)) != NULL)

336 
	}
}

346 
	$√xt_fûe
(
ARCHD
 *
¨˙
)

348 
˙t
;

349 
time_t
 
©ime
;

350 
time_t
 
mtime
;

358 i‡(
·ªe_skù
) {

362 
·ªe_skù
 = 0;

363 i‡(
	`·ªe_¨g
() < 0)

371 i‡((
·ít
 = 
	`·s_ªad
(
·•
)Ë=
NULL
) {

376 i‡(
	`·ªe_¨g
() < 0)

384 
·ít
->
·s_öfo
) {

385 
FTS_D
:

386 
FTS_DEFAULT
:

387 
FTS_F
:

388 
FTS_SL
:

389 
FTS_SLNONE
:

394 
FTS_DP
:

403 #ifde‡
NET2_FTS


404 i‡(!
tÊag
 || (
	`gë_©dú
(
·ít
->
·s_°©b
.
°_dev
,

405 
·ít
->
·s_°©b
.
°_öo
, &
mtime
, &
©ime
) < 0))

407 i‡(!
tÊag
 || (
	`gë_©dú
(
·ít
->
·s_°©p
->
°_dev
,

408 
·ít
->
·s_°©p
->
°_öo
, &
mtime
, &
©ime
) < 0))

411 
	`£t_·ime
(
·ít
->
·s_∑th
, 
mtime
, 
©ime
, 1);

413 
FTS_DC
:

417 
	`∑xw¨n
(1,"Fûêsy°em cy˛êfoundáà%s",
·ít
->
·s_∑th
);

419 
FTS_DNR
:

420 #ifde‡
NET2_FTS


421 
	`sysw¨n
(1, 
î∫o
,

423 
	`sysw¨n
(1, 
·ít
->
·s_î∫o
,

425 "U«bÀÅÿªad dúe˘‹y %s", 
·ít
->
·s_∑th
);

427 
FTS_ERR
:

428 #ifde‡
NET2_FTS


429 
	`sysw¨n
(1, 
î∫o
,

431 
	`sysw¨n
(1, 
·ít
->
·s_î∫o
,

435 
FTS_NS
:

436 
FTS_NSOK
:

437 #ifde‡
NET2_FTS


438 
	`sysw¨n
(1, 
î∫o
,

440 
	`sysw¨n
(1, 
·ít
->
·s_î∫o
,

442 "U«bÀÅÿac˚s†%s", 
·ít
->
·s_∑th
);

450 
¨˙
->
skù
 = 0;

451 
¨˙
->
∑d
 = 0;

452 
¨˙
->
 _∆í
 = 0;

453 
¨˙
->
 _«me
[0] = '\0';

454 #ifde‡
NET2_FTS


455 
¨˙
->
sb
 = 
·ít
->
·s_°©b
;

457 
¨˙
->
sb
 = *(
·ít
->
·s_°©p
);

470 
S_IFMT
 & 
¨˙
->
sb
.
°_mode
) {

471 
S_IFDIR
:

472 
¨˙
->
ty≥
 = 
PAX_DIR
;

473 i‡(!
tÊag
)

475 
	`add_©dú
(
·ít
->
·s_∑th
, 
¨˙
->
sb
.
°_dev
,

476 
¨˙
->
sb
.
°_öo
,ár˙->sb.
°_mtime
,

477 
¨˙
->
sb
.
°_©ime
);

479 
S_IFCHR
:

480 
¨˙
->
ty≥
 = 
PAX_CHR
;

482 
S_IFBLK
:

483 
¨˙
->
ty≥
 = 
PAX_BLK
;

485 
S_IFREG
:

492 
¨˙
->
ty≥
 = 
PAX_REG
;

493 
¨˙
->
skù
 =ár˙->
sb
.
°_size
;

495 
S_IFLNK
:

496 
¨˙
->
ty≥
 = 
PAX_SLK
;

500 i‡((
˙t
 = 
	`ªadlök
(
·ít
->
·s_∑th
, 
¨˙
->
 _«me
,

501 
PAXPATHLEN
 - 1)) < 0) {

502 
	`sysw¨n
(1, 
î∫o
, "UnableÅoÑead symlink %s",

503 
·ít
->
·s_∑th
);

510 
¨˙
->
 _«me
[
˙t
] = '\0';

511 
¨˙
->
 _∆í
 = 
˙t
;

513 
S_IFSOCK
:

519 
¨˙
->
ty≥
 = 
PAX_SCK
;

521 
S_IFIFO
:

522 
¨˙
->
ty≥
 = 
PAX_FIF
;

531 
¨˙
->
∆í
 = 
	`l_°∫˝y
◊r˙->
«me
, 
·ít
->
·s_∑th
, (arcn->name) - 1);

532 
¨˙
->
«me
[¨˙->
∆í
] = '\0';

533 
¨˙
->
‹g_«me
 = 
·ít
->
·s_∑th
;

535 
	}
}

	@pax/ftree.h

43 
	s·ªe
 {

44 *
	m‚ame
;

45 
	mªf˙t
;

46 
	mchÊg
;

47 
·ªe
 *
	mfow
;

48 } 
	tFTREE
;

	@pax/gen_subs.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)gen_subs.c 8.1 (Berkeley) 5/31/93";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/gen_subs.c,v 1.23.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

44 
	~<sys/°©.h
>

45 
	~<œngöfo.h
>

46 
	~<°döt.h
>

47 
	~<°dio.h
>

48 
	~<utmp.h
>

49 
	~<uni°d.h
>

50 
	~<°dlib.h
>

51 
	~<°rög.h
>

52 
	~"∑x.h
"

53 
	~"exã∫.h
"

62 
	#MODELEN
 20

	)

63 
	#DATELEN
 64

	)

64 
	#SIXMONTHS
 ((365 / 2Ë* 86400)

	)

65 
	#CURFRMTM
 "%b %ê%H:%M"

	)

66 
	#OLDFRMTM
 "%b %ê %Y"

	)

67 
	#CURFRMTD
 "%ê%b %H:%M"

	)

68 
	#OLDFRMTD
 "%ê%b %Y"

	)

69 #i‚de‡
UT_NAMESIZE


70 
	#UT_NAMESIZE
 8

	)

72 
	#UT_GRPSIZE
 6

	)

74 
	gd_fú°
 = -1;

82 
	$ls_li°
(
ARCHD
 *
¨˙
, 
time_t
 
now
, 
FILE
 *
Â
)

84 
°©
 *
sbp
;

85 
f_mode
[
MODELEN
];

86 
f_d©e
[
DATELEN
];

87 c⁄° *
time‰mt
;

92 i‡(!
vÊag
) {

93 ()
	`Ârötf
(
Â
, "%s\n", 
¨˙
->
«me
);

94 ()
	`fÊush
(
Â
);

98 i‡(
d_fú°
 < 0)

99 
d_fú°
 = (*
	`∆_œngöfo
(
D_MD_ORDER
) == 'd');

103 
sbp
 = &(
¨˙
->
sb
);

104 
	`°rmode
(
sbp
->
°_mode
, 
f_mode
);

109 i‡((
sbp
->
°_mtime
 + 
SIXMONTHS
Ë<
now
)

110 
time‰mt
 = 
d_fú°
 ? 
OLDFRMTD
 : 
OLDFRMTM
;

112 
time‰mt
 = 
d_fú°
 ? 
CURFRMTD
 : 
CURFRMTM
;

117 i‡(
	`°r·ime
(
f_d©e
,
DATELEN
,
time‰mt
,
	`loˇ…ime
(&(
sbp
->
°_mtime
))) == 0)

118 
f_d©e
[0] = '\0';

119 ()
	`Ârötf
(
Â
, "%s%2u %-*†%-*†", 
f_mode
, 
sbp
->
°_∆ök
,

120 
UT_NAMESIZE
, 
	`«me_uid
(
sbp
->
°_uid
, 1), 
UT_GRPSIZE
,

121 
	`«me_gid
(
sbp
->
°_gid
, 1));

126 i‡((
¨˙
->
ty≥
 =
PAX_CHR
Ë|| (¨˙->ty≥ =
PAX_BLK
))

127 #ifde‡
NET2_STAT


128 ()
	`Ârötf
(
Â
, "%4u,%4u ", 
	`MAJOR
(
sbp
->
°_rdev
),

129 
	`MINOR
(
sbp
->
°_rdev
));

131 ()
	`Ârötf
(
Â
, "%4lu,%4lu ", ()
	`MAJOR
(
sbp
->
°_rdev
),

132 ()
	`MINOR
(
sbp
->
°_rdev
));

135 #ifde‡
NET2_STAT


136 ()
	`Ârötf
(
Â
, "%9lu ", 
sbp
->
°_size
);

138 ()
	`Ârötf
(
Â
, "%9ju ", (
uötmax_t
)
sbp
->
°_size
);

145 ()
	`Ârötf
(
Â
, "%†%s", 
f_d©e
, 
¨˙
->
«me
);

146 i‡((
¨˙
->
ty≥
 =
PAX_HLK
Ë|| (¨˙->ty≥ =
PAX_HRG
))

147 ()
	`Ârötf
(
Â
, " =%s\n", 
¨˙
->
 _«me
);

148 i‡(
¨˙
->
ty≥
 =
PAX_SLK
)

149 ()
	`Ârötf
(
Â
, " => %s\n", 
¨˙
->
 _«me
);

151 ()
	`putc
('\n', 
Â
);

152 ()
	`fÊush
(
Â
);

154 
	}
}

162 
	$ls_ây
(
ARCHD
 *
¨˙
)

164 
f_d©e
[
DATELEN
];

165 
f_mode
[
MODELEN
];

166 c⁄° *
time‰mt
;

168 i‡(
d_fú°
 < 0)

169 
d_fú°
 = (*
	`∆_œngöfo
(
D_MD_ORDER
) == 'd');

171 i‡((
¨˙
->
sb
.
°_mtime
 + 
SIXMONTHS
Ë<
	`time
(
NULL
))

172 
time‰mt
 = 
d_fú°
 ? 
OLDFRMTD
 : 
OLDFRMTM
;

174 
time‰mt
 = 
d_fú°
 ? 
CURFRMTD
 : 
CURFRMTM
;

179 i‡(
	`°r·ime
(
f_d©e
, 
DATELEN
, 
time‰mt
,

180 
	`loˇ…ime
(&(
¨˙
->
sb
.
°_mtime
))) == 0)

181 
f_d©e
[0] = '\0';

182 
	`°rmode
(
¨˙
->
sb
.
°_mode
, 
f_mode
);

183 
	`ây_¥¡
("%s%†%s\n", 
f_mode
, 
f_d©e
, 
¨˙
->
«me
);

185 
	}
}

197 
	$l_°∫˝y
(*
de°
, c⁄° *
§c
, 
Àn
)

199 *
°›
;

200 *
°¨t
;

202 
°›
 = 
de°
 + 
Àn
;

203 
°¨t
 = 
de°
;

204 (
de°
 < 
°›
Ë&& (*
§c
 != '\0'))

205 *
de°
++ = *
§c
++;

206 
Àn
 = 
de°
 - 
°¨t
;

207 
de°
 < 
°›
)

208 *
de°
++ = '\0';

209 (
Àn
);

210 
	}
}

222 
u_l⁄g


223 
	$asc_ul
(*
°r
, 
Àn
, 
ba£
)

225 *
°›
;

226 
u_l⁄g
 
tvÆ
 = 0;

228 
°›
 = 
°r
 + 
Àn
;

233 (
°r
 < 
°›
) && ((*str == ' ') || (*str == '0')))

234 ++
°r
;

240 i‡(
ba£
 =
HEX
) {

241 
°r
 < 
°›
) {

242 i‡((*
°r
 >= '0') && (*str <= '9'))

243 
tvÆ
 = (tvÆ << 4Ë+ (*
°r
++ - '0');

244 i‡((*
°r
 >= 'A') && (*str <= 'F'))

245 
tvÆ
 = (tvÆ << 4Ë+ 10 + (*
°r
++ - 'A');

246 i‡((*
°r
 >= 'a') && (*str <= 'f'))

247 
tvÆ
 = (tvÆ << 4Ë+ 10 + (*
°r
++ - 'a');

252 (
°r
 < 
°›
) && (*str >= '0') && (*str <= '7'))

253 
tvÆ
 = (tvÆ << 3Ë+ (*
°r
++ - '0');

255 (
tvÆ
);

256 
	}
}

266 
	$ul_asc
(
u_l⁄g
 
vÆ
, *
°r
, 
Àn
, 
ba£
)

268 *
±
;

269 
u_l⁄g
 
digô
;

274 
±
 = 
°r
 + 
Àn
 - 1;

281 i‡(
ba£
 =
HEX
) {

282 
±
 >
°r
) {

283 i‡((
digô
 = (
vÆ
 & 0xf)) < 10)

284 *
±
-- = '0' + ()
digô
;

286 *
±
-- = 'a' + ()(
digô
 - 10);

287 i‡((
vÆ
 = (vÆ >> 4)Ë=(
u_l⁄g
)0)

291 
±
 >
°r
) {

292 *
±
-- = '0' + ()(
vÆ
 & 0x7);

293 i‡((
vÆ
 = (vÆ >> 3)Ë=(
u_l⁄g
)0)

301 
±
 >
°r
)

302 *
±
-- = '0';

303 i‡(
vÆ
 !(
u_l⁄g
)0)

306 
	}
}

308 #i‚de‡
NET2_STAT


319 
u_quad_t


320 
	$asc_uqd
(*
°r
, 
Àn
, 
ba£
)

322 *
°›
;

323 
u_quad_t
 
tvÆ
 = 0;

325 
°›
 = 
°r
 + 
Àn
;

330 (
°r
 < 
°›
) && ((*str == ' ') || (*str == '0')))

331 ++
°r
;

337 i‡(
ba£
 =
HEX
) {

338 
°r
 < 
°›
) {

339 i‡((*
°r
 >= '0') && (*str <= '9'))

340 
tvÆ
 = (tvÆ << 4Ë+ (*
°r
++ - '0');

341 i‡((*
°r
 >= 'A') && (*str <= 'F'))

342 
tvÆ
 = (tvÆ << 4Ë+ 10 + (*
°r
++ - 'A');

343 i‡((*
°r
 >= 'a') && (*str <= 'f'))

344 
tvÆ
 = (tvÆ << 4Ë+ 10 + (*
°r
++ - 'a');

349 (
°r
 < 
°›
) && (*str >= '0') && (*str <= '7'))

350 
tvÆ
 = (tvÆ << 3Ë+ (*
°r
++ - '0');

352 (
tvÆ
);

353 
	}
}

363 
	$uqd_asc
(
u_quad_t
 
vÆ
, *
°r
, 
Àn
, 
ba£
)

365 *
±
;

366 
u_quad_t
 
digô
;

371 
±
 = 
°r
 + 
Àn
 - 1;

378 i‡(
ba£
 =
HEX
) {

379 
±
 >
°r
) {

380 i‡((
digô
 = (
vÆ
 & 0xf)) < 10)

381 *
±
-- = '0' + ()
digô
;

383 *
±
-- = 'a' + ()(
digô
 - 10);

384 i‡((
vÆ
 = (vÆ >> 4)Ë=(
u_quad_t
)0)

388 
±
 >
°r
) {

389 *
±
-- = '0' + ()(
vÆ
 & 0x7);

390 i‡((
vÆ
 = (vÆ >> 3)Ë=(
u_quad_t
)0)

398 
±
 >
°r
)

399 *
±
-- = '0';

400 i‡(
vÆ
 !(
u_quad_t
)0)

403 
	}
}

	@pax/getoldopt.c

13 
	~<sys/cdefs.h
>

14 
__FBSDID
("$FreeBSD: src/bin/pax/getoldopt.c,v 1.5.22.2.4.1 2012/03/03 06:15:13 kensmith Exp $");

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<uni°d.h
>

22 
	~"∑x.h
"

23 
	~"exã∫.h
"

26 
	$gëﬁd›t
(
¨gc
, **
¨gv
, c⁄° *
›t°rög
)

28 *
key
;

29 
u£_gë›t
;

30 
c
;

31 *
∂a˚
;

33 
›èrg
 = 
NULL
;

35 i‡(
key
 =
NULL
) {

36 i‡(
¨gc
 < 2)

38 
key
 = 
¨gv
[1];

39 i‡(*
key
 == '-')

40 
u£_gë›t
++;

42 
›töd
 = 2;

45 i‡(
u£_gë›t
)

46  (
	`gë›t
(
¨gc
, 
¨gv
, 
›t°rög
));

48 
c
 = *
key
++;

49 i‡(
c
 == '\0') {

50 
key
--;

53 
∂a˚
 = 
	`°rchr
(
›t°rög
, 
c
);

55 i‡(
∂a˚
 =
NULL
 || 
c
 == ':') {

56 
	`Ârötf
(
°dîr
, "%s: unknow¿›ti⁄ %c\n", 
¨gv
[0], 
c
);

60 
∂a˚
++;

61 i‡(*
∂a˚
 == ':') {

62 i‡(
›töd
 < 
¨gc
) {

63 
›èrg
 = 
¨gv
[
›töd
];

64 
›töd
++;

66 
	`Ârötf
(
°dîr
, "%s: %cárgument missing\n",

67 
¨gv
[0], 
c
);

72  (
c
);

73 
	}
}

	@pax/options.c

35 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)options.c 8.2 (Berkeley) 4/18/94";

40 
	~<sys/cdefs.h
>

41 
__FBSDID
("$FreeBSD: src/bin/pax/options.c,v 1.31.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

43 
	~<sys/ty≥s.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/mtio.h
>

46 
	~<°dio.h
>

47 
	~<°rög.h
>

48 
	~<î∫o.h
>

49 
	~<uni°d.h
>

50 
	~<°dlib.h
>

51 
	~<limôs.h
>

52 
	~<∑ths.h
>

53 
	~"∑x.h
"

54 
	~"›ti⁄s.h
"

55 
	~"˝io.h
"

56 
	~"èr.h
"

57 
	~"exã∫.h
"

63 
	gÊgch
[] = 
FLGCH
;

64 
OPLIST
 *
	g›hód
 = 
NULL
;

65 
OPLIST
 *
	g›èû
 = 
NULL
;

67 
no_›
();

68 
¥ötÊg
();

69 
c_‰mt
(const *, const *);

70 
off_t
 
°r_of·
(*);

71 *
gëlöe
(
FILE
 *
Â
);

72 
∑x_›ti⁄s
(, **);

73 
∑x_ußge
();

74 
èr_›ti⁄s
(, **);

75 
èr_ußge
();

76 
˝io_›ti⁄s
(, **);

77 
˝io_ußge
();

80 
	#GETLINE_FILE_CORRUPT
 1

	)

81 
	#GETLINE_OUT_OF_MEM
 2

	)

82 
	ggëlöe_îr‹
;

85 
	#GZIP_CMD
 "gzù"

	)

86 
	#COMPRESS_CMD
 "com¥ess"

	)

87 
	#BZIP2_CMD
 "bzù2"

	)

98 
FSUB
 
	gfsub
[] = {

100 {"b˝io", 5120, (
HD_BCPIO
), 1, 0, 0, 1, 
b˝io_id
, 
˝io_°rd
,

101 
b˝io_rd
, 
b˝io_ídrd
, 
˝io_°wr
, 
b˝io_wr
, 
˝io_ídwr
, 
˝io_åaû
,

102 
NULL
, 
rd_wrfûe
, 
wr_rdfûe
, 
bad_›t
},

105 {"˝io", 5120, (
HD_CPIO
), 1, 0, 0, 1, 
˝io_id
, 
˝io_°rd
,

106 
˝io_rd
, 
˝io_ídrd
, 
˝io_°wr
, 
˝io_wr
, 
˝io_ídwr
, 
˝io_åaû
,

107 
NULL
, 
rd_wrfûe
, 
wr_rdfûe
, 
bad_›t
},

110 {"sv4˝io", 5120, (
HD_VCPIO
), 1, 0, 0, 1, 
v˝io_id
, 
˝io_°rd
,

111 
v˝io_rd
, 
v˝io_ídrd
, 
˝io_°wr
, 
v˝io_wr
, 
˝io_ídwr
, 
˝io_åaû
,

112 
NULL
, 
rd_wrfûe
, 
wr_rdfûe
, 
bad_›t
},

115 {"sv4¸c", 5120, (
HD_VCPIO
), 1, 0, 0, 1, 
¸c_id
, 
¸c_°rd
,

116 
v˝io_rd
, 
v˝io_ídrd
, 
¸c_°wr
, 
v˝io_wr
, 
˝io_ídwr
, 
˝io_åaû
,

117 
NULL
, 
rd_wrfûe
, 
wr_rdfûe
, 
bad_›t
},

120 {"èr", 10240, 
BLKMULT
, 0, 1, BLKMULT, 0, 
èr_id
, 
no_›
,

121 
èr_rd
, 
èr_ídrd
, 
no_›
, 
èr_wr
, 
èr_ídwr
, 
NULL
, 
èr_åaû
,

122 
rd_wrfûe
, 
wr_rdfûe
, 
èr_›t
},

125 {"u°¨", 10240, 
BLKMULT
, 0, 1, BLKMULT, 0, 
u°¨_id
, 
u°¨_°rd
,

126 
u°¨_rd
, 
èr_ídrd
, 
u°¨_°wr
, 
u°¨_wr
, 
èr_ídwr
, 
NULL
, 
èr_åaû
,

127 
rd_wrfûe
, 
wr_rdfûe
, 
bad_›t
},

129 
	#F_OCPIO
 0

	)

130 
	#F_ACPIO
 1

	)

131 
	#F_CPIO
 3

	)

132 
	#F_OTAR
 4

	)

133 
	#F_TAR
 5

	)

134 
	#DEFLT
 5

	)

141 
	gf‹d
[] = {5, 4, 3, 2, 1, 0, -1 };

150 
	$›ti⁄s
(
¨gc
, **
¨gv
)

156 i‡((
¨gv0
 = 
	`°ºchr
(
¨gv
[0], '/')Ë!
NULL
)

157 
¨gv0
++;

159 
¨gv0
 = 
¨gv
[0];

161 i‡(
	`°rcmp
(
NM_TAR
, 
¨gv0
) == 0) {

162 
	`èr_›ti⁄s
(
¨gc
, 
¨gv
);

165 i‡(
	`°rcmp
(
NM_CPIO
, 
¨gv0
) == 0) {

166 
	`˝io_›ti⁄s
(
¨gc
, 
¨gv
);

172 
¨gv0
 = 
NM_PAX
;

173 
	`∑x_›ti⁄s
(
¨gc
, 
¨gv
);

175 
	}
}

184 
	$∑x_›ti⁄s
(
¨gc
, **
¨gv
)

186 
c
;

187 
size_t
 
i
;

188 
Êg
 = 0;

189 
bÊg
 = 0;

190 *
±
;

191 
FSUB
 
tmp
;

196 (
c
=
	`gë›t
(
¨gc
,
¨gv
,"ab:cdf:iklno:p:rs:tuvwx:zB:DE:G:HLPT:U:XYZ"))

198 
c
) {

203 
Êg
 |
AF
;

209 
Êg
 |
BF
;

210 i‡((
wrblksz
 = ()
	`°r_of·
(
›èrg
)) <= 0) {

211 
	`∑xw¨n
(1, "InvÆid block sizê%s", 
›èrg
);

212 
	`∑x_ußge
();

219 
cÊag
 = 1;

220 
Êg
 |
CF
;

226 
dÊag
 = 1;

227 
Êg
 |
DF
;

233 
¨˙ame
 = 
›èrg
;

234 
Êg
 |
FF
;

240 
iÊag
 = 1;

241 
Êg
 |
IF
;

247 
kÊag
 = 1;

248 
Êg
 |
KF
;

254 
lÊag
 = 1;

255 
Êg
 |
LF
;

261 
nÊag
 = 1;

262 
Êg
 |
NF
;

268 
Êg
 |
OF
;

269 i‡(
	`›t_add
(
›èrg
) < 0)

270 
	`∑x_ußge
();

276 
±
 = 
›èrg
; *pt != '\0'; ++pt) {

277 *
±
) {

282 
∑time
 = 0;

289 
pids
 = 1;

290 
pmode
 = 1;

291 
∑time
 = 1;

292 
pmtime
 = 1;

298 
pmtime
 = 0;

304 
pids
 = 1;

310 
pmode
 = 1;

313 
	`∑xw¨n
(1, "InvÆid -∞°rög: %c", *
±
);

314 
	`∑x_ußge
();

318 
Êg
 |
PF
;

324 
Êg
 |
RF
;

330 i‡(
	`ªp_add
(
›èrg
) < 0) {

331 
	`∑x_ußge
();

334 
Êg
 |
SF
;

340 
tÊag
 = 1;

341 
Êg
 |
TF
;

347 
uÊag
 = 1;

348 
Êg
 |
UF
;

354 
vÊag
 = 1;

355 
Êg
 |
VF
;

361 
Êg
 |
WF
;

367 
tmp
.
«me
 = 
›èrg
;

368 i‡((
‰mt
 = (
FSUB
 *)
	`b£¨ch
((*)&
tmp
, (*)
fsub
,

369 (
fsub
)/(
FSUB
), (FSUB), 
c_‰mt
)Ë!
NULL
) {

370 
Êg
 |
XF
;

373 
	`∑xw¨n
(1, "Unknow¿-x f‹m©: %s", 
›èrg
);

374 ()
	`Âuts
("∑x: Know¿-x f‹m©†¨e:", 
°dîr
);

375 
i
 = 0; i < ((
fsub
)/(
FSUB
)); ++i)

376 ()
	`Ârötf
(
°dîr
, " %s", 
fsub
[
i
].
«me
);

377 ()
	`Âuts
("\n\n", 
°dîr
);

378 
	`∑x_ußge
();

384 
gzù_¥ogøm
 = 
GZIP_CMD
;

391 i‡((
wæimô
 = 
	`°r_of·
(
›èrg
)) <= 0) {

392 
	`∑xw¨n
(1, "InvÆid wrôêlimô %s", 
›èrg
);

393 
	`∑x_ußge
();

395 i‡(
wæimô
 % 
BLKMULT
) {

396 
	`∑xw¨n
(1, "WriteÜimit isÇotá %d byte multiple",

397 
BLKMULT
);

398 
	`∑x_ußge
();

400 
Êg
 |
CBF
;

407 
DÊag
 = 1;

408 
Êg
 |
CDF
;

416 
Êg
 |
CEF
;

417 i‡(
	`°rcmp
(
NONE
, 
›èrg
) == 0)

418 
maxÊt
 = -1;

419 i‡((
maxÊt
 = 
	`©oi
(
›èrg
)) < 0) {

420 
	`∑xw¨n
(1, "Error count value must beÖositive");

421 
	`∑x_ußge
();

429 i‡(
	`gΩ_add
(
›èrg
) < 0) {

430 
	`∑x_ußge
();

433 
Êg
 |
CGF
;

439 
HÊag
 = 1;

440 
Êg
 |
CHF
;

446 
LÊag
 = 1;

447 
Êg
 |
CLF
;

453 
LÊag
 = 0;

454 
Êg
 |
CPF
;

461 i‡(
	`ång_add
(
›èrg
) < 0) {

462 
	`∑x_ußge
();

465 
Êg
 |
CTF
;

472 i‡(
	`u§_add
(
›èrg
) < 0) {

473 
	`∑x_ußge
();

476 
Êg
 |
CUF
;

482 
XÊag
 = 1;

483 
Êg
 |
CXF
;

490 
YÊag
 = 1;

491 
Êg
 |
CYF
;

498 
ZÊag
 = 1;

499 
Êg
 |
CZF
;

502 
	`∑x_ußge
();

512 i‡(
	`ISLIST
(
Êg
)) {

513 
a˘
 = 
LIST
;

514 
li°f
 = 
°dout
;

515 
bÊg
 = 
Êg
 & 
BDLIST
;

516 } i‡(
	`ISEXTRACT
(
Êg
)) {

517 
a˘
 = 
EXTRACT
;

518 
bÊg
 = 
Êg
 & 
BDEXTR
;

519 } i‡(
	`ISARCHIVE
(
Êg
)) {

520 
a˘
 = 
ARCHIVE
;

521 
bÊg
 = 
Êg
 & 
BDARCH
;

522 } i‡(
	`ISAPPND
(
Êg
)) {

523 
a˘
 = 
APPND
;

524 
bÊg
 = 
Êg
 & 
BDARCH
;

525 } i‡(
	`ISCOPY
(
Êg
)) {

526 
a˘
 = 
COPY
;

527 
bÊg
 = 
Êg
 & 
BDCOPY
;

529 
	`∑x_ußge
();

530 i‡(
bÊg
) {

531 
	`¥ötÊg
(
Êg
);

532 
	`∑x_ußge
();

540 i‡(!(
Êg
 & 
XF
Ë&& (
a˘
 =
ARCHIVE
))

541 
‰mt
 = &(
fsub
[
DEFLT
]);

546 
a˘
) {

547 
LIST
:

548 
EXTRACT
:

549 ; 
›töd
 < 
¨gc
; optind++)

550 i‡(
	`∑t_add
(
¨gv
[
›töd
], 
NULL
) < 0)

551 
	`∑x_ußge
();

553 
COPY
:

554 i‡(
›töd
 >
¨gc
) {

555 
	`∑xw¨n
(0, "Destination directory wasÇot supplied");

556 
	`∑x_ußge
();

558 --
¨gc
;

559 
dú±r
 = 
¨gv
[
¨gc
];

561 
ARCHIVE
:

562 
APPND
:

563 ; 
›töd
 < 
¨gc
; optind++)

564 i‡(
	`·ªe_add
(
¨gv
[
›töd
], 0) < 0)

565 
	`∑x_ußge
();

569 
maxÊt
 = 0;

572 
	}
}

582 
	$èr_›ti⁄s
(
¨gc
, **
¨gv
)

584 
c
;

585 
f°dö
 = 0;

586 
OÊag
 = 0;

587 
nöcfûes
 = 0;

588 
öcfûes_max
 = 0;

589 
	söcfûe
 {

590 *
fûe
;

591 *
dú
;

593 
öcfûe
 *
öcfûes
 = 
NULL
;

598 
rmÀad¶ash
 = 1;

603 (
c
 = 
	`gëﬁd›t
(
¨gc
, 
¨gv
,

605 
c
) {

610 i‡((
wrblksz
 = ()
	`°r_of·
(
›èrg
)) <= 0) {

611 
	`∑xw¨n
(1, "InvÆid block sizê%s", 
›èrg
);

612 
	`èr_ußge
();

614 
wrblksz
 *= 512;

620 
a˘
 = 
ARCHIVE
;

626 
maxÊt
 = 0;

632 i‡((
›èrg
[0] == '-') && (optarg[1]== '\0')) {

636 
f°dö
 = 1;

637 
¨˙ame
 = 
NULL
;

640 
f°dö
 = 0;

641 
¨˙ame
 = 
›èrg
;

647 
LÊag
 = 1;

654 
gzù_¥ogøm
 = 
BZIP2_CMD
;

660 
pmtime
 = 0;

663 i‡(
	`›t_add
("write_opt=nodir") < 0)

664 
	`èr_ußge
();

666 
OÊag
 = 1;

672 
pmode
 = 1;

673 
pids
 = 1;

679 
nÊag
 = 1;

686 
a˘
 = 
APPND
;

692 i‡(
	`ªp_add
(
›èrg
) < 0) {

693 
	`èr_ußge
();

701 
a˘
 = 
LIST
;

707 
vÊag
++;

713 
iÊag
 = 1;

720 
a˘
 = 
EXTRACT
;

721 
pmtime
 = 1;

727 
gzù_¥ogøm
 = 
GZIP_CMD
;

735 
chd«me
 = 
›èrg
;

741 
HÊag
 = 1;

744 i‡(++
nöcfûes
 > 
öcfûes_max
) {

745 
öcfûes_max
 = 
nöcfûes
 + 3;

746 
öcfûes
 = 
	`ªÆloc
(incfiles,

747 (*
öcfûes
Ë* 
öcfûes_max
);

748 i‡(
öcfûes
 =
NULL
) {

749 
	`∑xw¨n
(0, "UnableÅoállocate space "

751 
	`exô
(1);

754 
öcfûes
[
nöcfûes
 - 1].
fûe
 = 
›èrg
;

755 
öcfûes
[
nöcfûes
 - 1].
dú
 = 
chd«me
;

761 
LÊag
 = 1;

767 
rmÀad¶ash
 = 0;

773 
XÊag
 = 1;

779 
gzù_¥ogøm
 = 
COMPRESS_CMD
;

782 
¨˙ame
 = 
DEV_0
;

785 
¨˙ame
 = 
DEV_1
;

788 
¨˙ame
 = 
DEV_4
;

791 
¨˙ame
 = 
DEV_5
;

794 
¨˙ame
 = 
DEV_7
;

797 
¨˙ame
 = 
DEV_8
;

800 
	`èr_ußge
();

804 
¨gc
 -
›töd
;

805 
¨gv
 +
›töd
;

808 i‡(
f°dö
 =1 && 
a˘
 =
ARCHIVE
)

809 
li°f
 = 
°dîr
;

811 
li°f
 = 
°dout
;

814 i‡((
a˘
 =
ARCHIVE
 ||á˘ =
APPND
Ë&& 
¨gc
 =0 && 
nöcfûes
 == 0)

815 
	`exô
(0);

821 i‡(
a˘
 =
ARCHIVE
 ||á˘ =
APPND
)

822 
‰mt
 = &(
fsub
[
OÊag
 ? 
F_OTAR
 : 
F_TAR
]);

823 i‡(
OÊag
) {

824 
	`∑xw¨n
(1, "The -O/-o optionsáre only valid when writingánárchive");

825 
	`èr_ußge
();

831 
a˘
) {

832 
LIST
:

833 
EXTRACT
:

836 
ßw∑t
 = 0;

837 *
fûe
, *
dú
 = 
NULL
;

839 
nöcfûes
 || *
¨gv
 !
NULL
) {

847 i‡(
nöcfûes
) {

848 
fûe
 = 
öcfûes
->file;

849 
dú
 = 
öcfûes
->dir;

850 
öcfûes
++;

851 
nöcfûes
--;

852 } i‡(
	`°rcmp
(*
¨gv
, "-I") == 0) {

853 i‡(*++
¨gv
 =
NULL
)

855 
fûe
 = *
¨gv
++;

856 
dú
 = 
chd«me
;

858 
fûe
 = 
NULL
;

859 i‡(
fûe
 !
NULL
) {

860 
FILE
 *
Â
;

861 *
°r
;

863 i‡(
	`°rcmp
(
fûe
, "-") == 0)

864 
Â
 = 
°dö
;

865 i‡((
Â
 = 
	`f›í
(
fûe
, "r")Ë=
NULL
) {

866 
	`∑xw¨n
(1, "U«bÀÅÿ›í fûê'%s' f‹Ñód", 
fûe
);

867 
	`èr_ußge
();

869 (
°r
 = 
	`gëlöe
(
Â
)Ë!
NULL
) {

870 i‡(
	`∑t_add
(
°r
, 
dú
) < 0)

871 
	`èr_ußge
();

872 
ßw∑t
 = 1;

874 i‡(
	`°rcmp
(
fûe
, "-") != 0)

875 
	`f˛o£
(
Â
);

876 i‡(
gëlöe_îr‹
) {

877 
	`∑xw¨n
(1, "ProbÀm wôh fûê'%s'", 
fûe
);

878 
	`èr_ußge
();

880 } i‡(
	`°rcmp
(*
¨gv
, "-C") == 0) {

881 i‡(*++
¨gv
 =
NULL
)

883 
chd«me
 = *
¨gv
++;

884 } i‡(
	`∑t_add
(*
¨gv
++, 
chd«me
) < 0)

885 
	`èr_ußge
();

887 
ßw∑t
 = 1;

894 i‡(
ßw∑t
 > 0)

895 
chd«me
 = 
NULL
;

898 
ARCHIVE
:

899 
APPND
:

900 i‡(
chd«me
 !
NULL
) {

901 i‡(
	`·ªe_add
(
chd«me
, 1) < 0)

902 
	`èr_ußge
();

905 
nöcfûes
 || *
¨gv
 !
NULL
) {

906 *
fûe
, *
dú
 = 
NULL
;

914 i‡(
nöcfûes
) {

915 
fûe
 = 
öcfûes
->file;

916 
dú
 = 
öcfûes
->dir;

917 
öcfûes
++;

918 
nöcfûes
--;

919 } i‡(
	`°rcmp
(*
¨gv
, "-I") == 0) {

920 i‡(*++
¨gv
 =
NULL
)

922 
fûe
 = *
¨gv
++;

923 
dú
 = 
NULL
;

925 
fûe
 = 
NULL
;

926 i‡(
fûe
 !
NULL
) {

927 
FILE
 *
Â
;

928 *
°r
;

931 i‡(
dú
) {

932 i‡(
	`·ªe_add
(
dú
, 1) < 0)

933 
	`èr_ußge
();

936 i‡(
	`°rcmp
(
fûe
, "-") == 0)

937 
Â
 = 
°dö
;

938 i‡((
Â
 = 
	`f›í
(
fûe
, "r")Ë=
NULL
) {

939 
	`∑xw¨n
(1, "U«bÀÅÿ›í fûê'%s' f‹Ñód", 
fûe
);

940 
	`èr_ußge
();

942 (
°r
 = 
	`gëlöe
(
Â
)Ë!
NULL
) {

943 i‡(
	`·ªe_add
(
°r
, 0) < 0)

944 
	`èr_ußge
();

946 i‡(
	`°rcmp
(
fûe
, "-") != 0)

947 
	`f˛o£
(
Â
);

948 i‡(
gëlöe_îr‹
) {

949 
	`∑xw¨n
(1, "Problem with file '%s'",

950 
fûe
);

951 
	`èr_ußge
();

953 } i‡(
	`°rcmp
(*
¨gv
, "-C") == 0) {

954 i‡(*++
¨gv
 =
NULL
)

956 i‡(
	`·ªe_add
(*
¨gv
++, 1) < 0)

957 
	`èr_ußge
();

958 } i‡(
	`·ªe_add
(*
¨gv
++, 0) < 0)

959 
	`èr_ußge
();

964 
maxÊt
 = 0;

967 i‡(!
f°dö
 && ((
¨˙ame
 =
NULL
) || (*arcname == '\0'))) {

968 
¨˙ame
 = 
	`gëív
("TAPE");

969 i‡((
¨˙ame
 =
NULL
) || (*arcname == '\0'))

970 
¨˙ame
 = 
_PATH_DEFTAPE
;

972 
	}
}

975 
	$mk∑th
(*
∑th
)

977 
°©
 
sb
;

978 *
¶ash
;

979 
d⁄e
 = 0;

981 
¶ash
 = 
∑th
;

983 !
d⁄e
) {

984 
¶ash
 +
	`°r•n
(slash, "/");

985 
¶ash
 +
	`°rc•n
(slash, "/");

987 
d⁄e
 = (*
¶ash
 == '\0');

988 *
¶ash
 = '\0';

990 i‡(
	`°©
(
∑th
, &
sb
)) {

991 i‡(
î∫o
 !
ENOENT
 || 
	`mkdú
(
∑th
, 0777)) {

992 
	`∑xw¨n
(1, "%s", 
∑th
);

995 } i‡(!
	`S_ISDIR
(
sb
.
°_mode
)) {

996 
	`sysw¨n
(1, 
ENOTDIR
, "%s", 
∑th
);

1000 i‡(!
d⁄e
)

1001 *
¶ash
 = '/';

1005 
	}
}

1013 
	$˝io_›ti⁄s
(
¨gc
, **
¨gv
)

1015 
c
;

1016 
size_t
 
i
;

1017 *
°r
;

1018 
FSUB
 
tmp
;

1019 
FILE
 *
Â
;

1021 
kÊag
 = 1;

1022 
pids
 = 1;

1023 
pmode
 = 1;

1024 
pmtime
 = 0;

1025 
¨˙ame
 = 
NULL
;

1026 
dÊag
 = 1;

1027 
a˘
 = -1;

1028 
nodús
 = 1;

1029 (
c
=
	`gë›t
(
¨gc
,
¨gv
,"abcdfiklmoprstuvzABC:E:F:H:I:LO:SZ6")) != -1)

1030 
c
) {

1035 
tÊag
 = 1;

1046 
‰mt
 = &(
fsub
[
F_ACPIO
]);

1052 
nodús
 = 0;

1058 
cÊag
 = 1;

1064 
a˘
 = 
EXTRACT
;

1072 
lÊag
 = 1;

1078 
pmtime
 = 1;

1084 
a˘
 = 
ARCHIVE
;

1085 
‰mt
 = &(
fsub
[
F_CPIO
]);

1091 
a˘
 = 
COPY
;

1097 
iÊag
 = 1;

1108 
a˘
 = 
LIST
;

1109 
li°f
 = 
°dout
;

1115 
kÊag
 = 0;

1121 
vÊag
 = 1;

1127 
gzù_¥ogøm
 = 
GZIP_CMD
;

1133 
a˘
 = 
APPND
;

1139 
wrblksz
 = 5120;

1145 
wrblksz
 = 
	`©oi
(
›èrg
);

1151 i‡((
Â
 = 
	`f›í
(
›èrg
, "r")Ë=
NULL
) {

1152 
	`∑xw¨n
(1, "U«bÀÅÿ›í fûê'%s' f‹Ñód", 
›èrg
);

1153 
	`˝io_ußge
();

1155 (
°r
 = 
	`gëlöe
(
Â
)Ë!
NULL
) {

1156 
	`∑t_add
(
°r
, 
NULL
);

1158 
	`f˛o£
(
Â
);

1159 i‡(
gëlöe_îr‹
) {

1160 
	`∑xw¨n
(1, "ProbÀm wôh fûê'%s'", 
›èrg
);

1161 
	`˝io_ußge
();

1170 i‡((
›èrg
[0] == '-') && (optarg[1]== '\0')) {

1174 
¨˙ame
 = 
NULL
;

1177 
¨˙ame
 = 
›èrg
;

1183 
tmp
.
«me
 = 
›èrg
;

1184 i‡((
‰mt
 = (
FSUB
 *)
	`b£¨ch
((*)&
tmp
, (*)
fsub
,

1185 (
fsub
)/(
FSUB
), (FSUB), 
c_‰mt
)Ë!
NULL
)

1187 
	`∑xw¨n
(1, "Unknow¿-H f‹m©: %s", 
›èrg
);

1188 ()
	`Âuts
("˝io: Know¿-H f‹m©†¨e:", 
°dîr
);

1189 
i
 = 0; i < ((
fsub
)/(
FSUB
)); ++i)

1190 ()
	`Ârötf
(
°dîr
, " %s", 
fsub
[
i
].
«me
);

1191 ()
	`Âuts
("\n\n", 
°dîr
);

1192 
	`˝io_ußge
();

1198 
LÊag
 = 1;

1209 
gzù_¥ogøm
 = 
COMPRESS_CMD
;

1215 
‰mt
 = &(
fsub
[
F_OCPIO
]);

1219 
	`˝io_ußge
();

1222 
¨gc
 -
›töd
;

1223 
¨gv
 +
›töd
;

1228 
a˘
) {

1229 
LIST
:

1230 
EXTRACT
:

1231 *
¨gv
 !
NULL
)

1232 i‡(
	`∑t_add
(*
¨gv
++, 
NULL
) < 0)

1233 
	`˝io_ußge
();

1235 
COPY
:

1236 i‡(*
¨gv
 =
NULL
) {

1237 
	`∑xw¨n
(0, "Destination directory wasÇot supplied");

1238 
	`˝io_ußge
();

1240 
dú±r
 = *
¨gv
;

1241 i‡(
	`mk∑th
(
dú±r
) < 0)

1242 
	`˝io_ußge
();

1243 --
¨gc
;

1244 ++
¨gv
;

1246 
ARCHIVE
:

1247 
APPND
:

1248 i‡(*
¨gv
 !
NULL
)

1249 
	`˝io_ußge
();

1253 
maxÊt
 = 0;

1254 (
°r
 = 
	`gëlöe
(
°dö
)Ë!
NULL
) {

1255 
	`·ªe_add
(
°r
, 0);

1257 i‡(
gëlöe_îr‹
) {

1258 
	`∑xw¨n
(1, "Problem whileÑeading stdin");

1259 
	`˝io_ußge
();

1263 
	`˝io_ußge
();

1266 
	}
}

1274 
	$¥ötÊg
(
Êg
)

1276 
nxt
;

1277 
pos
 = 0;

1279 ()
	`Ârötf
(
°dîr
,"%s: InvÆid combö©i⁄ o‡›ti⁄s:", 
¨gv0
);

1280 (
nxt
 = 
	`ffs
(
Êg
)) != 0) {

1281 
Êg
 = flg >> 
nxt
;

1282 
pos
 +
nxt
;

1283 ()
	`Ârötf
(
°dîr
, " -%c", 
Êgch
[
pos
-1]);

1285 ()
	`putc
('\n', 
°dîr
);

1286 
	}
}

1295 
	$c_‰mt
(c⁄° *
a
, c⁄° *
b
)

1297 (
	`°rcmp
(((c⁄° 
FSUB
 *)
a
)->
«me
, ((c⁄° FSUB *)
b
)->name));

1298 
	}
}

1308 
OPLIST
 *

1309 
	$›t_√xt
()

1311 
OPLIST
 *
›t
;

1313 i‡((
›t
 = 
›hód
Ë!
NULL
)

1314 
›hód
 = ophód->
fow
;

1315 (
›t
);

1316 
	}
}

1325 
	$bad_›t
()

1327 
OPLIST
 *
›t
;

1329 i‡(
›hód
 =
NULL
)

1334 
	`∑xw¨n
(1,"These format optionsáreÇot supported");

1335 (
›t
 = 
	`›t_√xt
()Ë!
NULL
)

1336 ()
	`Ârötf
(
°dîr
, "\t%†%s\n", 
›t
->
«me
, o±->
vÆue
);

1337 
	`∑x_ußge
();

1339 
	}
}

1351 
	$›t_add
(c⁄° *
°r
)

1353 
OPLIST
 *
›t
;

1354 *
‰±
;

1355 *
±
;

1356 *
íd±
;

1357 *
l°r
;

1359 i‡((
°r
 =
NULL
) || (*str == '\0')) {

1360 
	`∑xw¨n
(0, "Invalid optionÇame");

1363 i‡((
l°r
 = 
	`°rdup
(
°r
)Ë=
NULL
) {

1364 
	`∑xw¨n
(0, "UnableÅoállocate space for optionÜist");

1367 
‰±
 = 
íd±
 = 
l°r
;

1374 (
‰±
 !
NULL
) && (*frpt != '\0')) {

1375 i‡((
íd±
 = 
	`°rchr
(
‰±
, ',')Ë!
NULL
)

1376 *
íd±
 = '\0';

1377 i‡((
±
 = 
	`°rchr
(
‰±
, '=')Ë=
NULL
) {

1378 
	`∑xw¨n
(0, "Invalid options format");

1379 
	`‰ì
(
l°r
);

1382 i‡((
›t
 = (
OPLIST
 *)
	`mÆloc
((OPLIST))Ë=
NULL
) {

1383 
	`∑xw¨n
(0, "UnableÅoállocate space for optionÜist");

1384 
	`‰ì
(
l°r
);

1387 *
±
++ = '\0';

1388 
›t
->
«me
 = 
‰±
;

1389 
›t
->
vÆue
 = 
±
;

1390 
›t
->
fow
 = 
NULL
;

1391 i‡(
íd±
 !
NULL
)

1392 
‰±
 = 
íd±
 + 1;

1394 
‰±
 = 
NULL
;

1395 i‡(
›hód
 =
NULL
) {

1396 
›èû
 = 
›hód
 = 
›t
;

1399 
›èû
->
fow
 = 
›t
;

1400 
›èû
 = 
›t
;

1403 
	}
}

1420 
off_t


1421 
	$°r_of·
(*
vÆ
)

1423 *
ex¥
;

1424 
off_t
 
num
, 
t
;

1426 #ifde‡
NET2_STAT


1427 
num
 = 
	`°πﬁ
(
vÆ
, &
ex¥
, 0);

1428 i‡((
num
 =
LONG_MAX
Ë|| (num <0Ë|| (
ex¥
 =
vÆ
))

1430 
num
 = 
	`°πoq
(
vÆ
, &
ex¥
, 0);

1431 i‡((
num
 =
QUAD_MAX
Ë|| (num <0Ë|| (
ex¥
 =
vÆ
))

1435 *
ex¥
) {

1437 
t
 = 
num
;

1438 
num
 *= 512;

1439 i‡(
t
 > 
num
)

1441 ++
ex¥
;

1444 
t
 = 
num
;

1445 
num
 *= 1024;

1446 i‡(
t
 > 
num
)

1448 ++
ex¥
;

1451 
t
 = 
num
;

1452 
num
 *= 1048576;

1453 i‡(
t
 > 
num
)

1455 ++
ex¥
;

1458 
t
 = 
num
;

1459 
num
 *= ();

1460 i‡(
t
 > 
num
)

1462 ++
ex¥
;

1466 *
ex¥
) {

1471 
t
 = 
num
;

1472 
num
 *
	`°r_of·
(
ex¥
 + 1);

1473 i‡(
t
 > 
num
)

1479 (
num
);

1480 
	}
}

1483 
	$gëlöe
(
FILE
 *
f
)

1485 *
«me
, *
ãmp
;

1486 
size_t
 
Àn
;

1488 
«me
 = 
	`fgë 
(
f
, &
Àn
);

1489 i‡(!
«me
) {

1490 
gëlöe_îr‹
 = 
	`„º‹
(
f
Ë? 
GETLINE_FILE_CORRUPT
 : 0;

1493 i‡(
«me
[
Àn
-1] != '\n')

1494 
Àn
++;

1495 
ãmp
 = 
	`mÆloc
(
Àn
);

1496 i‡(!
ãmp
) {

1497 
gëlöe_îr‹
 = 
GETLINE_OUT_OF_MEM
;

1500 
	`mem˝y
(
ãmp
, 
«me
, 
Àn
-1);

1501 
ãmp
[
Àn
-1] = 0;

1502 (
ãmp
);

1503 
	}
}

1513 
	$no_›
()

1516 
	}
}

1524 
	$∑x_ußge
()

1526 ()
	`Âuts
("ußge:Öax [-cdnvz] [-EÜimô] [-‡¨chive] ", 
°dîr
);

1527 ()
	`Âuts
("[-†ª∂°r] ... [-U u£r] ...", 
°dîr
);

1528 ()
	`Âuts
("\n [-G group] ... ", 
°dîr
);

1529 ()
	`Âuts
("[-T [‰om_d©e][,to_d©e]] ... ", 
°dîr
);

1530 ()
	`Âuts
("[∑âî¿...]\n", 
°dîr
);

1531 ()
	`Âuts
("Öax -∏[-cdiknuvzDYZ] [-EÜimô] ", 
°dîr
);

1532 ()
	`Âuts
("[-‡¨chive] [-ÿ›ti⁄s] ... \n", 
°dîr
);

1533 ()
	`Âuts
(" [-∞°rög] ... [-†ª∂°r] ... ", 
°dîr
);

1534 ()
	`Âuts
("[-U u£r] ... [-G group] ...\n ", 
°dîr
);

1535 ()
	`Âuts
("[-T [‰om_d©e][,to_d©e]] ... ", 
°dîr
);

1536 ()
	`Âuts
(" [∑âî¿...]\n", 
°dîr
);

1537 ()
	`Âuts
("Öax -w [-dôuvzHLPX] [-b blocksize] ", 
°dîr
);

1538 ()
	`Âuts
("[ [-a] [-‡¨chive] ] [-x f‹m©] \n", 
°dîr
);

1539 ()
	`Âuts
(" [-B byãs] [-†ª∂°r] ... ", 
°dîr
);

1540 ()
	`Âuts
("[-ÿ›ti⁄s] ... [-U u£r] ...", 
°dîr
);

1541 ()
	`Âuts
("\n [-G group] ... ", 
°dîr
);

1542 ()
	`Âuts
("[-T [‰om_d©e][,to_d©e][/[c][m]]] ... ", 
°dîr
);

1543 ()
	`Âuts
("[fûê...]\n", 
°dîr
);

1544 ()
	`Âuts
("Öax -∏-w [-dik tuvDHLPXYZ] ", 
°dîr
);

1545 ()
	`Âuts
("[-∞°rög] ... [-†ª∂°r] ...", 
°dîr
);

1546 ()
	`Âuts
("\n [-U u£r] ... [-G group] ... ", 
°dîr
);

1547 ()
	`Âuts
("[-T [‰om_d©e][,to_d©e][/[c][m]]] ... ", 
°dîr
);

1548 ()
	`Âuts
("\n [fûê...] dúe˘‹y\n", 
°dîr
);

1549 
	`exô
(1);

1550 
	}
}

1558 
	$èr_ußge
()

1560 ()
	`Âuts
("usage:Åar [-]{crtux}[-befhjmopqsvwyzHLOPXZ014578] [blocksize] ",

1561 
°dîr
);

1562 ()
	`Âuts
("[archive] [replstr] [-C directory] [-I file] [file ...]\n",

1563 
°dîr
);

1564 
	`exô
(1);

1565 
	}
}

1573 
	$˝io_ußge
()

1575 ()
	`Âuts
("ußge: cpiÿ-ÿ[-aABcLvVzZ] [-C byãs] [-H f‹m©] [-Oárchive]\n", 
°dîr
);

1576 ()
	`Âuts
(" [-Fárchive] <Çame-li° [>árchive]\n", 
°dîr
);

1577 ()
	`Âuts
(" cpiÿ-ò[-bBcdfmƒsStuvVzZ6] [-C byãs] [-E fûe] [-H f‹m©]\n", 
°dîr
);

1578 ()
	`Âuts
(" [-Iárchive] [-Fárchive] [∑âîn...] [<árchive]\n", 
°dîr
);

1579 ()
	`Âuts
(" cpiÿ-∞[-adlLmuvV] de°ö©i⁄-dúe˘‹y <Çame-li°\n", 
°dîr
);

1580 
	`exô
(1);

1581 
	}
}

	@pax/options.h

41 
	#NM_TAR
 "èr"

	)

42 
	#NM_CPIO
 "˝io"

	)

43 
	#NM_PAX
 "∑x"

	)

50 
	#NONE
 "n⁄e"

	)

55 
	#AF
 0x00000001

	)

56 
	#BF
 0x00000002

	)

57 
	#CF
 0x00000004

	)

58 
	#DF
 0x00000008

	)

59 
	#FF
 0x00000010

	)

60 
	#IF
 0x00000020

	)

61 
	#KF
 0x00000040

	)

62 
	#LF
 0x00000080

	)

63 
	#NF
 0x00000100

	)

64 
	#OF
 0x00000200

	)

65 
	#PF
 0x00000400

	)

66 
	#RF
 0x00000800

	)

67 
	#SF
 0x00001000

	)

68 
	#TF
 0x00002000

	)

69 
	#UF
 0x00004000

	)

70 
	#VF
 0x00008000

	)

71 
	#WF
 0x00010000

	)

72 
	#XF
 0x00020000

	)

73 
	#CBF
 0x00040000

	)

74 
	#CDF
 0x00080000

	)

75 
	#CEF
 0x00100000

	)

76 
	#CGF
 0x00200000

	)

77 
	#CHF
 0x00400000

	)

78 
	#CLF
 0x00800000

	)

79 
	#CPF
 0x01000000

	)

80 
	#CTF
 0x02000000

	)

81 
	#CUF
 0x04000000

	)

82 
	#CXF
 0x08000000

	)

83 
	#CYF
 0x10000000

	)

84 
	#CZF
 0x20000000

	)

90 
	#FLGCH
 "abcdfik ›r°uvwxBDEGHLPTUXYZ"

	)

96 
	#ISLIST
(
x
Ë(((xË& (
RF
|
WF
)Ë=0)

	)

97 
	#ISEXTRACT
(
x
Ë(((xË& (
RF
|
WF
)Ë=RF)

	)

98 
	#ISARCHIVE
(
x
Ë(((xË& (
AF
|
RF
|
WF
)Ë=WF)

	)

99 
	#ISAPPND
(
x
Ë(((xË& (
AF
|
RF
|
WF
)Ë=(AF|WF))

	)

100 
	#ISCOPY
(
x
Ë(((xË& (
RF
|
WF
)Ë=(RF|WF))

	)

101 
	#ISWRITE
(
x
Ë(((xË& (
RF
|
WF
)Ë=WF)

	)

107 
	#BDEXTR
 (
AF
|
BF
|
LF
|
TF
|
WF
|
XF
|
CBF
|
CHF
|
CLF
|
CPF
|
CXF
)

	)

108 
	#BDARCH
 (
CF
|
KF
|
LF
|
NF
|
PF
|
RF
|
CDF
|
CEF
|
CYF
|
CZF
)

	)

109 
	#BDCOPY
 (
AF
|
BF
|
FF
|
OF
|
XF
|
CBF
|
CEF
)

	)

110 
	#BDLIST
 (
AF
|
BF
|
IF
|
KF
|
LF
|
OF
|
PF
|
RF
|
TF
|
UF
|
WF
|
XF
|
CBF
|
CDF
|
CHF
|
CLF
|
CPF
|
CXF
|
CYF
|
CZF
)

	)

	@pax/pat_rep.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)pat_rep.c 8.2 (Berkeley) 4/18/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/pat_rep.c,v 1.27.10.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<°dio.h
>

45 
	~<°rög.h
>

46 
	~<uni°d.h
>

47 
	~<°dlib.h
>

48 
	~<î∫o.h
>

49 #ifde‡
NET2_REGEX


50 
	~<ªgexp.h
>

52 
	~<ªgex.h
>

54 
	~"∑x.h
"

55 
	~"∑t_ªp.h
"

56 
	~"exã∫.h
"

65 
	#MAXSUBEXP
 10

	)

66 
PATTERN
 *
	g∑thód
 = 
NULL
;

67 
PATTERN
 *
	g∑âaû
 = 
NULL
;

68 
REPLACE
 *
	gªphód
 = 
NULL
;

69 
REPLACE
 *
	gª±aû
 = 
NULL
;

71 
ªp_«me
(*, *, );

72 
ây_ª«me
(
ARCHD
 *);

73 
fix_∑th
(*, *, *, );

74 
‚_m©ch
(*, *, **);

75 * 
ønge_m©ch
(*, );

76 #ifde‡
NET2_REGEX


77 
ªsub
(
ªgexp
 *, *, *, *);

79 
ªsub
(
ªgex_t
 *, 
ªgm©ch_t
 *, *, *, *, *);

99 
	$ªp_add
(*
°r
)

101 *
±1
;

102 *
±2
;

103 
REPLACE
 *
ªp
;

104 #i‚de‡
NET2_REGEX


105 
ªs
;

106 
ªbuf
[
BUFSIZ
];

112 i‡((
°r
 =
NULL
) || (*str == '\0')) {

113 
	`∑xw¨n
(1, "EmptyÑeplacement string");

121 i‡((
±1
 = 
	`°rchr
(
°r
+1, *°r)Ë=
NULL
) {

122 
	`∑xw¨n
(1, "InvÆidÑïœ˚míà°rög %s", 
°r
);

130 i‡((
ªp
 = (
REPLACE
 *)
	`mÆloc
((REPLACE))Ë=
NULL
) {

131 
	`∑xw¨n
(1, "UnableÅoállocate memory forÑeplacement string");

135 *
±1
 = '\0';

136 #ifde‡
NET2_REGEX


137 i‡((
ªp
->
rcmp
 = 
	`ªgcomp
(
°r
+1)Ë=
NULL
) {

139 i‡((
ªs
 = 
	`ªgcomp
(&(
ªp
->
rcmp
), 
°r
+1, 0)) != 0) {

140 
	`ªgîr‹
(
ªs
, &(
ªp
->
rcmp
), 
ªbuf
, (rebuf));

141 
	`∑xw¨n
(1, "%†whûêcompûögÑeguœ∏ex¥essi⁄ %s", 
ªbuf
, 
°r
);

143 
	`‰ì
(
ªp
);

152 *
±1
++ = *
°r
;

153 i‡((
±2
 = 
	`°rchr
(
±1
, *
°r
)Ë=
NULL
) {

154 #ifde‡
NET2_REGEX


155 
	`‰ì
(
ªp
->
rcmp
);

157 
	`ªg‰ì
(&
ªp
->
rcmp
);

159 
	`‰ì
(
ªp
);

160 
	`∑xw¨n
(1, "InvÆidÑïœ˚míà°rög %s", 
°r
);

164 *
±2
 = '\0';

165 
ªp
->
n°r
 = 
±1
;

166 
±1
 = 
±2
++;

167 
ªp
->
Êgs
 = 0;

172 *
±2
 != '\0') {

173 *
±2
) {

176 
ªp
->
Êgs
 |
GLOB
;

180 
ªp
->
Êgs
 |
PRNT
;

183 #ifde‡
NET2_REGEX


184 
	`‰ì
(
ªp
->
rcmp
);

186 
	`ªg‰ì
(&
ªp
->
rcmp
);

188 
	`‰ì
(
ªp
);

189 *
±1
 = *
°r
;

190 
	`∑xw¨n
(1, "InvÆidÑïœ˚míà°rög o±i⁄ %s", 
°r
);

193 ++
±2
;

199 
ªp
->
fow
 = 
NULL
;

200 i‡(
ªphód
 =
NULL
) {

201 
ª±aû
 = 
ªphód
 = 
ªp
;

204 
ª±aû
->
fow
 = 
ªp
;

205 
ª±aû
 = 
ªp
;

207 
	}
}

221 
	$∑t_add
(*
°r
, *
chd«m
)

223 
PATTERN
 *
±
;

228 i‡((
°r
 =
NULL
) || (*str == '\0')) {

229 
	`∑xw¨n
(1, "EmptyÖattern string");

238 i‡((
±
 = (
PATTERN
 *)
	`mÆloc
((PATTERN))Ë=
NULL
) {

239 
	`∑xw¨n
(1, "UnableÅoállocate memory forÖattern string");

243 
±
->
p°r
 = 
°r
;

244 
±
->
≥nd
 = 
NULL
;

245 
±
->
∂í
 = 
	`°æí
(
°r
);

246 
±
->
fow
 = 
NULL
;

247 
±
->
Êgs
 = 0;

248 
±
->
chd«me
 = 
chd«m
;

250 i‡(
∑thód
 =
NULL
) {

251 
∑âaû
 = 
∑thód
 = 
±
;

254 
∑âaû
->
fow
 = 
±
;

255 
∑âaû
 = 
±
;

257 
	}
}

266 
	$∑t_chk
()

268 
PATTERN
 *
±
;

269 
wb™
 = 0;

275 
±
 = 
∑thód
;Öà!
NULL
;Öà±->
fow
) {

276 i‡(
±
->
Êgs
 & 
MTCH
)

278 i‡(!
wb™
) {

279 
	`∑xw¨n
(1, "WARNING! TheseÖatterns wereÇot matched:");

280 ++
wb™
;

282 ()
	`Ârötf
(
°dîr
, "%s\n", 
±
->
p°r
);

284 
	}
}

303 
	$∑t_£l
(
ARCHD
 *
¨˙
)

305 
PATTERN
 *
±
;

306 
PATTERN
 **
µt
;

307 
Àn
;

312 i‡((
∑thód
 =
NULL
Ë|| ((
±
 = 
¨˙
->
∑t
) == NULL))

319 i‡(!
nÊag
) {

320 
±
->
Êgs
 |
MTCH
;

331 i‡(
±
->
Êgs
 & 
DIR_MTCH
)

334 i‡(!
dÊag
 && ((
±
->
≥nd
 !
NULL
Ë|| (
¨˙
->
ty≥
 =
PAX_DIR
))) {

348 i‡(
±
->
≥nd
 !
NULL
)

349 *
±
->
≥nd
 = '\0';

351 i‡((
±
->
p°r
 = 
	`°rdup
(
¨˙
->
«me
)Ë=
NULL
) {

352 
	`∑xw¨n
(1, "Pattern select out of memory");

353 i‡(
±
->
≥nd
 !
NULL
)

354 *
±
->
≥nd
 = '/';

355 
±
->
≥nd
 = 
NULL
;

362 i‡(
±
->
≥nd
 !
NULL
) {

363 *
±
->
≥nd
 = '/';

364 
±
->
≥nd
 = 
NULL
;

366 
±
->
∂í
 = 
	`°æí
’t->
p°r
);

371 
Àn
 = 
±
->
∂í
 - 1;

372 i‡(*(
±
->
p°r
 + 
Àn
) == '/') {

373 *(
±
->
p°r
 + 
Àn
) = '\0';

374 
±
->
∂í
 = 
Àn
;

376 
±
->
Êgs
 = 
DIR_MTCH
 | 
MTCH
;

377 
¨˙
->
∑t
 = 
±
;

389 
±
 = 
∑thód
;

390 
µt
 = &
∑thód
;

391 (
±
 !
NULL
Ë&& (± !
¨˙
->
∑t
)) {

392 
µt
 = &(
±
->
fow
);

393 
±
 =Öt->
fow
;

396 i‡(
±
 =
NULL
) {

400 
	`∑xw¨n
(1, "PatternÜist inconsistant");

403 *
µt
 = 
±
->
fow
;

404 
	`‰ì
(
±
);

405 
¨˙
->
∑t
 = 
NULL
;

407 
	}
}

422 
	$∑t_m©ch
(
ARCHD
 *
¨˙
)

424 
PATTERN
 *
±
;

426 
¨˙
->
∑t
 = 
NULL
;

432 i‡(
∑thód
 =
NULL
) {

433 i‡(
nÊag
 && !
cÊag
)

441 
±
 = 
∑thód
;

442 
±
 !
NULL
) {

447 i‡(
±
->
Êgs
 & 
DIR_MTCH
) {

454 i‡((
¨˙
->
«me
[
±
->
∂í
] == '/') &&

455 (
	`°∫cmp
(
±
->
p°r
, 
¨˙
->
«me
,Öt->
∂í
) == 0))

457 } i‡(
	`‚_m©ch
(
±
->
p°r
, 
¨˙
->
«me
, &±->
≥nd
) == 0)

459 
±
 =Öt->
fow
;

466 i‡(
±
 =
NULL
)

467 (
cÊag
 ? 0 : 1);

474 
¨˙
->
∑t
 = 
±
;

475 i‡(!
cÊag
)

478 i‡(
	`∑t_£l
(
¨˙
) < 0)

480 
¨˙
->
∑t
 = 
NULL
;

482 
	}
}

494 
	$‚_m©ch
(*
∑âîn
, *
°rög
, **
≥nd
)

496 
c
;

497 
ã°
;

499 *
≥nd
 = 
NULL
;

501 
c
 = *
∑âîn
++) {

506 i‡(*
°rög
 == '\0')

512 i‡((
dÊag
 =1Ë|| (*
°rög
 != '/'))

519 *
≥nd
 = 
°rög
;

522 i‡((
ã°
 = *
°rög
++) == '\0')

526 
c
 = *
∑âîn
;

530 
c
 == '*')

531 
c
 = *++
∑âîn
;

536 i‡(
c
 == '\0')

542 (
ã°
 = *
°rög
) != '\0') {

543 i‡(!
	`‚_m©ch
(
∑âîn
, 
°rög
, 
≥nd
))

545 ++
°rög
;

552 i‡(((
ã°
 = *
°rög
++) == '\0') ||

553 ((
∑âîn
 = 
	`ønge_m©ch
’©ã∫, 
ã°
)Ë=
NULL
))

558 i‡(
c
 !*
°rög
++)

564 
	}
}

567 
	$ønge_m©ch
(*
∑âîn
, 
ã°
)

569 
c
;

570 
c2
;

571 
√g©e
;

572 
ok
 = 0;

574 i‡((
√g©e
 = (*
∑âîn
 == '!')) != 0)

575 ++
∑âîn
;

577 (
c
 = *
∑âîn
++) != ']') {

581 i‡(
c
 == '\0')

582  (
NULL
);

584 i‡((*
∑âîn
 ='-'Ë&& ((
c2
 =Öattern[1]) != '\0') &&

585 (
c2
 != ']')) {

586 i‡((
c
 <
ã°
Ë&& (ã° <
c2
))

587 
ok
 = 1;

588 
∑âîn
 += 2;

589 } i‡(
c
 =
ã°
)

590 
ok
 = 1;

592  (
ok
 =
√g©e
 ? 
NULL
 : 
∑âîn
);

593 
	}
}

610 
	$mod_«me
(
ARCHD
 *
¨˙
)

612 
ªs
 = 0;

618 i‡(
rmÀad¶ash
 && 
¨˙
->
«me
[0] == '/') {

619 i‡(
¨˙
->
«me
[1] == '\0') {

620 
¨˙
->
«me
[0] = '.';

622 ()
	`memmove
(
¨˙
->
«me
, &arcn->name[1],

623 
	`°æí
(
¨˙
->
«me
));

624 
¨˙
->
∆í
--;

626 i‡(
rmÀad¶ash
 < 2) {

627 
rmÀad¶ash
 = 2;

628 
	`∑xw¨n
(0, "RemovingÜeading / fromábsoluteÖathÇames inÅheárchive");

631 i‡(
rmÀad¶ash
 && 
¨˙
->
 _«me
[0] == '/' &&

632 (
¨˙
->
ty≥
 =
PAX_HLK
 ||ár˙->ty≥ =
PAX_HRG
)) {

633 i‡(
¨˙
->
 _«me
[1] == '\0') {

634 
¨˙
->
 _«me
[0] = '.';

636 ()
	`memmove
(
¨˙
->
 _«me
, &arcn->ln_name[1],

637 
	`°æí
(
¨˙
->
 _«me
));

638 
¨˙
->
 _∆í
--;

640 i‡(
rmÀad¶ash
 < 2) {

641 
rmÀad¶ash
 = 2;

642 
	`∑xw¨n
(0, "RemovingÜeading / fromábsoluteÖathÇames inÅheárchive");

665 i‡(
ªphód
 !
NULL
) {

670 i‡((
ªs
 = 
	`ªp_«me
(
¨˙
->
«me
, &◊r˙->
∆í
), 1)) != 0)

671 (
ªs
);

673 i‡(((
¨˙
->
ty≥
 =
PAX_SLK
Ë|| (¨˙->ty≥ =
PAX_HLK
) ||

674 (
¨˙
->
ty≥
 =
PAX_HRG
)) &&

675 ((
ªs
 = 
	`ªp_«me
(
¨˙
->
 _«me
, &◊r˙->
 _∆í
), 0)) != 0))

676 (
ªs
);

679 i‡(
iÊag
) {

683 i‡((
ªs
 = 
	`ây_ª«me
(
¨˙
)) != 0)

684 (
ªs
);

685 i‡((
¨˙
->
ty≥
 =
PAX_SLK
Ë|| (¨˙->ty≥ =
PAX_HLK
) ||

686 (
¨˙
->
ty≥
 =
PAX_HRG
))

687 
	`sub_«me
(
¨˙
->
 _«me
, &◊r˙->
 _∆í
), (arcn->ln_name));

689 (
ªs
);

690 
	}
}

703 
	$ây_ª«me
(
ARCHD
 *
¨˙
)

705 
tm≤ame
[
PAXPATHLEN
+2];

706 
ªs
;

714 
	`ây_¥¡
("\nATTENTION: %†öãø˘ivêfûêª«mê›î©i⁄.\n", 
¨gv0
);

717 
	`ls_ây
(
¨˙
);

718 
	`ây_¥¡
("InputÇewÇame, orá \".\"Åo keepÅhe oldÇame, ");

719 
	`ây_¥¡
("orá \"return\"Åo skipÅhis file.\n");

720 
	`ây_¥¡
("Input > ");

721 i‡(
	`ây_ªad
(
tm≤ame
, (tmpname)) < 0)

723 i‡(
	`°rcmp
(
tm≤ame
, "..") == 0) {

724 
	`ây_¥¡
("Tryágain, illegal fileÇame: ..\n");

727 i‡(
	`°æí
(
tm≤ame
Ë> 
PAXPATHLEN
) {

728 
	`ây_¥¡
("Tryágain, fileÇameÅooÜong\n");

737 i‡(
tm≤ame
[0] == '\0') {

738 
	`ây_¥¡
("Skipping file.\n");

741 i‡((
tm≤ame
[0] == '.') && (tmpname[1] == '\0')) {

742 
	`ây_¥¡
("Processing continues,Çame unchanged.\n");

751 
	`ây_¥¡
("Pro˚ssög c⁄töues,Çamêch™gedÅo: %s\n", 
tm≤ame
);

752 
ªs
 = 
	`add_«me
(
¨˙
->
«me
,ár˙->
∆í
, 
tm≤ame
);

753 
¨˙
->
∆í
 = 
	`l_°∫˝y
◊r˙->
«me
, 
tm≤ame
, (arcn->name) - 1);

754 
¨˙
->
«me
[¨˙->
∆í
] = '\0';

755 i‡(
ªs
 < 0)

758 
	}
}

769 
	$£t_de°
(
ARCHD
 *
¨˙
, *
de°_dú
, 
dú_Àn
)

771 i‡(
	`fix_∑th
(
¨˙
->
«me
, &◊r˙->
∆í
), 
de°_dú
, 
dú_Àn
) < 0)

779 i‡((
¨˙
->
ty≥
 !
PAX_HLK
Ë&& (¨˙->ty≥ !
PAX_HRG
))

782 i‡(
	`fix_∑th
(
¨˙
->
 _«me
, &◊r˙->
 _∆í
), 
de°_dú
, 
dú_Àn
) < 0)

785 
	}
}

796 
	$fix_∑th
–*
‹_«me
, *
‹_Àn
, *
dú_«me
, 
dú_Àn
)

798 *
§c
;

799 *
de°
;

800 *
°¨t
;

801 
Àn
;

809 
°¨t
 = 
‹_«me
;

810 
§c
 = 
°¨t
 + *
‹_Àn
;

811 
de°
 = 
§c
 + 
dú_Àn
;

812 i‡(*
°¨t
 == '/') {

813 ++
°¨t
;

814 --
de°
;

816 i‡((
Àn
 = 
de°
 - 
‹_«me
Ë> 
PAXPATHLEN
) {

817 
	`∑xw¨n
(1, "Fûê«mê%s/%s,Åoÿl⁄g", 
dú_«me
, 
°¨t
);

820 *
‹_Àn
 = 
Àn
;

825 
§c
 >
°¨t
)

826 *
de°
-- = *
§c
--;

827 
§c
 = 
dú_«me
 + 
dú_Àn
 - 1;

832 
§c
 >
dú_«me
)

833 *
de°
-- = *
§c
--;

835 *(
‹_«me
 + 
Àn
) = '\0';

837 
	}
}

859 
	$ªp_«me
(*
«me
, *
∆í
, 
¥¡
)

861 
REPLACE
 *
±
;

862 *
ö±
;

863 *
ouçt
;

864 *
íd±
;

865 *
Ωt
;

866 
found
 = 0;

867 
ªs
;

868 #i‚de‡
NET2_REGEX


869 
ªgm©ch_t
 
pm
[
MAXSUBEXP
];

871 
¬ame
[
PAXPATHLEN
+1];

872 
buf1
[
PAXPATHLEN
+1];

882 
±
 = 
ªphód
;

883 ()
	`°r˝y
(
buf1
, 
«me
);

884 
ö±
 = 
buf1
;

885 
ouçt
 = 
¬ame
;

886 
íd±
 = 
ouçt
 + 
PAXPATHLEN
;

891 
±
 !
NULL
) {

897 #ifde‡
NET2_REGEX


898 i‡(
	`ªgexec
(
±
->
rcmp
, 
ö±
) == 0)

900 i‡(
	`ªgexec
(&(
±
->
rcmp
), 
ö±
, 
MAXSUBEXP
, 
pm
, 0) != 0)

911 
found
 = 1;

912 #ifde‡
NET2_REGEX


913 
Ωt
 = 
±
->
rcmp
->
°¨ç
[0];

915 
Ωt
 = 
ö±
 + 
pm
[0].
rm_so
;

918 (
ö±
 < 
Ωt
Ë&& (
ouçt
 < 
íd±
))

919 *
ouçt
++ = *
ö±
++;

920 i‡(
ouçt
 =
íd±
)

929 #ifde‡
NET2_REGEX


930 i‡((
ªs
 = 
	`ªsub
(
±
->
rcmp
,±->
n°r
,
ouçt
,
íd±
)) < 0) {

932 i‡((
ªs
 = 
	`ªsub
(&(
±
->
rcmp
),
pm
,
ö±
,±->
n°r
,
ouçt
,
íd±
))

935 i‡(
¥¡
)

936 
	`∑xw¨n
(1, "ReplacementÇameÉrror %s",

937 
«me
);

940 
ouçt
 +
ªs
;

952 #ifde‡
NET2_REGEX


953 
ö±
 = 
±
->
rcmp
->
ídp
[0];

955 
ö±
 +
pm
[0].
rm_eo
 -Öm[0].
rm_so
;

958 i‡((
ouçt
 =
íd±
Ë|| (*
ö±
 == '\0'))

965 } 
±
->
Êgs
 & 
GLOB
);

967 i‡(
found
)

973 
±
 =Öt->
fow
;

976 i‡(
found
) {

981 (
ouçt
 < 
íd±
Ë&& (*
ö±
 != '\0'))

982 *
ouçt
++ = *
ö±
++;

984 *
ouçt
 = '\0';

985 i‡((
ouçt
 =
íd±
Ë&& (*
ö±
 != '\0')) {

986 i‡(
¥¡
)

987 
	`∑xw¨n
(1,"ReplacementÇameÅooÜong %s >> %s",

988 
«me
, 
¬ame
);

995 i‡(
¥¡
 && (
±
->
Êgs
 & 
PRNT
)) {

996 i‡(*
¬ame
 == '\0')

997 ()
	`Ârötf
(
°dîr
,"%s >> <empty string>\n",

998 
«me
);

1000 ()
	`Ârötf
(
°dîr
,"%†>> %s\n", 
«me
, 
¬ame
);

1007 i‡(*
¬ame
 == '\0')

1009 *
∆í
 = 
	`l_°∫˝y
(
«me
, 
¬ame
, 
PAXPATHLEN
 + 1);

1010 
«me
[
PAXPATHLEN
] = '\0';

1013 
	}
}

1015 #ifde‡
NET2_REGEX


1025 
	$ªsub
(
ªgexp
 *
¥og
, *
§c
, *
de°
, *
de°íd
)

1027 *
•t
;

1028 *
d±
;

1029 
c
;

1030 
no
;

1031 
Àn
;

1033 
•t
 = 
§c
;

1034 
d±
 = 
de°
;

1035 (
d±
 < 
de°íd
Ë&& ((
c
 = *
•t
++) != '\0')) {

1036 i‡(
c
 == '&')

1037 
no
 = 0;

1038 i‡((
c
 ='\\'Ë&& (*
•t
 >= '0') && (*spt <= '9'))

1039 
no
 = *
•t
++ - '0';

1041 i‡((
c
 ='\\'Ë&& ((*
•t
 == '\\') || (*spt == '&')))

1042 
c
 = *
•t
++;

1043 *
d±
++ = 
c
;

1046 i‡((
¥og
->
°¨ç
[
no
] =
NULL
Ë|| (¥og->
ídp
[no] == NULL) ||

1047 ((
Àn
 = 
¥og
->
ídp
[
no
] -Örog->
°¨ç
[no]) <= 0))

1054 i‡(
Àn
 > (
de°íd
 - 
d±
))

1055 
Àn
 = 
de°íd
 - 
d±
;

1056 i‡(
	`l_°∫˝y
(
d±
, 
¥og
->
°¨ç
[
no
], 
Àn
) !=Üen)

1058 
d±
 +
Àn
;

1060 (
d±
 - 
de°
);

1061 
	}
}

1074 
	$ªsub
(
ªgex_t
 *
Ω
, 
ªgm©ch_t
 *
pm
, *
‹ig
, *
§c
, *
de°
,

1075 *
de°íd
)

1077 *
•t
;

1078 *
d±
;

1079 
c
;

1080 
ªgm©ch_t
 *
pm±
;

1081 
Àn
;

1082 
subex˙t
;

1084 
•t
 = 
§c
;

1085 
d±
 = 
de°
;

1086 
subex˙t
 = 
Ω
->
ª_nsub
;

1087 (
d±
 < 
de°íd
Ë&& ((
c
 = *
•t
++) != '\0')) {

1092 i‡(
c
 == '&') {

1093 
pm±
 = 
pm
;

1094 } i‡((
c
 ='\\'Ë&& (*
•t
 >= '0') && (*spt <= '9')) {

1098 i‡((
Àn
 = *
•t
++ - '0'Ë> 
subex˙t
)

1100 
pm±
 = 
pm
 + 
Àn
;

1105 i‡((
c
 ='\\'Ë&& ((*
•t
 == '\\') || (*spt == '&')))

1106 
c
 = *
•t
++;

1107 *
d±
++ = 
c
;

1114 i‡((
pm±
->
rm_so
 < 0Ë|| (pm±->
rm_eo
 < 0) ||

1115 ((
Àn
 = 
pm±
->
rm_eo
 -Öm±->
rm_so
) <= 0))

1122 i‡(
Àn
 > (
de°íd
 - 
d±
))

1123 
Àn
 = 
de°íd
 - 
d±
;

1124 i‡(
	`l_°∫˝y
(
d±
, 
‹ig
 + 
pm±
->
rm_so
, 
Àn
) !=Üen)

1126 
d±
 +
Àn
;

1128 (
d±
 - 
de°
);

1129 
	}
}

	@pax/pat_rep.h

40 
	sª∂a˚
 {

41 *
	mn°r
;

42 #ifde‡
NET2_REGEX


43 
ªgexp
 *
	mrcmp
;

45 
ªgex_t
 
	mrcmp
;

47 
	mÊgs
;

48 
	#PRNT
 0x1

	)

49 
	#GLOB
 0x2

	)

50 
ª∂a˚
 *
	mfow
;

51 } 
	tREPLACE
;

	@pax/pax.c

35 #i‚de‡
löt


36 c⁄° 
	gc›yright
[] =

41 #i‚de‡
löt


42 
	gsccsid
[] = "@(#)pax.c 8.2 (Berkeley) 4/18/94";

45 
	~<sys/cdefs.h
>

46 
__FBSDID
("$FreeBSD: src/bin/pax/pax.c,v 1.28.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

48 
	~<sys/ty≥s.h
>

49 
	~<sys/°©.h
>

50 
	~<sys/time.h
>

51 
	~<sys/ªsour˚.h
>

52 
	~<îr.h
>

53 
	~<î∫o.h
>

54 
	~<f˙é.h
>

55 
	~<loˇÀ.h
>

56 
	~<∑ths.h
>

57 
	~<sig«l.h
>

58 
	~<°dio.h
>

59 
	~<°dlib.h
>

60 
	~<°rög.h
>

61 
	~<uni°d.h
>

62 
	~"∑x.h
"

63 
	~"exã∫.h
"

64 
gí_öô
();

73 
	ga˘
 = 
DEFOP
;

74 
FSUB
 *
	g‰mt
 = 
NULL
;

75 
	gcÊag
;

76 
	gcwdfd
;

77 
	gdÊag
;

78 
	giÊag
;

79 
	gkÊag
;

80 
	glÊag
;

81 
	gnÊag
;

82 
	gtÊag
;

83 
	guÊag
;

84 
	gvÊag
;

85 
	gDÊag
;

86 
	gHÊag
;

87 
	gLÊag
;

88 
	gXÊag
;

89 
	gYÊag
;

90 
	gZÊag
;

91 
	gvÂ¨t
;

92 
	g∑time
 = 1;

93 
	gpmtime
 = 1;

94 
	gnodús
;

95 
	gpmode
;

96 
	gpids
;

97 
	grmÀad¶ash
 = 0;

98 
	gexô_vÆ
;

99 
	gdo¸c
;

100 *
	gdú±r
;

101 c⁄° *
	g¨gv0
;

102 
sig£t_t
 
	gs_mask
;

103 
FILE
 *
	gli°f
;

104 *
	gãmpfûe
;

105 *
	gãmpba£
;

228 
	$maö
(
¨gc
, *
¨gv
[])

230 c⁄° *
tmpdú
;

231 
size_t
 
tdÀn
;

233 (Ë
	`£éoˇÀ
(
LC_ALL
, "");

234 
li°f
 = 
°dîr
;

238 
cwdfd
 = 
	`›í
(".", 
O_RDONLY
);

239 i‡(
cwdfd
 < 0) {

240 
	`sysw¨n
(0, 
î∫o
, "Can't open current working directory.");

241 (
exô_vÆ
);

247 i‡((
tmpdú
 = 
	`gëív
("TMPDIR")Ë=
NULL
 || *tmpdir == '\0')

248 
tmpdú
 = 
_PATH_TMP
;

249 
tdÀn
 = 
	`°æí
(
tmpdú
);

250 
tdÀn
 > 0 && 
tmpdú
[tdlen - 1] == '/')

251 
tdÀn
--;

252 
ãmpfûe
 = 
	`mÆloc
(
tdÀn
 + 1 + (
_TFILE_BASE
));

253 i‡(
ãmpfûe
 =
NULL
) {

254 
	`∑xw¨n
(1, "Cannotállocate memory forÅemp fileÇame.");

255 (
exô_vÆ
);

257 i‡(
tdÀn
)

258 
	`mem˝y
(
ãmpfûe
, 
tmpdú
, 
tdÀn
);

259 
ãmpba£
 = 
ãmpfûe
 + 
tdÀn
;

260 *
ãmpba£
++ = '/';

265 
	`›ti⁄s
(
¨gc
, 
¨gv
);

266 i‡((
	`gí_öô
(Ë< 0Ë|| (
	`ây_öô
() < 0))

267 (
exô_vÆ
);

272 
a˘
) {

273 
EXTRACT
:

274 
	`exåa˘
();

276 
ARCHIVE
:

277 
	`¨chive
();

279 
APPND
:

280 i‡(
gzù_¥ogøm
 !
NULL
)

281 
	`îr
(1, "canÇot gzip whileáppending");

282 
	`≠≥nd
();

284 
COPY
:

285 
	`c›y
();

288 
LIST
:

289 
	`li°
();

292 (
exô_vÆ
);

293 
	}
}

305 
	$sig_˛ónup
(
which_sig
)

312 
vÊag
 = 
vÂ¨t
 = 1;

313 i‡(
which_sig
 =
SIGXCPU
)

314 
	`∑xw¨n
(0, "CpuÅimeÜimitÑeached, cleaning up.");

316 
	`∑xw¨n
(0, "Signal caught, cleaning up.");

318 
	`¨_˛o£
();

319 
	`¥oc_dú
();

320 i‡(
tÊag
)

321 
	`©dú_íd
();

322 
	`exô
(1);

323 
	}
}

332 
	$gí_öô
()

334 
æimô
 
ª¶imô
;

335 
siga˘i⁄
 
n_h™d
;

336 
siga˘i⁄
 
o_h™d
;

342 i‡(
	`gëæimô
(
RLIMIT_DATA
 , &
ª¶imô
) == 0){

343 
ª¶imô
.
æim_cur
 =Ñe¶imô.
æim_max
;

344 ()
	`£ålimô
(
RLIMIT_DATA
 , &
ª¶imô
);

351 i‡(
	`gëæimô
(
RLIMIT_FSIZE
 , &
ª¶imô
) == 0){

352 
ª¶imô
.
æim_cur
 =Ñe¶imô.
æim_max
;

353 ()
	`£ålimô
(
RLIMIT_FSIZE
 , &
ª¶imô
);

359 i‡(
	`gëæimô
(
RLIMIT_STACK
 , &
ª¶imô
) == 0){

360 
ª¶imô
.
æim_cur
 =Ñe¶imô.
æim_max
;

361 ()
	`£ålimô
(
RLIMIT_STACK
 , &
ª¶imô
);

367 i‡(
	`gëæimô
(
RLIMIT_RSS
 , &
ª¶imô
) == 0){

368 
ª¶imô
.
æim_cur
 =Ñe¶imô.
æim_max
;

369 ()
	`£ålimô
(
RLIMIT_RSS
 , &
ª¶imô
);

378 i‡((
	`sigem±y£t
(&
s_mask
Ë< 0Ë|| (
	`sigadd£t
(&s_mask, 
SIGTERM
) < 0) ||

379 (
	`sigadd£t
(&
s_mask
,
SIGINT
Ë< 0)||(sigadd£t(&s_mask,
SIGHUP
) < 0) ||

380 (
	`sigadd£t
(&
s_mask
,
SIGPIPE
Ë< 0)||(sigadd£t(&s_mask,
SIGQUIT
)<0) ||

381 (
	`sigadd£t
(&
s_mask
,
SIGXCPU
Ë< 0)||(sigadd£t(&s_mask,
SIGXFSZ
)<0)) {

382 
	`∑xw¨n
(1, "UnableÅo set up signal mask");

385 
	`mem£t
(&
n_h™d
, 0, Ç_hand);

386 
n_h™d
.
ß_mask
 = 
s_mask
;

387 
n_h™d
.
ß_Êags
 = 0;

388 
n_h™d
.
ß_h™dÀr
 = 
sig_˛ónup
;

390 i‡((
	`siga˘i⁄
(
SIGHUP
, &
n_h™d
, &
o_h™d
) < 0) &&

391 (
o_h™d
.
ß_h™dÀr
 =
SIG_IGN
) &&

392 (
	`siga˘i⁄
(
SIGHUP
, &
o_h™d
, &o_hand) < 0))

393 
out
;

395 i‡((
	`siga˘i⁄
(
SIGTERM
, &
n_h™d
, &
o_h™d
) < 0) &&

396 (
o_h™d
.
ß_h™dÀr
 =
SIG_IGN
) &&

397 (
	`siga˘i⁄
(
SIGTERM
, &
o_h™d
, &o_hand) < 0))

398 
out
;

400 i‡((
	`siga˘i⁄
(
SIGINT
, &
n_h™d
, &
o_h™d
) < 0) &&

401 (
o_h™d
.
ß_h™dÀr
 =
SIG_IGN
) &&

402 (
	`siga˘i⁄
(
SIGINT
, &
o_h™d
, &o_hand) < 0))

403 
out
;

405 i‡((
	`siga˘i⁄
(
SIGQUIT
, &
n_h™d
, &
o_h™d
) < 0) &&

406 (
o_h™d
.
ß_h™dÀr
 =
SIG_IGN
) &&

407 (
	`siga˘i⁄
(
SIGQUIT
, &
o_h™d
, &o_hand) < 0))

408 
out
;

410 i‡((
	`siga˘i⁄
(
SIGXCPU
, &
n_h™d
, &
o_h™d
) < 0) &&

411 (
o_h™d
.
ß_h™dÀr
 =
SIG_IGN
) &&

412 (
	`siga˘i⁄
(
SIGXCPU
, &
o_h™d
, &o_hand) < 0))

413 
out
;

415 
n_h™d
.
ß_h™dÀr
 = 
SIG_IGN
;

416 i‡((
	`siga˘i⁄
(
SIGPIPE
, &
n_h™d
, &
o_h™d
) < 0) ||

417 (
	`siga˘i⁄
(
SIGXFSZ
, &
n_h™d
, &
o_h™d
) < 0))

418 
out
;

421 
out
:

422 
	`sysw¨n
(1, 
î∫o
, "UnableÅo set up signal handler");

424 
	}
}

	@pax/pax.h

41 
	#MAXBLK
 64512

	)

44 
	#MAXBLK_POSIX
 32256

	)

45 
	#BLKMULT
 512

	)

47 
	#DEVBLK
 8192

	)

48 
	#FILEBLK
 10240

	)

49 
	#PAXPATHLEN
 3072

	)

55 
	#LIST
 0

	)

56 
	#EXTRACT
 1

	)

57 
	#ARCHIVE
 2

	)

58 
	#APPND
 3

	)

59 
	#COPY
 4

	)

60 
	#DEFOP
 
LIST


	)

65 
	#ISREG
 0

	)

66 
	#ISCHR
 1

	)

67 
	#ISBLK
 2

	)

68 
	#ISTAPE
 3

	)

69 
	#ISPIPE
 4

	)

71 
¨chd
 
	tARCHD
;

72 
fsub
 
	tFSUB
;

73 
›li°
 
	tOPLIST
;

74 
∑âîn
 
	tPATTERN
;

86 
	sfsub
 {

87 c⁄° *
	m«me
;

89 
	mbsz
;

93 
	mhsz
;

98 
	mudev
;

105 
	mhlk
;

108 
	mblkÆgn
;

109 
	möhód
;

112 (*
	mid
)(*, );

114 (*
	m°_rd
)();

117 (*
	mrd
)(
	mARCHD
 *, *);

130 
off_t
 (*
íd_rd
)();

134 (*
	m°_wr
)();

135 (*
	mwr
)(
	mARCHD
 *);

145 (*
	míd_wr
)();

148 (*
	måaû_˝io
)(
	mARCHD
 *);

149 (*
	måaû_èr
)(*, , *);

156 (*
	mrd_d©a
)(
	mARCHD
 *, , 
	moff_t
 *);

158 (*
	mwr_d©a
)(
	mARCHD
 *, , 
	moff_t
 *);

160 (*
	m›ti⁄s
)();

168 
	s∑âîn
 {

169 *
	mp°r
;

170 *
	m≥nd
;

171 *
	mchd«me
;

172 
	m∂í
;

173 
	mÊgs
;

174 
	#MTCH
 0x1

	)

175 
	#DIR_MTCH
 0x2

	)

176 
∑âîn
 *
	mfow
;

191 
	s¨chd
 {

192 
	m∆í
;

193 
	m«me
[
PAXPATHLEN
+1];

194 
	m _∆í
;

195 
	m _«me
[
PAXPATHLEN
+1];

196 *
	m‹g_«me
;

197 
PATTERN
 *
	m∑t
;

198 
°©
 
	msb
;

199 
off_t
 
	m∑d
;

200 
off_t
 
	mskù
;

204 
u_l⁄g
 
	m¸c
;

205 
	mty≥
;

206 
	#PAX_DIR
 1

	)

207 
	#PAX_CHR
 2

	)

208 
	#PAX_BLK
 3

	)

209 
	#PAX_REG
 4

	)

210 
	#PAX_SLK
 5

	)

211 
	#PAX_SCK
 6

	)

212 
	#PAX_FIF
 7

	)

213 
	#PAX_HLK
 8

	)

214 
	#PAX_HRG
 9

	)

215 
	#PAX_CTG
 10

	)

223 
	s›li°
 {

224 *
	m«me
;

225 *
	mvÆue
;

226 
›li°
 *
	mfow
;

232 #i‚de‡
MIN


233 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

235 
	#MAJOR
(
x
Ë
	`maj‹
(x)

	)

236 
	#MINOR
(
x
Ë
	`mö‹
(x)

	)

237 
	#TODEV
(
x
, 
y
Ë
	`makedev
((x), (y))

	)

242 
	#HEX
 16

	)

243 
	#OCT
 8

	)

244 
	#_PAX_
 1

	)

245 
	#_TFILE_BASE
 "∑xXXXXXXXXXX"

	)

	@pax/sel_subs.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)sel_subs.c 8.1 (Berkeley) 5/31/93";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/sel_subs.c,v 1.21.10.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

44 
	~<sys/°©.h
>

45 
	~<pwd.h
>

46 
	~<gΩ.h
>

47 
	~<°dio.h
>

48 
	~<°rög.h
>

49 
	~<°rögs.h
>

50 
	~<uni°d.h
>

51 
	~<°dlib.h
>

52 
	~"∑x.h
"

53 
	~"£l_subs.h
"

54 
	~"exã∫.h
"

56 
°r_£c
(*, 
time_t
 *);

57 
u§_m©ch
(
ARCHD
 *);

58 
gΩ_m©ch
(
ARCHD
 *);

59 
ång_m©ch
(
ARCHD
 *);

61 
TIME_RNG
 *
	gåhód
 = 
NULL
;

62 
TIME_RNG
 *
	gåèû
 = 
NULL
;

63 
USRT
 **
	gu§tb
 = 
NULL
;

64 
GRPT
 **
	ggΩtb
 = 
NULL
;

78 
	$£l_chk
(
ARCHD
 *
¨˙
)

80 i‡(((
u§tb
 !
NULL
Ë&& 
	`u§_m©ch
(
¨˙
)) ||

81 ((
gΩtb
 !
NULL
Ë&& 
	`gΩ_m©ch
(
¨˙
)) ||

82 ((
åhód
 !
NULL
Ë&& 
	`ång_m©ch
(
¨˙
)))

85 
	}
}

103 
	$u§_add
(*
°r
)

105 
u_öt
 
ödx
;

106 
USRT
 *
±
;

107 
∑sswd
 *
pw
;

108 
uid_t
 
uid
;

113 i‡((
°r
 =
NULL
) || (*str == '\0'))

115 i‡((
u§tb
 =
NULL
) &&

116 ((
u§tb
 = (
USRT
 **)
	`ˇŒoc
(
USR_TB_SZ
, (USRT *))Ë=
NULL
)) {

117 
	`∑xw¨n
(1, "UnableÅoállocate memory for user selectionÅable");

124 i‡(
°r
[0] != '#') {

128 i‡((
°r
[0] == '\\') && (str[1] == '#'))

129 ++
°r
;

130 i‡((
pw
 = 
	`gëpw«m
(
°r
)Ë=
NULL
) {

131 
	`∑xw¨n
(1, "U«bÀÅÿföd uid f‹ u£r: %s", 
°r
);

134 
uid
 = (
uid_t
)
pw
->
pw_uid
;

136 #ifde‡
NET2_STAT


137 
uid
 = (
uid_t
)
	`©oi
(
°r
+1);

139 
uid
 = (
uid_t
)
	`°πoul
(
°r
+1, 
NULL
, 10);

141 
	`ídpwít
();

146 
ödx
 = (()
uid
Ë% 
USR_TB_SZ
;

147 i‡((
±
 = 
u§tb
[
ödx
]Ë!
NULL
) {

148 
±
 !
NULL
) {

149 i‡(
±
->
uid
 == uid)

151 
±
 =Öt->
fow
;

158 i‡((
±
 = (
USRT
 *)
	`mÆloc
((USRT))Ë!
NULL
) {

159 
±
->
uid
 = uid;

160 
±
->
fow
 = 
u§tb
[
ödx
];

161 
u§tb
[
ödx
] = 
±
;

164 
	`∑xw¨n
(1, "User selectionÅable out of memory");

166 
	}
}

176 
	$u§_m©ch
(
ARCHD
 *
¨˙
)

178 
USRT
 *
±
;

183 
±
 = 
u§tb
[(()
¨˙
->
sb
.
°_uid
Ë% 
USR_TB_SZ
];

184 
±
 !
NULL
) {

185 i‡(
±
->
uid
 =
¨˙
->
sb
.
°_uid
)

187 
±
 =Öt->
fow
;

194 
	}
}

204 
	$gΩ_add
(*
°r
)

206 
u_öt
 
ödx
;

207 
GRPT
 *
±
;

208 
group
 *
gr
;

209 
gid_t
 
gid
;

214 i‡((
°r
 =
NULL
) || (*str == '\0'))

216 i‡((
gΩtb
 =
NULL
) &&

217 ((
gΩtb
 = (
GRPT
 **)
	`ˇŒoc
(
GRP_TB_SZ
, (GRPT *))Ë=
NULL
)) {

218 
	`∑xw¨n
(1, "UnableÅoállocate memory fo group selectionÅable");

225 i‡(
°r
[0] != '#') {

229 i‡((
°r
[0] == '\\') && (str[1] == '#'))

230 ++
°r
;

231 i‡((
gr
 = 
	`gëg∫am
(
°r
)Ë=
NULL
) {

232 
	`∑xw¨n
(1,"C™nŸ dëîmöêgid f‹ grou∞«me: %s", 
°r
);

235 
gid
 = 
gr
->
gr_gid
;

237 #ifde‡
NET2_STAT


238 
gid
 = (
gid_t
)
	`©oi
(
°r
+1);

240 
gid
 = (
gid_t
)
	`°πoul
(
°r
+1, 
NULL
, 10);

242 
	`ídgª¡
();

247 
ödx
 = (()
gid
Ë% 
GRP_TB_SZ
;

248 i‡((
±
 = 
gΩtb
[
ödx
]Ë!
NULL
) {

249 
±
 !
NULL
) {

250 i‡(
±
->
gid
 == gid)

252 
±
 =Öt->
fow
;

259 i‡((
±
 = (
GRPT
 *)
	`mÆloc
((GRPT))Ë!
NULL
) {

260 
±
->
gid
 = gid;

261 
±
->
fow
 = 
gΩtb
[
ödx
];

262 
gΩtb
[
ödx
] = 
±
;

265 
	`∑xw¨n
(1, "Group selectionÅable out of memory");

267 
	}
}

277 
	$gΩ_m©ch
(
ARCHD
 *
¨˙
)

279 
GRPT
 *
±
;

284 
±
 = 
gΩtb
[(()
¨˙
->
sb
.
°_gid
Ë% 
GRP_TB_SZ
];

285 
±
 !
NULL
) {

286 i‡(
±
->
gid
 =
¨˙
->
sb
.
°_gid
)

288 
±
 =Öt->
fow
;

295 
	}
}

327 
	$ång_add
(*
°r
)

329 
TIME_RNG
 *
±
;

330 *
up_±
 = 
NULL
;

331 *
°±
;

332 *
Êg±
;

333 
dŸ
 = 0;

338 i‡((
°r
 =
NULL
) || (*str == '\0')) {

339 
	`∑xw¨n
(1, "EmptyÅimeÑange string");

346 i‡((
Êg±
 = 
	`°ºchr
(
°r
, '/')Ë!
NULL
)

347 *
Êg±
++ = '\0';

349 
°±
 = 
°r
; *stpt != '\0'; ++stpt) {

350 i‡((*
°±
 >= '0') && (*stpt <= '9'))

352 i‡((*
°±
 =','Ë&& (
up_±
 =
NULL
)) {

353 *
°±
 = '\0';

354 
up_±
 = 
°±
 + 1;

355 
dŸ
 = 0;

362 i‡((*
°±
 ='.'Ë&& (!
dŸ
)) {

363 ++
dŸ
;

366 
	`∑xw¨n
(1, "Im¥›îly s≥cifõdÅimêønge: %s", 
°r
);

367 
out
;

373 i‡((
±
 = (
TIME_RNG
 *)
	`mÆloc
((TIME_RNG))Ë=
NULL
) {

374 
	`∑xw¨n
(1, "UnableÅoállocate memory forÅimeÑange");

382 i‡((
Êg±
 =
NULL
) || (*flgpt == '\0'))

383 
±
->
Êgs
 = 
CMPMTME
;

385 
±
->
Êgs
 = 0;

386 *
Êg±
 != '\0') {

387 *
Êg±
) {

390 
±
->
Êgs
 |
CMPMTME
;

394 
±
->
Êgs
 |
CMPCTME
;

397 
	`∑xw¨n
(1, "Bad option %c withÅimeÑange %s",

398 *
Êg±
, 
°r
);

399 
	`‰ì
(
±
);

400 
out
;

402 ++
Êg±
;

409 
±
->
low_time
 =Öt->
high_time
 = 
	`time
(
NULL
);

410 i‡(*
°r
 != '\0') {

414 i‡(
	`°r_£c
(
°r
, &(
±
->
low_time
)) < 0) {

415 
	`∑xw¨n
(1, "IŒegÆÜowîÅimêøngê%s", 
°r
);

416 
	`‰ì
(
±
);

417 
out
;

419 
±
->
Êgs
 |
HASLOW
;

422 i‡((
up_±
 !
NULL
) && (*up_pt != '\0')) {

426 i‡(
	`°r_£c
(
up_±
, &(
±
->
high_time
)) < 0) {

427 
	`∑xw¨n
(1, "IŒegÆ uµîÅimêøngê%s", 
up_±
);

428 
	`‰ì
(
±
);

429 
out
;

431 
±
->
Êgs
 |
HASHIGH
;

436 i‡(
±
->
Êgs
 & 
HASLOW
) {

437 i‡(
±
->
low_time
 >Öt->
high_time
) {

438 
	`∑xw¨n
(1, "Upper %sándÜower %sÅime overlap",

439 
up_±
, 
°r
);

440 
	`‰ì
(
±
);

446 
±
->
fow
 = 
NULL
;

447 i‡(
åhód
 =
NULL
) {

448 
åèû
 = 
åhód
 = 
±
;

451 
åèû
->
fow
 = 
±
;

452 
åèû
 = 
±
;

455 
out
:

456 
	`∑xw¨n
(1, "TimeÑange format is: [yy[mm[dd[hh]]]]mm[.ss][/[c][m]]");

458 
	}
}

468 
	$ång_m©ch
(
ARCHD
 *
¨˙
)

470 
TIME_RNG
 *
±
;

476 
±
 = 
åhód
;

477 
±
 !
NULL
) {

478 
±
->
Êgs
 & 
CMPBOTH
) {

479 
CMPBOTH
:

484 i‡(((
±
->
Êgs
 & 
HASLOW
) &&

485 (
¨˙
->
sb
.
°_mtime
 < 
±
->
low_time
) &&

486 (
¨˙
->
sb
.
°_˘ime
 < 
±
->
low_time
)) ||

487 ((
±
->
Êgs
 & 
HASHIGH
) &&

488 (
¨˙
->
sb
.
°_mtime
 > 
±
->
high_time
) &&

489 (
¨˙
->
sb
.
°_˘ime
 > 
±
->
high_time
))) {

490 
±
 =Öt->
fow
;

494 
CMPCTME
:

498 i‡(((
±
->
Êgs
 & 
HASLOW
) &&

499 (
¨˙
->
sb
.
°_˘ime
 < 
±
->
low_time
)) ||

500 ((
±
->
Êgs
 & 
HASHIGH
) &&

501 (
¨˙
->
sb
.
°_˘ime
 > 
±
->
high_time
))) {

502 
±
 =Öt->
fow
;

506 
CMPMTME
:

511 i‡(((
±
->
Êgs
 & 
HASLOW
) &&

512 (
¨˙
->
sb
.
°_mtime
 < 
±
->
low_time
)) ||

513 ((
±
->
Êgs
 & 
HASHIGH
) &&

514 (
¨˙
->
sb
.
°_mtime
 > 
±
->
high_time
))) {

515 
±
 =Öt->
fow
;

523 i‡(
±
 =
NULL
)

526 
	}
}

537 
	$°r_£c
(*
°r
, 
time_t
 *
tvÆ
)

539 
tm
 *
…
;

540 *
dŸ
 = 
NULL
;

542 
…
 = 
	`loˇ…ime
(
tvÆ
);

543 i‡((
dŸ
 = 
	`°rchr
(
°r
, '.')Ë!
NULL
) {

547 *
dŸ
++ = '\0';

548 i‡(
	`°æí
(
dŸ
) != 2)

550 i‡((
…
->
tm_£c
 = 
	`ATOI2
(
dŸ
)) > 61)

553 
…
->
tm_£c
 = 0;

555 
	`°æí
(
°r
)) {

561 i‡((
…
->
tm_yór
 = 
	`ATOI2
(
°r
)) < 69)

562 
…
->
tm_yór
 += 100;

563 
°r
 += 2;

570 i‡((
…
->
tm_m⁄
 = 
	`ATOI2
(
°r
)) > 12)

572 --
…
->
tm_m⁄
;

573 
°r
 += 2;

579 i‡((
…
->
tm_mday
 = 
	`ATOI2
(
°r
)) > 31)

581 
°r
 += 2;

587 i‡((
…
->
tm_hour
 = 
	`ATOI2
(
°r
)) > 23)

589 
°r
 += 2;

595 i‡((
…
->
tm_mö
 = 
	`ATOI2
(
°r
)) > 59)

604 i‡((*
tvÆ
 = 
	`mktime
(
…
)) == -1)

607 
	}
}

	@pax/sel_subs.h

41 
	#USR_TB_SZ
 317

	)

42 
	#GRP_TB_SZ
 317

	)

44 
	su§t
 {

45 
uid_t
 
	muid
;

46 
u§t
 *
	mfow
;

47 } 
	tUSRT
;

49 
	sgΩt
 {

50 
gid_t
 
	mgid
;

51 
gΩt
 *
	mfow
;

52 } 
	tGRPT
;

58 
	#ATOI2
(
s
Ë((((s)[0] - '0'Ë* 10Ë+ ((s)[1] - '0'))

	)

60 
	stime_∫g
 {

61 
time_t
 
	mlow_time
;

62 
time_t
 
	mhigh_time
;

63 
	mÊgs
;

64 
	#HASLOW
 0x01

	)

65 
	#HASHIGH
 0x02

	)

66 
	#CMPMTME
 0x04

	)

67 
	#CMPCTME
 0x08

	)

68 
	#CMPBOTH
 (
CMPMTME
|
CMPCTME
Ë

	)

69 
time_∫g
 *
	mfow
;

70 } 
	tTIME_RNG
;

	@pax/tables.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)tables.c 8.1 (Berkeley) 5/31/93";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/tables.c,v 1.24.10.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/f˙é.h
>

46 
	~<î∫o.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<uni°d.h
>

51 
	~"∑x.h
"

52 
	~"èbÀs.h
"

53 
	~"exã∫.h
"

70 
HRDLNK
 **
	g…ab
 = 
NULL
;

71 
FTM
 **
	g·ab
 = 
NULL
;

72 
NAMT
 **
	g¡ab
 = 
NULL
;

73 
DEVT
 **
	gdèb
 = 
NULL
;

74 
ATDIR
 **
	g©ab
 = 
NULL
;

75 
	gdúfd
 = -1;

76 
u_l⁄g
 
	gdú˙t
;

77 
	gffd
 = -1;

79 
DEVT
 *
chk_dev
(
dev_t
, );

105 
	$ k_°¨t
()

107 i‡(
…ab
 !
NULL
)

109 i‡((
…ab
 = (
HRDLNK
 **)
	`ˇŒoc
(
L_TAB_SZ
, (HRDLNK *))Ë=
NULL
) {

110 
	`∑xw¨n
(1, "Cannotállocate memory for hardÜinkÅable");

114 
	}
}

129 
	$chk_ k
(
ARCHD
 *
¨˙
)

131 
HRDLNK
 *
±
;

132 
HRDLNK
 **
µt
;

133 
u_öt
 
ödx
;

135 i‡(
…ab
 =
NULL
)

140 i‡((
¨˙
->
ty≥
 =
PAX_DIR
Ë|| (¨˙->
sb
.
°_∆ök
 <= 1))

146 
ödx
 = (()
¨˙
->
sb
.
°_öo
Ë% 
L_TAB_SZ
;

147 i‡((
±
 = 
…ab
[
ödx
]Ë!
NULL
) {

151 
µt
 = &(
…ab
[
ödx
]);

152 
±
 !
NULL
) {

153 i‡((
±
->
öo
 =
¨˙
->
sb
.
°_öo
) &&

154 (
±
->
dev
 =
¨˙
->
sb
.
°_dev
))

156 
µt
 = &(
±
->
fow
);

157 
±
 =Öt->
fow
;

160 i‡(
±
 !
NULL
) {

167 
¨˙
->
 _∆í
 = 
	`l_°∫˝y
◊r˙->
 _«me
, 
±
->
«me
,

168 (
¨˙
->
 _«me
) - 1);

169 
¨˙
->
 _«me
[¨˙->
 _∆í
] = '\0';

170 i‡(
¨˙
->
ty≥
 =
PAX_REG
)

171 
¨˙
->
ty≥
 = 
PAX_HRG
;

173 
¨˙
->
ty≥
 = 
PAX_HLK
;

179 i‡(--
±
->
∆ök
 <= 1) {

180 *
µt
 = 
±
->
fow
;

181 
	`‰ì
(
±
->
«me
);

182 
	`‰ì
(
±
);

192 i‡((
±
 = (
HRDLNK
 *)
	`mÆloc
((HRDLNK))Ë!
NULL
) {

193 i‡((
±
->
«me
 = 
	`°rdup
(
¨˙
->«me)Ë!
NULL
) {

194 
±
->
dev
 = 
¨˙
->
sb
.
°_dev
;

195 
±
->
öo
 = 
¨˙
->
sb
.
°_öo
;

196 
±
->
∆ök
 = 
¨˙
->
sb
.
°_∆ök
;

197 
±
->
fow
 = 
…ab
[
ödx
];

198 
…ab
[
ödx
] = 
±
;

201 
	`‰ì
(
±
);

204 
	`∑xw¨n
(1, "HardÜinkÅable out of memory");

206 
	}
}

216 
	$purg_ k
(
ARCHD
 *
¨˙
)

218 
HRDLNK
 *
±
;

219 
HRDLNK
 **
µt
;

220 
u_öt
 
ödx
;

222 i‡(
…ab
 =
NULL
)

227 i‡((
¨˙
->
sb
.
°_∆ök
 <1Ë|| (¨˙->
ty≥
 =
PAX_DIR
) ||

228 (
¨˙
->
ty≥
 =
PAX_HLK
Ë|| (¨˙->ty≥ =
PAX_HRG
))

234 
ödx
 = (()
¨˙
->
sb
.
°_öo
Ë% 
L_TAB_SZ
;

235 i‡((
±
 = 
…ab
[
ödx
]Ë=
NULL
)

242 
µt
 = &(
…ab
[
ödx
]);

243 
±
 !
NULL
) {

244 i‡((
±
->
öo
 =
¨˙
->
sb
.
°_öo
) &&

245 (
±
->
dev
 =
¨˙
->
sb
.
°_dev
))

247 
µt
 = &(
±
->
fow
);

248 
±
 =Öt->
fow
;

250 i‡(
±
 =
NULL
)

256 *
µt
 = 
±
->
fow
;

257 
	`‰ì
(
±
->
«me
);

258 
	`‰ì
(
±
);

259 
	}
}

270 
	$ k_íd
()

272 
i
;

273 
HRDLNK
 *
±
;

274 
HRDLNK
 *
µt
;

276 i‡(
…ab
 =
NULL
)

279 
i
 = 0; i < 
L_TAB_SZ
; ++i) {

280 i‡(
…ab
[
i
] =
NULL
)

282 
±
 = 
…ab
[
i
];

283 
…ab
[
i
] = 
NULL
;

288 
±
 !
NULL
) {

289 
µt
 = 
±
;

290 
±
 = 
µt
->
fow
;

291 
	`‰ì
(
µt
->
«me
);

292 
	`‰ì
(
µt
);

296 
	}
}

330 
	$·ime_°¨t
()

333 i‡(
·ab
 !
NULL
)

335 i‡((
·ab
 = (
FTM
 **)
	`ˇŒoc
(
F_TAB_SZ
, (FTM *))Ë=
NULL
) {

336 
	`∑xw¨n
(1, "Cannotállocate memory for fileÅimeÅable");

344 
	`mem˝y
(
ãmpba£
, 
_TFILE_BASE
, (_TFILE_BASE));

345 i‡((
ffd
 = 
	`mk°emp
(
ãmpfûe
)) < 0) {

346 
	`sysw¨n
(1, 
î∫o
, "UnableÅo createÅemporary file: %s",

347 
ãmpfûe
);

350 ()
	`u∆ök
(
ãmpfûe
);

353 
	}
}

368 
	$chk_·ime
(
ARCHD
 *
¨˙
)

370 
FTM
 *
±
;

371 
«mñí
;

372 
u_öt
 
ödx
;

373 
ck«me
[
PAXPATHLEN
+1];

378 i‡(
·ab
 =
NULL
)

384 
«mñí
 = 
¨˙
->
∆í
;

385 
ödx
 = 
	`°_hash
(
¨˙
->
«me
, 
«mñí
, 
F_TAB_SZ
);

386 i‡((
±
 = 
·ab
[
ödx
]Ë!
NULL
) {

392 
±
 !
NULL
) {

393 i‡(
±
->
«mñí
 ==Çamelen) {

398 i‡(
	`l£ek
(
ffd
,
±
->
£ek
,
SEEK_SET
) !=Öt->seek) {

399 
	`sysw¨n
(1, 
î∫o
,

403 i‡(
	`ªad
(
ffd
, 
ck«me
, 
«mñí
) !=Çamelen) {

404 
	`sysw¨n
(1, 
î∫o
,

412 i‡(!
	`°∫cmp
(
ck«me
, 
¨˙
->
«me
, 
«mñí
))

419 
±
 =Öt->
fow
;

422 i‡(
±
 !
NULL
) {

426 i‡(
¨˙
->
sb
.
°_mtime
 > 
±
->
mtime
) {

430 
±
->
mtime
 = 
¨˙
->
sb
.
°_mtime
;

443 i‡((
±
 = (
FTM
 *)
	`mÆloc
((FTM))Ë!
NULL
) {

448 i‡((
±
->
£ek
 = 
	`l£ek
(
ffd
, (
off_t
)0, 
SEEK_END
)) >= 0) {

449 i‡(
	`wrôe
(
ffd
, 
¨˙
->
«me
, 
«mñí
) ==Çamelen) {

450 
±
->
mtime
 = 
¨˙
->
sb
.
°_mtime
;

451 
±
->
«mñí
 =Çamelen;

452 
±
->
fow
 = 
·ab
[
ödx
];

453 
·ab
[
ödx
] = 
±
;

456 
	`sysw¨n
(1, 
î∫o
, "Failed writeÅo fileÅimeÅable");

458 
	`sysw¨n
(1, 
î∫o
, "Failed seek on fileÅimeÅable");

460 
	`∑xw¨n
(1, "FileÅimeÅableÑan out of memory");

462 i‡(
±
 !
NULL
)

463 
	`‰ì
(
±
);

465 
	}
}

487 
	$«me_°¨t
()

489 i‡(
¡ab
 !
NULL
)

491 i‡((
¡ab
 = (
NAMT
 **)
	`ˇŒoc
(
N_TAB_SZ
, (NAMT *))Ë=
NULL
) {

492 
	`∑xw¨n
(1, "Cannotállocate memory for interactiveÑenameÅable");

496 
	}
}

508 
	$add_«me
(*
⁄ame
, 
⁄amñí
, *
¬ame
)

510 
NAMT
 *
±
;

511 
u_öt
 
ödx
;

513 i‡(
¡ab
 =
NULL
) {

517 
	`∑xw¨n
(0, "No interactiveÑenameÅable,Üinks may fail\n");

525 
ödx
 = 
	`°_hash
(
⁄ame
, 
⁄amñí
, 
N_TAB_SZ
);

526 i‡((
±
 = 
¡ab
[
ödx
]Ë!
NULL
) {

530 (
±
 !
NULL
Ë&& (
	`°rcmp
(
⁄ame
,Öt->oname) != 0))

531 
±
 =Öt->
fow
;

533 i‡(
±
 !
NULL
) {

538 i‡(
	`°rcmp
(
¬ame
, 
±
->nname) == 0)

541 
	`‰ì
(
±
->
¬ame
);

542 i‡((
±
->
¬ame
 = 
	`°rdup
“«me)Ë=
NULL
) {

543 
	`∑xw¨n
(1, "Cannot updateÑenameÅable");

553 i‡((
±
 = (
NAMT
 *)
	`mÆloc
((NAMT))Ë!
NULL
) {

554 i‡((
±
->
⁄ame
 = 
	`°rdup
(⁄ame)Ë!
NULL
) {

555 i‡((
±
->
¬ame
 = 
	`°rdup
“«me)Ë!
NULL
) {

556 
±
->
fow
 = 
¡ab
[
ödx
];

557 
¡ab
[
ödx
] = 
±
;

560 
	`‰ì
(
±
->
⁄ame
);

562 
	`‰ì
(
±
);

564 
	`∑xw¨n
(1, "InteractiveÑenameÅable out of memory");

566 
	}
}

576 
	$sub_«me
(*
⁄ame
, *
⁄amñí
, 
size_t
 
⁄amesize
)

578 
NAMT
 *
±
;

579 
u_öt
 
ödx
;

581 i‡(
¡ab
 =
NULL
)

586 
ödx
 = 
	`°_hash
(
⁄ame
, *
⁄amñí
, 
N_TAB_SZ
);

587 i‡((
±
 = 
¡ab
[
ödx
]Ë=
NULL
)

590 
±
 !
NULL
) {

594 i‡(
	`°rcmp
(
⁄ame
, 
±
->oname) == 0) {

599 *
⁄amñí
 = 
	`l_°∫˝y
(
⁄ame
, 
±
->
¬ame
, 
⁄amesize
 - 1);

600 
⁄ame
[*
⁄amñí
] = '\0';

603 
±
 =Öt->
fow
;

610 
	}
}

660 
	$dev_°¨t
()

662 i‡(
dèb
 !
NULL
)

664 i‡((
dèb
 = (
DEVT
 **)
	`ˇŒoc
(
D_TAB_SZ
, (DEVT *))Ë=
NULL
) {

665 
	`∑xw¨n
(1, "Cannotállocate memory for device mappingÅable");

669 
	}
}

682 
	$add_dev
(
ARCHD
 *
¨˙
)

684 i‡(
	`chk_dev
(
¨˙
->
sb
.
°_dev
, 1Ë=
NULL
)

687 
	}
}

702 
DEVT
 *

703 
	$chk_dev
(
dev_t
 
dev
, 
add
)

705 
DEVT
 *
±
;

706 
u_öt
 
ödx
;

708 i‡(
dèb
 =
NULL
)

709 (
NULL
);

713 
ödx
 = (()
dev
Ë% 
D_TAB_SZ
;

714 i‡((
±
 = 
dèb
[
ödx
]Ë!
NULL
) {

715 (
±
 !
NULL
Ë&& (±->
dev
 != dev))

716 
±
 =Öt->
fow
;

721 i‡(
±
 !
NULL
)

722 (
±
);

729 i‡(
add
 == 0)

730 (
NULL
);

737 i‡((
±
 = (
DEVT
 *)
	`mÆloc
((DEVT))Ë=
NULL
) {

738 
	`∑xw¨n
(1, "Device mapÅable out of memory");

739 (
NULL
);

741 
±
->
dev
 = dev;

742 
±
->
li°
 = 
NULL
;

743 
±
->
fow
 = 
dèb
[
ödx
];

744 
dèb
[
ödx
] = 
±
;

745 (
±
);

746 
	}
}

761 
	$m≠_dev
(
ARCHD
 *
¨˙
, 
u_l⁄g
 
dev_mask
, u_l⁄g 
öo_mask
)

763 
DEVT
 *
±
;

764 
DLIST
 *
d±
;

765 
dev_t
 
œ°dev
 = 0;

766 
åc_öo
 = 0;

767 
åc_dev
 = 0;

768 
öo_t
 
åunc_bôs
 = 0;

769 
öo_t
 
nöo
;

771 i‡(
dèb
 =
NULL
)

777 i‡((
¨˙
->
sb
.
°_dev
 & (
dev_t
)
dev_mask
) !=árcn->sb.st_dev)

778 ++
åc_dev
;

779 i‡((
nöo
 = 
¨˙
->
sb
.
°_öo
 & (
öo_t
)
öo_mask
) !=árcn->sb.st_ino) {

780 ++
åc_öo
;

781 
åunc_bôs
 = 
¨˙
->
sb
.
°_öo
 & (
öo_t
)(~
öo_mask
);

788 i‡((
±
 = 
	`chk_dev
(
¨˙
->
sb
.
°_dev
, 0)Ë!
NULL
) {

792 
d±
 = 
±
->
li°
; d± !
NULL
; d± = d±->
fow
)

793 i‡(
d±
->
åunc_bôs
 ==Årunc_bits)

796 i‡(
d±
 !
NULL
) {

801 
¨˙
->
sb
.
°_dev
 = 
d±
->
dev
;

802 
¨˙
->
sb
.
°_öo
 = 
nöo
;

810 i‡(!
åc_öo
 && !
åc_dev
)

816 i‡((
±
 = 
	`chk_dev
(
¨˙
->
sb
.
°_dev
, 1)Ë=
NULL
)

817 
bad
;

828 i‡(!
åc_dev
 && (
åunc_bôs
 != 0)) {

829 i‡((
d±
 = (
DLIST
 *)
	`mÆloc
((DLIST))Ë=
NULL
)

830 
bad
;

831 
d±
->
åunc_bôs
 = 0;

832 
d±
->
dev
 = 
¨˙
->
sb
.
°_dev
;

833 
d±
->
fow
 = 
±
->
li°
;

834 
±
->
li°
 = 
d±
;

842 ++
œ°dev
 > 0) {

843 i‡(
	`chk_dev
(
œ°dev
, 0Ë!
NULL
)

850 i‡(((
œ°dev
 & ((
dev_t
)
dev_mask
)) !=Üastdev) ||

851 (
	`chk_dev
(
œ°dev
, 1Ë=
NULL
))

852 
bad
;

856 i‡((
œ°dev
 <0Ë|| ((
d±
 = (
DLIST
 *)
	`mÆloc
((DLIST))Ë=
NULL
))

857 
bad
;

863 
d±
->
åunc_bôs
 =Årunc_bits;

864 
d±
->
dev
 = 
œ°dev
;

865 
d±
->
fow
 = 
±
->
li°
;

866 
±
->
li°
 = 
d±
;

867 
¨˙
->
sb
.
°_dev
 = 
œ°dev
;

868 
¨˙
->
sb
.
°_öo
 = 
nöo
;

871 
bad
:

872 
	`∑xw¨n
(1, "UnableÅo fixÅruncated inode/device field when storing %s",

873 
¨˙
->
«me
);

874 
	`∑xw¨n
(0, "Archive may create improper hardÜinks whenÉxtracted");

876 
	}
}

903 
	$©dú_°¨t
()

905 i‡(
©ab
 !
NULL
)

907 i‡((
©ab
 = (
ATDIR
 **)
	`ˇŒoc
(
A_TAB_SZ
, (ATDIR *))Ë=
NULL
) {

908 
	`∑xw¨n
(1,"Cannotállocate space for directoryáccessÅimeÅable");

912 
	}
}

923 
	$©dú_íd
()

925 
ATDIR
 *
±
;

926 
i
;

928 i‡(
©ab
 =
NULL
)

934 
i
 = 0; i < 
A_TAB_SZ
; ++i) {

935 i‡((
±
 = 
©ab
[
i
]Ë=
NULL
)

942 ; 
±
 !
NULL
;Öà±->
fow
)

943 
	`£t_·ime
(
±
->
«me
,Öt->
mtime
,Öt->
©ime
, 1);

945 
	}
}

954 
	$add_©dú
(*
‚ame
, 
dev_t
 
dev
, 
öo_t
 
öo
, 
time_t
 
mtime
,Åime_à
©ime
)

956 
ATDIR
 *
±
;

957 
u_öt
 
ödx
;

959 i‡(
©ab
 =
NULL
)

969 
ödx
 = (()
öo
Ë% 
A_TAB_SZ
;

970 i‡((
±
 = 
©ab
[
ödx
]Ë!
NULL
) {

971 
±
 !
NULL
) {

972 i‡((
±
->
öo
 =öoË&& (±->
dev
 == dev))

974 
±
 =Öt->
fow
;

980 i‡(
±
 !
NULL
)

987 i‡((
±
 = (
ATDIR
 *)
	`mÆloc
((ATDIR))Ë!
NULL
) {

988 i‡((
±
->
«me
 = 
	`°rdup
(
‚ame
)Ë!
NULL
) {

989 
±
->
dev
 = dev;

990 
±
->
öo
 = ino;

991 
±
->
mtime
 = mtime;

992 
±
->
©ime
 =átime;

993 
±
->
fow
 = 
©ab
[
ödx
];

994 
©ab
[
ödx
] = 
±
;

997 
	`‰ì
(
±
);

1000 
	`∑xw¨n
(1, "DirectoryáccessÅimeÑesetÅableÑan out of memory");

1002 
	}
}

1016 
	$gë_©dú
(
dev_t
 
dev
, 
öo_t
 
öo
, 
time_t
 *
mtime
,Åime_à*
©ime
)

1018 
ATDIR
 *
±
;

1019 
ATDIR
 **
µt
;

1020 
u_öt
 
ödx
;

1022 i‡(
©ab
 =
NULL
)

1027 
ödx
 = (()
öo
Ë% 
A_TAB_SZ
;

1028 i‡((
±
 = 
©ab
[
ödx
]Ë=
NULL
)

1031 
µt
 = &(
©ab
[
ödx
]);

1032 
±
 !
NULL
) {

1033 i‡((
±
->
öo
 =öoË&& (±->
dev
 == dev))

1038 
µt
 = &(
±
->
fow
);

1039 
±
 =Öt->
fow
;

1045 i‡(
±
 =
NULL
)

1051 *
µt
 = 
±
->
fow
;

1052 *
mtime
 = 
±
->mtime;

1053 *
©ime
 = 
±
->atime;

1054 
	`‰ì
(
±
->
«me
);

1055 
	`‰ì
(
±
);

1057 
	}
}

1091 
	$dú_°¨t
()

1094 i‡(
dúfd
 != -1)

1100 
	`mem˝y
(
ãmpba£
, 
_TFILE_BASE
, (_TFILE_BASE));

1101 i‡((
dúfd
 = 
	`mk°emp
(
ãmpfûe
)) >= 0) {

1102 ()
	`u∆ök
(
ãmpfûe
);

1105 
	`∑xw¨n
(1, "UnableÅo createÅemporary file for directoryÅimes: %s",

1106 
ãmpfûe
);

1108 
	}
}

1124 
	$add_dú
(*
«me
, 
∆í
, 
°©
 *
psb
, 
‰c_mode
)

1126 
DIRDATA
 
dblk
;

1128 i‡(
dúfd
 < 0)

1135 i‡((
dblk
.
≈os
 = 
	`l£ek
(
dúfd
, 0L, 
SEEK_CUR
)) < 0) {

1136 
	`∑xw¨n
(1,"U«bÀÅÿ°‹êmodê™dÅime†f‹ dúe˘‹y: %s",
«me
);

1143 
dblk
.
∆í
 =Çlen + 1;

1144 
dblk
.
mode
 = 
psb
->
°_mode
 & 0xffff;

1145 
dblk
.
mtime
 = 
psb
->
°_mtime
;

1146 
dblk
.
©ime
 = 
psb
->
°_©ime
;

1147 
dblk
.
‰c_mode
 = frc_mode;

1148 i‡((
	`wrôe
(
dúfd
, 
«me
, 
dblk
.
∆í
) == dblk.nlen) &&

1149 (
	`wrôe
(
dúfd
, (*)&
dblk
, (dblk)) == (dblk))) {

1150 ++
dú˙t
;

1154 
	`∑xw¨n
(1,"U«bÀÅÿ°‹êmodê™dÅime†f‹ cª©ed dúe˘‹y: %s",
«me
);

1156 
	}
}

1165 
	$¥oc_dú
()

1167 
«me
[
PAXPATHLEN
+1];

1168 
DIRDATA
 
dblk
;

1169 
u_l⁄g
 
˙t
;

1171 i‡(
dúfd
 < 0)

1176 
˙t
 = 0; c¡ < 
dú˙t
; ++cnt) {

1181 i‡(
	`l£ek
(
dúfd
, -((
off_t
)(
dblk
)), 
SEEK_CUR
) < 0)

1183 i‡(
	`ªad
(
dúfd
,(*)&
dblk
, (dblk)) != (dblk))

1185 i‡(
	`l£ek
(
dúfd
, 
dblk
.
≈os
, 
SEEK_SET
) < 0)

1187 i‡(
	`ªad
(
dúfd
, 
«me
, 
dblk
.
∆í
) != dblk.nlen)

1189 i‡(
	`l£ek
(
dúfd
, 
dblk
.
≈os
, 
SEEK_SET
) < 0)

1196 i‡(
pmode
 || 
dblk
.
‰c_mode
)

1197 
	`£t_pmode
(
«me
, 
dblk
.
mode
);

1198 i‡(
∑time
 || 
pmtime
)

1199 
	`£t_·ime
(
«me
, 
dblk
.
mtime
, dblk.
©ime
, 0);

1202 ()
	`˛o£
(
dúfd
);

1203 
dúfd
 = -1;

1204 i‡(
˙t
 !
dú˙t
)

1205 
	`∑xw¨n
(1,"UnableÅo set modeándÅimes for created directories");

1207 
	}
}

1227 
u_öt


1228 
	$°_hash
(*
«me
, 
Àn
, 
èbsz
)

1230 *
±
;

1231 *
de°
;

1232 *
íd
;

1233 
i
;

1234 
u_öt
 
key
 = 0;

1235 
°ïs
;

1236 
ªs
;

1237 
u_öt
 
vÆ
;

1244 i‡(
Àn
 > 
MAXKEYLEN
) {

1245 
±
 = &(
«me
[
Àn
 - 
MAXKEYLEN
]);

1246 
Àn
 = 
MAXKEYLEN
;

1248 
±
 = 
«me
;

1254 
°ïs
 = 
Àn
/(
u_öt
);

1255 
ªs
 = 
Àn
 % (
u_öt
);

1262 
i
 = 0; i < 
°ïs
; ++i) {

1263 
íd
 = 
±
 + (
u_öt
);

1264 
de°
 = (*)&
vÆ
;

1265 
±
 < 
íd
)

1266 *
de°
++ = *
±
++;

1267 
key
 +
vÆ
;

1273 i‡(
ªs
) {

1274 
vÆ
 = 0;

1275 
íd
 = 
±
 + 
ªs
;

1276 
de°
 = (*)&
vÆ
;

1277 
±
 < 
íd
)

1278 *
de°
++ = *
±
++;

1279 
key
 +
vÆ
;

1285 (
key
 % 
èbsz
);

1286 
	}
}

	@pax/tables.h

46 
	#L_TAB_SZ
 2503

	)

47 
	#F_TAB_SZ
 50503

	)

48 
	#N_TAB_SZ
 541

	)

49 
	#D_TAB_SZ
 317

	)

50 
	#A_TAB_SZ
 317

	)

51 
	#MAXKEYLEN
 64

	)

57 
	shrd k
 {

58 *
	m«me
;

59 
dev_t
 
	mdev
;

60 
öo_t
 
	möo
;

61 
u_l⁄g
 
	m∆ök
;

62 
hrd k
 *
	mfow
;

63 } 
	tHRDLNK
;

76 
	s·m
 {

77 
	m«mñí
;

78 
time_t
 
	mmtime
;

79 
off_t
 
	m£ek
;

80 
·m
 *
	mfow
;

81 } 
	tFTM
;

90 
	s«mt
 {

91 *
	m⁄ame
;

92 *
	m¬ame
;

93 
«mt
 *
	mfow
;

94 } 
	tNAMT
;

122 
	sdevt
 {

123 
dev_t
 
	mdev
;

124 
devt
 *
	mfow
;

125 
dli°
 *
	mli°
;

126 } 
	tDEVT
;

128 
	sdli°
 {

129 
öo_t
 
	måunc_bôs
;

130 
dev_t
 
	mdev
;

131 
dli°
 *
	mfow
;

132 } 
	tDLIST
;

142 
	s©dú
 {

143 *
	m«me
;

144 
dev_t
 
	mdev
;

145 
öo_t
 
	möo
;

146 
time_t
 
	mmtime
;

147 
time_t
 
	m©ime
;

148 
©dú
 *
	mfow
;

149 } 
	tATDIR
;

162 
	sdúd©a
 {

163 
	m∆í
;

164 
off_t
 
	m≈os
;

165 
mode_t
 
	mmode
;

166 
time_t
 
	mmtime
;

167 
time_t
 
	m©ime
;

168 
	m‰c_mode
;

169 } 
	tDIRDATA
;

	@pax/tar.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)tar.c 8.2 (Berkeley) 4/18/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/tar.c,v 1.25.10.2.4.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/time.h
>

44 
	~<sys/°©.h
>

45 
	~<°rög.h
>

46 
	~<°dio.h
>

47 
	~<uni°d.h
>

48 
	~<°dlib.h
>

49 
	~"∑x.h
"

50 
	~"exã∫.h
"

51 
	~"èr.h
"

57 
u_l⁄g
 
èr_chksm
(*, );

58 *
«me_•lô
(*, );

59 
ul_o˘
(
u_l⁄g
, *, , );

60 #i‚de‡
NET2_STAT


61 
uqd_o˘
(
u_quad_t
, *, , );

68 
	gèr_nodú
;

78 
	$èr_ídwr
()

80 (
	`wr_skù
((
off_t
)(
NULLCNT
*
BLKMULT
)));

81 
	}
}

90 
off_t


91 
	$èr_ídrd
()

93 ((
off_t
)(
NULLCNT
*
BLKMULT
));

94 
	}
}

108 
	$èr_åaû
(*
buf
, 
ö_ªsync
, *
˙t
)

110 
i
;

115 
i
 = 0; i < 
BLKMULT
; ++i) {

116 i‡(
buf
[
i
] != '\0')

123 i‡(
i
 !
BLKMULT
)

134 i‡(!
ö_ªsync
 && (++*
˙t
 >
NULLCNT
))

137 
	}
}

151 
	$ul_o˘
(
u_l⁄g
 
vÆ
, *
°r
, 
Àn
, 
ãrm
)

153 *
±
;

158 
±
 = 
°r
 + 
Àn
 - 1;

159 
ãrm
) {

161 *
±
-- = '\0';

164 *
±
-- = ' ';

165 *
±
-- = '\0';

168 *
±
-- = ' ';

172 *
±
-- = '\0';

173 *
±
-- = ' ';

180 
±
 >
°r
) {

181 *
±
-- = '0' + ()(
vÆ
 & 0x7);

182 i‡((
vÆ
 = vÆ >> 3Ë=(
u_l⁄g
)0)

186 
±
 >
°r
)

187 *
±
-- = '0';

188 i‡(
vÆ
 !(
u_l⁄g
)0)

191 
	}
}

193 #i‚de‡
NET2_STAT


206 
	$uqd_o˘
(
u_quad_t
 
vÆ
, *
°r
, 
Àn
, 
ãrm
)

208 *
±
;

213 
±
 = 
°r
 + 
Àn
 - 1;

214 
ãrm
) {

216 *
±
-- = '\0';

219 *
±
-- = ' ';

220 *
±
-- = '\0';

223 *
±
-- = ' ';

227 *
±
-- = '\0';

228 *
±
-- = ' ';

235 
±
 >
°r
) {

236 *
±
-- = '0' + ()(
vÆ
 & 0x7);

237 i‡((
vÆ
 = val >> 3) == 0)

241 
±
 >
°r
)

242 *
±
-- = '0';

243 i‡(
vÆ
 !(
u_quad_t
)0)

246 
	}
}

259 
u_l⁄g


260 
	$èr_chksm
(*
blk
, 
Àn
)

262 *
°›
;

263 *
±
;

264 
u_l⁄g
 
chksm
 = 
BLNKSUM
;

269 
±
 = 
blk
;

270 
°›
 = 
blk
 + 
CHK_OFFSET
;

271 
±
 < 
°›
)

272 
chksm
 +(
u_l⁄g
)(*
±
++ & 0xff);

280 
±
 +
CHK_LEN
;

281 
°›
 = 
blk
 + 
Àn
;

282 
±
 < 
°›
)

283 
chksm
 +(
u_l⁄g
)(*
±
++ & 0xff);

284 (
chksm
);

285 
	}
}

301 
	$èr_id
(*
blk
, 
size
)

303 
HD_TAR
 *
hd
;

304 
HD_USTAR
 *
uhd
;

306 i‡(
size
 < 
BLKMULT
)

308 
hd
 = (
HD_TAR
 *)
blk
;

309 
uhd
 = (
HD_USTAR
 *)
blk
;

318 i‡(
hd
->
«me
[0] == '\0')

320 i‡(
	`°∫cmp
(
uhd
->
magic
, 
TMAGIC
, 
TMAGLEN
 - 1) == 0)

322 i‡(
	`asc_ul
(
hd
->
chksum
,(hd->chksum),
OCT
Ë!
	`èr_chksm
(
blk
,
BLKMULT
))

325 
	}
}

335 
	$èr_›t
()

337 
OPLIST
 *
›t
;

339 (
›t
 = 
	`›t_√xt
()Ë!
NULL
) {

340 i‡(
	`°rcmp
(
›t
->
«me
, 
TAR_OPTION
) ||

341 
	`°rcmp
(
›t
->
vÆue
, 
TAR_NODIR
)) {

342 
	`∑xw¨n
(1, "UnknownÅar format -o option/valueÖair %s=%s",

343 
›t
->
«me
, o±->
vÆue
);

344 
	`∑xw¨n
(1,"%s=%s isÅhe only supportedÅar format option",

345 
TAR_OPTION
, 
TAR_NODIR
);

352 i‡((
a˘
 !
APPND
Ë&& (a˘ !
ARCHIVE
)) {

353 
	`∑xw¨n
(1, "%s=%s is only supported when writing.",

354 
›t
->
«me
, o±->
vÆue
);

357 
èr_nodú
 = 1;

360 
	}
}

372 
	$èr_rd
(
ARCHD
 *
¨˙
, *
buf
)

374 
HD_TAR
 *
hd
;

375 *
±
;

380 i‡(
	`èr_id
(
buf
, 
BLKMULT
) < 0)

382 
¨˙
->
‹g_«me
 =ár˙->
«me
;

383 
¨˙
->
sb
.
°_∆ök
 = 1;

384 
¨˙
->
∑t
 = 
NULL
;

389 
hd
 = (
HD_TAR
 *)
buf
;

395 
¨˙
->
∆í
 = 
	`l_°∫˝y
◊r˙->
«me
, 
hd
->name,

396 
	`MIN
((
hd
->
«me
), (
¨˙
->name)) - 1);

397 
¨˙
->
«me
[¨˙->
∆í
] = '\0';

398 
¨˙
->
sb
.
°_mode
 = (
mode_t
)(
	`asc_ul
(
hd
->
mode
,(hd->mode),
OCT
) &

400 
¨˙
->
sb
.
°_uid
 = (
uid_t
)
	`asc_ul
(
hd
->
uid
, (hd->uid), 
OCT
);

401 
¨˙
->
sb
.
°_gid
 = (
gid_t
)
	`asc_ul
(
hd
->
gid
, (hd->gid), 
OCT
);

402 #ifde‡
NET2_STAT


403 
¨˙
->
sb
.
°_size
 = (
off_t
)
	`asc_ul
(
hd
->
size
, (hd->size), 
OCT
);

404 
¨˙
->
sb
.
°_mtime
 = (
time_t
)
	`asc_ul
(
hd
->
mtime
, (hd->mtime), 
OCT
);

406 
¨˙
->
sb
.
°_size
 = (
off_t
)
	`asc_uqd
(
hd
->
size
, (hd->size), 
OCT
);

407 
¨˙
->
sb
.
°_mtime
 = (
time_t
)
	`asc_uqd
(
hd
->
mtime
, (hd->mtime), 
OCT
);

409 
¨˙
->
sb
.
°_˘ime
 =ár˙->sb.
°_©ime
 =ár˙->sb.
°_mtime
;

415 
±
 = &(
¨˙
->
«me
[¨˙->
∆í
 - 1]);

416 
¨˙
->
∑d
 = 0;

417 
¨˙
->
skù
 = 0;

418 
hd
->
lökÊag
) {

419 
SYMTYPE
:

424 
¨˙
->
ty≥
 = 
PAX_SLK
;

425 
¨˙
->
 _∆í
 = 
	`l_°∫˝y
◊r˙->
 _«me
, 
hd
->
lök«me
,

426 
	`MIN
((
hd
->
lök«me
), (
¨˙
->
 _«me
)) - 1);

427 
¨˙
->
 _«me
[¨˙->
 _∆í
] = '\0';

428 
¨˙
->
sb
.
°_mode
 |
S_IFLNK
;

430 
LNKTYPE
:

435 
¨˙
->
ty≥
 = 
PAX_HLK
;

436 
¨˙
->
sb
.
°_∆ök
 = 2;

437 
¨˙
->
 _∆í
 = 
	`l_°∫˝y
◊r˙->
 _«me
, 
hd
->
lök«me
,

438 
	`MIN
((
hd
->
lök«me
), (
¨˙
->
 _«me
)) - 1);

439 
¨˙
->
 _«me
[¨˙->
 _∆í
] = '\0';

445 
¨˙
->
sb
.
°_mode
 |
S_IFREG
;

447 
DIRTYPE
:

451 
¨˙
->
ty≥
 = 
PAX_DIR
;

452 
¨˙
->
sb
.
°_mode
 |
S_IFDIR
;

453 
¨˙
->
sb
.
°_∆ök
 = 2;

454 
¨˙
->
 _«me
[0] = '\0';

455 
¨˙
->
 _∆í
 = 0;

457 
AREGTYPE
:

458 
REGTYPE
:

463 
¨˙
->
 _«me
[0] = '\0';

464 
¨˙
->
 _∆í
 = 0;

465 i‡(*
±
 == '/') {

469 
¨˙
->
ty≥
 = 
PAX_DIR
;

470 
¨˙
->
sb
.
°_mode
 |
S_IFDIR
;

471 
¨˙
->
sb
.
°_∆ök
 = 2;

478 
¨˙
->
ty≥
 = 
PAX_REG
;

479 
¨˙
->
sb
.
°_mode
 |
S_IFREG
;

480 
¨˙
->
∑d
 = 
	`TAR_PAD
◊r˙->
sb
.
°_size
);

481 
¨˙
->
skù
 =ár˙->
sb
.
°_size
;

489 i‡(*
±
 == '/') {

490 *
±
 = '\0';

491 --
¨˙
->
∆í
;

494 
	}
}

509 
	$èr_wr
(
ARCHD
 *
¨˙
)

511 
HD_TAR
 *
hd
;

512 
Àn
;

513 
HD_TAR
 
hdblk
;

518 
¨˙
->
ty≥
) {

519 
PAX_DIR
:

523 i‡(
èr_nodú
)

526 
PAX_CHR
:

527 
	`∑xw¨n
(1, "Tar cannotárchiveá character device %s",

528 
¨˙
->
‹g_«me
);

530 
PAX_BLK
:

531 
	`∑xw¨n
(1, "T¨ c™nŸárchivê®block devi˚ %s", 
¨˙
->
‹g_«me
);

533 
PAX_SCK
:

534 
	`∑xw¨n
(1, "T¨ c™nŸárchivê®sockë %s", 
¨˙
->
‹g_«me
);

536 
PAX_FIF
:

537 
	`∑xw¨n
(1, "T¨ c™nŸárchivê®fifÿ%s", 
¨˙
->
‹g_«me
);

539 
PAX_SLK
:

540 
PAX_HLK
:

541 
PAX_HRG
:

542 i‡(
¨˙
->
 _∆í
 >()(
hd
->
lök«me
)) {

543 
	`∑xw¨n
(1,"LökÇamêtoÿl⁄g f‹Å¨ %s", 
¨˙
->
 _«me
);

547 
PAX_REG
:

548 
PAX_CTG
:

556 
Àn
 = 
¨˙
->
∆í
;

557 i‡(
¨˙
->
ty≥
 =
PAX_DIR
)

558 ++
Àn
;

559 i‡(
Àn
 >()(
hd
->
«me
)) {

560 
	`∑xw¨n
(1, "Fûê«mêtoÿl⁄g f‹Å¨ %s", 
¨˙
->
«me
);

572 
hd
 = &
hdblk
;

573 
	`l_°∫˝y
(
hd
->
«me
, 
¨˙
->name, (hd->name) - 1);

574 
hd
->
«me
[(hd->name) - 1] = '\0';

575 
¨˙
->
∑d
 = 0;

577 i‡(
¨˙
->
ty≥
 =
PAX_DIR
) {

583 
hd
->
lökÊag
 = 
AREGTYPE
;

584 
	`mem£t
(
hd
->
lök«me
, 0, (hd->linkname));

585 
hd
->
«me
[
Àn
-1] = '/';

586 i‡(
	`ul_o˘
((
u_l⁄g
)0L, 
hd
->
size
, (hd->size), 1))

587 
out
;

588 } i‡(
¨˙
->
ty≥
 =
PAX_SLK
) {

592 
hd
->
lökÊag
 = 
SYMTYPE
;

593 
	`l_°∫˝y
(
hd
->
lök«me
,
¨˙
->
 _«me
, (hd->linkname) - 1);

594 
hd
->
lök«me
[(hd->linkname) - 1] = '\0';

595 i‡(
	`ul_o˘
((
u_l⁄g
)0L, 
hd
->
size
, (hd->size), 1))

596 
out
;

597 } i‡((
¨˙
->
ty≥
 =
PAX_HLK
Ë|| (¨˙->ty≥ =
PAX_HRG
)) {

601 
hd
->
lökÊag
 = 
LNKTYPE
;

602 
	`l_°∫˝y
(
hd
->
lök«me
,
¨˙
->
 _«me
, (hd->linkname) - 1);

603 
hd
->
lök«me
[(hd->linkname) - 1] = '\0';

604 i‡(
	`ul_o˘
((
u_l⁄g
)0L, 
hd
->
size
, (hd->size), 1))

605 
out
;

610 
hd
->
lökÊag
 = 
AREGTYPE
;

611 
	`mem£t
(
hd
->
lök«me
, 0, (hd->linkname));

612 #ifde‡
NET2_STAT


613 i‡(
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_size
, 
hd
->
size
,

614 (
hd
->
size
), 1)) {

616 i‡(
	`uqd_o˘
((
u_quad_t
)
¨˙
->
sb
.
°_size
, 
hd
->
size
,

617 (
hd
->
size
), 1)) {

619 
	`∑xw¨n
(1,"Fûêi†toÿœrgêf‹Å¨ %s", 
¨˙
->
‹g_«me
);

622 
¨˙
->
∑d
 = 
	`TAR_PAD
◊r˙->
sb
.
°_size
);

628 i‡(
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_mode
, 
hd
->
mode
, (hd->mode), 0) ||

629 
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_uid
, 
hd
->
uid
, (hd->uid), 0) ||

630 
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_gid
, 
hd
->
gid
, (hd->gid), 0) ||

631 
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_mtime
, 
hd
->
mtime
, (hd->mtime), 1))

632 
out
;

639 i‡(
	`ul_o˘
(
	`èr_chksm
((*)&
hdblk
, (
HD_TAR
)), 
hd
->
chksum
,

640 (
hd
->
chksum
), 3))

641 
out
;

642 i‡(
	`wr_rdbuf
((*)&
hdblk
, (
HD_TAR
)) < 0)

644 i‡(
	`wr_skù
((
off_t
)(
BLKMULT
 - (
HD_TAR
))) < 0)

646 i‡((
¨˙
->
ty≥
 =
PAX_CTG
Ë|| (¨˙->ty≥ =
PAX_REG
))

650 
out
:

654 
	`∑xw¨n
(1, "T¨ hódî fõld i†toÿsmÆ»f‹ %s", 
¨˙
->
‹g_«me
);

656 
	}
}

670 
	$u°¨_°rd
()

672 i‡((
	`u§tb_°¨t
(Ë< 0Ë|| (
	`gΩtb_°¨t
() < 0))

675 
	}
}

685 
	$u°¨_°wr
()

687 i‡((
	`uidtb_°¨t
(Ë< 0Ë|| (
	`gidtb_°¨t
() < 0))

690 
	}
}

701 
	$u°¨_id
(*
blk
, 
size
)

703 
HD_USTAR
 *
hd
;

705 i‡(
size
 < 
BLKMULT
)

707 
hd
 = (
HD_USTAR
 *)
blk
;

715 i‡(
hd
->
«me
[0] == '\0')

717 i‡(
	`°∫cmp
(
hd
->
magic
, 
TMAGIC
, 
TMAGLEN
 - 1) != 0)

719 i‡(
	`asc_ul
(
hd
->
chksum
,(hd->chksum),
OCT
Ë!
	`èr_chksm
(
blk
,
BLKMULT
))

722 
	}
}

733 
	$u°¨_rd
(
ARCHD
 *
¨˙
, *
buf
)

735 
HD_USTAR
 *
hd
;

736 *
de°
;

737 
˙t
 = 0;

738 
dev_t
 
devmaj‹
;

739 
dev_t
 
devmö‹
;

744 i‡(
	`u°¨_id
(
buf
, 
BLKMULT
) < 0)

746 
¨˙
->
‹g_«me
 =ár˙->
«me
;

747 
¨˙
->
sb
.
°_∆ök
 = 1;

748 
¨˙
->
∑t
 = 
NULL
;

749 
¨˙
->
∆í
 = 0;

750 
hd
 = (
HD_USTAR
 *)
buf
;

756 
de°
 = 
¨˙
->
«me
;

757 i‡(*(
hd
->
¥efix
) != '\0') {

758 
˙t
 = 
	`l_°∫˝y
(
de°
, 
hd
->
¥efix
,

759 
	`MIN
((
hd
->
¥efix
), (
¨˙
->
«me
) - 2));

760 
de°
 +
˙t
;

761 *
de°
++ = '/';

762 
˙t
++;

769 
¨˙
->
∆í
 = 
˙t
 + 
	`l_°∫˝y
(
de°
, 
hd
->
«me
,

770 
	`MIN
((
hd
->
«me
), (
¨˙
->«meË- 
˙t
 - 1));

771 
¨˙
->
«me
[¨˙->
∆í
] = '\0';

777 
¨˙
->
sb
.
°_mode
 = (
mode_t
)(
	`asc_ul
(
hd
->
mode
, (hd->mode), 
OCT
) &

779 #ifde‡
NET2_STAT


780 
¨˙
->
sb
.
°_size
 = (
off_t
)
	`asc_ul
(
hd
->
size
, (hd->size), 
OCT
);

781 
¨˙
->
sb
.
°_mtime
 = (
time_t
)
	`asc_ul
(
hd
->
mtime
, (hd->mtime), 
OCT
);

783 
¨˙
->
sb
.
°_size
 = (
off_t
)
	`asc_uqd
(
hd
->
size
, (hd->size), 
OCT
);

784 
¨˙
->
sb
.
°_mtime
 = (
time_t
)
	`asc_uqd
(
hd
->
mtime
, (hd->mtime), 
OCT
);

786 
¨˙
->
sb
.
°_˘ime
 =ár˙->sb.
°_©ime
 =ár˙->sb.
°_mtime
;

794 
hd
->
g«me
[(hd->gname) - 1] = '\0';

795 i‡(
	`gid_«me
(
hd
->
g«me
, &(
¨˙
->
sb
.
°_gid
)) < 0)

796 
¨˙
->
sb
.
°_gid
 = (
gid_t
)
	`asc_ul
(
hd
->
gid
, (hd->gid), 
OCT
);

797 
hd
->
u«me
[(hd->uname) - 1] = '\0';

798 i‡(
	`uid_«me
(
hd
->
u«me
, &(
¨˙
->
sb
.
°_uid
)) < 0)

799 
¨˙
->
sb
.
°_uid
 = (
uid_t
)
	`asc_ul
(
hd
->
uid
, (hd->uid), 
OCT
);

804 
¨˙
->
 _«me
[0] = '\0';

805 
¨˙
->
 _∆í
 = 0;

806 
¨˙
->
∑d
 = 0;

807 
¨˙
->
skù
 = 0;

808 
¨˙
->
sb
.
°_rdev
 = (
dev_t
)0;

813 
hd
->
ty≥Êag
) {

814 
FIFOTYPE
:

815 
¨˙
->
ty≥
 = 
PAX_FIF
;

816 
¨˙
->
sb
.
°_mode
 |
S_IFIFO
;

818 
DIRTYPE
:

819 
¨˙
->
ty≥
 = 
PAX_DIR
;

820 
¨˙
->
sb
.
°_mode
 |
S_IFDIR
;

821 
¨˙
->
sb
.
°_∆ök
 = 2;

828 i‡(
¨˙
->
«me
[¨˙->
∆í
 - 1] == '/')

829 
¨˙
->
«me
[--¨˙->
∆í
] = '\0';

831 
BLKTYPE
:

832 
CHRTYPE
:

836 i‡(
hd
->
ty≥Êag
 =
BLKTYPE
) {

837 
¨˙
->
ty≥
 = 
PAX_BLK
;

838 
¨˙
->
sb
.
°_mode
 |
S_IFBLK
;

840 
¨˙
->
ty≥
 = 
PAX_CHR
;

841 
¨˙
->
sb
.
°_mode
 |
S_IFCHR
;

843 
devmaj‹
 = (
dev_t
)
	`asc_ul
(
hd
->devmaj‹,(hd->devmaj‹),
OCT
);

844 
devmö‹
 = (
dev_t
)
	`asc_ul
(
hd
->devmö‹,(hd->devmö‹),
OCT
);

845 
¨˙
->
sb
.
°_rdev
 = 
	`TODEV
(
devmaj‹
, 
devmö‹
);

847 
SYMTYPE
:

848 
LNKTYPE
:

849 i‡(
hd
->
ty≥Êag
 =
SYMTYPE
) {

850 
¨˙
->
ty≥
 = 
PAX_SLK
;

851 
¨˙
->
sb
.
°_mode
 |
S_IFLNK
;

853 
¨˙
->
ty≥
 = 
PAX_HLK
;

857 
¨˙
->
sb
.
°_mode
 |
S_IFREG
;

858 
¨˙
->
sb
.
°_∆ök
 = 2;

863 
¨˙
->
 _∆í
 = 
	`l_°∫˝y
◊r˙->
 _«me
, 
hd
->
lök«me
,

864 
	`MIN
((
hd
->
lök«me
), (
¨˙
->
 _«me
) - 1));

865 
¨˙
->
 _«me
[¨˙->
 _∆í
] = '\0';

867 
CONTTYPE
:

868 
AREGTYPE
:

869 
REGTYPE
:

875 
¨˙
->
ty≥
 = 
PAX_REG
;

876 
¨˙
->
∑d
 = 
	`TAR_PAD
◊r˙->
sb
.
°_size
);

877 
¨˙
->
skù
 =ár˙->
sb
.
°_size
;

878 
¨˙
->
sb
.
°_mode
 |
S_IFREG
;

882 
	}
}

897 
	$u°¨_wr
(
ARCHD
 *
¨˙
)

899 
HD_USTAR
 *
hd
;

900 *
±
;

901 
HD_USTAR
 
hdblk
;

906 i‡(
¨˙
->
ty≥
 =
PAX_SCK
) {

907 
	`∑xw¨n
(1, "U°¨ c™nŸárchivê®sockë %s", 
¨˙
->
‹g_«me
);

914 i‡(((
¨˙
->
ty≥
 =
PAX_SLK
Ë|| (¨˙->ty≥ =
PAX_HLK
) ||

915 (
¨˙
->
ty≥
 =
PAX_HRG
)) &&

916 (
¨˙
->
 _∆í
 > ()(
hd
->
lök«me
))) {

917 
	`∑xw¨n
(1, "LökÇamêtoÿl⁄g f‹ u°¨ %s", 
¨˙
->
 _«me
);

925 i‡((
±
 = 
	`«me_•lô
(
¨˙
->
«me
,ár˙->
∆í
)Ë=
NULL
) {

926 
	`∑xw¨n
(1, "Fûê«mêtoÿl⁄g f‹ u°¨ %s", 
¨˙
->
«me
);

929 
hd
 = &
hdblk
;

930 
¨˙
->
∑d
 = 0L;

935 i‡(
±
 !
¨˙
->
«me
) {

940 *
±
 = '\0';

941 
	`l_°∫˝y
(
hd
->
¥efix
, 
¨˙
->
«me
, (hd->prefix));

942 *
±
++ = '/';

944 
	`mem£t
(
hd
->
¥efix
, 0, (hd->prefix));

950 
	`l_°∫˝y
(
hd
->
«me
, 
±
, (hd->name));

955 
¨˙
->
ty≥
) {

956 
PAX_DIR
:

957 
hd
->
ty≥Êag
 = 
DIRTYPE
;

958 
	`mem£t
(
hd
->
lök«me
, 0, (hd->linkname));

959 
	`mem£t
(
hd
->
devmaj‹
, 0, (hd->devmajor));

960 
	`mem£t
(
hd
->
devmö‹
, 0, (hd->devminor));

961 i‡(
	`ul_o˘
((
u_l⁄g
)0L, 
hd
->
size
, (hd->size), 3))

962 
out
;

964 
PAX_CHR
:

965 
PAX_BLK
:

966 i‡(
¨˙
->
ty≥
 =
PAX_CHR
)

967 
hd
->
ty≥Êag
 = 
CHRTYPE
;

969 
hd
->
ty≥Êag
 = 
BLKTYPE
;

970 
	`mem£t
(
hd
->
lök«me
, 0, (hd->linkname));

971 i‡(
	`ul_o˘
((
u_l⁄g
)
	`MAJOR
(
¨˙
->
sb
.
°_rdev
), 
hd
->
devmaj‹
,

972 (
hd
->
devmaj‹
), 3) ||

973 
	`ul_o˘
((
u_l⁄g
)
	`MINOR
(
¨˙
->
sb
.
°_rdev
), 
hd
->
devmö‹
,

974 (
hd
->
devmö‹
), 3) ||

975 
	`ul_o˘
((
u_l⁄g
)0L, 
hd
->
size
, (hd->size), 3))

976 
out
;

978 
PAX_FIF
:

979 
hd
->
ty≥Êag
 = 
FIFOTYPE
;

980 
	`mem£t
(
hd
->
lök«me
, 0, (hd->linkname));

981 
	`mem£t
(
hd
->
devmaj‹
, 0, (hd->devmajor));

982 
	`mem£t
(
hd
->
devmö‹
, 0, (hd->devminor));

983 i‡(
	`ul_o˘
((
u_l⁄g
)0L, 
hd
->
size
, (hd->size), 3))

984 
out
;

986 
PAX_SLK
:

987 
PAX_HLK
:

988 
PAX_HRG
:

989 i‡(
¨˙
->
ty≥
 =
PAX_SLK
)

990 
hd
->
ty≥Êag
 = 
SYMTYPE
;

992 
hd
->
ty≥Êag
 = 
LNKTYPE
;

994 
	`l_°∫˝y
(
hd
->
lök«me
,
¨˙
->
 _«me
, (hd->linkname));

995 
	`mem£t
(
hd
->
devmaj‹
, 0, (hd->devmajor));

996 
	`mem£t
(
hd
->
devmö‹
, 0, (hd->devminor));

997 i‡(
	`ul_o˘
((
u_l⁄g
)0L, 
hd
->
size
, (hd->size), 3))

998 
out
;

1000 
PAX_REG
:

1001 
PAX_CTG
:

1006 i‡(
¨˙
->
ty≥
 =
PAX_CTG
)

1007 
hd
->
ty≥Êag
 = 
CONTTYPE
;

1009 
hd
->
ty≥Êag
 = 
REGTYPE
;

1010 
	`mem£t
(
hd
->
lök«me
, 0, (hd->linkname));

1011 
	`mem£t
(
hd
->
devmaj‹
, 0, (hd->devmajor));

1012 
	`mem£t
(
hd
->
devmö‹
, 0, (hd->devminor));

1013 
¨˙
->
∑d
 = 
	`TAR_PAD
◊r˙->
sb
.
°_size
);

1014 #ifde‡
NET2_STAT


1015 i‡(
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_size
, 
hd
->
size
,

1016 (
hd
->
size
), 3)) {

1018 i‡(
	`uqd_o˘
((
u_quad_t
)
¨˙
->
sb
.
°_size
, 
hd
->
size
,

1019 (
hd
->
size
), 3)) {

1021 
	`∑xw¨n
(1,"Fûêi†toÿl⁄g f‹ u°¨ %s",
¨˙
->
‹g_«me
);

1027 
	`l_°∫˝y
(
hd
->
magic
, 
TMAGIC
, 
TMAGLEN
);

1028 
	`l_°∫˝y
(
hd
->
vîsi⁄
, 
TVERSION
, 
TVERSLEN
);

1034 i‡(
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_mode
, 
hd
->
mode
, (hd->mode), 3) ||

1035 
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_uid
, 
hd
->
uid
, (hd->uid), 3) ||

1036 
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_gid
, 
hd
->
gid
, (hd->gid), 3) ||

1037 
	`ul_o˘
((
u_l⁄g
)
¨˙
->
sb
.
°_mtime
,
hd
->
mtime
,(hd->mtime),3))

1038 
out
;

1039 
	`l_°∫˝y
(
hd
->
u«me
,
	`«me_uid
(
¨˙
->
sb
.
°_uid
, 0),(hd->uname));

1040 
	`l_°∫˝y
(
hd
->
g«me
,
	`«me_gid
(
¨˙
->
sb
.
°_gid
, 0),(hd->gname));

1047 i‡(
	`ul_o˘
(
	`èr_chksm
((*)&
hdblk
, (
HD_USTAR
)), 
hd
->
chksum
,

1048 (
hd
->
chksum
), 3))

1049 
out
;

1050 i‡(
	`wr_rdbuf
((*)&
hdblk
, (
HD_USTAR
)) < 0)

1052 i‡(
	`wr_skù
((
off_t
)(
BLKMULT
 - (
HD_USTAR
))) < 0)

1054 i‡((
¨˙
->
ty≥
 =
PAX_CTG
Ë|| (¨˙->ty≥ =
PAX_REG
))

1058 
out
:

1062 
	`∑xw¨n
(1, "U°¨ hódî fõld i†toÿsmÆ»f‹ %s", 
¨˙
->
‹g_«me
);

1064 
	}
}

1079 
	$«me_•lô
(*
«me
, 
Àn
)

1081 *
°¨t
;

1087 i‡(
Àn
 <
TNMSZ
)

1088 (
«me
);

1089 i‡(
Àn
 > 
TPFSZ
 + 
TNMSZ
)

1090 (
NULL
);

1098 
°¨t
 = 
«me
 + 
Àn
 - 
TNMSZ
;

1099 (*
°¨t
 != '\0') && (*start != '/'))

1100 ++
°¨t
;

1106 i‡(*
°¨t
 == '\0')

1107 (
NULL
);

1108 
Àn
 = 
°¨t
 - 
«me
;

1116 i‡((
Àn
 > 
TPFSZ
) || (len == 0))

1117 (
NULL
);

1122 (
°¨t
);

1123 
	}
}

	@pax/tar.h

40 
	#CHK_LEN
 8

	)

41 
	#TNMSZ
 100

	)

42 #ifde‡
_PAX_


43 
	#NULLCNT
 2

	)

44 
	#CHK_OFFSET
 148

	)

45 
	#BLNKSUM
 256L

	)

52 
	#REGTYPE
 '0'

	)

53 
	#AREGTYPE
 '\0'

	)

54 
	#LNKTYPE
 '1'

	)

55 
	#SYMTYPE
 '2'

	)

56 
	#CHRTYPE
 '3'

	)

57 
	#BLKTYPE
 '4'

	)

58 
	#DIRTYPE
 '5'

	)

59 
	#FIFOTYPE
 '6'

	)

60 
	#CONTTYPE
 '7'

	)

65 
	#TSUID
 04000

	)

66 
	#TSGID
 02000

	)

67 
	#TSVTX
 01000

	)

68 
	#TUREAD
 00400

	)

69 
	#TUWRITE
 00200

	)

70 
	#TUEXEC
 00100

	)

71 
	#TGREAD
 00040

	)

72 
	#TGWRITE
 00020

	)

73 
	#TGEXEC
 00010

	)

74 
	#TOREAD
 00004

	)

75 
	#TOWRITE
 00002

	)

76 
	#TOEXEC
 00001

	)

78 #ifde‡
_PAX_


83 
	#TAR_PAD
(
x
Ë((512 - ((xË& 511)Ë& 511)

	)

90 
	m«me
[
TNMSZ
];

91 
	mmode
[8];

92 
	muid
[8];

93 
	mgid
[8];

94 
	msize
[12];

95 
	mmtime
[12];

96 
	mchksum
[
CHK_LEN
];

97 
	mlökÊag
;

98 
	mlök«me
[
TNMSZ
];

99 } 
	tHD_TAR
;

101 #ifde‡
_PAX_


105 
	#TAR_NODIR
 "nodú"

	)

106 
	#TAR_OPTION
 "wrôe_›t"

	)

111 
	#DEV_0
 "/dev/rmt0"

	)

112 
	#DEV_1
 "/dev/rmt1"

	)

113 
	#DEV_4
 "/dev/rmt4"

	)

114 
	#DEV_5
 "/dev/rmt5"

	)

115 
	#DEV_7
 "/dev/rmt7"

	)

116 
	#DEV_8
 "/dev/rmt8"

	)

122 
	#TPFSZ
 155

	)

123 
	#TMAGIC
 "u°¨"

	)

124 
	#TMAGLEN
 6

	)

125 
	#TVERSION
 "00"

	)

126 
	#TVERSLEN
 2

	)

129 
	m«me
[
TNMSZ
];

130 
	mmode
[8];

131 
	muid
[8];

132 
	mgid
[8];

133 
	msize
[12];

134 
	mmtime
[12];

135 
	mchksum
[
CHK_LEN
];

136 
	mty≥Êag
;

137 
	mlök«me
[
TNMSZ
];

138 
	mmagic
[
TMAGLEN
];

139 
	mvîsi⁄
[
TVERSLEN
];

140 
	mu«me
[32];

141 
	mg«me
[32];

142 
	mdevmaj‹
[8];

143 
	mdevmö‹
[8];

144 
	m¥efix
[
TPFSZ
];

145 } 
	tHD_USTAR
;

	@pax/tty_subs.c

34 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)tty_subs.c 8.2 (Berkeley) 4/18/94";

39 
	~<sys/cdefs.h
>

40 
__FBSDID
("$FreeBSD: src/bin/pax/tty_subs.c,v 1.20.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<f˙é.h
>

45 
	~<°dio.h
>

46 
	~<uni°d.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~"∑x.h
"

50 
	~"exã∫.h
"

51 
	~<°d¨g.h
>

57 
	#DEVTTY
 "/dev/ây"

	)

58 
FILE
 *
	gâyoutf
 = 
NULL
;

59 
FILE
 *
	gâyöf
 = 
NULL
;

68 
	$ây_öô
()

70 
âyfd
;

72 i‡((
âyfd
 = 
	`›í
(
DEVTTY
, 
O_RDWR
)) >= 0) {

73 i‡((
âyoutf
 = 
	`fd›í
(
âyfd
, "w")Ë!
NULL
) {

74 i‡((
âyöf
 = 
	`fd›í
(
âyfd
, "r")Ë!
NULL
)

76 ()
	`f˛o£
(
âyoutf
);

78 ()
	`˛o£
(
âyfd
);

81 i‡(
iÊag
) {

82 
	`∑xw¨n
(1, "F©ÆÉº‹, c™nŸ o≥¿%s", 
DEVTTY
);

86 
	}
}

95 
	$ây_¥¡
(c⁄° *
fmt
, ...)

97 
va_li°
 
≠
;

98 i‡(
âyoutf
 =
NULL
)

100 
	`va_°¨t
(
≠
, 
fmt
);

101 ()
	`vÂrötf
(
âyoutf
, 
fmt
, 
≠
);

102 
	`va_íd
(
≠
);

103 ()
	`fÊush
(
âyoutf
);

104 
	}
}

115 
	$ây_ªad
(*
°r
, 
Àn
)

117 *
±
;

119 i‡((--
Àn
 <0Ë|| (
âyöf
 =
NULL
Ë|| (
	`fgës
(
°r
,len,ttyinf) == NULL))

121 *(
°r
 + 
Àn
) = '\0';

126 i‡((
±
 = 
	`°rchr
(
°r
, '\n')Ë!
NULL
)

127 *
±
 = '\0';

129 
	}
}

138 
	$∑xw¨n
(
£t
, c⁄° *
fmt
, ...)

140 
va_li°
 
≠
;

141 
	`va_°¨t
(
≠
, 
fmt
);

142 i‡(
£t
)

143 
exô_vÆ
 = 1;

148 i‡(
vÊag
 && 
vÂ¨t
) {

149 ()
	`fÊush
(
li°f
);

150 ()
	`Âutc
('\n', 
°dîr
);

151 
vÂ¨t
 = 0;

153 ()
	`Ârötf
(
°dîr
, "%s: ", 
¨gv0
);

154 ()
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

155 
	`va_íd
(
≠
);

156 ()
	`Âutc
('\n', 
°dîr
);

157 
	}
}

166 
	$sysw¨n
(
£t
, 
î∫um
, c⁄° *
fmt
, ...)

168 
va_li°
 
≠
;

169 
	`va_°¨t
(
≠
, 
fmt
);

170 i‡(
£t
)

171 
exô_vÆ
 = 1;

176 i‡(
vÊag
 && 
vÂ¨t
) {

177 ()
	`fÊush
(
li°f
);

178 ()
	`Âutc
('\n', 
°dîr
);

179 
vÂ¨t
 = 0;

181 ()
	`Ârötf
(
°dîr
, "%s: ", 
¨gv0
);

182 ()
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

183 
	`va_íd
(
≠
);

188 i‡(
î∫um
 > 0)

189 ()
	`Ârötf
(
°dîr
, " <%s>", 
	`°ªº‹
(
î∫um
));

190 ()
	`Âutc
('\n', 
°dîr
);

191 
	}
}

	@pkill/pkill.c

40 
	~<sys/cdefs.h
>

41 
__FBSDID
("$FreeBSD: src/bin/pkill/pkill.c,v 1.4.2.5.2.1 2012/03/03 06:15:13 kensmith Exp $");

43 
	~<sys/ty≥s.h
>

44 
	~<sys/∑øm.h
>

45 
	~<sys/sys˘l.h
>

46 
	~<sys/¥oc.h
>

47 
	~<sys/queue.h
>

48 
	~<sys/°©.h
>

49 
	~<sys/time.h
>

50 
	~<sys/u£r.h
>

52 
	~<as£π.h
>

53 
	~<°dio.h
>

54 
	~<°dlib.h
>

55 
	~<limôs.h
>

56 
	~<∑ths.h
>

57 
	~<°rög.h
>

58 
	~<uni°d.h
>

59 
	~<sig«l.h
>

60 
	~<ªgex.h
>

61 
	~<˘y≥.h
>

62 
	~<f˙é.h
>

63 
	~<kvm.h
>

64 
	~<îr.h
>

65 
	~<pwd.h
>

66 
	~<gΩ.h
>

67 
	~<î∫o.h
>

68 
	~<loˇÀ.h
>

70 
	#STATUS_MATCH
 0

	)

71 
	#STATUS_NOMATCH
 1

	)

72 
	#STATUS_BADUSAGE
 2

	)

73 
	#STATUS_ERROR
 3

	)

75 
	#MIN_PID
 5

	)

76 
	#MAX_PID
 99999

	)

79 
	#PSKIP
(
kp
Ë((kp)->
ki_pid
 =
mypid
 || \

80 (!
kthªads
 && ((
kp
)->
ki_Êag
 & 
P_KTHREAD
Ë!0))

	)

82 
	eli°ty≥
 {

83 
	mLT_GENERIC
,

84 
	mLT_USER
,

85 
	mLT_GROUP
,

86 
	mLT_TTY
,

87 
	mLT_PGRP
,

88 
	mLT_JID
,

89 
	mLT_SID


92 
	sli°
 {

93 
SLIST_ENTRY
(
li°
Ë
	mli_chaö
;

94 
	mli_numbî
;

97 
SLIST_HEAD
(
li°hód
, 
li°
);

99 
köfo_¥oc
 *
	g∂i°
;

100 *
	g£À˘ed
;

101 c⁄° *
	gdñim
 = "\n";

102 
	g≈roc
;

103 
	gpgªp
;

104 
	gsignum
 = 
SIGTERM
;

105 
	g√we°
;

106 
	gﬁde°
;

107 
	göãø˘ive
;

108 
	gövî£
;

109 
	gl⁄gfmt
;

110 
	gm©ch¨gs
;

111 
	gfuŒm©ch
;

112 
	gkthªads
;

113 
	gcÊags
 = 
REG_EXTENDED
;

114 
	gquõt
;

115 
kvm_t
 *
	gkd
;

116 
pid_t
 
	gmypid
;

118 
li°hód
 
	geuidli°
 = 
SLIST_HEAD_INITIALIZER
(
euidli°
);

119 
li°hód
 
	gruidli°
 = 
SLIST_HEAD_INITIALIZER
(
ruidli°
);

120 
li°hód
 
	grgidli°
 = 
SLIST_HEAD_INITIALIZER
(
rgidli°
);

121 
li°hód
 
	gpgΩli°
 = 
SLIST_HEAD_INITIALIZER
(
pgΩli°
);

122 
li°hód
 
	gµidli°
 = 
SLIST_HEAD_INITIALIZER
(
µidli°
);

123 
li°hód
 
	gtdevli°
 = 
SLIST_HEAD_INITIALIZER
(
tdevli°
);

124 
li°hód
 
	gsidli°
 = 
SLIST_HEAD_INITIALIZER
(
sidli°
);

125 
li°hód
 
	gjidli°
 = 
SLIST_HEAD_INITIALIZER
(
jidli°
);

127 
	$ußge
(Ë
	`__©åibuã__
((
__n‹ëu∫__
));

128 
	`kûœ˘
(c⁄° 
köfo_¥oc
 *);

129 
	`gª∑˘
(c⁄° 
köfo_¥oc
 *);

130 
	`makñi°
(
li°hód
 *, 
li°ty≥
, *);

131 
	`èkïid
(const *, );

134 
	$maö
(
¨gc
, **
¨gv
)

136 
buf
[
_POSIX2_LINE_MAX
], *
m°r
, **
∑rgv
, *
p
, *
q
, *
pidfûe
;

137 c⁄° *
execf
, *
c‹ef
;

138 
™˚°‹s
, 
debug_›t
, 
did_a˘i⁄
;

139 
i
, 
ch
, 
be°idx
, 
rv
, 
¸ôîü
, 
pid‰omfûe
, 
pidfûñock
;

140 
size_t
 
jsz
;

141 (*
a˘i⁄
)(c⁄° 
köfo_¥oc
 *);

142 
köfo_¥oc
 *
kp
;

143 
li°
 *
li
;

144 
timevÆ
 
be°_tvÆ
;

145 
ªgex_t
 
ªg
;

146 
ªgm©ch_t
 
ªgm©ch
;

147 
pid_t
 
pid
;

149 
	`£éoˇÀ
(
LC_ALL
, "");

151 i‡(
	`°rcmp
(
	`gë¥og«me
(), "pgrep") == 0) {

152 
a˘i⁄
 = 
gª∑˘
;

153 
pgªp
 = 1;

155 
a˘i⁄
 = 
kûœ˘
;

156 
p
 = 
¨gv
[1];

158 i‡(
¨gc
 > 1 && 
p
[0] == '-') {

159 
p
++;

160 
i
 = ()
	`°πﬁ
(
p
, &
q
, 10);

161 i‡(*
q
 == '\0') {

162 
signum
 = 
i
;

163 
¨gv
++;

164 
¨gc
--;

166 i‡(
	`°∫ˇ£cmp
(
p
, "sig", 3) == 0)

167 
p
 += 3;

168 
i
 = 1; i < 
NSIG
; i++)

169 i‡(
	`°rˇ£cmp
(
sys_sig«me
[
i
], 
p
) == 0)

171 i‡(
i
 !
NSIG
) {

172 
signum
 = 
i
;

173 
¨gv
++;

174 
¨gc
--;

180 
™˚°‹s
 = 0;

181 
¸ôîü
 = 0;

182 
debug_›t
 = 0;

183 
pidfûe
 = 
NULL
;

184 
pidfûñock
 = 0;

185 
quõt
 = 0;

186 
execf
 = 
NULL
;

187 
c‹ef
 = 
_PATH_DEVNULL
;

189 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "DF:G:ILM:N:P:SU:ad:fg:ij:lnoqs:t:u:vx")) != -1)

190 
ch
) {

192 
debug_›t
++;

195 
pidfûe
 = 
›èrg
;

196 
¸ôîü
 = 1;

199 
	`makñi°
(&
rgidli°
, 
LT_GROUP
, 
›èrg
);

200 
¸ôîü
 = 1;

203 i‡(
pgªp
)

204 
	`ußge
();

205 
öãø˘ive
 = 1;

208 
pidfûñock
 = 1;

211 
c‹ef
 = 
›èrg
;

214 
execf
 = 
›èrg
;

217 
	`makñi°
(&
µidli°
, 
LT_GENERIC
, 
›èrg
);

218 
¸ôîü
 = 1;

221 i‡(!
pgªp
)

222 
	`ußge
();

223 
kthªads
 = 1;

226 
	`makñi°
(&
ruidli°
, 
LT_USER
, 
›èrg
);

227 
¸ôîü
 = 1;

230 
™˚°‹s
++;

233 i‡(!
pgªp
)

234 
	`ußge
();

235 
dñim
 = 
›èrg
;

238 
m©ch¨gs
 = 1;

241 
	`makñi°
(&
pgΩli°
, 
LT_PGRP
, 
›èrg
);

242 
¸ôîü
 = 1;

245 
cÊags
 |
REG_ICASE
;

248 
	`makñi°
(&
jidli°
, 
LT_JID
, 
›èrg
);

249 
¸ôîü
 = 1;

252 
l⁄gfmt
 = 1;

255 
√we°
 = 1;

256 
¸ôîü
 = 1;

259 
ﬁde°
 = 1;

260 
¸ôîü
 = 1;

263 i‡(!
pgªp
)

264 
	`ußge
();

265 
quõt
 = 1;

268 
	`makñi°
(&
sidli°
, 
LT_SID
, 
›èrg
);

269 
¸ôîü
 = 1;

272 
	`makñi°
(&
tdevli°
, 
LT_TTY
, 
›èrg
);

273 
¸ôîü
 = 1;

276 
	`makñi°
(&
euidli°
, 
LT_USER
, 
›èrg
);

277 
¸ôîü
 = 1;

280 
övî£
 = 1;

283 
fuŒm©ch
 = 1;

286 
	`ußge
();

290 
¨gc
 -
›töd
;

291 
¨gv
 +
›töd
;

292 i‡(
¨gc
 != 0)

293 
¸ôîü
 = 1;

294 i‡(!
¸ôîü
)

295 
	`ußge
();

296 i‡(
√we°
 && 
ﬁde°
)

297 
	`îrx
(
STATUS_ERROR
, "Options -nánd -oáre mutuallyÉxclusive");

298 i‡(
pidfûe
 !
NULL
)

299 
pid‰omfûe
 = 
	`èkïid
(
pidfûe
, 
pidfûñock
);

301 i‡(
pidfûñock
) {

302 
	`îrx
(
STATUS_ERROR
,

305 
pid‰omfûe
 = -1;

308 
mypid
 = 
	`gëpid
();

313 
kd
 = 
	`kvm_›ífûes
(
execf
, 
c‹ef
, 
NULL
, 
O_RDONLY
, 
buf
);

314 i‡(
kd
 =
NULL
)

315 
	`îrx
(
STATUS_ERROR
, "C™nŸ o≥¿kî√»fûe†(%s)", 
buf
);

321 
∂i°
 = 
	`kvm_gë¥ocs
(
kd
, 
KERN_PROC_PROC
, 0, &
≈roc
);

322 i‡(
∂i°
 =
NULL
) {

323 
	`îrx
(
STATUS_ERROR
, "Cannot getÖrocessÜist (%s)",

324 
	`kvm_gëîr
(
kd
));

331 i‡((
£À˘ed
 = 
	`mÆloc
(
≈roc
)Ë=
NULL
) {

332 
	`îr
(
STATUS_ERROR
, "Cannotállocate memory for %dÖrocesses",

333 
≈roc
);

335 
	`mem£t
(
£À˘ed
, 0, 
≈roc
);

340 ; *
¨gv
 !
NULL
;árgv++) {

341 i‡((
rv
 = 
	`ªgcomp
(&
ªg
, *
¨gv
, 
cÊags
)) != 0) {

342 
	`ªgîr‹
(
rv
, &
ªg
, 
buf
, (buf));

343 
	`îrx
(
STATUS_BADUSAGE
,

345 *
¨gv
, 
buf
);

348 
i
 = 0, 
kp
 = 
∂i°
; i < 
≈roc
; i++, kp++) {

349 i‡(
	`PSKIP
(
kp
)) {

350 i‡(
debug_›t
 > 0)

351 
	`Ârötf
(
°dîr
, "* Skipped %5d %3d %s\n",

352 
kp
->
ki_pid
, kp->
ki_uid
, kp->
ki_comm
);

356 i‡(
m©ch¨gs
 &&

357 (
∑rgv
 = 
	`kvm_gë¨gv
(
kd
, 
kp
, 0)Ë!
NULL
) {

358 
jsz
 = 0;

359 
jsz
 < (
buf
Ë&& *
∑rgv
 !
NULL
) {

360 
jsz
 +
	`¢¥ötf
(
buf
 + jsz,

361 (
buf
Ë- 
jsz
,

362 
∑rgv
[1] !
NULL
 ? "%s " : "%s",

363 
∑rgv
[0]);

364 
∑rgv
++;

366 
m°r
 = 
buf
;

368 
m°r
 = 
kp
->
ki_comm
;

370 
rv
 = 
	`ªgexec
(&
ªg
, 
m°r
, 1, &
ªgm©ch
, 0);

371 i‡(
rv
 == 0) {

372 i‡(
fuŒm©ch
) {

373 i‡(
ªgm©ch
.
rm_so
 == 0 &&

374 
ªgm©ch
.
rm_eo
 ==

375 (
off_t
)
	`°æí
(
m°r
))

376 
£À˘ed
[
i
] = 1;

378 
£À˘ed
[
i
] = 1;

379 } i‡(
rv
 !
REG_NOMATCH
) {

380 
	`ªgîr‹
(
rv
, &
ªg
, 
buf
, (buf));

381 
	`îrx
(
STATUS_ERROR
,

383 
buf
);

385 i‡(
debug_›t
 > 1) {

386 c⁄° *
rv_ªs
 = "NoMatch";

387 i‡(
£À˘ed
[
i
])

388 
rv_ªs
 = "Matched";

389 
	`Ârötf
(
°dîr
, "* %†%5d %3d %s\n", 
rv_ªs
,

390 
kp
->
ki_pid
, kp->
ki_uid
, 
m°r
);

394 
	`ªg‰ì
(&
ªg
);

397 
i
 = 0, 
kp
 = 
∂i°
; i < 
≈roc
; i++, kp++) {

398 i‡(
	`PSKIP
(
kp
))

401 i‡(
pid‰omfûe
 >0 && 
kp
->
ki_pid
 !=Öidfromfile) {

402 
£À˘ed
[
i
] = 0;

406 
	`SLIST_FOREACH
(
li
, &
ruidli°
, 
li_chaö
)

407 i‡(
kp
->
ki_ruid
 =(
uid_t
)
li
->
li_numbî
)

409 i‡(
	`SLIST_FIRST
(&
ruidli°
Ë!
NULL
 && 
li
 == NULL) {

410 
£À˘ed
[
i
] = 0;

414 
	`SLIST_FOREACH
(
li
, &
rgidli°
, 
li_chaö
)

415 i‡(
kp
->
ki_rgid
 =(
gid_t
)
li
->
li_numbî
)

417 i‡(
	`SLIST_FIRST
(&
rgidli°
Ë!
NULL
 && 
li
 == NULL) {

418 
£À˘ed
[
i
] = 0;

422 
	`SLIST_FOREACH
(
li
, &
euidli°
, 
li_chaö
)

423 i‡(
kp
->
ki_uid
 =(
uid_t
)
li
->
li_numbî
)

425 i‡(
	`SLIST_FIRST
(&
euidli°
Ë!
NULL
 && 
li
 == NULL) {

426 
£À˘ed
[
i
] = 0;

430 
	`SLIST_FOREACH
(
li
, &
µidli°
, 
li_chaö
)

431 i‡(
kp
->
ki_µid
 =(
pid_t
)
li
->
li_numbî
)

433 i‡(
	`SLIST_FIRST
(&
µidli°
Ë!
NULL
 && 
li
 == NULL) {

434 
£À˘ed
[
i
] = 0;

438 
	`SLIST_FOREACH
(
li
, &
pgΩli°
, 
li_chaö
)

439 i‡(
kp
->
ki_pgid
 =(
pid_t
)
li
->
li_numbî
)

441 i‡(
	`SLIST_FIRST
(&
pgΩli°
Ë!
NULL
 && 
li
 == NULL) {

442 
£À˘ed
[
i
] = 0;

446 
	`SLIST_FOREACH
(
li
, &
tdevli°
, 
li_chaö
) {

447 i‡(
li
->
li_numbî
 == -1 &&

448 (
kp
->
ki_Êag
 & 
P_CONTROLT
) == 0)

450 i‡(
kp
->
ki_tdev
 =(
dev_t
)
li
->
li_numbî
)

453 i‡(
	`SLIST_FIRST
(&
tdevli°
Ë!
NULL
 && 
li
 == NULL) {

454 
£À˘ed
[
i
] = 0;

458 
	`SLIST_FOREACH
(
li
, &
sidli°
, 
li_chaö
)

459 i‡(
kp
->
ki_sid
 =(
pid_t
)
li
->
li_numbî
)

461 i‡(
	`SLIST_FIRST
(&
sidli°
Ë!
NULL
 && 
li
 == NULL) {

462 
£À˘ed
[
i
] = 0;

466 
	`SLIST_FOREACH
(
li
, &
jidli°
, 
li_chaö
) {

468 i‡(
kp
->
ki_jid
 =()
li
->
li_numbî
)

471 i‡(
kp
->
ki_jid
 > 0 && 
li
->
li_numbî
 == -1)

474 i‡(
	`SLIST_FIRST
(&
jidli°
Ë!
NULL
 && 
li
 == NULL) {

475 
£À˘ed
[
i
] = 0;

479 i‡(
¨gc
 == 0)

480 
£À˘ed
[
i
] = 1;

483 i‡(!
™˚°‹s
) {

484 
pid
 = 
mypid
;

485 
pid
) {

486 
i
 = 0, 
kp
 = 
∂i°
; i < 
≈roc
; i++, kp++) {

487 i‡(
	`PSKIP
(
kp
))

489 i‡(
kp
->
ki_pid
 =
pid
) {

490 
£À˘ed
[
i
] = 0;

491 
pid
 = 
kp
->
ki_µid
;

495 i‡(
i
 =
≈roc
) {

496 i‡(
pid
 =
mypid
)

497 
pid
 = 
	`gëµid
();

504 i‡(
√we°
 || 
ﬁde°
) {

505 
be°_tvÆ
.
tv_£c
 = 0;

506 
be°_tvÆ
.
tv_u£c
 = 0;

507 
be°idx
 = -1;

509 
i
 = 0, 
kp
 = 
∂i°
; i < 
≈roc
; i++, kp++) {

510 i‡(!
£À˘ed
[
i
])

512 i‡(
be°idx
 == -1) {

515 } i‡(
	`timîcmp
(&
kp
->
ki_°¨t
, &
be°_tvÆ
, >)) {

517 i‡(
ﬁde°
)

521 i‡(
√we°
)

525 
be°_tvÆ
.
tv_£c
 = 
kp
->
ki_°¨t
.tv_sec;

526 
be°_tvÆ
.
tv_u£c
 = 
kp
->
ki_°¨t
.tv_usec;

527 
be°idx
 = 
i
;

530 
	`mem£t
(
£À˘ed
, 0, 
≈roc
);

531 i‡(
be°idx
 != -1)

532 
£À˘ed
[
be°idx
] = 1;

538 
did_a˘i⁄
 = 0;

539 
i
 = 0, 
rv
 = 0, 
kp
 = 
∂i°
; i < 
≈roc
; i++, kp++) {

540 i‡(
	`PSKIP
(
kp
))

542 i‡(
£À˘ed
[
i
]) {

543 i‡(
l⁄gfmt
 && !
pgªp
) {

544 
did_a˘i⁄
 = 1;

545 
	`¥ötf
("kû»-%d %d\n", 
signum
, 
kp
->
ki_pid
);

547 i‡(
övî£
)

549 } i‡(!
övî£
)

551 
rv
 |(*
a˘i⁄
)(
kp
);

553 i‡(!
did_a˘i⁄
 && !
pgªp
 && 
l⁄gfmt
)

554 
	`Ârötf
(
°dîr
,

557 
	`exô
(
rv
 ? 
STATUS_MATCH
 : 
STATUS_NOMATCH
);

558 
	}
}

561 
	$ußge
()

563 c⁄° *
u°r
;

565 i‡(
pgªp
)

566 
u°r
 = "[-LSfilnoqvx] [-d delim]";

568 
u°r
 = "[-signal] [-ILfilnovx]";

570 
	`Ârötf
(
°dîr
,

573 " [-àây] [-uÉuid]Ö©ã∫ ...\n", 
	`gë¥og«me
(),

574 
u°r
);

576 
	`exô
(
STATUS_BADUSAGE
);

577 
	}
}

580 
	$show_¥o˚ss
(c⁄° 
köfo_¥oc
 *
kp
)

582 **
¨gv
;

584 i‡(
quõt
) {

585 
	`as£π
(
pgªp
);

588 i‡((
l⁄gfmt
 || !
pgªp
Ë&& 
m©ch¨gs
 &&

589 (
¨gv
 = 
	`kvm_gë¨gv
(
kd
, 
kp
, 0)Ë!
NULL
) {

590 
	`¥ötf
("%d ", ()
kp
->
ki_pid
);

591 ; *
¨gv
 !
NULL
;árgv++) {

592 
	`¥ötf
("%s", *
¨gv
);

593 i‡(
¨gv
[1] !
NULL
)

594 
	`putch¨
(' ');

596 } i‡(
l⁄gfmt
 || !
pgªp
)

597 
	`¥ötf
("%d %s", ()
kp
->
ki_pid
, kp->
ki_comm
);

599 
	`¥ötf
("%d", ()
kp
->
ki_pid
);

600 
	}
}

603 
	$kûœ˘
(c⁄° 
köfo_¥oc
 *
kp
)

605 
ch
, 
fú°
;

607 i‡(
öãø˘ive
) {

611 
	`¥ötf
("kill ");

612 
	`show_¥o˚ss
(
kp
);

613 
	`¥ötf
("? ");

614 
	`fÊush
(
°dout
);

615 
fú°
 = 
ch
 = 
	`gëch¨
();

616 
ch
 !'\n' && ch !
EOF
)

617 
ch
 = 
	`gëch¨
();

618 i‡(
fú°
 != 'y' && first != 'Y')

621 i‡(
	`kûl
(
kp
->
ki_pid
, 
signum
) == -1) {

627 i‡(
î∫o
 !
ESRCH
)

628 
	`w¨n
("sig«ŒögÖid %d", ()
kp
->
ki_pid
);

637 
	}
}

640 
	$gª∑˘
(c⁄° 
köfo_¥oc
 *
kp
)

643 
	`show_¥o˚ss
(
kp
);

644 i‡(!
quõt
)

645 
	`¥ötf
("%s", 
dñim
);

647 
	}
}

650 
	$makñi°
(
li°hód
 *
hód
, 
li°ty≥
 
ty≥
, *
§c
)

652 
li°
 *
li
;

653 
∑sswd
 *
pw
;

654 
group
 *
gr
;

655 
°©
 
°
;

656 c⁄° *
˝
;

657 *
•
, *
ï
, 
buf
[
MAXPATHLEN
];

658 
em±y
;

660 
em±y
 = 1;

662 (
•
 = 
	`°r£p
(&
§c
, ",")Ë!
NULL
) {

663 i‡(*
•
 == '\0')

664 
	`ußge
();

666 i‡((
li
 = 
	`mÆloc
((*li))Ë=
NULL
) {

667 
	`îr
(
STATUS_ERROR
, "Cannotállocate %zu bytes",

668 (*
li
));

671 
	`SLIST_INSERT_HEAD
(
hód
, 
li
, 
li_chaö
);

672 
em±y
 = 0;

674 
li
->
li_numbî
 = (
uid_t
)
	`°πﬁ
(
•
, &
ï
, 0);

675 i‡(*
ï
 == '\0') {

676 
ty≥
) {

677 
LT_PGRP
:

678 i‡(
li
->
li_numbî
 == 0)

679 
li
->
li_numbî
 = 
	`gëpgΩ
();

681 
LT_SID
:

682 i‡(
li
->
li_numbî
 == 0)

683 
li
->
li_numbî
 = 
	`gësid
(
mypid
);

685 
LT_JID
:

686 i‡(
li
->
li_numbî
 < 0)

687 
	`îrx
(
STATUS_BADUSAGE
,

688 "Neg©ivêjaû ID `%s'", 
•
);

690 i‡(
li
->
li_numbî
 == 0)

691 
li
->
li_numbî
 = -1;

693 
LT_TTY
:

694 
	`ußge
();

702 
ty≥
) {

703 
LT_USER
:

704 i‡((
pw
 = 
	`gëpw«m
(
•
)Ë=
NULL
)

705 
	`îrx
(
STATUS_BADUSAGE
, "Unknow¿u£∏`%s'", 
•
);

706 
li
->
li_numbî
 = 
pw
->
pw_uid
;

708 
LT_GROUP
:

709 i‡((
gr
 = 
	`gëg∫am
(
•
)Ë=
NULL
)

710 
	`îrx
(
STATUS_BADUSAGE
, "Unknow¿grou∞`%s'", 
•
);

711 
li
->
li_numbî
 = 
gr
->
gr_gid
;

713 
LT_TTY
:

714 i‡(
	`°rcmp
(
•
, "-") == 0) {

715 
li
->
li_numbî
 = -1;

717 } i‡(
	`°rcmp
(
•
, "co") == 0) {

718 
˝
 = "console";

720 
˝
 = 
•
;

723 
	`¢¥ötf
(
buf
, (buf), 
_PATH_DEV
 "%s", 
˝
);

724 i‡(
	`°©
(
buf
, &
°
) != -1)

725 
foundây
;

727 
	`¢¥ötf
(
buf
, (buf), 
_PATH_DEV
 "ây%s", 
˝
);

728 i‡(
	`°©
(
buf
, &
°
) != -1)

729 
foundây
;

731 i‡(
î∫o
 =
ENOENT
)

732 
	`îrx
(
STATUS_BADUSAGE
, "NÿsuchÅty: `%s'", 
•
);

733 
	`îr
(
STATUS_ERROR
, "C™nŸác˚s†`%s'", 
•
);

735 
foundây
: i‡((
°
.
°_mode
 & 
S_IFCHR
) == 0)

736 
	`îrx
(
STATUS_BADUSAGE
, "NŸáÅty: `%s'", 
•
);

738 
li
->
li_numbî
 = 
°
.
°_rdev
;

740 
LT_JID
:

741 i‡(
	`°rcmp
(
•
, "none") == 0)

742 
li
->
li_numbî
 = 0;

743 i‡(
	`°rcmp
(
•
, "any") == 0)

744 
li
->
li_numbî
 = -1;

745 i‡(*
ï
 != '\0')

746 
	`îrx
(
STATUS_BADUSAGE
,

747 "InvÆid jaû ID `%s'", 
•
);

750 
	`ußge
();

754 i‡(
em±y
)

755 
	`ußge
();

756 
	}
}

759 
	$èkïid
(c⁄° *
pidfûe
, 
pidfûñock
)

761 *
ídp
, 
löe
[
BUFSIZ
];

762 
FILE
 *
fh
;

763 
rvÆ
;

765 
fh
 = 
	`f›í
(
pidfûe
, "r");

766 i‡(
fh
 =
NULL
)

767 
	`îr
(
STATUS_ERROR
, "C™nŸ o≥¿pidfûê`%s'", 
pidfûe
);

769 i‡(
pidfûñock
) {

774 i‡(
	`Êock
(
	`fûío
(
fh
), 
LOCK_EX
 | 
LOCK_NB
) == 0) {

775 ()
	`f˛o£
(
fh
);

776 
	`îrx
(
STATUS_ERROR
, "Fûê'%s' c™ bêlocked", 
pidfûe
);

778 i‡(
î∫o
 !
EWOULDBLOCK
) {

779 
	`îrx
(
STATUS_ERROR
,

780 "Eº‹ whûêlockög fûê'%s'", 
pidfûe
);

785 i‡(
	`fgës
(
löe
, ÷öe), 
fh
Ë=
NULL
) {

786 i‡(
	`„of
(
fh
)) {

787 ()
	`f˛o£
(
fh
);

788 
	`îrx
(
STATUS_ERROR
, "Pidfûê`%s' i†em±y", 
pidfûe
);

790 ()
	`f˛o£
(
fh
);

791 
	`îr
(
STATUS_ERROR
, "C™nŸÑód fromÖid fûê`%s'", 
pidfûe
);

793 ()
	`f˛o£
(
fh
);

795 
rvÆ
 = 
	`°πﬁ
(
löe
, &
ídp
, 10);

796 i‡(*
ídp
 !'\0' && !
	`is•a˚
(()*endp))

797 
	`îrx
(
STATUS_ERROR
, "InvÆidÖid i¿fûê`%s'", 
pidfûe
);

798 i‡(
rvÆ
 < 
MIN_PID
 ||ÑvÆ > 
MAX_PID
)

799 
	`îrx
(
STATUS_ERROR
, "InvÆidÖid i¿fûê`%s'", 
pidfûe
);

800  (
rvÆ
);

801 
	}
}

	@ps/extern.h

33 
	gköfo
;

34 
	g∆i°
;

35 
	gv¨
;

36 
	gv¨ít
;

38 
fix±_t
 
c˝u
;

39 
cÊag
, 
evÆ
, 
fsˇÀ
, 
∆i°ªad
, 
øw˝u
;

40 
mem∑ges
;

41 
time_t
 
now
;

42 
showthªads
, 
sumrußge
, 
ãrmwidth
, 
tŸwidth
;

43 
	$STAILQ_HEAD
(
vñi°hód
, 
v¨ít
Ë
v¨li°
;

45 
__BEGIN_DECLS


46 
	`¨gumíts
(
KINFO
 *, 
VARENT
 *);

47 
	`comm™d
(
KINFO
 *, 
VARENT
 *);

48 
	`˝utime
(
KINFO
 *, 
VARENT
 *);

49 
	`d⁄li°
();

50 
	`ñ≠£d
(
KINFO
 *, 
VARENT
 *);

51 
	`emu ame
(
KINFO
 *, 
VARENT
 *);

52 
VARENT
 *
	`föd_v¨íåy
(
VAR
 *);

53 c⁄° *
	`fmt_¨gv
(**, *, 
size_t
);

54 
	`gëp˝u
(c⁄° 
KINFO
 *);

55 
	`kv¨
(
KINFO
 *, 
VARENT
 *);

56 
	`œbñ
(
KINFO
 *, 
VARENT
 *);

57 
	`log«me
(
KINFO
 *, 
VARENT
 *);

58 
	`l⁄gäame
(
KINFO
 *, 
VARENT
 *);

59 
	`l°¨ãd
(
KINFO
 *, 
VARENT
 *);

60 
	`maxrss
(
KINFO
 *, 
VARENT
 *);

61 
	`lock«me
(
KINFO
 *, 
VARENT
 *);

62 
	`mwch™
(
KINFO
 *, 
VARENT
 *);

63 
	`nwch™
(
KINFO
 *, 
VARENT
 *);

64 
	`∑geö
(
KINFO
 *, 
VARENT
 *);

65 
	`∑r£fmt
(const *, );

66 
	`p˝u
(
KINFO
 *, 
VARENT
 *);

67 
	`pmem
(
KINFO
 *, 
VARENT
 *);

68 
	`¥i
(
KINFO
 *, 
VARENT
 *);

69 
	`¥öthódî
();

70 
	`¥i‹ôyr
(
KINFO
 *, 
VARENT
 *);

71 
	`rgrou≤ame
(
KINFO
 *, 
VARENT
 *);

72 
	`ru«me
(
KINFO
 *, 
VARENT
 *);

73 
	`rv¨
(
KINFO
 *, 
VARENT
 *);

74 
	`s_comm
(
KINFO
 *);

75 
	`s_œbñ
(
KINFO
 *);

76 
	`s_rgrou≤ame
(
KINFO
 *);

77 
	`s_ru«me
(
KINFO
 *);

78 
	`s_u«me
(
KINFO
 *);

79 
	`showkey
();

80 
	`°¨ãd
(
KINFO
 *, 
VARENT
 *);

81 
	`°©e
(
KINFO
 *, 
VARENT
 *);

82 
	`sy°ime
(
KINFO
 *, 
VARENT
 *);

83 
	`tdev
(
KINFO
 *, 
VARENT
 *);

84 
	`td«m
(
KINFO
 *, 
VARENT
 *);

85 
	`äame
(
KINFO
 *, 
VARENT
 *);

86 
	`ucomm
(
KINFO
 *, 
VARENT
 *);

87 
	`u«me
(
KINFO
 *, 
VARENT
 *);

88 
	`u¥
(
KINFO
 *, 
VARENT
 *);

89 
	`u£πime
(
KINFO
 *, 
VARENT
 *);

90 
	`vsize
(
KINFO
 *, 
VARENT
 *);

91 
	`wch™
(
KINFO
 *, 
VARENT
 *);

92 
__END_DECLS


	@ps/fmt.c

31 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)fmt.c 8.4 (Berkeley) 4/15/94";

36 
	~<sys/cdefs.h
>

37 
__FBSDID
("$FreeBSD: src/bin/ps/fmt.c,v 1.34.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

39 
	~<sys/ty≥s.h
>

40 
	~<sys/time.h
>

41 
	~<sys/ªsour˚.h
>

43 
	~<îr.h
>

44 
	~<limôs.h
>

45 
	~<°dio.h
>

46 
	~<°döt.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<uni°d.h
>

50 
	~<vis.h
>

52 
	~"ps.h
"

54 *
cmd∑π
(*);

55 *
shquŸe
(**);

58 
	$shquŸe
(**
¨gv
)

60 
¨g_max
;

61 
size_t
 
buf_size
;

62 
size_t
 
Àn
;

63 **
p
, *
d°
, *
§c
;

64 *
buf
 = 
NULL
;

66 i‡(
buf
 =
NULL
) {

67 i‡((
¨g_max
 = 
	`sysc⁄f
(
_SC_ARG_MAX
)) == -1)

68 
	`îrx
(1, "sysconf _SC_ARG_MAX failed");

69 i‡(
¨g_max
 >
LONG_MAX
 / 4 ||árg_max >()(
SIZE_MAX
 / 4))

70 
	`îrx
(1, "sysconf _SC_ARG_MAXÖreposterouslyÜarge");

71 
buf_size
 = 4 * 
¨g_max
 + 1;

72 i‡((
buf
 = 
	`mÆloc
(
buf_size
)Ë=
NULL
)

73 
	`îrx
(1, "malloc failed");

76 i‡(*
¨gv
 =
NULL
) {

77 
buf
[0] = '\0';

78  (
buf
);

80 
d°
 = 
buf
;

81 
p
 = 
¨gv
; (
§c
 = *p++Ë!
NULL
; ) {

82 i‡(*
§c
 == '\0')

84 
Àn
 = (
buf_size
 - 1 - (
d°
 - 
buf
)) / 4;

85 
	`°rvisx
(
d°
, 
§c
, 
	`°æí
(§cË< 
Àn
 ? strlen(src) :Üen,

86 
VIS_NL
 | 
VIS_CSTYLE
);

87 *
d°
 != '\0')

88 
d°
++;

89 i‡((
buf_size
 - 1 - (
d°
 - 
buf
)) / 4 > 0)

90 *
d°
++ = ' ';

93 i‡(
d°
 !
buf
 && dst[-1] == ' ')

94 
d°
--;

95 *
d°
 = '\0';

96  (
buf
);

97 
	}
}

100 
	$cmd∑π
(*
¨g0
)

102 *
˝
;

104  ((
˝
 = 
	`°ºchr
(
¨g0
, '/')Ë!
NULL
 ? cp + 1 :árg0);

105 
	}
}

108 
	$fmt_¨gv
(**
¨gv
, *
cmd
, 
size_t
 
maxÀn
)

110 
size_t
 
Àn
;

111 *
≠
, *
˝
;

113 i‡(
¨gv
 =
NULL
 ||árgv[0] == NULL) {

114 i‡(
cmd
 =
NULL
)

116 
≠
 = 
NULL
;

117 
Àn
 = 
maxÀn
 + 3;

119 
≠
 = 
	`shquŸe
(
¨gv
);

120 
Àn
 = 
	`°æí
(
≠
Ë+ 
maxÀn
 + 4;

122 
˝
 = 
	`mÆloc
(
Àn
);

123 i‡(
˝
 =
NULL
)

124 
	`îrx
(1, "malloc failed");

125 i‡(
≠
 =
NULL
)

126 
	`•rötf
(
˝
, "[%.*s]", ()
maxÀn
, 
cmd
);

127 i‡(
	`°∫cmp
(
	`cmd∑π
(
¨gv
[0]), 
cmd
, 
maxÀn
) != 0)

128 
	`•rötf
(
˝
, "%†(%.*s)", 
≠
, ()
maxÀn
, 
cmd
);

130 
	`°r˝y
(
˝
, 
≠
);

131  (
˝
);

132 
	}
}

	@ps/keyword.c

31 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)keyword.c 8.5 (Berkeley) 4/2/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/ps/keyword.c,v 1.79.2.5.2.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/∑øm.h
>

39 
	~<sys/time.h
>

40 
	~<sys/ªsour˚.h
>

41 
	~<sys/¥oc.h
>

42 
	~<sys/sys˘l.h
>

43 
	~<sys/u£r.h
>

45 
	~<îr.h
>

46 
	~<°ddef.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

51 
	~"ps.h
"

53 
VAR
 *
födv¨
(*, , **
hódî
);

54 
vcmp
(const *, const *);

57 
	#KOFF
(
x
Ë
	`off£tof
(
köfo_¥oc
, x)

	)

58 
	#ROFF
(
x
Ë
	`off£tof
(
rußge
, x)

	)

60 
	#EMULLEN
 13

	)

61 
	#LWPFMT
 "d"

	)

62 
	#LWPLEN
 6

	)

63 
	#NLWPFMT
 "d"

	)

64 
	#NLWPLEN
 4

	)

65 
	#UIDFMT
 "u"

	)

66 
	#UIDLEN
 5

	)

67 
	#PIDFMT
 "d"

	)

68 
	#PIDLEN
 5

	)

69 
	#USERLEN
 (
MAXLOGNAME
 - 1)

	)

72 
VAR
 
	gv¨
[] = {

73 {"%˝u", "%CPU", 
NULL
, 0, 
p˝u
, NULL, 4, 0, 
CHAR
, NULL, 0},

74 {"%mem", "%MEM", 
NULL
, 0, 
pmem
, NULL, 4, 0, 
CHAR
, NULL, 0},

75 {"acÊag", "ACFLG", 
NULL
, 0, 
kv¨
, NULL, 3, 
KOFF
(
ki_acÊag
), 
USHORT
,

77 {"acÊg", "", "acÊag", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

78 {"¨gs", "COMMAND", 
NULL
, 
COMM
|
LJUST
|
USER
, 
¨gumíts
, NULL, 16, 0,

79 
CHAR
, 
NULL
, 0},

80 {"blocked", "", "sigmask", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

81 {"ˇught", "", "sigˇtch", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

82 {"comm", "COMMAND", 
NULL
, 
LJUST
|
DSIZ
, 
ucomm
, 
s_comm
,

83 
COMMLEN
 + 
OCOMMLEN
 + 1, 0, 
CHAR
, 
NULL
, 0},

84 {"comm™d", "COMMAND", 
NULL
, 
COMM
|
LJUST
|
USER
, 
comm™d
, NULL, 16, 0,

85 
CHAR
, 
NULL
, 0},

86 {"˝u", "CPU", 
NULL
, 0, 
kv¨
, NULL, 3, 
KOFF
(
ki_e°˝u
), 
UINT
, "d",

88 {"˝utime", "", "time", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

89 {"emul", "EMUL", 
NULL
, 
LJUST
, 
emu ame
, NULL, 
EMULLEN
, 0, 
CHAR
,

90 
NULL
, 0},

91 {"ëime", "ELAPSED", 
NULL
, 
USER
, 
ñ≠£d
, NULL, 12, 0, 
CHAR
, NULL, 0},

92 {"f", "F", 
NULL
, 0, 
kv¨
, NULL, 8, 
KOFF
(
ki_Êag
), 
INT
, "x", 0},

93 {"Êags", "", "f", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

94 {"ign‹ed", "", "sigign‹e", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

95 {"öblk", "INBLK", 
NULL
, 
USER
, 
rv¨
, NULL, 4, 
ROFF
(
ru_öblock
), 
LONG
,

97 {"öblock", "", "öblk", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

98 {"jid", "JID", 
NULL
, 0, 
kv¨
, NULL, 6, 
KOFF
(
ki_jid
), 
INT
, "d", 0},

99 {"jobc", "JOBC", 
NULL
, 0, 
kv¨
, NULL, 4, 
KOFF
(
ki_jobc
), 
SHORT
, "d",

101 {"kåa˚", "KTRACE", 
NULL
, 0, 
kv¨
, NULL, 8, 
KOFF
(
ki_åa˚Êag
), 
INT
,

103 {"œbñ", "LABEL", 
NULL
, 
LJUST
|
DSIZ
, 
œbñ
, 
s_œbñ
, 
SHRT_MAX
, 0, 
CHAR
,

104 
NULL
, 0},

105 {"lim", "LIM", 
NULL
, 0, 
maxrss
, NULL, 5, 0, 
CHAR
, NULL, 0},

106 {"lock«me", "LOCK", 
NULL
, 
LJUST
, 
lock«me
, NULL, 6, 0, 
CHAR
, NULL,

108 {"logö", "LOGIN", 
NULL
, 
LJUST
, 
log«me
, NULL, 
MAXLOGNAME
-1, 0, 
CHAR
,

109 
NULL
, 0},

110 {"log«me", "", "logö", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

111 {"l°¨t", "STARTED", 
NULL
, 
LJUST
|
USER
, 
l°¨ãd
, NULL, 28, 0, 
CHAR
,

112 
NULL
, 0},

113 {"lwp", "LWP", 
NULL
, 0, 
kv¨
, NULL, 
LWPLEN
, 
KOFF
(
ki_tid
), 
UINT
,

114 
LWPFMT
, 0},

115 {"majÊt", "MAJFLT", 
NULL
, 
USER
, 
rv¨
, NULL, 4, 
ROFF
(
ru_majÊt
),

116 
LONG
, "ld", 0},

117 {"möÊt", "MINFLT", 
NULL
, 
USER
, 
rv¨
, NULL, 4, 
ROFF
(
ru_möÊt
),

118 
LONG
, "ld", 0},

119 {"msgrcv", "MSGRCV", 
NULL
, 
USER
, 
rv¨
, NULL, 4, 
ROFF
(
ru_msgrcv
),

120 
LONG
, "ld", 0},

121 {"msg¢d", "MSGSND", 
NULL
, 
USER
, 
rv¨
, NULL, 4, 
ROFF
(
ru_msg¢d
),

122 
LONG
, "ld", 0},

123 {"mwch™", "MWCHAN", 
NULL
, 
LJUST
, 
mwch™
, NULL, 6, 0, 
CHAR
, NULL, 0},

124 {"ni", "", "ni˚", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

125 {"ni˚", "NI", 
NULL
, 0, 
kv¨
, NULL, 2, 
KOFF
(
ki_ni˚
), 
CHAR
, "d",

127 {"nivcsw", "NIVCSW", 
NULL
, 
USER
, 
rv¨
, NULL, 5, 
ROFF
(
ru_nivcsw
),

128 
LONG
, "ld", 0},

129 {"∆wp", "NLWP", 
NULL
, 0, 
kv¨
, NULL, 
NLWPLEN
, 
KOFF
(
ki_numthªads
),

130 
UINT
, 
NLWPFMT
, 0},

131 {"nsig«ls", "", "nsigs", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

132 {"nsigs", "NSIGS", 
NULL
, 
USER
, 
rv¨
, NULL, 4, 
ROFF
(
ru_nsig«ls
),

133 
LONG
, "ld", 0},

134 {"nsw≠", "NSWAP", 
NULL
, 
USER
, 
rv¨
, NULL, 4, 
ROFF
(
ru_nsw≠
),

135 
LONG
, "ld", 0},

136 {"nvcsw", "NVCSW", 
NULL
, 
USER
, 
rv¨
, NULL, 5, 
ROFF
(
ru_nvcsw
),

137 
LONG
, "ld", 0},

138 {"nwch™", "NWCHAN", 
NULL
, 
LJUST
, 
nwch™
, NULL, (*) * 2, 0,

139 
CHAR
, 
NULL
, 0},

140 {"oublk", "OUBLK", 
NULL
, 
USER
, 
rv¨
, NULL, 4, 
ROFF
(
ru_oublock
),

141 
LONG
, "ld", 0},

142 {"oublock", "", "oublk", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

143 {"∑ddr", "PADDR", 
NULL
, 0, 
kv¨
, NULL, (*) * 2,

144 
KOFF
(
ki_∑ddr
), 
KPTR
, "lx", 0},

145 {"∑geö", "PAGEIN", 
NULL
, 
USER
, 
∑geö
, NULL, 6, 0, 
CHAR
, NULL, 0},

146 {"p˝u", "", "%˝u", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

147 {"≥ndög", "", "sig", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

148 {"pgid", "PGID", 
NULL
, 0, 
kv¨
, NULL, 
PIDLEN
, 
KOFF
(
ki_pgid
), 
UINT
,

149 
PIDFMT
, 0},

150 {"pid", "PID", 
NULL
, 0, 
kv¨
, NULL, 
PIDLEN
, 
KOFF
(
ki_pid
), 
UINT
,

151 
PIDFMT
, 0},

152 {"pmem", "", "%mem", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

153 {"µid", "PPID", 
NULL
, 0, 
kv¨
, NULL, 
PIDLEN
, 
KOFF
(
ki_µid
), 
UINT
,

154 
PIDFMT
, 0},

155 {"¥i", "PRI", 
NULL
, 0, 
¥i
, NULL, 3, 0, 
CHAR
, NULL, 0},

156 {"ª", "RE", 
NULL
, 
INF127
, 
kv¨
, NULL, 3, 
KOFF
(
ki_swtime
), 
UINT
, "d",

158 {"rgid", "RGID", 
NULL
, 0, 
kv¨
, NULL, 
UIDLEN
, 
KOFF
(
ki_rgid
),

159 
UINT
, 
UIDFMT
, 0},

160 {"rgroup", "RGROUP", 
NULL
, 
LJUST
|
DSIZ
, 
rgrou≤ame
, 
s_rgrou≤ame
,

161 
USERLEN
, 0, 
CHAR
, 
NULL
, 0},

162 {"rss", "RSS", 
NULL
, 0, 
kv¨
, NULL, 5, 
KOFF
(
ki_rssize
), 
PGTOK
, "ld", 0},

163 {"π¥io", "RTPRIO", 
NULL
, 0, 
¥i‹ôyr
, NULL, 7, 
KOFF
(
ki_¥i
), 
CHAR
,

164 
NULL
, 0},

165 {"ruid", "RUID", 
NULL
, 0, 
kv¨
, NULL, 
UIDLEN
, 
KOFF
(
ki_ruid
),

166 
UINT
, 
UIDFMT
, 0},

167 {"ru£r", "RUSER", 
NULL
, 
LJUST
|
DSIZ
, 
ru«me
, 
s_ru«me
, 
USERLEN
,

168 0, 
CHAR
, 
NULL
, 0},

169 {"sid", "SID", 
NULL
, 0, 
kv¨
, NULL, 
PIDLEN
, 
KOFF
(
ki_sid
), 
UINT
,

170 
PIDFMT
, 0},

171 {"sig", "PENDING", 
NULL
, 0, 
kv¨
, NULL, 8, 
KOFF
(
ki_sigli°
), 
INT
,

173 {"sigˇtch", "CAUGHT", 
NULL
, 0, 
kv¨
, NULL, 8, 
KOFF
(
ki_sigˇtch
),

174 
UINT
, "x", 0},

175 {"sigign‹e", "IGNORED", 
NULL
, 0, 
kv¨
, NULL, 8, 
KOFF
(
ki_sigign‹e
),

176 
UINT
, "x", 0},

177 {"sigmask", "BLOCKED", 
NULL
, 0, 
kv¨
, NULL, 8, 
KOFF
(
ki_sigmask
),

178 
UINT
, "x", 0},

179 {"¶", "SL", 
NULL
, 
INF127
, 
kv¨
, NULL, 3, 
KOFF
(
ki_¶±ime
), 
UINT
, "d",

181 {"°¨t", "STARTED", 
NULL
, 
LJUST
|
USER
, 
°¨ãd
, NULL, 7, 0, 
CHAR
, NULL,

183 {"°©", "", "°©e", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

184 {"°©e", "STAT", 
NULL
, 0, 
°©e
, NULL, 4, 0, 
CHAR
, NULL, 0},

185 {"svgid", "SVGID", 
NULL
, 0, 
kv¨
, NULL, 
UIDLEN
, 
KOFF
(
ki_svgid
),

186 
UINT
, 
UIDFMT
, 0},

187 {"svuid", "SVUID", 
NULL
, 0, 
kv¨
, NULL, 
UIDLEN
, 
KOFF
(
ki_svuid
),

188 
UINT
, 
UIDFMT
, 0},

189 {"sy°ime", "SYSTIME", 
NULL
, 
USER
, 
sy°ime
, NULL, 9, 0, 
CHAR
, NULL, 0},

190 {"tdaddr", "TDADDR", 
NULL
, 0, 
kv¨
, NULL, (*) * 2,

191 
KOFF
(
ki_tdaddr
), 
KPTR
, "lx", 0},

192 {"tdev", "TDEV", 
NULL
, 0, 
tdev
, NULL, 5, 0, 
CHAR
, NULL, 0},

193 {"td«m", "TDNAM", 
NULL
, 
LJUST
, 
td«m
, NULL, 
COMMLEN
, 0, 
CHAR
, NULL, 0},

194 {"time", "TIME", 
NULL
, 
USER
, 
˝utime
, NULL, 9, 0, 
CHAR
, NULL, 0},

195 {"çgid", "TPGID", 
NULL
, 0, 
kv¨
, NULL, 4, 
KOFF
(
ki_çgid
), 
UINT
,

196 
PIDFMT
, 0},

197 {"tsid", "TSID", 
NULL
, 0, 
kv¨
, NULL, 
PIDLEN
, 
KOFF
(
ki_tsid
), 
UINT
,

198 
PIDFMT
, 0},

199 {"tsiz", "TSIZ", 
NULL
, 0, 
kv¨
, NULL, 4, 
KOFF
(
ki_tsize
), 
PGTOK
, "ld", 0},

200 {"â", "TT ", 
NULL
, 0, 
äame
, NULL, 4, 0, 
CHAR
, NULL, 0},

201 {"ây", "TTY", 
NULL
, 
LJUST
, 
l⁄gäame
, NULL, 8, 0, 
CHAR
, NULL, 0},

202 {"ucomm", "UCOMM", 
NULL
, 
LJUST
|
DSIZ
, 
ucomm
, 
s_comm
,

203 
COMMLEN
 + 
OCOMMLEN
 + 1, 0, 
CHAR
, 
NULL
, 0},

204 {"uid", "UID", 
NULL
, 0, 
kv¨
, NULL, 
UIDLEN
, 
KOFF
(
ki_uid
), 
UINT
,

205 
UIDFMT
, 0},

206 {"u¥", "UPR", 
NULL
, 0, 
u¥
, NULL, 3, 0, 
CHAR
, NULL, 0},

207 {"u¥o˝", "UPROCP", 
NULL
, 0, 
kv¨
, NULL, (*) * 2,

208 
KOFF
(
ki_∑ddr
), 
KPTR
, "lx", 0},

209 {"u£r", "USER", 
NULL
, 
LJUST
|
DSIZ
, 
u«me
, 
s_u«me
, 
USERLEN
, 0, 
CHAR
,

210 
NULL
, 0},

211 {"u£πime", "USERTIME", 
NULL
, 
USER
, 
u£πime
, NULL, 9, 0, 
CHAR
, NULL,

213 {"u§¥i", "", "u¥", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

214 {"vsize", "", "vsz", 0, 
NULL
, NULL, 0, 0, 
CHAR
, NULL, 0},

215 {"vsz", "VSZ", 
NULL
, 0, 
vsize
, NULL, 5, 0, 
CHAR
, NULL, 0},

216 {"wch™", "WCHAN", 
NULL
, 
LJUST
, 
wch™
, NULL, 6, 0, 
CHAR
, NULL, 0},

217 {"x°©", "XSTAT", 
NULL
, 0, 
kv¨
, NULL, 4, 
KOFF
(
ki_x°©
), 
USHORT
,

219 {"", 
NULL
, NULL, 0, NULL, NULL, 0, 0, 
CHAR
, NULL, 0},

223 
	$showkey
()

225 
VAR
 *
v
;

226 
i
;

227 c⁄° *
p
, *
£p
;

229 
i
 = 0;

230 
£p
 = "";

231 
v
 = 
v¨
; *(
p
 = v->
«me
); ++v) {

232 
Àn
 = 
	`°æí
(
p
);

233 i‡(
ãrmwidth
 && (
i
 +
Àn
 + 1) >Åermwidth) {

234 
i
 = 
Àn
;

235 
£p
 = "\n";

237 (Ë
	`¥ötf
("%s%s", 
£p
, 
p
);

238 
£p
 = " ";

240 (Ë
	`¥ötf
("\n");

241 
	}
}

244 
	$∑r£fmt
(c⁄° *
p
, 
u£r
)

246 *
ãmp°r
, *
ãmp°r1
;

248 
	#FMTSEP
 " \t,\n"

	)

249 
ãmp°r1
 = 
ãmp°r
 = 
	`°rdup
(
p
);

250 
ãmp°r
 && *tempstr) {

251 *
˝
, *
hp
;

252 
VAR
 *
v
;

253 
v¨ít
 *
vít
;

260 i‡(
ãmp°r
[
	`°rc•n
—emp°r, "="
FMTSEP
)] != '=')

261 (
˝
 = 
	`°r£p
(&
ãmp°r
, 
FMTSEP
)Ë!
NULL
 &&

262 *
˝
 == '\0')

265 
˝
 = 
ãmp°r
;

266 
ãmp°r
 = 
NULL
;

268 i‡(
˝
 =
NULL
 || !(
v
 = 
	`födv¨
(˝, 
u£r
, &
hp
)))

270 i‡(!
u£r
) {

276 
vít
 = 
	`föd_v¨íåy
(
v
);

277 i‡(
vít
 !
NULL
)

280 i‡((
vít
 = 
	`mÆloc
((
v¨ít
))Ë=
NULL
)

281 
	`îrx
(1, "malloc failed");

282 
vít
->
hódî
 = 
v
->header;

283 i‡(
hp
) {

284 
hp
 = 
	`°rdup
(hp);

285 i‡(
hp
)

286 
vít
->
hódî
 = 
hp
;

288 
vít
->
v¨
 = 
	`mÆloc
((*vent->var));

289 i‡(
vít
->
v¨
 =
NULL
)

290 
	`îrx
(1, "malloc failed");

291 
	`mem˝y
(
vít
->
v¨
, 
v
, (*vent->var));

292 
	`STAILQ_INSERT_TAIL
(&
v¨li°
, 
vít
, 
√xt_ve
);

294 
	`‰ì
(
ãmp°r1
);

295 i‡(
	`STAILQ_EMPTY
(&
v¨li°
)) {

296 
	`w¨nx
("no valid keywords; valid keywords:");

297 
	`showkey
();

298 
	`exô
(1);

300 
	}
}

302 
VAR
 *

303 
	$födv¨
(*
p
, 
u£r
, **
hódî
)

305 
size_t
 
rÊí
;

306 
VAR
 *
v
, 
key
;

307 *
hp
, *
ªÆfmt
;

309 
hp
 = 
	`°rchr
(
p
, '=');

310 i‡(
hp
)

311 *
hp
++ = '\0';

313 
key
.
«me
 = 
p
;

314 
v
 = 
	`b£¨ch
(&
key
, 
v¨
, (v¨)/(
VAR
Ë- 1, (VAR), 
vcmp
);

316 i‡(
v
 && v->
Æüs
) {

323 i‡(
hp
 =
NULL
)

324 
	`∑r£fmt
(
v
->
Æüs
, 
u£r
);

332 
rÊí
 = 
	`°æí
(
v
->
Æüs
Ë+ såÀn(
hp
) + 2;

333 
ªÆfmt
 = 
	`mÆloc
(
rÊí
);

334 i‡(
ªÆfmt
 =
NULL
)

335 
	`îrx
(1, "malloc failed");

336 
	`¢¥ötf
(
ªÆfmt
, 
rÊí
, "%s=%s", 
v
->
Æüs
, 
hp
);

337 
	`∑r£fmt
(
ªÆfmt
, 
u£r
);

338 
	`‰ì
(
ªÆfmt
);

340  ((
VAR
 *)
NULL
);

342 i‡(!
v
) {

343 
	`w¨nx
("%s: keyw‹dÇŸ found", 
p
);

344 
evÆ
 = 1;

346 i‡(
hódî
)

347 *
hódî
 = 
hp
;

348  (
v
);

349 
	}
}

352 
	$vcmp
(c⁄° *
a
, c⁄° *
b
)

354  (
	`°rcmp
(((c⁄° 
VAR
 *)
a
)->
«me
, ((c⁄° VAR *)
b
)->name));

355 
	}
}

	@ps/nlist.c

31 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)nlist.c 8.4 (Berkeley) 4/2/94";

36 
	~<sys/cdefs.h
>

37 
__FBSDID
("$FreeBSD: src/bin/ps/nlist.c,v 1.21.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

39 
	~<sys/ty≥s.h
>

40 
	~<sys/sys˘l.h
>

42 
	~<°ddef.h
>

44 
	~"ps.h
"

46 
fix±_t
 
	gc˝u
;

47 
	g∆i°ªad
;

48 
	gmem∑ges
;

49 
	gfsˇÀ
;

52 
	$d⁄li°
()

54 
size_t
 
ﬁdÀn
;

56 
ﬁdÀn
 = (
c˝u
);

57 i‡(
	`sys˘lby«me
("kîn.c˝u", &
c˝u
, &
ﬁdÀn
, 
NULL
, 0) == -1)

59 
ﬁdÀn
 = (
fsˇÀ
);

60 i‡(
	`sys˘lby«me
("kîn.fsˇÀ", &
fsˇÀ
, &
ﬁdÀn
, 
NULL
, 0) == -1)

62 
ﬁdÀn
 = (
mem∑ges
);

63 i‡(
	`sys˘lby«me
("hw.avaû∑ges", &
mem∑ges
, &
ﬁdÀn
, 
NULL
, 0) == -1)

65 
∆i°ªad
 = 1;

67 
	}
}

	@ps/print.c

31 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)print.c 8.6 (Berkeley) 4/16/94";

36 
	~<sys/cdefs.h
>

37 
__FBSDID
("$FreeBSD: src/bin/ps/print.c,v 1.100.2.2.2.1 2012/03/03 06:15:13 kensmith Exp $");

39 
	~<sys/∑øm.h
>

40 
	~<sys/time.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sys/¥oc.h
>

43 
	~<sys/°©.h
>

45 
	~<sys/mac.h
>

46 
	~<sys/u£r.h
>

47 
	~<sys/sys˘l.h
>

49 
	~<îr.h
>

50 
	~<gΩ.h
>

51 
	~<œngöfo.h
>

52 
	~<loˇÀ.h
>

53 
	~<m©h.h
>

54 
	~<∆i°.h
>

55 
	~<pwd.h
>

56 
	~<°ddef.h
>

57 
	~<°dio.h
>

58 
	~<°dlib.h
>

59 
	~<°rög.h
>

60 
	~<uni°d.h
>

61 
	~<vis.h
>

63 
	~"ps.h
"

65 
	#ps_pgtok
(
a
Ë((◊Ë* 
	`gë∑gesize
()Ë/ 1024)

	)

68 
	$¥öthódî
()

70 
VAR
 *
v
;

71 
v¨ít
 *
vít
;

73 
	`STAILQ_FOREACH
(
vít
, &
v¨li°
, 
√xt_ve
)

74 i‡(*
vít
->
hódî
 != '\0')

76 i‡(!
vít
)

79 
	`STAILQ_FOREACH
(
vít
, &
v¨li°
, 
√xt_ve
) {

80 
v
 = 
vít
->
v¨
;

81 i‡(
v
->
Êag
 & 
LJUST
) {

82 i‡(
	`STAILQ_NEXT
(
vít
, 
√xt_ve
Ë=
NULL
)

83 ()
	`¥ötf
("%s", 
vít
->
hódî
);

85 ()
	`¥ötf
("%-*s", 
v
->
width
, 
vít
->
hódî
);

87 ()
	`¥ötf
("%*s", 
v
->
width
, 
vít
->
hódî
);

88 i‡(
	`STAILQ_NEXT
(
vít
, 
√xt_ve
Ë!
NULL
)

89 ()
	`putch¨
(' ');

91 ()
	`putch¨
('\n');

92 
	}
}

95 
	$¨gumíts
(
KINFO
 *
k
, 
VARENT
 *
ve
)

97 
VAR
 *
v
;

98 
À·
;

99 *
˝
, *
vis_¨gs
;

101 
v
 = 
ve
->
v¨
;

102 i‡((
vis_¨gs
 = 
	`mÆloc
(
	`°æí
(
k
->
ki_¨gs
Ë* 4 + 1)Ë=
NULL
)

103 
	`îrx
(1, "malloc failed");

104 
	`°rvis
(
vis_¨gs
, 
k
->
ki_¨gs
, 
VIS_TAB
 | 
VIS_NL
 | 
VIS_NOSLASH
);

105 i‡(
	`STAILQ_NEXT
(
ve
, 
√xt_ve
Ë=
NULL
) {

107 i‡(
ãrmwidth
 =
UNLIMITED
) {

108 ()
	`¥ötf
("%s", 
vis_¨gs
);

110 
À·
 = 
ãrmwidth
 - (
tŸwidth
 - 
v
->
width
);

111 i‡(
À·
 < 1)

112 
À·
 = 
v
->
width
;

113 
˝
 = 
vis_¨gs
; --
À·
 >= 0 && *cp != '\0';)

114 ()
	`putch¨
(*
˝
++);

117 ()
	`¥ötf
("%-*.*s", 
v
->
width
, v->width, 
vis_¨gs
);

119 
	`‰ì
(
vis_¨gs
);

120 
	}
}

123 
	$comm™d
(
KINFO
 *
k
, 
VARENT
 *
ve
)

125 
VAR
 *
v
;

126 
À·
;

127 *
˝
, *
vis_ív
, *
vis_¨gs
;

129 
v
 = 
ve
->
v¨
;

130 i‡(
cÊag
) {

132 i‡(
	`STAILQ_NEXT
(
ve
, 
√xt_ve
Ë=
NULL
) {

133 i‡(
k
->
ki_d
.
¥efix
)

134 ()
	`¥ötf
("%s", 
k
->
ki_d
.
¥efix
);

135 ()
	`¥ötf
("%s", 
k
->
ki_p
->
ki_comm
);

136 i‡(
showthªads
 && 
k
->
ki_p
->
ki_numthªads
 > 1)

137 ()
	`¥ötf
("/%s", 
k
->
ki_p
->
ki_ocomm
);

139 ()
	`¥ötf
("%-*s", 
v
->
width
, 
k
->
ki_p
->
ki_comm
);

142 i‡((
vis_¨gs
 = 
	`mÆloc
(
	`°æí
(
k
->
ki_¨gs
Ë* 4 + 1)Ë=
NULL
)

143 
	`îrx
(1, "malloc failed");

144 
	`°rvis
(
vis_¨gs
, 
k
->
ki_¨gs
, 
VIS_TAB
 | 
VIS_NL
 | 
VIS_NOSLASH
);

146 i‡(
	`STAILQ_NEXT
(
ve
, 
√xt_ve
Ë=
NULL
) {

149 i‡(
k
->
ki_ív
) {

150 i‡((
vis_ív
 = 
	`mÆloc
(
	`°æí
(
k
->
ki_ív
) * 4 + 1))

151 =
NULL
)

152 
	`îrx
(1, "malloc failed");

153 
	`°rvis
(
vis_ív
, 
k
->
ki_ív
,

154 
VIS_TAB
 | 
VIS_NL
 | 
VIS_NOSLASH
);

156 
vis_ív
 = 
NULL
;

158 i‡(
ãrmwidth
 =
UNLIMITED
) {

159 i‡(
k
->
ki_d
.
¥efix
)

160 ()
	`¥ötf
("%s", 
k
->
ki_d
.
¥efix
);

161 i‡(
vis_ív
)

162 ()
	`¥ötf
("%†", 
vis_ív
);

163 ()
	`¥ötf
("%s", 
vis_¨gs
);

165 
À·
 = 
ãrmwidth
 - (
tŸwidth
 - 
v
->
width
);

166 i‡(
À·
 < 1)

167 
À·
 = 
v
->
width
;

168 i‡((
˝
 = 
k
->
ki_d
.
¥efix
Ë!
NULL
)

169 --
À·
 >0 && *
˝
)

170 ()
	`putch¨
(*
˝
++);

171 i‡((
˝
 = 
vis_ív
Ë!
NULL
) {

172 --
À·
 >0 && *
˝
)

173 ()
	`putch¨
(*
˝
++);

174 i‡(--
À·
 >= 0)

175 
	`putch¨
(' ');

177 
˝
 = 
vis_¨gs
; --
À·
 >= 0 && *cp != '\0';)

178 ()
	`putch¨
(*
˝
++);

180 i‡(
vis_ív
 !
NULL
)

181 
	`‰ì
(
vis_ív
);

184 ()
	`¥ötf
("%-*.*s", 
v
->
width
, v->width, 
vis_¨gs
);

185 
	`‰ì
(
vis_¨gs
);

186 
	}
}

189 
	$ucomm
(
KINFO
 *
k
, 
VARENT
 *
ve
)

191 
tmpbuff
[
COMMLEN
 + 
OCOMMLEN
 + 2];

192 
VAR
 *
v
;

194 
v
 = 
ve
->
v¨
;

195 i‡(
	`STAILQ_NEXT
(
ve
, 
√xt_ve
Ë=
NULL
) {

196 i‡(
k
->
ki_d
.
¥efix
)

197 ()
	`¥ötf
("%s", 
k
->
ki_d
.
¥efix
);

198 ()
	`¥ötf
("%s", 
k
->
ki_p
->
ki_comm
);

199 i‡(
showthªads
 && 
k
->
ki_p
->
ki_numthªads
 > 1)

200 
	`¥ötf
("/%s", 
k
->
ki_p
->
ki_ocomm
);

202 
	`bzîo
(
tmpbuff
, (tmpbuff));

203 i‡(
showthªads
 && 
k
->
ki_p
->
ki_numthªads
 > 1)

204 
	`•rötf
(
tmpbuff
, "%s/%s", 
k
->
ki_p
->
ki_comm
,

205 
k
->
ki_p
->
ki_ocomm
);

207 
	`•rötf
(
tmpbuff
, "%s", 
k
->
ki_p
->
ki_comm
);

208 ()
	`¥ötf
("%-*s", 
v
->
width
, 
tmpbuff
);

210 
	}
}

213 
	$td«m
(
KINFO
 *
k
, 
VARENT
 *
ve
)

215 
VAR
 *
v
;

217 
v
 = 
ve
->
v¨
;

218 i‡(
showthªads
 && 
k
->
ki_p
->
ki_numthªads
 > 1)

219 ()
	`¥ötf
("%-*s", 
v
->
width
, 
k
->
ki_p
->
ki_ocomm
);

221 ()
	`¥ötf
("%-*s", 
v
->
width
, " ");

222 
	}
}

225 
	$log«me
(
KINFO
 *
k
, 
VARENT
 *
ve
)

227 
VAR
 *
v
;

228 *
s
;

230 
v
 = 
ve
->
v¨
;

231 ()
	`¥ötf
("%-*s", 
v
->
width
, (
s
 = 
k
->
ki_p
->
ki_logö
, *s) ? s : "-");

232 
	}
}

235 
	$°©e
(
KINFO
 *
k
, 
VARENT
 *
ve
)

237 
Êag
, 
tdÊags
;

238 *
˝
;

239 
VAR
 *
v
;

240 
buf
[16];

242 
v
 = 
ve
->
v¨
;

243 
Êag
 = 
k
->
ki_p
->
ki_Êag
;

244 
tdÊags
 = 
k
->
ki_p
->
ki_tdÊags
;

245 
˝
 = 
buf
;

247 
k
->
ki_p
->
ki_°©
) {

249 
SSTOP
:

250 *
˝
 = 'T';

253 
SSLEEP
:

254 i‡(
tdÊags
 & 
TDF_SINTR
)

255 *
˝
 = 
k
->
ki_p
->
ki_¶±ime
 >
MAXSLP
 ? 'I' : 'S';

257 *
˝
 = 'D';

260 
SRUN
:

261 
SIDL
:

262 *
˝
 = 'R';

265 
SWAIT
:

266 *
˝
 = 'W';

269 
SLOCK
:

270 *
˝
 = 'L';

273 
SZOMB
:

274 *
˝
 = 'Z';

278 *
˝
 = '?';

280 
˝
++;

281 i‡(!(
Êag
 & 
P_INMEM
))

282 *
˝
++ = 'W';

283 i‡(
k
->
ki_p
->
ki_ni˚
 < 
NZERO
)

284 *
˝
++ = '<';

285 i‡(
k
->
ki_p
->
ki_ni˚
 > 
NZERO
)

286 *
˝
++ = 'N';

287 i‡(
Êag
 & 
P_TRACED
)

288 *
˝
++ = 'X';

289 i‡(
Êag
 & 
P_WEXIT
 && 
k
->
ki_p
->
ki_°©
 !
SZOMB
)

290 *
˝
++ = 'E';

291 i‡(
Êag
 & 
P_PPWAIT
)

292 *
˝
++ = 'V';

293 i‡((
Êag
 & 
P_SYSTEM
Ë|| 
k
->
ki_p
->
ki_lock
 > 0)

294 *
˝
++ = 'L';

295 i‡(
k
->
ki_p
->
ki_kiÊag
 & 
KI_SLEADER
)

296 *
˝
++ = 's';

297 i‡((
Êag
 & 
P_CONTROLT
Ë&& 
k
->
ki_p
->
ki_pgid
 =k->ki_p->
ki_çgid
)

298 *
˝
++ = '+';

299 i‡(
Êag
 & 
P_JAILED
)

300 *
˝
++ = 'J';

301 *
˝
 = '\0';

302 ()
	`¥ötf
("%-*s", 
v
->
width
, 
buf
);

303 
	}
}

305 
	#sˇÀ¥i
(
x
Ë((xË- 
PZERO
)

	)

308 
	$¥i
(
KINFO
 *
k
, 
VARENT
 *
ve
)

310 
VAR
 *
v
;

312 
v
 = 
ve
->
v¨
;

313 ()
	`¥ötf
("%*d", 
v
->
width
, 
	`sˇÀ¥i
(
k
->
ki_p
->
ki_¥i
.
¥i_Àvñ
));

314 
	}
}

317 
	$u¥
(
KINFO
 *
k
, 
VARENT
 *
ve
)

319 
VAR
 *
v
;

321 
v
 = 
ve
->
v¨
;

322 ()
	`¥ötf
("%*d", 
v
->
width
, 
	`sˇÀ¥i
(
k
->
ki_p
->
ki_¥i
.
¥i_u£r
));

323 
	}
}

324 #unde‡
sˇÀ¥i


327 
	$u«me
(
KINFO
 *
k
, 
VARENT
 *
ve
)

329 
VAR
 *
v
;

331 
v
 = 
ve
->
v¨
;

332 ()
	`¥ötf
("%-*s", 
v
->
width
, 
	`u£r_‰om_uid
(
k
->
ki_p
->
ki_uid
, 0));

333 
	}
}

336 
	$s_u«me
(
KINFO
 *
k
)

338  (
	`°æí
(
	`u£r_‰om_uid
(
k
->
ki_p
->
ki_uid
, 0)));

339 
	}
}

342 
	$rgrou≤ame
(
KINFO
 *
k
, 
VARENT
 *
ve
)

344 
VAR
 *
v
;

346 
v
 = 
ve
->
v¨
;

347 ()
	`¥ötf
("%-*s", 
v
->
width
, 
	`group_‰om_gid
(
k
->
ki_p
->
ki_rgid
, 0));

348 
	}
}

351 
	$s_rgrou≤ame
(
KINFO
 *
k
)

353  (
	`°æí
(
	`group_‰om_gid
(
k
->
ki_p
->
ki_rgid
, 0)));

354 
	}
}

357 
	$ru«me
(
KINFO
 *
k
, 
VARENT
 *
ve
)

359 
VAR
 *
v
;

361 
v
 = 
ve
->
v¨
;

362 ()
	`¥ötf
("%-*s", 
v
->
width
, 
	`u£r_‰om_uid
(
k
->
ki_p
->
ki_ruid
, 0));

363 
	}
}

366 
	$s_ru«me
(
KINFO
 *
k
)

368  (
	`°æí
(
	`u£r_‰om_uid
(
k
->
ki_p
->
ki_ruid
, 0)));

369 
	}
}

373 
	$tdev
(
KINFO
 *
k
, 
VARENT
 *
ve
)

375 
VAR
 *
v
;

376 
dev_t
 
dev
;

377 
buff
[16];

379 
v
 = 
ve
->
v¨
;

380 
dev
 = 
k
->
ki_p
->
ki_tdev
;

381 i‡(
dev
 =
NODEV
)

382 ()
	`¥ötf
("%*s", 
v
->
width
, "??");

384 ()
	`¢¥ötf
(
buff
, (buff),

385 "%d/%d", 
	`maj‹
(
dev
), 
	`mö‹
(dev));

386 ()
	`¥ötf
("%*s", 
v
->
width
, 
buff
);

388 
	}
}

391 
	$äame
(
KINFO
 *
k
, 
VARENT
 *
ve
)

393 
VAR
 *
v
;

394 
dev_t
 
dev
;

395 *
â«me
;

397 
v
 = 
ve
->
v¨
;

398 
dev
 = 
k
->
ki_p
->
ki_tdev
;

399 i‡(
dev
 =
NODEV
 || (
â«me
 = 
	`dev«me
(dev, 
S_IFCHR
)Ë=
NULL
)

400 ()
	`¥ötf
("%*†", 
v
->
width
 - 1, "??");

402 i‡(
	`°∫cmp
(
â«me
, "tty", 3) == 0 ||

403 
	`°∫cmp
(
â«me
, "cua", 3) == 0)

404 
â«me
 += 3;

405 i‡(
	`°∫cmp
(
â«me
, "pts/", 4) == 0)

406 
â«me
 += 4;

407 ()
	`¥ötf
("%*.*s%c", 
v
->
width
 - 1, v->width - 1, 
â«me
,

408 
k
->
ki_p
->
ki_kiÊag
 & 
KI_CTTY
 ? ' ' : '-');

410 
	}
}

413 
	$l⁄gäame
(
KINFO
 *
k
, 
VARENT
 *
ve
)

415 
VAR
 *
v
;

416 
dev_t
 
dev
;

417 *
â«me
;

419 
v
 = 
ve
->
v¨
;

420 
dev
 = 
k
->
ki_p
->
ki_tdev
;

421 i‡(
dev
 =
NODEV
 || (
â«me
 = 
	`dev«me
(dev, 
S_IFCHR
)Ë=
NULL
)

422 ()
	`¥ötf
("%-*s", 
v
->
width
, "??");

424 ()
	`¥ötf
("%-*s", 
v
->
width
, 
â«me
);

425 
	}
}

428 
	$°¨ãd
(
KINFO
 *
k
, 
VARENT
 *
ve
)

430 
VAR
 *
v
;

431 
time_t
 
thí
;

432 
tm
 *
ç
;

433 
u£_ampm
 = -1;

434 
buf
[100];

436 
v
 = 
ve
->
v¨
;

437 i‡(!
k
->
ki_vÆid
) {

438 ()
	`¥ötf
("%-*s", 
v
->
width
, "-");

441 i‡(
u£_ampm
 < 0)

442 
u£_ampm
 = (*
	`∆_œngöfo
(
T_FMT_AMPM
) != '\0');

443 
thí
 = 
k
->
ki_p
->
ki_°¨t
.
tv_£c
;

444 
ç
 = 
	`loˇ…ime
(&
thí
);

445 i‡(
now
 - 
k
->
ki_p
->
ki_°¨t
.
tv_£c
 < 24 * 3600) {

446 ()
	`°r·ime
(
buf
, (buf),

447 
u£_ampm
 ? "%l:%M%p" : "%k:%M ", 
ç
);

448 } i‡(
now
 - 
k
->
ki_p
->
ki_°¨t
.
tv_£c
 < 7 * 86400) {

449 ()
	`°r·ime
(
buf
, (buf),

450 
u£_ampm
 ? "%a%I%p" : "%a%H ", 
ç
);

452 ()
	`°r·ime
(
buf
, (buf), "%e%b%y", 
ç
);

453 ()
	`¥ötf
("%-*s", 
v
->
width
, 
buf
);

454 
	}
}

457 
	$l°¨ãd
(
KINFO
 *
k
, 
VARENT
 *
ve
)

459 
VAR
 *
v
;

460 
time_t
 
thí
;

461 
buf
[100];

463 
v
 = 
ve
->
v¨
;

464 i‡(!
k
->
ki_vÆid
) {

465 ()
	`¥ötf
("%-*s", 
v
->
width
, "-");

468 
thí
 = 
k
->
ki_p
->
ki_°¨t
.
tv_£c
;

469 ()
	`°r·ime
(
buf
, (buf), "%c", 
	`loˇ…ime
(&
thí
));

470 ()
	`¥ötf
("%-*s", 
v
->
width
, 
buf
);

471 
	}
}

474 
	$lock«me
(
KINFO
 *
k
, 
VARENT
 *
ve
)

476 
VAR
 *
v
;

478 
v
 = 
ve
->
v¨
;

479 i‡(
k
->
ki_p
->
ki_kiÊag
 & 
KI_LOCKBLOCK
) {

480 i‡(
k
->
ki_p
->
ki_lock«me
[0] != 0)

481 ()
	`¥ötf
("%-*.*s", 
v
->
width
, v->width,

482 
k
->
ki_p
->
ki_lock«me
);

484 ()
	`¥ötf
("%-*s", 
v
->
width
, "???");

486 ()
	`¥ötf
("%-*s", 
v
->
width
, "-");

487 
	}
}

490 
	$wch™
(
KINFO
 *
k
, 
VARENT
 *
ve
)

492 
VAR
 *
v
;

494 
v
 = 
ve
->
v¨
;

495 i‡(
k
->
ki_p
->
ki_wch™
) {

496 i‡(
k
->
ki_p
->
ki_wmesg
[0] != 0)

497 ()
	`¥ötf
("%-*.*s", 
v
->
width
, v->width,

498 
k
->
ki_p
->
ki_wmesg
);

500 ()
	`¥ötf
("%-*lx", 
v
->
width
,

501 ()
k
->
ki_p
->
ki_wch™
);

503 ()
	`¥ötf
("%-*s", 
v
->
width
, "-");

504 
	}
}

507 
	$nwch™
(
KINFO
 *
k
, 
VARENT
 *
ve
)

509 
VAR
 *
v
;

511 
v
 = 
ve
->
v¨
;

512 i‡(
k
->
ki_p
->
ki_wch™
) {

513 ()
	`¥ötf
("%0*lx", 
v
->
width
,

514 ()
k
->
ki_p
->
ki_wch™
);

516 ()
	`¥ötf
("%-*s", 
v
->
width
, "-");

517 
	}
}

520 
	$mwch™
(
KINFO
 *
k
, 
VARENT
 *
ve
)

522 
VAR
 *
v
;

524 
v
 = 
ve
->
v¨
;

525 i‡(
k
->
ki_p
->
ki_wch™
) {

526 i‡(
k
->
ki_p
->
ki_wmesg
[0] != 0)

527 ()
	`¥ötf
("%-*.*s", 
v
->
width
, v->width,

528 
k
->
ki_p
->
ki_wmesg
);

530 ()
	`¥ötf
("%-*lx", 
v
->
width
,

531 ()
k
->
ki_p
->
ki_wch™
);

532 } i‡(
k
->
ki_p
->
ki_kiÊag
 & 
KI_LOCKBLOCK
) {

533 i‡(
k
->
ki_p
->
ki_lock«me
[0]) {

534 ()
	`¥ötf
("%-*.*s", 
v
->
width
, v->width,

535 
k
->
ki_p
->
ki_lock«me
);

537 ()
	`¥ötf
("%-*s", 
v
->
width
, "???");

539 ()
	`¥ötf
("%-*s", 
v
->
width
, "-");

540 
	}
}

543 
	$vsize
(
KINFO
 *
k
, 
VARENT
 *
ve
)

545 
VAR
 *
v
;

547 
v
 = 
ve
->
v¨
;

548 ()
	`¥ötf
("%*lu", 
v
->
width
, (
u_l⁄g
)(
k
->
ki_p
->
ki_size
 / 1024));

549 
	}
}

552 
	$¥öâime
(
KINFO
 *
k
, 
VARENT
 *
ve
, 
£cs
, 
p£cs
)

555 
VAR
 *
v
;

556 
obuff
[128];

557 
decimÆ_poöt
;

559 i‡(
decimÆ_poöt
 == '\0')

560 
decimÆ_poöt
 = 
	`loˇÀc⁄v
()->decimal_point[0];

561 
v
 = 
ve
->
v¨
;

562 i‡(!
k
->
ki_vÆid
) {

563 
£cs
 = 0;

564 
p£cs
 = 0;

567 
p£cs
 = (psecs + 5000) / 10000;

568 
£cs
 +
p£cs
 / 100;

569 
p£cs
 =Ösecs % 100;

571 ()
	`¢¥ötf
(
obuff
, (obuff), "%3ld:%02ld%c%02ld",

572 
£cs
 / 60, sec†% 60, 
decimÆ_poöt
, 
p£cs
);

573 ()
	`¥ötf
("%*s", 
v
->
width
, 
obuff
);

574 
	}
}

577 
	$˝utime
(
KINFO
 *
k
, 
VARENT
 *
ve
)

579 
£cs
, 
p£cs
;

586 
£cs
 = 
k
->
ki_p
->
ki_ru¡ime
 / 1000000;

587 
p£cs
 = 
k
->
ki_p
->
ki_ru¡ime
 % 1000000;

588 i‡(
sumrußge
) {

589 
£cs
 +
k
->
ki_p
->
ki_chûdtime
.
tv_£c
;

590 
p£cs
 +
k
->
ki_p
->
ki_chûdtime
.
tv_u£c
;

592 
	`¥öâime
(
k
, 
ve
, 
£cs
, 
p£cs
);

593 
	}
}

596 
	$sy°ime
(
KINFO
 *
k
, 
VARENT
 *
ve
)

598 
£cs
, 
p£cs
;

600 
£cs
 = 
k
->
ki_p
->
ki_rußge
.
ru_°ime
.
tv_£c
;

601 
p£cs
 = 
k
->
ki_p
->
ki_rußge
.
ru_°ime
.
tv_u£c
;

602 i‡(
sumrußge
) {

603 
£cs
 +
k
->
ki_p
->
ki_chûd°ime
.
tv_£c
;

604 
p£cs
 +
k
->
ki_p
->
ki_chûd°ime
.
tv_u£c
;

606 
	`¥öâime
(
k
, 
ve
, 
£cs
, 
p£cs
);

607 
	}
}

610 
	$u£πime
(
KINFO
 *
k
, 
VARENT
 *
ve
)

612 
£cs
, 
p£cs
;

614 
£cs
 = 
k
->
ki_p
->
ki_rußge
.
ru_utime
.
tv_£c
;

615 
p£cs
 = 
k
->
ki_p
->
ki_rußge
.
ru_utime
.
tv_u£c
;

616 i‡(
sumrußge
) {

617 
£cs
 +
k
->
ki_p
->
ki_chûdutime
.
tv_£c
;

618 
p£cs
 +
k
->
ki_p
->
ki_chûdutime
.
tv_u£c
;

620 
	`¥öâime
(
k
, 
ve
, 
£cs
, 
p£cs
);

621 
	}
}

624 
	$ñ≠£d
(
KINFO
 *
k
, 
VARENT
 *
ve
)

626 
VAR
 *
v
;

627 
time_t
 
vÆ
;

628 
days
, 
hours
, 
mös
, 
£cs
;

629 
obuff
[128];

631 
v
 = 
ve
->
v¨
;

632 i‡(!
k
->
ki_vÆid
) {

633 ()
	`¥ötf
("%-*s", 
v
->
width
, "-");

636 
vÆ
 = 
now
 - 
k
->
ki_p
->
ki_°¨t
.
tv_£c
;

637 
days
 = 
vÆ
 / (24 * 60 * 60);

638 
vÆ
 %= 24 * 60 * 60;

639 
hours
 = 
vÆ
 / (60 * 60);

640 
vÆ
 %= 60 * 60;

641 
mös
 = 
vÆ
 / 60;

642 
£cs
 = 
vÆ
 % 60;

643 i‡(
days
 != 0)

644 ()
	`¢¥ötf
(
obuff
, (obuff), "%3d-%02d:%02d:%02d",

645 
days
, 
hours
, 
mös
, 
£cs
);

646 i‡(
hours
 != 0)

647 ()
	`¢¥ötf
(
obuff
, (obuff), "%02d:%02d:%02d",

648 
hours
, 
mös
, 
£cs
);

650 ()
	`¢¥ötf
(
obuff
, (obuff), "%02d:%02d", 
mös
, 
£cs
);

651 ()
	`¥ötf
("%*s", 
v
->
width
, 
obuff
);

652 
	}
}

655 
	$gëp˝u
(c⁄° 
KINFO
 *
k
)

657 
Áûuª
;

659 i‡(!
∆i°ªad
)

660 
Áûuª
 = 
	`d⁄li°
();

661 i‡(
Áûuª
)

664 
	#fxtoÊ
(
fix±
Ë(()(fix±Ë/ 
fsˇÀ
)

	)

667 i‡(
k
->
ki_p
->
ki_swtime
 =0 || (k->ki_p->
ki_Êag
 & 
P_INMEM
) == 0)

669 i‡(
øw˝u
)

670  (100.0 * 
	`fxtoÊ
(
k
->
ki_p
->
ki_p˘˝u
));

671  (100.0 * 
	`fxtoÊ
(
k
->
ki_p
->
ki_p˘˝u
) /

672 (1.0 - 
	`exp
(
k
->
ki_p
->
ki_swtime
 * 
	`log
(
	`fxtoÊ
(
c˝u
)))));

673 
	}
}

676 
	$p˝u
(
KINFO
 *
k
, 
VARENT
 *
ve
)

678 
VAR
 *
v
;

680 
v
 = 
ve
->
v¨
;

681 ()
	`¥ötf
("%*.1f", 
v
->
width
, 
	`gëp˝u
(
k
));

682 
	}
}

685 
	$gëpmem
(
KINFO
 *
k
)

687 
Áûuª
;

688 
‰acmem
;

690 i‡(!
∆i°ªad
)

691 
Áûuª
 = 
	`d⁄li°
();

692 i‡(
Áûuª
)

695 i‡((
k
->
ki_p
->
ki_Êag
 & 
P_INMEM
) == 0)

699 
‰acmem
 = (()
k
->
ki_p
->
ki_rssize
Ë/ 
mem∑ges
;

700  (100.0 * 
‰acmem
);

701 
	}
}

704 
	$pmem
(
KINFO
 *
k
, 
VARENT
 *
ve
)

706 
VAR
 *
v
;

708 
v
 = 
ve
->
v¨
;

709 ()
	`¥ötf
("%*.1f", 
v
->
width
, 
	`gëpmem
(
k
));

710 
	}
}

713 
	$∑geö
(
KINFO
 *
k
, 
VARENT
 *
ve
)

715 
VAR
 *
v
;

717 
v
 = 
ve
->
v¨
;

718 ()
	`¥ötf
("%*ld", 
v
->
width
,

719 
k
->
ki_vÆid
 ? k->
ki_p
->
ki_rußge
.
ru_majÊt
 : 0);

720 
	}
}

724 
	$maxrss
(
KINFO
 *
k
 
__unu£d
, 
VARENT
 *
ve
)

726 
VAR
 *
v
;

728 
v
 = 
ve
->
v¨
;

730 ()
	`¥ötf
("%*s", 
v
->
width
, "-");

731 
	}
}

734 
	$¥i‹ôyr
(
KINFO
 *
k
, 
VARENT
 *
ve
)

736 
VAR
 *
v
;

737 
¥i‹ôy
 *
Õri
;

738 
°r
[8];

739 
˛ass
, 
Àvñ
;

741 
v
 = 
ve
->
v¨
;

742 
Õri
 = &
k
->
ki_p
->
ki_¥i
;

743 
˛ass
 = 
Õri
->
¥i_˛ass
;

744 
Àvñ
 = 
Õri
->
¥i_Àvñ
;

745 
˛ass
) {

746 
PRI_ITHD
:

747 
	`¢¥ötf
(
°r
, (°r), "öå:%u", 
Àvñ
);

749 
PRI_REALTIME
:

750 
	`¢¥ötf
(
°r
, (°r), "ªÆ:%u", 
Àvñ
);

752 
PRI_TIMESHARE
:

753 
	`°∫˝y
(
°r
, "normal", (str));

755 
PRI_IDLE
:

756 
	`¢¥ötf
(
°r
, (°r), "idÀ:%u", 
Àvñ
);

759 
	`¢¥ötf
(
°r
, (°r), "%u:%u", 
˛ass
, 
Àvñ
);

762 
°r
[(str) - 1] = '\0';

763 ()
	`¥ötf
("%*s", 
v
->
width
, 
°r
);

764 
	}
}

771 
	$¥ötvÆ
(*
bp
, 
VAR
 *
v
)

773 
ofmt
[32] = "%";

774 c⁄° *
f˝
;

775 *
˝
;

777 
˝
 = 
ofmt
 + 1;

778 
f˝
 = 
v
->
fmt
;

779 i‡(
v
->
Êag
 & 
LJUST
)

780 *
˝
++ = '-';

781 *
˝
++ = '*';

782 (*
˝
++ = *
f˝
++));

784 
	#CHKINF127
(
n
Ë((“Ë> 127Ë&& (
v
->
Êag
 & 
INF127
Ë? 127 : (n))

	)

786 
v
->
ty≥
) {

787 
CHAR
:

788 ()
	`¥ötf
(
ofmt
, 
v
->
width
, *(*)
bp
);

790 
UCHAR
:

791 ()
	`¥ötf
(
ofmt
, 
v
->
width
, *(
u_ch¨
 *)
bp
);

793 
SHORT
:

794 ()
	`¥ötf
(
ofmt
, 
v
->
width
, *(*)
bp
);

796 
USHORT
:

797 ()
	`¥ötf
(
ofmt
, 
v
->
width
, *(
u_sh‹t
 *)
bp
);

799 
INT
:

800 ()
	`¥ötf
(
ofmt
, 
v
->
width
, *(*)
bp
);

802 
UINT
:

803 ()
	`¥ötf
(
ofmt
, 
v
->
width
, 
	`CHKINF127
(*(
u_öt
 *)
bp
));

805 
LONG
:

806 ()
	`¥ötf
(
ofmt
, 
v
->
width
, *(*)
bp
);

808 
ULONG
:

809 ()
	`¥ötf
(
ofmt
, 
v
->
width
, *(
u_l⁄g
 *)
bp
);

811 
KPTR
:

812 ()
	`¥ötf
(
ofmt
, 
v
->
width
, *(
u_l⁄g
 *)
bp
);

814 
PGTOK
:

815 ()
	`¥ötf
(
ofmt
, 
v
->
width
, 
	`ps_pgtok
(*(
u_l⁄g
 *)
bp
));

818 
	`îrx
(1, "unknow¿ty≥ %d", 
v
->
ty≥
);

820 
	}
}

823 
	$kv¨
(
KINFO
 *
k
, 
VARENT
 *
ve
)

825 
VAR
 *
v
;

827 
v
 = 
ve
->
v¨
;

828 
	`¥ötvÆ
((*)((*)
k
->
ki_p
 + 
v
->
off
), v);

829 
	}
}

832 
	$rv¨
(
KINFO
 *
k
, 
VARENT
 *
ve
)

834 
VAR
 *
v
;

836 
v
 = 
ve
->
v¨
;

837 i‡(
k
->
ki_vÆid
)

838 
	`¥ötvÆ
((*)((*)(&
k
->
ki_p
->
ki_rußge
Ë+ 
v
->
off
), v);

840 ()
	`¥ötf
("%*s", 
v
->
width
, "-");

841 
	}
}

844 
	$emu ame
(
KINFO
 *
k
, 
VARENT
 *
ve
)

846 
VAR
 *
v
;

848 
v
 = 
ve
->
v¨
;

849 
	`¥ötf
("%-*s", 
v
->
width
, *
k
->
ki_p
->
ki_emul
 ? k->ki_p->ki_emul : "-");

850 
	}
}

853 
	$œbñ
(
KINFO
 *
k
, 
VARENT
 *
ve
)

855 *
°rög
;

856 
VAR
 *
v
;

857 
mac_t
 
¥o˛abñ
;

858 
îr‹
;

860 
v
 = 
ve
->
v¨
;

861 
°rög
 = 
NULL
;

862 i‡(
	`mac_¥ï¨e_¥o˚ss_œbñ
(&
¥o˛abñ
) == -1) {

863 
	`w¨n
("mac_prepare_process_label");

864 
out
;

866 
îr‹
 = 
	`mac_gë_pid
(
k
->
ki_p
->
ki_pid
, 
¥o˛abñ
);

867 i‡(
îr‹
 == 0) {

868 i‡(
	`mac_to_ãxt
(
¥o˛abñ
, &
°rög
) == -1)

869 
°rög
 = 
NULL
;

871 
	`mac_‰ì
(
¥o˛abñ
);

872 
out
:

873 i‡(
°rög
 !
NULL
) {

874 ()
	`¥ötf
("%-*s", 
v
->
width
, 
°rög
);

875 
	`‰ì
(
°rög
);

877 ()
	`¥ötf
("%-*s", 
v
->
width
, " -");

879 
	}
}

882 
	$s_comm
(
KINFO
 *
k
)

884 
tmpbuff
[
COMMLEN
 + 
OCOMMLEN
 + 2];

886 
	`bzîo
(
tmpbuff
, (tmpbuff));

887 i‡(
showthªads
 && 
k
->
ki_p
->
ki_numthªads
 > 1)

888 
	`•rötf
(
tmpbuff
, "%s/%s", 
k
->
ki_p
->
ki_comm
,

889 
k
->
ki_p
->
ki_ocomm
);

891 
	`•rötf
(
tmpbuff
, "%s", 
k
->
ki_p
->
ki_comm
);

892  (
	`°æí
(
tmpbuff
));

893 
	}
}

896 
	$s_œbñ
(
KINFO
 *
k
)

898 *
°rög
 = 
NULL
;

899 
mac_t
 
¥o˛abñ
;

900 
îr‹
, 
size
 = 0;

902 i‡(
	`mac_¥ï¨e_¥o˚ss_œbñ
(&
¥o˛abñ
) == -1) {

903 
	`w¨n
("mac_prepare_process_label");

906 
îr‹
 = 
	`mac_gë_pid
(
k
->
ki_p
->
ki_pid
, 
¥o˛abñ
);

907 i‡(
îr‹
 =0 && 
	`mac_to_ãxt
(
¥o˛abñ
, &
°rög
) == 0) {

908 
size
 = 
	`°æí
(
°rög
);

909 
	`‰ì
(
°rög
);

911 
	`mac_‰ì
(
¥o˛abñ
);

912  (
size
);

913 
	}
}

	@ps/ps.c

37 #i‚de‡
löt


38 c⁄° 
	gc›yright
[] =

44 #i‚de‡
löt


45 
	gsccsid
[] = "@(#)ps.c 8.4 (Berkeley) 4/2/94";

49 
	~<sys/cdefs.h
>

50 
__FBSDID
("$FreeBSD: src/bin/ps/ps.c,v 1.117.2.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

52 
	~<sys/∑øm.h
>

53 
	~<sys/¥oc.h
>

54 
	~<sys/u£r.h
>

55 
	~<sys/°©.h
>

56 
	~<sys/io˘l.h
>

57 
	~<sys/sys˘l.h
>

58 
	~<sys/mou¡.h
>

60 
	~<˘y≥.h
>

61 
	~<îr.h
>

62 
	~<î∫o.h
>

63 
	~<f˙é.h
>

64 
	~<gΩ.h
>

65 
	~<kvm.h
>

66 
	~<limôs.h
>

67 
	~<loˇÀ.h
>

68 
	~<∑ths.h
>

69 
	~<pwd.h
>

70 
	~<°dio.h
>

71 
	~<°dlib.h
>

72 
	~<°rög.h
>

73 
	~<uni°d.h
>

75 
	~"ps.h
"

77 
	#_PATH_PTS
 "/dev/±s/"

	)

79 
	#W_SEP
 " \t"

	)

80 
	#T_SEP
 ","

	)

82 #ifde‡
LAZY_PS


83 
	#DEF_UREAD
 0

	)

84 
	#OPT_LAZY_f
 "f"

	)

86 
	#DEF_UREAD
 1

	)

87 
	#OPT_LAZY_f


	)

94 
	#isdigôch
(
Anych¨
Ë
	`isdigô
((
u_ch¨
)(Anych¨))

	)

96 
	gcÊag
;

97 
	gevÆ
;

98 
time_t
 
	gnow
;

99 
	gøw˝u
;

100 
	gsumrußge
;

101 
	gãrmwidth
;

102 
	gtŸwidth
;

103 
	gshowthªads
;

105 
vñi°hód
 
	gv¨li°
 = 
STAILQ_HEAD_INITIALIZER
(
v¨li°
);

107 
	gf‹˚uªad
 = 
DEF_UREAD
;

108 
kvm_t
 *
	gkd
;

109 
KINFO
 *
	gköfo
;

110 
	g√edcomm
;

111 
	g√edív
;

112 
	g√edu£r
;

113 
	g›tÁèl
;

115 
	es‹t
 { 
	mDEFAULT
, 
	mSORTMEM
, 
	mSORTCPU
 } 
	gs‹tby
 = 
DEFAULT
;

117 
	gli°öfo
;

118 
	taddñem_πn
(
	tli°öfo
 *
	t_öf
, c⁄° *
	t_ñem
);

120 
	sli°öfo
 {

121 
	mcou¡
;

122 
	mmaxcou¡
;

123 
	mñemsize
;

124 
addñem_πn
 *
	maddñem
;

125 c⁄° *
	m ame
;

127 
gid_t
 *
	mgids
;

128 
pid_t
 *
	mpids
;

129 
dev_t
 *
	mâys
;

130 
uid_t
 *
	muids
;

131 *
	m±r
;

132 } 
	ml
;

135 
check_¥ocfs
();

136 
addñem_gid
(
li°öfo
 *, const *);

137 
addñem_pid
(
li°öfo
 *, const *);

138 
addñem_ây
(
li°öfo
 *, const *);

139 
addñem_uid
(
li°öfo
 *, const *);

140 
add_li°
(
li°öfo
 *, const *);

141 
des˚nd™t_s‹t
(
KINFO
 *, );

142 
dynsizev¨s
(
KINFO
 *);

143 *
ex∑nd_li°
(
li°öfo
 *);

145 
fmt
(**(*)(
kvm_t
 *, c⁄° 
köfo_¥oc
 *, ),

146 
KINFO
 *, *, );

147 
‰ì_li°
(
li°öfo
 *);

148 
öô_li°
(
li°öfo
 *, 
addñem_πn
, , const *);

149 *
kludge_ﬁdps_›ti⁄s
(const *, *, const *);

150 
pscomp
(const *, const *);

151 
ßveu£r
(
KINFO
 *);

152 
sˇnv¨s
();

153 
sizev¨s
();

154 
ußge
();

156 
	gdfmt
[] = "pid,tt,state,time,command";

157 
	gjfmt
[] = "user,pid,ppid,pgid,sid,jobc,state,tt,time,command";

158 
	glfmt
[] = "uid,pid,ppid,cpu,pri,nice,vsz,rss,mwchan,state,"

160 
	go1
[] = "pid";

161 
	go2
[] = "tt,state,time,command";

162 
	gufmt
[] = "user,pid,%cpu,%mem,vsz,rss,tt,state,start,time,command";

163 
	gvfmt
[] = "pid,state,time,sl,re,pagein,vsz,rss,lim,tsiz,"

165 
	gZfmt
[] = "label";

167 
	#PS_ARGS
 "AaCcde" 
OPT_LAZY_f
 "G:gHhjLlM:mN:O:o:p:rSTt:U:uvwXxZ"

	)

170 
	$maö
(
¨gc
, *
¨gv
[])

172 
li°öfo
 
gidli°
, 
pgΩli°
, 
pidli°
;

173 
li°öfo
 
ruidli°
, 
£s¶i°
, 
âyli°
, 
uidli°
;

174 
köfo_¥oc
 *
kp
;

175 
KINFO
 *
√xt_KINFO
;

176 
v¨ít
 *
vít
;

177 
wösize
 
ws
;

178 c⁄° *
∆i°f
, *
memf
;

179 *
cﬁs
;

180 
Æl
, 
ch
, 
ñem
, 
Êag
, 
_fmt
, 
i
, 
löío
;

181 
des˚nd™cy
, 
√¡rõs
, 
nkït
, 
n£À˘‹s
;

182 
¥thódî
, 
wÊag
, 
wh©
, 
xkìp
, 
xkìp_im∂õd
;

183 
îrbuf
[
_POSIX2_LINE_MAX
];

185 (Ë
	`£éoˇÀ
(
LC_ALL
, "");

186 
	`time
(&
now
);

188 i‡((
cﬁs
 = 
	`gëív
("COLUMNS")Ë!
NULL
 && *cols != '\0')

189 
ãrmwidth
 = 
	`©oi
(
cﬁs
);

190 i‡((
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, (*)&
ws
) == -1 &&

191 
	`io˘l
(
STDERR_FILENO
, 
TIOCGWINSZ
, (*)&
ws
) == -1 &&

192 
	`io˘l
(
STDIN_FILENO
, 
TIOCGWINSZ
, (*)&
ws
) == -1) ||

193 
ws
.
ws_cﬁ
 == 0)

194 
ãrmwidth
 = 79;

196 
ãrmwidth
 = 
ws
.
ws_cﬁ
 - 1;

202 i‡(
¨gc
 > 1)

203 
¨gv
[1] = 
	`kludge_ﬁdps_›ti⁄s
(
PS_ARGS
,árgv[1],árgv[2]);

205 
Æl
 = 
des˚nd™cy
 = 
_fmt
 = 
n£À˘‹s
 = 
›tÁèl
 = 0;

206 
¥thódî
 = 
showthªads
 = 
wÊag
 = 
xkìp_im∂õd
 = 0;

207 
xkìp
 = -1;

208 
	`öô_li°
(&
gidli°
, 
addñem_gid
, (
gid_t
), "group");

209 
	`öô_li°
(&
pgΩli°
, 
addñem_pid
, (
pid_t
), "process group");

210 
	`öô_li°
(&
pidli°
, 
addñem_pid
, (
pid_t
), "process id");

211 
	`öô_li°
(&
ruidli°
, 
addñem_uid
, (
uid_t
), "ruser");

212 
	`öô_li°
(&
£s¶i°
, 
addñem_pid
, (
pid_t
), "session id");

213 
	`öô_li°
(&
âyli°
, 
addñem_ây
, (
dev_t
), "tty");

214 
	`öô_li°
(&
uidli°
, 
addñem_uid
, (
uid_t
), "user");

215 
memf
 = 
_PATH_DEVNULL
;

216 
∆i°f
 = 
NULL
;

217 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
PS_ARGS
)) != -1)

218 
ch
) {

225 
n£À˘‹s
++;

226 
Æl
 = 
xkìp
 = 1;

229 
n£À˘‹s
++;

230 
Æl
 = 1;

233 
øw˝u
 = 1;

236 
cÊag
 = 1;

239 
des˚nd™cy
 = 1;

242 
√edív
 = 1;

244 #ifde‡
LAZY_PS


246 i‡(
	`gëuid
(Ë=0 || 
	`gëgid
() == 0)

247 
f‹˚uªad
 = 1;

251 
	`add_li°
(&
gidli°
, 
›èrg
);

252 
xkìp_im∂õd
 = 1;

253 
n£À˘‹s
++;

262 
	`add_li°
(&
pgΩli°
, 
›èrg
);

263 
xkìp_im∂õd
 = 1;

264 
n£À˘‹s
++;

271 
showthªads
 = 
KERN_PROC_INC_THREAD
;

274 
¥thódî
 = 
ws
.
ws_row
 > 5 ? ws.ws_row : 22;

277 
	`∑r£fmt
(
jfmt
, 0);

278 
_fmt
 = 1;

279 
jfmt
[0] = '\0';

282 
	`showkey
();

283 
	`exô
(0);

285 
	`∑r£fmt
(
lfmt
, 0);

286 
_fmt
 = 1;

287 
lfmt
[0] = '\0';

290 
memf
 = 
›èrg
;

293 
s‹tby
 = 
SORTMEM
;

296 
∆i°f
 = 
›èrg
;

299 
	`∑r£fmt
(
o1
, 1);

300 
	`∑r£fmt
(
›èrg
, 1);

301 
	`∑r£fmt
(
o2
, 1);

302 
o1
[0] = 
o2
[0] = '\0';

303 
_fmt
 = 1;

306 
	`∑r£fmt
(
›èrg
, 1);

307 
_fmt
 = 1;

310 
	`add_li°
(&
pidli°
, 
›èrg
);

317 
n£À˘‹s
++;

328 
	`add_li°
(&
ruidli°
, 
›èrg
);

329 
xkìp_im∂õd
 = 1;

330 
n£À˘‹s
++;

334 
s‹tby
 = 
SORTCPU
;

337 
sumrußge
 = 1;

347 
	`add_li°
(&
£s¶i°
, 
›èrg
);

348 
xkìp_im∂õd
 = 1;

349 
n£À˘‹s
++;

353 i‡((
›èrg
 = 
	`ây«me
(
STDIN_FILENO
)Ë=
NULL
)

354 
	`îrx
(1, "stdin:ÇotáÅerminal");

357 
	`add_li°
(&
âyli°
, 
›èrg
);

358 
xkìp_im∂õd
 = 1;

359 
n£À˘‹s
++;

363 
	`add_li°
(&
uidli°
, 
›èrg
);

364 
xkìp_im∂õd
 = 1;

365 
n£À˘‹s
++;

368 
	`∑r£fmt
(
ufmt
, 0);

369 
s‹tby
 = 
SORTCPU
;

370 
_fmt
 = 1;

371 
ufmt
[0] = '\0';

374 
	`∑r£fmt
(
vfmt
, 0);

375 
s‹tby
 = 
SORTMEM
;

376 
_fmt
 = 1;

377 
vfmt
[0] = '\0';

380 i‡(
wÊag
)

381 
ãrmwidth
 = 
UNLIMITED
;

382 i‡(
ãrmwidth
 < 131)

383 
ãrmwidth
 = 131;

384 
wÊag
++;

398 
xkìp
 = 0;

401 
xkìp
 = 1;

404 
	`∑r£fmt
(
Zfmt
, 0);

405 
Zfmt
[0] = '\0';

409 
	`ußge
();

411 
¨gc
 -
›töd
;

412 
¨gv
 +
›töd
;

420 i‡(
√edív
 =1 && 
	`check_¥ocfs
() == 0)

421 
	`w¨nx
("ProcessÉnvironmentÑequiresÖrocfs(5)");

426 *
¨gv
) {

427 i‡(!
	`isdigôch
(**
¨gv
))

429 
	`add_li°
(&
pidli°
, *
¨gv
);

430 
¨gv
++;

432 i‡(*
¨gv
) {

433 
	`Ârötf
(
°dîr
, "%s: illegalárgument: %s\n",

434 
	`gë¥og«me
(), *
¨gv
);

435 
	`ußge
();

437 i‡(
›tÁèl
)

438 
	`exô
(1);

439 i‡(
xkìp
 < 0)

440 
xkìp
 = 
xkìp_im∂õd
;

442 
kd
 = 
	`kvm_›ífûes
(
∆i°f
, 
memf
, 
NULL
, 
O_RDONLY
, 
îrbuf
);

443 i‡(
kd
 == 0)

444 
	`îrx
(1, "%s", 
îrbuf
);

446 i‡(!
_fmt
)

447 
	`∑r£fmt
(
dfmt
, 0);

449 i‡(
n£À˘‹s
 == 0) {

450 
uidli°
.
l
.
±r
 = 
	`mÆloc
((
uid_t
));

451 i‡(
uidli°
.
l
.
±r
 =
NULL
)

452 
	`îrx
(1, "malloc failed");

453 
n£À˘‹s
 = 1;

454 
uidli°
.
cou¡
 = uidli°.
maxcou¡
 = 1;

455 *
uidli°
.
l
.
uids
 = 
	`gëuid
();

462 
	`sˇnv¨s
();

471 
wh©
 = 
showthªads
 !0 ? 
KERN_PROC_ALL
 : 
KERN_PROC_PROC
;

472 
Êag
 = 0;

473 i‡(
n£À˘‹s
 == 1) {

474 i‡(
gidli°
.
cou¡
 == 1) {

475 
wh©
 = 
KERN_PROC_RGID
 | 
showthªads
;

476 
Êag
 = *
gidli°
.
l
.
gids
;

477 
n£À˘‹s
 = 0;

478 } i‡(
pgΩli°
.
cou¡
 == 1) {

479 
wh©
 = 
KERN_PROC_PGRP
 | 
showthªads
;

480 
Êag
 = *
pgΩli°
.
l
.
pids
;

481 
n£À˘‹s
 = 0;

482 } i‡(
pidli°
.
cou¡
 == 1) {

483 
wh©
 = 
KERN_PROC_PID
 | 
showthªads
;

484 
Êag
 = *
pidli°
.
l
.
pids
;

485 
n£À˘‹s
 = 0;

486 } i‡(
ruidli°
.
cou¡
 == 1) {

487 
wh©
 = 
KERN_PROC_RUID
 | 
showthªads
;

488 
Êag
 = *
ruidli°
.
l
.
uids
;

489 
n£À˘‹s
 = 0;

490 } i‡(
£s¶i°
.
cou¡
 == 1) {

491 
wh©
 = 
KERN_PROC_SESSION
 | 
showthªads
;

492 
Êag
 = *
£s¶i°
.
l
.
pids
;

493 
n£À˘‹s
 = 0;

494 } i‡(
âyli°
.
cou¡
 == 1) {

495 
wh©
 = 
KERN_PROC_TTY
 | 
showthªads
;

496 
Êag
 = *
âyli°
.
l
.
âys
;

497 
n£À˘‹s
 = 0;

498 } i‡(
uidli°
.
cou¡
 == 1) {

499 
wh©
 = 
KERN_PROC_UID
 | 
showthªads
;

500 
Êag
 = *
uidli°
.
l
.
uids
;

501 
n£À˘‹s
 = 0;

502 } i‡(
Æl
) {

504 
n£À˘‹s
 = 0;

511 
√¡rõs
 = -1;

512 
kp
 = 
	`kvm_gë¥ocs
(
kd
, 
wh©
, 
Êag
, &
√¡rõs
);

513 i‡((
kp
 =
NULL
 && 
√¡rõs
 > 0) || (kp != NULL &&Çentries < 0))

514 
	`îrx
(1, "%s", 
	`kvm_gëîr
(
kd
));

515 
nkït
 = 0;

516 i‡(
√¡rõs
 > 0) {

517 i‡((
köfo
 = 
	`mÆloc
(
√¡rõs
 * (*köfo))Ë=
NULL
)

518 
	`îrx
(1, "malloc failed");

519 
i
 = 
√¡rõs
; --ò>0; ++
kp
) {

525 i‡(
pidli°
.
cou¡
 > 0) {

526 
ñem
 = 0;ÉÀm < 
pidli°
.
cou¡
;Élem++)

527 i‡(
kp
->
ki_pid
 =
pidli°
.
l
.
pids
[
ñem
])

528 
kìpô
;

535 i‡(
xkìp
 == 0) {

536 i‡((
kp
->
ki_tdev
 =
NODEV
 ||

537 (
kp
->
ki_Êag
 & 
P_CONTROLT
) == 0))

540 i‡(
n£À˘‹s
 == 0)

541 
kìpô
;

542 i‡(
gidli°
.
cou¡
 > 0) {

543 
ñem
 = 0;ÉÀm < 
gidli°
.
cou¡
;Élem++)

544 i‡(
kp
->
ki_rgid
 =
gidli°
.
l
.
gids
[
ñem
])

545 
kìpô
;

547 i‡(
pgΩli°
.
cou¡
 > 0) {

548 
ñem
 = 0;ÉÀm < 
pgΩli°
.
cou¡
;Élem++)

549 i‡(
kp
->
ki_pgid
 ==

550 
pgΩli°
.
l
.
pids
[
ñem
])

551 
kìpô
;

553 i‡(
ruidli°
.
cou¡
 > 0) {

554 
ñem
 = 0;ÉÀm < 
ruidli°
.
cou¡
;Élem++)

555 i‡(
kp
->
ki_ruid
 ==

556 
ruidli°
.
l
.
uids
[
ñem
])

557 
kìpô
;

559 i‡(
£s¶i°
.
cou¡
 > 0) {

560 
ñem
 = 0;ÉÀm < 
£s¶i°
.
cou¡
;Élem++)

561 i‡(
kp
->
ki_sid
 =
£s¶i°
.
l
.
pids
[
ñem
])

562 
kìpô
;

564 i‡(
âyli°
.
cou¡
 > 0) {

565 
ñem
 = 0;ÉÀm < 
âyli°
.
cou¡
;Élem++)

566 i‡(
kp
->
ki_tdev
 =
âyli°
.
l
.
âys
[
ñem
])

567 
kìpô
;

569 i‡(
uidli°
.
cou¡
 > 0) {

570 
ñem
 = 0;ÉÀm < 
uidli°
.
cou¡
;Élem++)

571 i‡(
kp
->
ki_uid
 =
uidli°
.
l
.
uids
[
ñem
])

572 
kìpô
;

580 
kìpô
:

581 
√xt_KINFO
 = &
köfo
[
nkït
];

582 
√xt_KINFO
->
ki_p
 = 
kp
;

583 
√xt_KINFO
->
ki_d
.
Àvñ
 = 0;

584 
√xt_KINFO
->
ki_d
.
¥efix
 = 
NULL
;

585 
√xt_KINFO
->
ki_p˝u
 = 
	`gëp˝u
(next_KINFO);

586 i‡(
s‹tby
 =
SORTMEM
)

587 
√xt_KINFO
->
ki_memsize
 = 
kp
->
ki_tsize
 +

588 
kp
->
ki_dsize
 + kp->
ki_ssize
;

589 i‡(
√edu£r
)

590 
	`ßveu£r
(
√xt_KINFO
);

591 
	`dynsizev¨s
(
√xt_KINFO
);

592 
nkït
++;

596 
	`sizev¨s
();

601 
	`¥öthódî
();

602 i‡(
nkït
 == 0)

603 
	`exô
(1);

608 
	`qs‹t
(
köfo
, 
nkït
, (
KINFO
), 
pscomp
);

613 i‡(
des˚nd™cy
)

614 
	`des˚nd™t_s‹t
(
köfo
, 
nkït
);

619 
i
 = 
löío
 = 0; i < 
nkït
; i++) {

620 
	`STAILQ_FOREACH
(
vít
, &
v¨li°
, 
√xt_ve
) {

621 (
vít
->
v¨
->
›roc
)(&
köfo
[
i
], vent);

622 i‡(
	`STAILQ_NEXT
(
vít
, 
√xt_ve
Ë!
NULL
)

623 ()
	`putch¨
(' ');

625 ()
	`putch¨
('\n');

626 i‡(
¥thódî
 && 
löío
++ ==Örtheader - 4) {

627 ()
	`putch¨
('\n');

628 
	`¥öthódî
();

629 
löío
 = 0;

632 
	`‰ì_li°
(&
gidli°
);

633 
	`‰ì_li°
(&
pidli°
);

634 
	`‰ì_li°
(&
pgΩli°
);

635 
	`‰ì_li°
(&
ruidli°
);

636 
	`‰ì_li°
(&
£s¶i°
);

637 
	`‰ì_li°
(&
âyli°
);

638 
	`‰ì_li°
(&
uidli°
);

639 
i
 = 0; i < 
nkït
; i++)

640 
	`‰ì
(
köfo
[
i
].
ki_d
.
¥efix
);

641 
	`‰ì
(
köfo
);

643 
	`exô
(
evÆ
);

644 
	}
}

647 
	$addñem_gid
(
li°öfo
 *
öf
, c⁄° *
ñem
)

649 
group
 *
gΩ
;

650 c⁄° *
«me‹ID
;

651 *
ídp
;

652 
u_l⁄g
 
bigãmp
;

654 i‡(*
ñem
 ='\0' || 
	`°æí
”ÀmË>
MAXLOGNAME
) {

655 i‡(*
ñem
 == '\0')

656 
	`w¨nx
("InvÆid (zîo-ÀngthË%†«me", 
öf
->
 ame
);

658 
	`w¨nx
("%†«mêtoÿl⁄g: %s", 
öf
->
 ame
, 
ñem
);

659 
›tÁèl
 = 1;

672 
gΩ
 = 
NULL
;

673 
«me‹ID
 = "named";

674 
î∫o
 = 0;

675 
bigãmp
 = 
	`°πoul
(
ñem
, &
ídp
, 10);

676 i‡(
î∫o
 =0 && *
ídp
 ='\0' && 
bigãmp
 <
GID_MAX
) {

677 
«me‹ID
 = "name or ID matches";

678 
gΩ
 = 
	`gëgrgid
((
gid_t
)
bigãmp
);

680 i‡(
gΩ
 =
NULL
)

681 
gΩ
 = 
	`gëg∫am
(
ñem
);

682 i‡(
gΩ
 =
NULL
) {

683 
	`w¨nx
("Nÿ%†%†'%s'", 
öf
->
 ame
, 
«me‹ID
, 
ñem
);

684 
›tÁèl
 = 1;

687 i‡(
öf
->
cou¡
 >öf->
maxcou¡
)

688 
	`ex∑nd_li°
(
öf
);

689 
öf
->
l
.
gids
[(öf->
cou¡
)++] = 
gΩ
->
gr_gid
;

691 
	}
}

693 
	#BSD_PID_MAX
 99999

	)

695 
	$addñem_pid
(
li°öfo
 *
öf
, c⁄° *
ñem
)

697 *
ídp
;

698 
ãmpid
;

700 i‡(*
ñem
 == '\0') {

701 
	`w¨nx
("Invalid (zero-length)Örocess id");

702 
›tÁèl
 = 1;

706 
î∫o
 = 0;

707 
ãmpid
 = 
	`°πﬁ
(
ñem
, &
ídp
, 10);

708 i‡(*
ídp
 !'\0' || 
ãmpid
 < 0 || 
ñem
 ==Éndp) {

709 
	`w¨nx
("InvÆid %s: %s", 
öf
->
 ame
, 
ñem
);

710 
î∫o
 = 
ERANGE
;

711 } i‡(
î∫o
 !0 || 
ãmpid
 > 
BSD_PID_MAX
) {

712 
	`w¨nx
("%†toÿœrge: %s", 
öf
->
 ame
, 
ñem
);

713 
î∫o
 = 
ERANGE
;

715 i‡(
î∫o
 =
ERANGE
) {

716 
›tÁèl
 = 1;

719 i‡(
öf
->
cou¡
 >öf->
maxcou¡
)

720 
	`ex∑nd_li°
(
öf
);

721 
öf
->
l
.
pids
[(öf->
cou¡
)++] = 
ãmpid
;

723 
	}
}

724 #unde‡
BSD_PID_MAX


734 
	$addñem_ây
(
li°öfo
 *
öf
, c⁄° *
ñem
)

736 c⁄° *
ây∑th
;

737 
°©
 
sb
;

738 
∑thbuf
[
PATH_MAX
], 
∑thbuf2
[PATH_MAX], 
∑thbuf3
[PATH_MAX];

740 
ây∑th
 = 
NULL
;

741 
∑thbuf2
[0] = '\0';

742 
∑thbuf3
[0] = '\0';

743 *
ñem
) {

745 
ây∑th
 = 
ñem
;

748 i‡(
	`°rcmp
(
ñem
, "co") == 0) {

749 
ây∑th
 = 
_PATH_CONSOLE
;

754 
	`°æ˝y
(
∑thbuf
, 
_PATH_DEV
, (pathbuf));

755 
	`°æˇt
(
∑thbuf
, 
ñem
, (pathbuf));

756 
ây∑th
 = 
∑thbuf
;

757 i‡(
	`°∫cmp
(
∑thbuf
, 
_PATH_TTY
, 
	`°æí
(_PATH_TTY)) == 0)

759 i‡(
	`°∫cmp
(
∑thbuf
, 
_PATH_PTS
, 
	`°æí
(_PATH_PTS)) == 0)

761 i‡(
	`°rcmp
(
∑thbuf
, 
_PATH_CONSOLE
) == 0)

764 
	`°æ˝y
(
∑thbuf2
, 
_PATH_TTY
, (pathbuf2));

765 
	`°æˇt
(
∑thbuf2
, 
ñem
, (pathbuf2));

766 i‡(
	`°©
(
∑thbuf2
, &
sb
Ë=0 && 
	`S_ISCHR
(sb.
°_mode
)) {

768 
ây∑th
 = 
NULL
;

772 
	`°æ˝y
(
∑thbuf3
, 
_PATH_PTS
, (pathbuf3));

773 
	`°æˇt
(
∑thbuf3
, 
ñem
, (pathbuf3));

774 i‡(
	`°©
(
∑thbuf3
, &
sb
Ë=0 && 
	`S_ISCHR
(sb.
°_mode
)) {

776 
ây∑th
 = 
NULL
;

781 i‡(
ây∑th
) {

782 i‡(
	`°©
(
ây∑th
, &
sb
) == -1) {

783 i‡(
∑thbuf3
[0] != '\0')

784 
	`w¨n
("%s, %s,ánd %s", 
∑thbuf3
, 
∑thbuf2
,

785 
ây∑th
);

787 
	`w¨n
("%s", 
ây∑th
);

788 
›tÁèl
 = 1;

791 i‡(!
	`S_ISCHR
(
sb
.
°_mode
)) {

792 i‡(
∑thbuf3
[0] != '\0')

793 
	`w¨nx
("%s, %s,ánd %s: NotáÅerminal",

794 
∑thbuf3
, 
∑thbuf2
, 
ây∑th
);

796 
	`w¨nx
("%s: NŸáÅîmöÆ", 
ây∑th
);

797 
›tÁèl
 = 1;

801 i‡(
öf
->
cou¡
 >öf->
maxcou¡
)

802 
	`ex∑nd_li°
(
öf
);

803 
öf
->
l
.
âys
[(öf->
cou¡
)++] = 
sb
.
°_rdev
;

805 
	}
}

808 
	$addñem_uid
(
li°öfo
 *
öf
, c⁄° *
ñem
)

810 
∑sswd
 *
pwd
;

811 *
ídp
;

812 
u_l⁄g
 
bigãmp
;

814 i‡(*
ñem
 ='\0' || 
	`°æí
”ÀmË>
MAXLOGNAME
) {

815 i‡(*
ñem
 == '\0')

816 
	`w¨nx
("InvÆid (zîo-ÀngthË%†«me", 
öf
->
 ame
);

818 
	`w¨nx
("%†«mêtoÿl⁄g: %s", 
öf
->
 ame
, 
ñem
);

819 
›tÁèl
 = 1;

823 
pwd
 = 
	`gëpw«m
(
ñem
);

824 i‡(
pwd
 =
NULL
) {

825 
î∫o
 = 0;

826 
bigãmp
 = 
	`°πoul
(
ñem
, &
ídp
, 10);

827 i‡(
î∫o
 !0 || *
ídp
 !'\0' || 
bigãmp
 > 
UID_MAX
)

828 
	`w¨nx
("Nÿ%†«med '%s'", 
öf
->
 ame
, 
ñem
);

831 
pwd
 = 
	`gëpwuid
((
uid_t
)
bigãmp
);

832 i‡(
pwd
 =
NULL
)

833 
	`w¨nx
("No %sÇame or ID matches '%s'",

834 
öf
->
 ame
, 
ñem
);

837 i‡(
pwd
 =
NULL
) {

843 
›tÁèl
 = 1;

846 i‡(
öf
->
cou¡
 >öf->
maxcou¡
)

847 
	`ex∑nd_li°
(
öf
);

848 
öf
->
l
.
uids
[(öf->
cou¡
)++] = 
pwd
->
pw_uid
;

850 
	}
}

853 
	$add_li°
(
li°öfo
 *
öf
, c⁄° *
¨gp
)

855 c⁄° *
ßvï
;

856 *
˝
, *
ídp
;

857 
toﬁ⁄g
;

858 
ñemc›y
[
PATH_MAX
];

860 i‡(*
¨gp
 == 0)

861 
öf
->
	`addñem
(öf, 
ñemc›y
);

862 *
¨gp
 != '\0') {

863 *
¨gp
 !'\0' && 
	`°rchr
(
W_SEP
, *¨gpË!
NULL
)

864 
¨gp
++;

865 
ßvï
 = 
¨gp
;

866 
toﬁ⁄g
 = 0;

867 
˝
 = 
ñemc›y
;

868 i‡(
	`°rchr
(
T_SEP
, *
¨gp
Ë=
NULL
) {

869 
ídp
 = 
ñemc›y
 + (elemcopy) - 1;

870 *
¨gp
 !'\0' && 
˝
 <
ídp
 &&

871 
	`°rchr
(
W_SEP
 
T_SEP
, *
¨gp
Ë=
NULL
)

872 *
˝
++ = *
¨gp
++;

873 i‡(
˝
 > 
ídp
)

874 
toﬁ⁄g
 = 1;

876 i‡(!
toﬁ⁄g
) {

877 *
˝
 = '\0';

881 
öf
->
	`addñem
(öf, 
ñemc›y
);

887 *
¨gp
 !'\0' && 
	`°rchr
(
W_SEP
 
T_SEP
,

888 *
¨gp
Ë=
NULL
)

889 
¨gp
++;

890 
	`w¨nx
("VÆuêtoÿl⁄g: %.*s", ()(
¨gp
 - 
ßvï
),

891 
ßvï
);

892 
›tÁèl
 = 1;

899 *
¨gp
 !'\0' && 
	`°rchr
(
W_SEP
, *¨gpË!
NULL
)

900 
¨gp
++;

901 i‡(*
¨gp
 !'\0' && 
	`°rchr
(
T_SEP
, *¨gpË!
NULL
) {

902 
¨gp
++;

904 i‡(*
¨gp
 == '\0')

905 
öf
->
	`addñem
(öf, 
¨gp
);

908 
	}
}

911 
	$des˚nd™t_s‹t
(
KINFO
 *
ki
, 
ôems
)

913 
d°
, 
lvl
, 
maxlvl
, 
n
, 
nd°
, 
n§c
, 
siblögs
, 
§c
;

914 *
∑th
;

915 
KINFO
 
kn
;

921 
§c
 = 0;

922 
maxlvl
 = 0;

923 
§c
 < 
ôems
) {

924 i‡(
ki
[
§c
].
ki_d
.
Àvñ
) {

925 
§c
++;

928 
n§c
 = 1; 
§c
 +Ç§¯< 
ôems
;Çsrc++)

929 i‡(!
ki
[
§c
 + 
n§c
].
ki_d
.
Àvñ
)

932 
d°
 = 0; d° < 
ôems
; dst++) {

933 i‡(
ki
[
d°
].
ki_p
->
ki_pid
 =ki[
§c
].ki_p->ki_pid)

935 i‡(
ki
[
d°
].
ki_p
->
ki_pid
 =ki[
§c
].ki_p->
ki_µid
)

939 i‡(
d°
 =
ôems
) {

940 
§c
 +
n§c
;

944 
nd°
 = 1; 
d°
 +Çd° < 
ôems
;Çdst++)

945 i‡(
ki
[
d°
 + 
nd°
].
ki_d
.
Àvñ
 <= ki[dst].ki_d.level)

948 
n
 = 
§c
;Ç < sr¯+ 
n§c
;Ç++) {

949 
ki
[
n
].
ki_d
.
Àvñ
 +ki[
d°
].ki_d.level + 1;

950 i‡(
maxlvl
 < 
ki
[
n
].
ki_d
.
Àvñ
)

951 
maxlvl
 = 
ki
[
n
].
ki_d
.
Àvñ
;

954 
n§c
) {

955 i‡(
§c
 < 
d°
) {

956 
kn
 = 
ki
[
§c
];

957 
	`memmove
(
ki
 + 
§c
, ki + src + 1,

958 (
d°
 - 
§c
 + 
nd°
 - 1Ë*  *
ki
);

959 
ki
[
d°
 + 
nd°
 - 1] = 
kn
;

960 
n§c
--;

961 
d°
--;

962 
nd°
++;

963 } i‡(
§c
 !
d°
 + 
nd°
) {

964 
kn
 = 
ki
[
§c
];

965 
	`memmove
(
ki
 + 
d°
 + 
nd°
 + 1, ki + dst +Çdst,

966 (
§c
 - 
d°
 - 
nd°
Ë*  *
ki
);

967 
ki
[
d°
 + 
nd°
] = 
kn
;

968 
nd°
++;

969 
n§c
--;

970 
§c
++;

972 
nd°
 +
n§c
;

973 
§c
 +
n§c
;

974 
n§c
 = 0;

983 
∑th
 = 
	`mÆloc
((
maxlvl
 + 7) / 8);

984 
	`mem£t
(
∑th
, '\0', (
maxlvl
 + 7) / 8);

985 
§c
 = 0; sr¯< 
ôems
; src++) {

986 i‡((
lvl
 = 
ki
[
§c
].
ki_d
.
Àvñ
) == 0) {

987 
ki
[
§c
].
ki_d
.
¥efix
 = 
NULL
;

990 i‡((
ki
[
§c
].
ki_d
.
¥efix
 = 
	`mÆloc
(
lvl
 * 2 + 1)Ë=
NULL
)

991 
	`îrx
(1, "malloc failed");

992 
n
 = 0;Ç < 
lvl
 - 2;Ç++) {

993 
ki
[
§c
].
ki_d
.
¥efix
[
n
 * 2] =

994 
∑th
[
n
 / 8] & 1 << (n % 8) ? '|' : ' ';

995 
ki
[
§c
].
ki_d
.
¥efix
[
n
 * 2 + 1] = ' ';

997 i‡(
n
 =
lvl
 - 2) {

999 
siblögs
 = 0, 
d°
 = 
§c
 + 1; d° < 
ôems
; dst++) {

1000 i‡(
ki
[
d°
].
ki_d
.
Àvñ
 > 
lvl
)

1002 i‡(
ki
[
d°
].
ki_d
.
Àvñ
 =
lvl
)

1003 
siblögs
 = 1;

1006 i‡(
siblögs
)

1007 
∑th
[
n
 / 8] |= 1 << (n % 8);

1009 
∑th
[
n
 / 8] &= ~(1 << (n % 8));

1010 
ki
[
§c
].
ki_d
.
¥efix
[
n
 * 2] = 
siblögs
 ? '|' : '`';

1011 
ki
[
§c
].
ki_d
.
¥efix
[
n
 * 2 + 1] = '-';

1012 
n
++;

1014 
	`°r˝y
(
ki
[
§c
].
ki_d
.
¥efix
 + 
n
 * 2, "- ");

1016 
	`‰ì
(
∑th
);

1017 
	}
}

1020 
	$ex∑nd_li°
(
li°öfo
 *
öf
)

1022 *
√wli°
;

1023 
√wmax
;

1025 
√wmax
 = (
öf
->
maxcou¡
 + 1) << 1;

1026 
√wli°
 = 
	`ªÆloc
(
öf
->
l
.
±r
, 
√wmax
 * inf->
ñemsize
);

1027 i‡(
√wli°
 =
NULL
) {

1028 
	`‰ì
(
öf
->
l
.
±r
);

1029 
	`îrx
(1, "ªÆlo¯tÿ%d %s†Áûed", 
√wmax
, 
öf
->
 ame
);

1031 
öf
->
maxcou¡
 = 
√wmax
;

1032 
öf
->
l
.
±r
 = 
√wli°
;

1034  (
√wli°
);

1035 
	}
}

1038 
	$‰ì_li°
(
li°öfo
 *
öf
)

1041 
öf
->
cou¡
 = inf->
ñemsize
 = inf->
maxcou¡
 = 0;

1042 i‡(
öf
->
l
.
±r
 !
NULL
)

1043 
	`‰ì
(
öf
->
l
.
±r
);

1044 
öf
->
addñem
 = 
NULL
;

1045 
öf
->
 ame
 = 
NULL
;

1046 
öf
->
l
.
±r
 = 
NULL
;

1047 
	}
}

1050 
	$öô_li°
(
li°öfo
 *
öf
, 
addñem_πn
 
¨ä
, 
ñemsize
,

1051 c⁄° *
 ame
)

1054 
öf
->
cou¡
 = inf->
maxcou¡
 = 0;

1055 
öf
->
ñemsize
 =Élemsize;

1056 
öf
->
addñem
 = 
¨ä
;

1057 
öf
->
 ame
 =Üname;

1058 
öf
->
l
.
±r
 = 
NULL
;

1059 
	}
}

1061 
VARENT
 *

1062 
	$föd_v¨íåy
(
VAR
 *
v
)

1064 
v¨ít
 *
vít
;

1066 
	`STAILQ_FOREACH
(
vít
, &
v¨li°
, 
√xt_ve
) {

1067 i‡(
	`°rcmp
(
vít
->
v¨
->
«me
, 
v
->name) == 0)

1068  
vít
;

1070  
NULL
;

1071 
	}
}

1074 
	$sˇnv¨s
()

1076 
v¨ít
 *
vít
;

1077 
VAR
 *
v
;

1079 
	`STAILQ_FOREACH
(
vít
, &
v¨li°
, 
√xt_ve
) {

1080 
v
 = 
vít
->
v¨
;

1081 i‡(
v
->
Êag
 & 
DSIZ
) {

1082 
v
->
dwidth
 = v->
width
;

1083 
v
->
width
 = 0;

1085 i‡(
v
->
Êag
 & 
USER
)

1086 
√edu£r
 = 1;

1087 i‡(
v
->
Êag
 & 
COMM
)

1088 
√edcomm
 = 1;

1090 
	}
}

1093 
	$dynsizev¨s
(
KINFO
 *
ki
)

1095 
v¨ít
 *
vít
;

1096 
VAR
 *
v
;

1097 
i
;

1099 
	`STAILQ_FOREACH
(
vít
, &
v¨li°
, 
√xt_ve
) {

1100 
v
 = 
vít
->
v¨
;

1101 i‡(!(
v
->
Êag
 & 
DSIZ
))

1103 
i
 = (
v
->
•roc
)–
ki
);

1104 i‡(
v
->
width
 < 
i
)

1105 
v
->
width
 = 
i
;

1106 i‡(
v
->
width
 > v->
dwidth
)

1107 
v
->
width
 = v->
dwidth
;

1109 
	}
}

1112 
	$sizev¨s
()

1114 
v¨ít
 *
vít
;

1115 
VAR
 *
v
;

1116 
i
;

1118 
	`STAILQ_FOREACH
(
vít
, &
v¨li°
, 
√xt_ve
) {

1119 
v
 = 
vít
->
v¨
;

1120 
i
 = 
	`°æí
(
vít
->
hódî
);

1121 i‡(
v
->
width
 < 
i
)

1122 
v
->
width
 = 
i
;

1123 
tŸwidth
 +
v
->
width
 + 1;

1125 
tŸwidth
--;

1126 
	}
}

1129 
fmt
(**(*
‚
)(
kvm_t
 *, c⁄° 
köfo_¥oc
 *, ), 
KINFO
 *
ki
,

1130 *
comm
, 
maxÀn
)

1132 c⁄° *
	gs
;

1134 
	gs
 = 
fmt_¨gv
((*
‚
)(
kd
, 
ki
->
ki_p
, 
ãrmwidth
), 
comm
, 
maxÀn
);

1135  (
	gs
);

1138 
	#UREADOK
(
ki
Ë(
f‹˚uªad
 || (ki->
ki_p
->
ki_Êag
 & 
P_INMEM
))

	)

1141 
	$ßveu£r
(
KINFO
 *
ki
)

1144 i‡(
ki
->
ki_p
->
ki_Êag
 & 
P_INMEM
) {

1151 
ki
->
ki_vÆid
 = 1;

1153 
ki
->
ki_vÆid
 = 0;

1157 i‡(
√edcomm
) {

1158 i‡(
ki
->
ki_p
->
ki_°©
 =
SZOMB
)

1159 
ki
->
ki_¨gs
 = 
	`°rdup
("<defunct>");

1160 i‡(
	`UREADOK
(
ki
Ë|| (ki->
ki_p
->
ki_¨gs
 !
NULL
))

1161 
ki
->
ki_¨gs
 = 
	`°rdup
(
	`fmt
(
kvm_gë¨gv
, ki,

1162 
ki
->
ki_p
->
ki_comm
, 
MAXCOMLEN
));

1164 
	`a•rötf
(&
ki
->
ki_¨gs
, "(%s)", ki->
ki_p
->
ki_comm
);

1165 i‡(
ki
->
ki_¨gs
 =
NULL
)

1166 
	`îrx
(1, "malloc failed");

1168 
ki
->
ki_¨gs
 = 
NULL
;

1170 i‡(
√edív
) {

1171 i‡(
	`UREADOK
(
ki
))

1172 
ki
->
ki_ív
 = 
	`°rdup
(
	`fmt
(
kvm_gëívv
, ki,

1173 (*)
NULL
, 0));

1175 
ki
->
ki_ív
 = 
	`°rdup
("()");

1176 i‡(
ki
->
ki_ív
 =
NULL
)

1177 
	`îrx
(1, "malloc failed");

1179 
ki
->
ki_ív
 = 
NULL
;

1181 
	}
}

1184 
	#DIFF_RETURN
(
a
, 
b
, 
fõld
) do { \

1185 i‡((
a
)->
fõld
 !(
b
)->field) \

1186  (((
a
)->
fõld
 < (
b
)->field) ? -1 : 1); \

1187 } 0)

	)

1190 
	$pscomp
(c⁄° *
a
, c⁄° *
b
)

1192 c⁄° 
KINFO
 *
ka
, *
kb
;

1194 
ka
 = 
a
;

1195 
kb
 = 
b
;

1197 i‡(
s‹tby
 =
SORTCPU
)

1198 
	`DIFF_RETURN
(
kb
, 
ka
, 
ki_p˝u
);

1199 i‡(
s‹tby
 =
SORTMEM
)

1200 
	`DIFF_RETURN
(
kb
, 
ka
, 
ki_memsize
);

1205 i‡(
ka
->
ki_p
->
ki_tdev
 !
kb
->ki_p->ki_tdev) {

1206 i‡(
ka
->
ki_p
->
ki_tdev
 =
NODEV
)

1208 i‡(
kb
->
ki_p
->
ki_tdev
 =
NODEV
)

1210 
	`DIFF_RETURN
(
ka
, 
kb
, 
ki_p
->
ki_tdev
);

1214 
	`DIFF_RETURN
(
ka
, 
kb
, 
ki_p
->
ki_pid
);

1215 
	`DIFF_RETURN
(
ka
, 
kb
, 
ki_p
->
ki_tid
);

1217 
	}
}

1218 #unde‡
DIFF_RETURN


1232 
	$kludge_ﬁdps_›ti⁄s
(c⁄° *
›éi°
, *
‹igvÆ
, c⁄° *
√xèrg
)

1234 
size_t
 
Àn
;

1235 *
¨gp
, *
˝
, *
√w›ts
, *
ns
, *
›ç
, *
pidp
;

1241 
¨gp
 = 
NULL
;

1242 i‡(
›éi°
 !
NULL
) {

1243 
˝
 = 
‹igvÆ
; *cp != '\0'; cp++) {

1244 
›ç
 = 
	`°rchr
(
›éi°
, *
˝
);

1245 i‡((
›ç
 !
NULL
) && *(optp + 1) == ':') {

1246 
¨gp
 = 
˝
;

1251 i‡(
¨gp
 !
NULL
 && *
‹igvÆ
 == '-')

1252  (
‹igvÆ
);

1266 
Àn
 = 
	`°æí
(
‹igvÆ
);

1267 
˝
 = 
‹igvÆ
 + 
Àn
 - 1;

1268 
pidp
 = 
NULL
;

1269 i‡(*
˝
 ='t' && *
‹igvÆ
 !'-' && c∞=
¨gp
) {

1270 i‡(
√xèrg
 =
NULL
 || *√xèrg ='-' || 
	`isdigôch
(*nextarg))

1271 *
˝
 = 'T';

1272 } i‡(
¨gp
 =
NULL
) {

1279 i‡(
	`isdigôch
(*
˝
)) {

1280 
˝
 >
‹igvÆ
 && (*˝ =',' || 
	`isdigôch
(*cp)))

1281 --
˝
;

1282 
pidp
 = 
˝
 + 1;

1290 i‡(*
‹igvÆ
 ='-' && 
pidp
 =
NULL
)

1291  (
‹igvÆ
);

1297 i‡((
√w›ts
 = 
ns
 = 
	`mÆloc
(
Àn
 + 3)Ë=
NULL
)

1298 
	`îrx
(1, "malloc failed");

1300 i‡(*
‹igvÆ
 != '-')

1301 *
ns
++ = '-';

1303 i‡(
pidp
 =
NULL
)

1304 
	`°r˝y
(
ns
, 
‹igvÆ
);

1310 
Àn
 = 
pidp
 - 
‹igvÆ
;

1311 
	`mem˝y
(
ns
, 
‹igvÆ
, 
Àn
);

1312 
ns
 +
Àn
;

1313 *
ns
++ = 'p';

1314 
	`°r˝y
(
ns
, 
pidp
);

1317  (
√w›ts
);

1318 
	}
}

1321 
	$check_¥ocfs
()

1323 
°©fs
 
m¡
;

1325 i‡(
	`°©fs
("/¥oc", &
m¡
) < 0)

1327 i‡(
	`°rcmp
(
m¡
.
f_f°y≥«me
, "procfs") != 0)

1330 
	}
}

1333 
	$ußge
()

1335 
	#SINGLE_OPTS
 "[-aCcde" 
OPT_LAZY_f
 "HhjlmrSTuvwXxZ]"

	)

1337 ()
	`Ârötf
(
°dîr
, "%s\n%s\n%s\n%s\n",

1338 "ußge:Ö†" 
SINGLE_OPTS
 " [-O fmt | -o fmt] [-G gid[,gid...]]",

1342 
	`exô
(1);

1343 
	}
}

	@ps/ps.h

33 
	~<sys/queue.h
>

35 
	#UNLIMITED
 0

	)

36 
	ety≥
 { 
	mCHAR
, 
	mUCHAR
, 
	mSHORT
, 
	mUSHORT
, 
	mINT
, 
	mUINT
, 
	mLONG
, 
	mULONG
, 
	mKPTR
, 
	mPGTOK
 };

38 
	sköfo
 {

39 
köfo_¥oc
 *
	mki_p
;

40 *
	mki_¨gs
;

41 *
	mki_ív
;

42 
	mki_vÆid
;

43 
	mki_p˝u
;

44 
£gsz_t
 
	mki_memsize
;

46 
	mÀvñ
;

47 *
	m¥efix
;

48 } 
	mki_d
;

49 } 
	tKINFO
;

52 
	sv¨ít
 {

53 
STAILQ_ENTRY
(
v¨ít
Ë
	m√xt_ve
;

54 c⁄° *
	mhódî
;

55 
v¨
 *
	mv¨
;

56 } 
	tVARENT
;

58 
	sv¨
 {

59 c⁄° *
	m«me
;

60 c⁄° *
	mhódî
;

61 c⁄° *
	mÆüs
;

62 
	#COMM
 0x01

	)

63 
	#LJUST
 0x02

	)

64 
	#USER
 0x04

	)

65 
	#DSIZ
 0x08

	)

66 
	#INF127
 0x10

	)

67 
u_öt
 
	mÊag
;

69 (*
	m›roc
)(
	mköfo
 *, 
	mv¨ít
 *);

71 (*
	m•roc
)(
	mköfo
 *);

72 
	mwidth
;

78 
size_t
 
	moff
;

79 
ty≥
 
	mty≥
;

80 c⁄° *
	mfmt
;

81 
	mdwidth
;

85 } 
	tVAR
;

87 
	~"exã∫.h
"

	@pwait/pwait.c

34 
	~<sys/cdefs.h
>

35 
__FBSDID
("$FreeBSD: src/bin/pwait/pwait.c,v 1.1.2.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

37 
	~<sys/ty≥s.h
>

38 
	~<sys/evít.h
>

39 
	~<sys/time.h
>

40 
	~<sys/waô.h
>

42 
	~<îr.h
>

43 
	~<î∫o.h
>

44 
	~<f˙é.h
>

45 
	~<sig«l.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<sy£xôs.h
>

50 
	~<uni°d.h
>

53 
	$ußge
()

56 
	`Ârötf
(
°dîr
, "usage:Öwait [-v]Öid ...\n");

57 
	`exô
(
EX_USAGE
);

58 
	}
}

64 
	$maö
(
¨gc
, *
¨gv
[])

66 
kq
;

67 
kevít
 *
e
;

68 
vîbo£
 = 0;

69 
›t
, 
∆e·
, 
n
, 
i
, 
du∂iˇã
, 
°©us
;

70 
pid
;

71 *
s
, *
íd
;

73 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "v")) != -1) {

74 
›t
) {

76 
vîbo£
 = 1;

79 
	`ußge
();

84 
¨gc
 -
›töd
;

85 
¨gv
 +
›töd
;

87 i‡(
¨gc
 == 0)

88 
	`ußge
();

90 
kq
 = 
	`kqueue
();

91 i‡(
kq
 == -1)

92 
	`îr
(1, "kqueue");

94 
e
 = 
	`mÆloc
(
¨gc
 * (
kevít
));

95 i‡(
e
 =
NULL
)

96 
	`îr
(1, "malloc");

97 
∆e·
 = 0;

98 
n
 = 0;Ç < 
¨gc
;Ç++) {

99 
s
 = 
¨gv
[
n
];

100 i‡(!
	`°∫cmp
(
s
, "/proc/", 6))

101 
s
 += 6;

102 
î∫o
 = 0;

103 
pid
 = 
	`°πﬁ
(
s
, &
íd
, 10);

104 i‡(
pid
 < 0 || *
íd
 !'\0' || 
î∫o
 != 0) {

105 
	`w¨nx
("%s: badÖro˚s†id", 
s
);

108 
du∂iˇã
 = 0;

109 
i
 = 0; i < 
∆e·
; i++)

110 i‡(
e
[
i
].
idít
 =(
uöçå_t
)
pid
)

111 
du∂iˇã
 = 1;

112 i‡(!
du∂iˇã
) {

113 
	`EV_SET
(
e
 + 
∆e·
, 
pid
, 
EVFILT_PROC
, 
EV_ADD
, 
NOTE_EXIT
,

114 0, 
NULL
);

115 i‡(
	`kevít
(
kq
, 
e
 + 
∆e·
, 1, 
NULL
, 0, NULL) == -1)

116 
	`w¨n
("%ld", 
pid
);

118 
∆e·
++;

122 
∆e·
 > 0) {

123 
n
 = 
	`kevít
(
kq
, 
NULL
, 0, 
e
, 
∆e·
, NULL);

124 i‡(
n
 == -1)

125 
	`îr
(1, "kevent");

126 i‡(
vîbo£
)

127 
i
 = 0; i < 
n
; i++) {

128 
°©us
 = 
e
[
i
].
d©a
;

129 i‡(
	`WIFEXITED
(
°©us
))

130 
	`¥ötf
("%ld:Éxited with status %d.\n",

131 ()
e
[
i
].
idít
,

132 
	`WEXITSTATUS
(
°©us
));

133 i‡(
	`WIFSIGNALED
(
°©us
))

134 
	`¥ötf
("%ld: killed by signal %d.\n",

135 ()
e
[
i
].
idít
,

136 
	`WTERMSIG
(
°©us
));

138 
	`¥ötf
("%ld:Åerminated.\n",

139 ()
e
[
i
].
idít
);

141 
∆e·
 -
n
;

145 
	}
}

	@pwd/pwd.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)pwd.c 8.3 (Berkeley) 4/1/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/pwd/pwd.c,v 1.25.22.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/∑øm.h
>

45 
	~<sys/°©.h
>

46 
	~<sys/ty≥s.h
>

48 
	~<îr.h
>

49 
	~<î∫o.h
>

50 
	~<°dio.h
>

51 
	~<°dlib.h
>

52 
	~<uni°d.h
>

54 *
gëcwd_logiˇl
();

55 
ußge
();

58 
	$maö
(
¨gc
, *
¨gv
[])

60 
physiˇl
;

61 
ch
;

62 *
p
;

64 
physiˇl
 = 1;

65 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "LP")) != -1)

66 
ch
) {

68 
physiˇl
 = 0;

71 
physiˇl
 = 1;

75 
	`ußge
();

77 
¨gc
 -
›töd
;

78 
¨gv
 +
›töd
;

80 i‡(
¨gc
 != 0)

81 
	`ußge
();

87 i‡((!
physiˇl
 && (
p
 = 
	`gëcwd_logiˇl
()Ë!
NULL
) ||

88 (
p
 = 
	`gëcwd
(
NULL
, 0)) != NULL)

89 
	`¥ötf
("%s\n", 
p
);

91 
	`îr
(1, ".");

93 
	`exô
(0);

94 
	}
}

97 
	$ußge
()

100 ()
	`Ârötf
(
°dîr
, "usage:Öwd [-L | -P]\n");

101 
	`exô
(1);

102 
	}
}

105 
	$gëcwd_logiˇl
()

107 
°©
 
lg
, 
phy
;

108 *
pwd
;

114 i‡((
pwd
 = 
	`gëív
("PWD")Ë!
NULL
 && *pwd == '/') {

115 i‡(
	`°©
(
pwd
, &
lg
Ë=-1 || sèt(".", &
phy
) == -1)

116  (
NULL
);

117 i‡(
lg
.
°_dev
 =
phy
.°_dev &&Üg.
°_öo
 ==Öhy.st_ino)

118  (
pwd
);

121 
î∫o
 = 
ENOENT
;

122  (
NULL
);

123 
	}
}

	@rcp/extern.h

34 
size_t
 
	m˙t
;

35 *
	mbuf
;

36 } 
	tBUF
;

38 
ümªmŸe
;

40 
BUF
 *
Ælocbuf
(BUF *, , );

41 *
cﬁ⁄
(*);

42 
lo°c⁄n
();

43 
no•a˚
();

44 
ok«me
(*);

45 
	$run_îr
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

46 
	`susy°em
(*, );

47 
	`vîifydú
(*);

	@rcp/rcp.c

38 #i‚de‡
löt


39 c⁄° 
	gc›yright
[] =

44 #i‚de‡
löt


45 
	gsccsid
[] = "@(#)rcp.c 8.2 (Berkeley) 4/2/94";

48 
	~<sys/cdefs.h
>

49 
__FBSDID
("$FreeBSD: src/bin/rcp/rcp.c,v 1.47.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

51 
	~<sys/∑øm.h
>

52 
	~<sys/°©.h
>

53 
	~<sys/time.h
>

54 
	~<sys/sockë.h
>

55 
	~<√töë/ö.h
>

56 
	~<√töë/ö_sy°m.h
>

57 
	~<√töë/ù.h
>

59 
	~<˘y≥.h
>

60 
	~<dúít.h
>

61 
	~<îr.h
>

62 
	~<î∫o.h
>

63 
	~<f˙é.h
>

64 
	~<libutû.h
>

65 
	~<limôs.h
>

66 
	~<√tdb.h
>

67 
	~<∑ths.h
>

68 
	~<pwd.h
>

69 
	~<sig«l.h
>

70 
	~<°döt.h
>

71 
	~<°dio.h
>

72 
	~<°dlib.h
>

73 
	~<°rög.h
>

74 
	~<°rög.h
>

75 
	~<uni°d.h
>

77 
	~"exã∫.h
"

79 
	#OPTIONS
 "46dÂπ"

	)

81 
∑sswd
 *
	gpwd
;

82 
u_sh‹t
 
	gp‹t
;

83 
uid_t
 
	gu£rid
;

84 
	gîrs
, 
	gªm
;

85 
	gpÊag
, 
	gümªmŸe
, 
	gümªcursive
, 
	gèrgëshouldbedúe˘‹y
;

86 
	gÁmûy
 = 
PF_UNSPEC
;

88 
	g¨gc_c›y
;

89 c⁄° **
	g¨gv_c›y
;

91 
	g≥riod
[] = ".";

93 
	#CMDNEEDS
 64

	)

94 
	gcmd
[
CMDNEEDS
];

96 
ª•⁄£
();

97 
rsour˚
(*, 
°©
 *);

98 
sök
(, *[]);

99 
sour˚
(, *[]);

100 
tﬁoˇl
(, *[]);

101 
t‹emŸe
(*, , *[]);

102 
ußge
();

105 
	$maö
(
¨gc
, *
¨gv
[])

107 
£rvít
 *
•
;

108 
ch
, 
fÊag
, 
i
, 
tÊag
;

109 *
èrg
;

114 
¨gc_c›y
 = 
¨gc
 + 1;

115 
¨gv_c›y
 = 
	`mÆloc
((
¨gc_c›y
 + 1) * (*argv_copy));

116 i‡(
¨gv_c›y
 =
NULL
)

117 
	`îr
(1, "malloc");

118 
¨gv_c›y
[0] = 
¨gv
[0];

119 
¨gv_c›y
[1] = "-K";

120 
i
 = 1; i < 
¨gc
; ++i) {

121 
¨gv_c›y
[
i
 + 1] = 
	`°rdup
(
¨gv
[i]);

122 i‡(
¨gv_c›y
[
i
 + 1] =
NULL
)

123 
	`îrx
(1, "strdup: out of memory");

125 
¨gv_c›y
[
¨gc
 + 1] = 
NULL
;

127 
fÊag
 = 
tÊag
 = 0;

128 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
OPTIONS
)) != -1)

129 
ch
) {

131 
Ámûy
 = 
PF_INET
;

135 
Ámûy
 = 
PF_INET6
;

139 
pÊag
 = 1;

142 
ümªcursive
 = 1;

146 
èrgëshouldbedúe˘‹y
 = 1;

149 
ümªmŸe
 = 1;

150 
fÊag
 = 1;

153 
ümªmŸe
 = 1;

154 
tÊag
 = 1;

158 
	`ußge
();

160 
¨gc
 -
›töd
;

161 
¨gv
 +
›töd
;

163 
•
 = 
	`gë£rvby«me
("shell", "tcp");

164 i‡(
•
 =
NULL
)

165 
	`îrx
(1, "shell/tcp: unknown service");

166 
p‹t
 = 
•
->
s_p‹t
;

168 i‡((
pwd
 = 
	`gëpwuid
(
u£rid
 = 
	`gëuid
())Ë=
NULL
)

169 
	`îrx
(1, "unknow¿u£∏%d", ()
u£rid
);

171 
ªm
 = 
STDIN_FILENO
;

173 i‡(
fÊag
) {

174 ()
	`ª•⁄£
();

175 ()
	`£tuid
(
u£rid
);

176 
	`sour˚
(
¨gc
, 
¨gv
);

177 
	`exô
(
îrs
);

180 i‡(
tÊag
) {

181 ()
	`£tuid
(
u£rid
);

182 
	`sök
(
¨gc
, 
¨gv
);

183 
	`exô
(
îrs
);

186 i‡(
¨gc
 < 2)

187 
	`ußge
();

188 i‡(
¨gc
 > 2)

189 
èrgëshouldbedúe˘‹y
 = 1;

191 
ªm
 = -1;

193 ()
	`¢¥ötf
(
cmd
, (cmd), "rcp%s%s%s",

194 
ümªcursive
 ? " -r" : "", 
pÊag
 ? " -p" : "",

195 
èrgëshouldbedúe˘‹y
 ? " -d" : "");

197 ()
	`sig«l
(
SIGPIPE
, 
lo°c⁄n
);

199 i‡((
èrg
 = 
	`cﬁ⁄
(
¨gv
[
¨gc
 - 1])))

200 
	`t‹emŸe
(
èrg
, 
¨gc
, 
¨gv
);

202 
	`tﬁoˇl
(
¨gc
, 
¨gv
);

203 i‡(
èrgëshouldbedúe˘‹y
)

204 
	`vîifydú
(
¨gv
[
¨gc
 - 1]);

206 
	`exô
(
îrs
);

207 
	}
}

210 
	$t‹emŸe
(*
èrg
, 
¨gc
, *
¨gv
[])

212 
i
, 
tos
;

213 *
bp
, *
ho°
, *
§c
, *
su£r
, *
tho°
, *
tu£r
;

215 *
èrg
++ = 0;

216 i‡(*
èrg
 == 0)

217 
èrg
 = 
≥riod
;

219 i‡((
tho°
 = 
	`°rchr
(
¨gv
[
¨gc
 - 1], '@'))) {

221 *
tho°
++ = 0;

222 
tu£r
 = 
¨gv
[
¨gc
 - 1];

223 i‡(*
tu£r
 == '\0')

224 
tu£r
 = 
NULL
;

225 i‡(!
	`ok«me
(
tu£r
))

226 
	`exô
(1);

228 
tho°
 = 
¨gv
[
¨gc
 - 1];

229 
tu£r
 = 
NULL
;

232 
i
 = 0; i < 
¨gc
 - 1; i++) {

233 
§c
 = 
	`cﬁ⁄
(
¨gv
[
i
]);

234 i‡(
§c
) {

235 *
§c
++ = 0;

236 i‡(*
§c
 == 0)

237 
§c
 = 
≥riod
;

238 
ho°
 = 
	`°rchr
(
¨gv
[
i
], '@');

239 i‡(
ho°
) {

240 *
ho°
++ = 0;

241 
su£r
 = 
¨gv
[
i
];

242 i‡(*
su£r
 == '\0')

243 
su£r
 = 
pwd
->
pw_«me
;

244 i‡(!
	`ok«me
(
su£r
)) {

245 ++
îrs
;

248 i‡(
	`a•rötf
(&
bp
,

250 
_PATH_RSH
, 
ho°
, 
su£r
, 
cmd
, 
§c
,

251 
tu£r
 ?Åuser : "",Åuser ? "@" : "",

252 
tho°
, 
èrg
) == -1)

253 
	`îr
(1, "asprintf");

255 i‡(
	`a•rötf
(&
bp
,

257 
_PATH_RSH
, 
¨gv
[
i
], 
cmd
, 
§c
,

258 
tu£r
 ?Åuser : "",Åuser ? "@" : "",

259 
tho°
, 
èrg
) == -1)

260 
	`îr
(1, "asprintf");

261 ()
	`susy°em
(
bp
, 
u£rid
);

262 ()
	`‰ì
(
bp
);

264 i‡(
ªm
 == -1) {

265 i‡(
	`a•rötf
(&
bp
, "%†-à%s", 
cmd
, 
èrg
)

267 
	`îr
(1, "asprintf");

268 
ho°
 = 
tho°
;

269 
ªm
 = 
	`rcmd_af
(&
ho°
, 
p‹t
,

270 
pwd
->
pw_«me
,

271 
tu£r
 ?Åu£∏: 
pwd
->
pw_«me
,

272 
bp
, 0, 
Ámûy
);

273 i‡(
ªm
 < 0)

274 
	`exô
(1);

275 i‡(
Ámûy
 =
PF_INET
) {

276 
tos
 = 
IPTOS_THROUGHPUT
;

277 i‡(
	`£tsock›t
(
ªm
, 
IPPROTO_IP
, 
IP_TOS
,

278 &
tos
, ()) < 0)

279 
	`w¨n
("TOS (ignored)");

281 i‡(
	`ª•⁄£
() < 0)

282 
	`exô
(1);

283 ()
	`‰ì
(
bp
);

284 ()
	`£tuid
(
u£rid
);

286 
	`sour˚
(1, 
¨gv
+
i
);

289 
	}
}

292 
	$tﬁoˇl
(
¨gc
, *
¨gv
[])

294 
i
, 
Àn
, 
tos
;

295 *
bp
, *
ho°
, *
§c
, *
su£r
;

297 
i
 = 0; i < 
¨gc
 - 1; i++) {

298 i‡(!(
§c
 = 
	`cﬁ⁄
(
¨gv
[
i
]))) {

299 
Àn
 = 
	`°æí
(
_PATH_CP
Ë+ såÀn(
¨gv
[
i
]) +

300 
	`°æí
(
¨gv
[
¨gc
 - 1]) + 20;

301 i‡(!(
bp
 = 
	`mÆloc
(
Àn
)))

302 
	`îr
(1, "malloc");

303 ()
	`¢¥ötf
(
bp
, 
Àn
, "exe¯%s%s%†%†%s", 
_PATH_CP
,

304 
ümªcursive
 ? " -PR" : "", 
pÊag
 ? " -p" : "",

305 
¨gv
[
i
],árgv[
¨gc
 - 1]);

306 i‡(
	`susy°em
(
bp
, 
u£rid
))

307 ++
îrs
;

308 ()
	`‰ì
(
bp
);

311 *
§c
++ = 0;

312 i‡(*
§c
 == 0)

313 
§c
 = 
≥riod
;

314 i‡((
ho°
 = 
	`°rchr
(
¨gv
[
i
], '@')Ë=
NULL
) {

315 
ho°
 = 
¨gv
[
i
];

316 
su£r
 = 
pwd
->
pw_«me
;

318 *
ho°
++ = 0;

319 
su£r
 = 
¨gv
[
i
];

320 i‡(*
su£r
 == '\0')

321 
su£r
 = 
pwd
->
pw_«me
;

322 i‡(!
	`ok«me
(
su£r
)) {

323 ++
îrs
;

327 
Àn
 = 
	`°æí
(
§c
Ë+ 
CMDNEEDS
 + 20;

328 i‡((
bp
 = 
	`mÆloc
(
Àn
)Ë=
NULL
)

329 
	`îr
(1, "malloc");

330 ()
	`¢¥ötf
(
bp
, 
Àn
, "%†-‡%s", 
cmd
, 
§c
);

331 
ªm
 = 
	`rcmd_af
(&
ho°
, 
p‹t
, 
pwd
->
pw_«me
, 
su£r
, 
bp
, 0,

332 
Ámûy
);

333 ()
	`‰ì
(
bp
);

334 i‡(
ªm
 < 0) {

335 ++
îrs
;

338 ()
	`£ãuid
(
u£rid
);

339 i‡(
Ámûy
 =
PF_INET
) {

340 
tos
 = 
IPTOS_THROUGHPUT
;

341 i‡(
	`£tsock›t
(
ªm
, 
IPPROTO_IP
, 
IP_TOS
, &
tos
,

343 
	`w¨n
("TOS (ignored)");

345 
	`sök
(1, 
¨gv
 + 
¨gc
 - 1);

346 ()
	`£ãuid
(0);

347 ()
	`˛o£
(
ªm
);

348 
ªm
 = -1;

350 
	}
}

353 
	$sour˚
(
¨gc
, *
¨gv
[])

355 
°©
 
°b
;

356 
BUF
 
buf„r
;

357 
BUF
 *
bp
;

358 
off_t
 
i
;

359 
amt
, 
fd
, 
hadîr
, 
ödx
, 
ªsu…
;

360 *
œ°
, *
«me
, 
buf
[
BUFSIZ
];

362 
ödx
 = 0; indx < 
¨gc
; ++indx) {

363 
«me
 = 
¨gv
[
ödx
];

364 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
, 0)) < 0)

365 
sy£º
;

366 i‡(
	`f°©
(
fd
, &
°b
)) {

367 
sy£º
: 
	`run_îr
("%s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

368 
√xt
;

370 
°b
.
°_mode
 & 
S_IFMT
) {

371 
S_IFREG
:

373 
S_IFDIR
:

374 i‡(
ümªcursive
) {

375 
	`rsour˚
(
«me
, &
°b
);

376 
√xt
;

380 
	`run_îr
("%s:ÇŸáÑeguœ∏fûe", 
«me
);

381 
√xt
;

383 i‡((
œ°
 = 
	`°ºchr
(
«me
, '/')Ë=
NULL
)

384 
œ°
 = 
«me
;

386 ++
œ°
;

387 i‡(
pÊag
) {

392 ()
	`¢¥ötf
(
buf
, (buf), "T%ld 0 %ld 0\n",

393 ()
°b
.
°_mtime•ec
.
tv_£c
,

394 ()
°b
.
°_©ime•ec
.
tv_£c
);

395 ()
	`wrôe
(
ªm
, 
buf
, 
	`°æí
(buf));

396 i‡(
	`ª•⁄£
() < 0)

397 
√xt
;

399 
	#MODEMASK
 (
S_ISUID
|
S_ISGID
|
S_ISTXT
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

400 ()
	`¢¥ötf
(
buf
, (buf), "C%04o %jd %s\n",

401 
°b
.
°_mode
 & 
MODEMASK
, (
ötmax_t
)°b.
°_size
, 
œ°
);

402 ()
	`wrôe
(
ªm
, 
buf
, 
	`°æí
(buf));

403 i‡(
	`ª•⁄£
() < 0)

404 
√xt
;

405 i‡((
bp
 = 
	`Ælocbuf
(&
buf„r
, 
fd
, 
BUFSIZ
)Ë=
NULL
) {

406 
√xt
: i‡(
fd
 >= 0)

407 ()
	`˛o£
(
fd
);

412 
hadîr
 = 
i
 = 0; i < 
°b
.
°_size
; i +
bp
->
˙t
) {

413 
amt
 = 
bp
->
˙t
;

414 i‡(
i
 + 
amt
 > 
°b
.
°_size
)

415 
amt
 = 
°b
.
°_size
 - 
i
;

416 i‡(!
hadîr
) {

417 
ªsu…
 = 
	`ªad
(
fd
, 
bp
->
buf
, 
amt
);

418 i‡(
ªsu…
 !
amt
)

419 
hadîr
 = 
ªsu…
 >0 ? 
EIO
 : 
î∫o
;

421 i‡(
hadîr
)

422 ()
	`wrôe
(
ªm
, 
bp
->
buf
, 
amt
);

424 
ªsu…
 = 
	`wrôe
(
ªm
, 
bp
->
buf
, 
amt
);

425 i‡(
ªsu…
 !
amt
)

426 
hadîr
 = 
ªsu…
 >0 ? 
EIO
 : 
î∫o
;

429 i‡(
	`˛o£
(
fd
Ë&& !
hadîr
)

430 
hadîr
 = 
î∫o
;

431 i‡(!
hadîr
)

432 ()
	`wrôe
(
ªm
, "", 1);

434 
	`run_îr
("%s: %s", 
«me
, 
	`°ªº‹
(
hadîr
));

435 ()
	`ª•⁄£
();

437 
	}
}

440 
	$rsour˚
(*
«me
, 
°©
 *
°©p
)

442 
DIR
 *
dúp
;

443 
dúít
 *
dp
;

444 *
œ°
, *
ve˘
[1], 
∑th
[
PATH_MAX
];

446 i‡(!(
dúp
 = 
	`›ídú
(
«me
))) {

447 
	`run_îr
("%s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

450 
œ°
 = 
	`°ºchr
(
«me
, '/');

451 i‡(
œ°
 == 0)

452 
œ°
 = 
«me
;

454 
œ°
++;

455 i‡(
pÊag
) {

456 ()
	`¢¥ötf
(
∑th
, (path), "T%ld 0 %ld 0\n",

457 ()
°©p
->
°_mtime•ec
.
tv_£c
,

458 ()
°©p
->
°_©ime•ec
.
tv_£c
);

459 ()
	`wrôe
(
ªm
, 
∑th
, 
	`°æí
(path));

460 i‡(
	`ª•⁄£
() < 0) {

461 
	`˛o£dú
(
dúp
);

465 ()
	`¢¥ötf
(
∑th
, (path),

466 "D%04ÿ%d %s\n", 
°©p
->
°_mode
 & 
MODEMASK
, 0, 
œ°
);

467 ()
	`wrôe
(
ªm
, 
∑th
, 
	`°æí
(path));

468 i‡(
	`ª•⁄£
() < 0) {

469 
	`˛o£dú
(
dúp
);

472 (
dp
 = 
	`ªaddú
(
dúp
))) {

473 i‡(
dp
->
d_öo
 == 0)

475 i‡(!
	`°rcmp
(
dp
->
d_«me
, ".") || !strcmp(dp->d_name, ".."))

477 i‡(
	`°æí
(
«me
Ë+ 1 + såÀn(
dp
->
d_«me
Ë>(
∑th
)) {

478 
	`run_îr
("%s/%s:Çamêtoÿl⁄g", 
«me
, 
dp
->
d_«me
);

481 ()
	`¢¥ötf
(
∑th
, ’©h), "%s/%s", 
«me
, 
dp
->
d_«me
);

482 
ve˘
[0] = 
∑th
;

483 
	`sour˚
(1, 
ve˘
);

485 ()
	`˛o£dú
(
dúp
);

486 ()
	`wrôe
(
ªm
, "E\n", 2);

487 ()
	`ª•⁄£
();

488 
	}
}

491 
	$sök
(
¨gc
, *
¨gv
[])

493 
BUF
 
buf„r
;

494 
°©
 
°b
;

495 
timevÆ
 
tv
[2];

496 íum { 
YES
, 
NO
, 
DISPLAYED
 } 
wªº
;

497 
BUF
 *
bp
;

498 
off_t
 
i
, 
j
, 
size
;

499 
amt
, 
exi°s
, 
fú°
, 
mask
, 
mode
, 
ofd
, 
omode
;

500 
size_t
 
cou¡
;

501 
£times
, 
èrgisdú
, 
wªºno
 = 0;

502 
ch
, *
˝
, *
≈
, *
èrg
, *
ve˘
[1], 
buf
[
BUFSIZ
], 
∑th
[
PATH_MAX
];

503 c⁄° *
why
;

505 
	#©ime
 
tv
[0]

	)

506 
	#mtime
 
tv
[1]

	)

507 
	#SCREWUP
(
°r
Ë{ 
why
 = så; 
s¸ewup
; }

	)

509 
£times
 = 
èrgisdú
 = 0;

510 
mask
 = 
	`umask
(0);

511 i‡(!
pÊag
)

512 ()
	`umask
(
mask
);

513 i‡(
¨gc
 != 1) {

514 
	`run_îr
("ambiguousÅarget");

515 
	`exô
(1);

517 
èrg
 = *
¨gv
;

518 i‡(
èrgëshouldbedúe˘‹y
)

519 
	`vîifydú
(
èrg
);

520 ()
	`wrôe
(
ªm
, "", 1);

521 i‡(
	`°©
(
èrg
, &
°b
Ë=0 && 
	`S_ISDIR
(°b.
°_mode
))

522 
èrgisdú
 = 1;

523 
fú°
 = 1;; first = 0) {

524 
˝
 = 
buf
;

525 i‡(
	`ªad
(
ªm
, 
˝
, 1) <= 0)

527 i‡(*
˝
++ == '\n')

528 
	`SCREWUP
("unexpected <newline>");

530 i‡(
	`ªad
(
ªm
, &
ch
, (ch)) != (ch))

531 
	`SCREWUP
("lost connection");

532 *
˝
++ = 
ch
;

533 } 
˝
 < &
buf
[
BUFSIZ
 - 1] && 
ch
 != '\n');

534 *
˝
 = 0;

536 i‡(
buf
[0] == '\01' || buf[0] == '\02') {

537 i‡(
ümªmŸe
 == 0)

538 ()
	`wrôe
(
STDERR_FILENO
,

539 
buf
 + 1, 
	`°æí
(buf + 1));

540 i‡(
buf
[0] == '\02')

541 
	`exô
(1);

542 ++
îrs
;

545 i‡(
buf
[0] == 'E') {

546 ()
	`wrôe
(
ªm
, "", 1);

550 i‡(
ch
 == '\n')

551 *--
˝
 = 0;

553 
˝
 = 
buf
;

554 i‡(*
˝
 == 'T') {

555 
£times
++;

556 
˝
++;

557 
mtime
.
tv_£c
 = 
	`°πﬁ
(
˝
, &cp, 10);

558 i‡(!
˝
 || *cp++ != ' ')

559 
	`SCREWUP
("mtime.secÇot delimited");

560 
mtime
.
tv_u£c
 = 
	`°πﬁ
(
˝
, &cp, 10);

561 i‡(!
˝
 || *cp++ != ' ')

562 
	`SCREWUP
("mtime.usecÇot delimited");

563 
©ime
.
tv_£c
 = 
	`°πﬁ
(
˝
, &cp, 10);

564 i‡(!
˝
 || *cp++ != ' ')

565 
	`SCREWUP
("atime.secÇot delimited");

566 
©ime
.
tv_u£c
 = 
	`°πﬁ
(
˝
, &cp, 10);

567 i‡(!
˝
 || *cp++ != '\0')

568 
	`SCREWUP
("atime.usecÇot delimited");

569 ()
	`wrôe
(
ªm
, "", 1);

572 i‡(*
˝
 != 'C' && *cp != 'D') {

580 i‡(
fú°
) {

581 
	`run_îr
("%s", 
˝
);

582 
	`exô
(1);

584 
	`SCREWUP
("expected controlÑecord");

586 
mode
 = 0;

587 ++
˝
; c∞< 
buf
 + 5; cp++) {

588 i‡(*
˝
 < '0' || *cp > '7')

589 
	`SCREWUP
("bad mode");

590 
mode
 = (modê<< 3Ë| (*
˝
 - '0');

592 i‡(*
˝
++ != ' ')

593 
	`SCREWUP
("modeÇot delimited");

595 
size
 = 0; 
	`isdigô
(*
˝
);)

596 
size
 = sizê* 10 + (*
˝
++ - '0');

597 i‡(*
˝
++ != ' ')

598 
	`SCREWUP
("sizeÇot delimited");

599 i‡(
èrgisdú
) {

600 i‡(
	`°æí
(
èrg
Ë+ (*èrg ? 1 : 0Ë+ såÀn(
˝
)

601 >(
∑th
)) {

602 
	`run_îr
("%s%s%s:Çamêtoÿl⁄g", 
èrg
,

603 *
èrg
 ? "/" : "", 
˝
);

604 
	`exô
(1);

606 ()
	`¢¥ötf
(
∑th
, ’©h), "%s%s%s", 
èrg
,

607 *
èrg
 ? "/" : "", 
˝
);

608 
≈
 = 
∑th
;

610 
≈
 = 
èrg
;

611 
exi°s
 = 
	`°©
(
≈
, &
°b
) == 0;

612 i‡(
buf
[0] == 'D') {

613 
mod_Êag
 = 
pÊag
;

614 i‡(
exi°s
) {

615 i‡(!
	`S_ISDIR
(
°b
.
°_mode
)) {

616 
î∫o
 = 
ENOTDIR
;

617 
bad
;

619 i‡(
pÊag
)

620 ()
	`chmod
(
≈
, 
mode
);

623 
mod_Êag
 = 1;

624 i‡(
	`mkdú
(
≈
, 
mode
 | 
S_IRWXU
) < 0)

625 
bad
;

627 
ve˘
[0] = 
≈
;

628 
	`sök
(1, 
ve˘
);

629 i‡(
£times
) {

630 
£times
 = 0;

631 i‡(
	`utimes
(
≈
, 
tv
) < 0)

632 
	`run_îr
("%s: setÅimes: %s",

633 
≈
, 
	`°ªº‹
(
î∫o
));

635 i‡(
mod_Êag
)

636 ()
	`chmod
(
≈
, 
mode
);

639 
omode
 = 
mode
;

640 
mode
 |
S_IWRITE
;

641 i‡((
ofd
 = 
	`›í
(
≈
, 
O_WRONLY
|
O_CREAT
, 
mode
)) < 0) {

642 
bad
: 
	`run_îr
("%s: %s", 
≈
, 
	`°ªº‹
(
î∫o
));

645 ()
	`wrôe
(
ªm
, "", 1);

646 i‡((
bp
 = 
	`Ælocbuf
(&
buf„r
, 
ofd
, 
BUFSIZ
)Ë=
NULL
) {

647 ()
	`˛o£
(
ofd
);

650 
˝
 = 
bp
->
buf
;

651 
wªº
 = 
NO
;

652 
cou¡
 = 
i
 = 0; i < 
size
; i +
BUFSIZ
) {

653 
amt
 = 
BUFSIZ
;

654 i‡(
i
 + 
amt
 > 
size
)

655 
amt
 = 
size
 - 
i
;

656 
cou¡
 +
amt
;

658 
j
 = 
	`ªad
(
ªm
, 
˝
, 
amt
);

659 i‡(
j
 <= 0) {

660 
	`run_îr
("%s", 
j
 ? 
	`°ªº‹
(
î∫o
) :

662 
	`exô
(1);

664 
amt
 -
j
;

665 
˝
 +
j
;

666 } 
amt
 > 0);

667 i‡(
cou¡
 =
bp
->
˙t
) {

669 i‡(
wªº
 =
NO
) {

670 
j
 = 
	`wrôe
(
ofd
, 
bp
->
buf
, 
cou¡
);

671 i‡(
j
 !(
off_t
)
cou¡
) {

672 
wªº
 = 
YES
;

673 
wªºno
 = 
j
 >0 ? 
EIO
 : 
î∫o
;

676 
cou¡
 = 0;

677 
˝
 = 
bp
->
buf
;

680 i‡(
cou¡
 !0 && 
wªº
 =
NO
 &&

681 (
j
 = 
	`wrôe
(
ofd
, 
bp
->
buf
, 
cou¡
)Ë!(
off_t
)count) {

682 
wªº
 = 
YES
;

683 
wªºno
 = 
j
 >0 ? 
EIO
 : 
î∫o
;

685 i‡(
	`·runˇã
(
ofd
, 
size
)) {

686 
	`run_îr
("%s:Årunˇã: %s", 
≈
, 
	`°ªº‹
(
î∫o
));

687 
wªº
 = 
DISPLAYED
;

689 i‡(
pÊag
) {

690 i‡(
exi°s
 || 
omode
 !
mode
)

691 i‡(
	`fchmod
(
ofd
, 
omode
))

692 
	`run_îr
("%s: set mode: %s",

693 
≈
, 
	`°ªº‹
(
î∫o
));

695 i‡(!
exi°s
 && 
omode
 !
mode
)

696 i‡(
	`fchmod
(
ofd
, 
omode
 & ~
mask
))

697 
	`run_îr
("%s: set mode: %s",

698 
≈
, 
	`°ªº‹
(
î∫o
));

700 ()
	`˛o£
(
ofd
);

701 ()
	`ª•⁄£
();

702 i‡(
£times
 && 
wªº
 =
NO
) {

703 
£times
 = 0;

704 i‡(
	`utimes
(
≈
, 
tv
) < 0) {

705 
	`run_îr
("%s: setÅimes: %s",

706 
≈
, 
	`°ªº‹
(
î∫o
));

707 
wªº
 = 
DISPLAYED
;

710 
wªº
) {

711 
YES
:

712 
	`run_îr
("%s: %s", 
≈
, 
	`°ªº‹
(
wªºno
));

714 
NO
:

715 ()
	`wrôe
(
ªm
, "", 1);

717 
DISPLAYED
:

721 
s¸ewup
:

722 
	`run_îr
("¥ŸocﬁÉº‹: %s", 
why
);

723 
	`exô
(1);

724 
	}
}

727 
	$ª•⁄£
()

729 
ch
, *
˝
, 
ª•
, 
rbuf
[
BUFSIZ
];

731 i‡(
	`ªad
(
ªm
, &
ª•
, (resp)) != (resp))

732 
	`lo°c⁄n
(0);

734 
˝
 = 
rbuf
;

735 
ª•
) {

739 *
˝
++ = 
ª•
;

744 i‡(
	`ªad
(
ªm
, &
ch
, (ch)) != (ch))

745 
	`lo°c⁄n
(0);

746 *
˝
++ = 
ch
;

747 } 
˝
 < &
rbuf
[
BUFSIZ
] && 
ch
 != '\n');

749 i‡(!
ümªmŸe
)

750 ()
	`wrôe
(
STDERR_FILENO
, 
rbuf
, 
˝
 -Ñbuf);

751 ++
îrs
;

752 i‡(
ª•
 == 1)

754 
	`exô
(1);

757 
	}
}

760 
	$ußge
()

762 ()
	`Ârötf
(
°dîr
, "%s\n%s\n",

765 
	`exô
(1);

766 
	}
}

768 
	~<°d¨g.h
>

771 
	$run_îr
(c⁄° *
fmt
, ...)

773 
FILE
 *
Â
;

774 
va_li°
 
≠
;

776 ++
îrs
;

777 i‡(
Â
 =
NULL
 && !(Â = 
	`fd›í
(
ªm
, "w")))

779 ()
	`Ârötf
(
Â
, "%c", 0x01);

780 ()
	`Ârötf
(
Â
, "rcp: ");

781 
	`va_°¨t
(
≠
, 
fmt
);

782 ()
	`vÂrötf
(
Â
, 
fmt
, 
≠
);

783 
	`va_íd
(
≠
);

784 ()
	`Ârötf
(
Â
, "\n");

785 ()
	`fÊush
(
Â
);

787 i‡(!
ümªmŸe
) {

788 
	`va_°¨t
(
≠
, 
fmt
);

789 
	`vw¨nx
(
fmt
, 
≠
);

790 
	`va_íd
(
≠
);

792 
	}
}

	@rcp/util.c

30 #i‚de‡
löt


32 c⁄° 
	gsccsid
[] = "@(#)util.c 8.2 (Berkeley) 4/2/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/rcp/util.c,v 1.17.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/∑øm.h
>

39 
	~<sys/°©.h
>

40 
	~<sys/waô.h
>

42 
	~<˘y≥.h
>

43 
	~<îr.h
>

44 
	~<î∫o.h
>

45 
	~<∑ths.h
>

46 
	~<sig«l.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<uni°d.h
>

52 
	~"exã∫.h
"

55 
	$cﬁ⁄
(*
˝
)

57 i‡(*
˝
 == ':')

60 ; *
˝
; ++cp) {

61 i‡(*
˝
 == ':')

62  (
˝
);

63 i‡(*
˝
 == '/')

67 
	}
}

70 
	$vîifydú
(*
˝
)

72 
°©
 
°b
;

74 i‡(!
	`°©
(
˝
, &
°b
)) {

75 i‡(
	`S_ISDIR
(
°b
.
°_mode
))

77 
î∫o
 = 
ENOTDIR
;

79 
	`run_îr
("%s: %s", 
˝
, 
	`°ªº‹
(
î∫o
));

80 
	`exô
(1);

81 
	}
}

84 
	$ok«me
(*
˝0
)

86 
c
;

87 *
˝
;

89 
˝
 = 
˝0
;

91 
c
 = *
˝
;

92 i‡(
c
 & 0200)

93 
bad
;

94 i‡(!
	`ißÕha
(
c
Ë&& !
	`isdigô
(c) && c != '_' && c != '-' && c != '.')

95 
bad
;

96 } *++
˝
);

99 
bad
: 
	`w¨nx
("%s: invÆid u£∏«me", 
˝0
);

101 
	}
}

104 
	$susy°em
(*
s
, 
u£rid
)

106 
sig_t
 
i°©
, 
q°©
;

107 
°©us
;

108 
pid_t
 
pid
;

110 
pid
 = 
	`vf‹k
();

111 
pid
) {

116 ()
	`£tuid
(
u£rid
);

117 
	`exe˛
(
_PATH_BSHELL
, "sh", "-c", 
s
, (*)
NULL
);

118 
	`_exô
(127);

120 
i°©
 = 
	`sig«l
(
SIGINT
, 
SIG_IGN
);

121 
q°©
 = 
	`sig«l
(
SIGQUIT
, 
SIG_IGN
);

122 i‡(
	`waôpid
(
pid
, &
°©us
, 0) < 0)

123 
°©us
 = -1;

124 ()
	`sig«l
(
SIGINT
, 
i°©
);

125 ()
	`sig«l
(
SIGQUIT
, 
q°©
);

126  (
°©us
);

127 
	}
}

129 
BUF
 *

130 
	$Ælocbuf
(
BUF
 *
bp
, 
fd
, 
blksize
)

132 
°©
 
°b
;

133 
size_t
 
size
;

135 i‡(
	`f°©
(
fd
, &
°b
) < 0) {

136 
	`run_îr
("f°©: %s", 
	`°ªº‹
(
î∫o
));

139 
size
 = 
	`roundup
(
°b
.
°_blksize
, 
blksize
);

140 i‡(
size
 == 0)

141 
size
 = 
blksize
;

142 i‡(
bp
->
˙t
 >
size
)

143  (
bp
);

144 i‡((
bp
->
buf
 = 
	`ªÆloc
(bp->buf, 
size
)Ë=
NULL
) {

145 
bp
->
˙t
 = 0;

146 
	`run_îr
("%s", 
	`°ªº‹
(
î∫o
));

149 
bp
->
˙t
 = 
size
;

150  (
bp
);

151 
	}
}

154 
	$lo°c⁄n
(
signo
 
__unu£d
)

156 i‡(!
ümªmŸe
)

157 
	`w¨nx
("lost connection");

158 
	`exô
(1);

159 
	}
}

	@realpath/realpath.c

30 
	~<sys/cdefs.h
>

31 
__FBSDID
("$FreeBSD: src/bin/realpath/realpath.c,v 1.7.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

33 
	~<sys/∑øm.h
>

35 
	~<îr.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<uni°d.h
>

40 
	$ußge
(Ë
__dód2
;

43 
	$maö
(
¨gc
, *
¨gv
[])

45 
buf
[
PATH_MAX
];

46 *
p
;

47 
ch
, 
i
, 
qÊag
, 
rvÆ
;

49 
qÊag
 = 0;

50 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "q")) != -1) {

51 
ch
) {

53 
qÊag
 = 1;

57 
	`ußge
();

60 
¨gc
 -
›töd
;

61 
¨gv
 +
›töd
;

62 i‡(
¨gc
 < 1)

63 
	`ußge
();

64 
rvÆ
 = 0;

65 
i
 = 0; i < 
¨gc
; i++) {

66 i‡((
p
 = 
	`ªÆ∑th
(
¨gv
[
i
], 
buf
)Ë=
NULL
) {

67 i‡(!
qÊag
)

68 
	`w¨n
("%s", 
¨gv
[
i
]);

69 
rvÆ
 = 1;

71 ()
	`¥ötf
("%s\n", 
p
);

73 
	`exô
(
rvÆ
);

74 
	}
}

77 
	$ußge
()

80 ()
	`Ârötf
(
°dîr
, "usage:Ñealpath [-q]Öath [...]\n");

81 
	`exô
(1);

82 
	}
}

	@rm/rm.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)rm.c 8.5 (Berkeley) 4/18/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/rm/rm.c,v 1.60.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/°©.h
>

45 
	~<sys/∑øm.h
>

46 
	~<sys/mou¡.h
>

48 
	~<îr.h
>

49 
	~<î∫o.h
>

50 
	~<f˙é.h
>

51 
	~<·s.h
>

52 
	~<gΩ.h
>

53 
	~<pwd.h
>

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 
	~<sy£xôs.h
>

58 
	~<uni°d.h
>

60 
	gdÊag
, 
	gevÆ
, 
	gfÊag
, 
	giÊag
, 
	gPÊag
, 
	gvÊag
, 
	gWÊag
, 
	g°dö_ok
;

61 
	grÊag
, 
	gIÊag
;

62 
uid_t
 
	guid
;

63 vﬁ©ûê
sig_©omic_t
 
	göfo
;

65 
check
(*, *, 
°©
 *);

66 
check2
(**);

67 
checkdŸ
(**);

68 
check¶ash
(**);

69 
rm_fûe
(**);

70 
rm_ovîwrôe
(*, 
°©
 *);

71 
rm_åì
(**);

72 
sigöfo
(
__unu£d
);

73 
ußge
();

83 
	$maö
(
¨gc
, *
¨gv
[])

85 
ch
;

86 *
p
;

93 i‡((
p
 = 
	`rödex
(
¨gv
[0], '/')Ë=
NULL
)

94 
p
 = 
¨gv
[0];

96 ++
p
;

97 i‡(
	`°rcmp
(
p
, "unlink") == 0) {

98 
	`gë›t
(
¨gc
, 
¨gv
, "") != -1)

99 
	`ußge
();

100 
¨gc
 -
›töd
;

101 
¨gv
 +
›töd
;

102 i‡(
¨gc
 != 1)

103 
	`ußge
();

104 
	`rm_fûe
(&
¨gv
[0]);

105 
	`exô
(
evÆ
);

108 
PÊag
 = 
rÊag
 = 0;

109 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dfiIPRrvW")) != -1)

110 
ch
) {

112 
dÊag
 = 1;

115 
fÊag
 = 1;

116 
iÊag
 = 0;

119 
fÊag
 = 0;

120 
iÊag
 = 1;

123 
IÊag
 = 1;

126 
PÊag
 = 1;

130 
rÊag
 = 1;

133 
vÊag
 = 1;

136 
WÊag
 = 1;

139 
	`ußge
();

141 
¨gc
 -
›töd
;

142 
¨gv
 +
›töd
;

144 i‡(
¨gc
 < 1) {

145 i‡(
fÊag
)

147 
	`ußge
();

150 
	`checkdŸ
(
¨gv
);

151 i‡(
	`gëív
("POSIXLY_CORRECT"Ë=
NULL
)

152 
	`check¶ash
(
¨gv
);

153 
uid
 = 
	`gëeuid
();

155 ()
	`sig«l
(
SIGINFO
, 
sigöfo
);

156 i‡(*
¨gv
) {

157 
°dö_ok
 = 
	`ißây
(
STDIN_FILENO
);

159 i‡(
IÊag
) {

160 i‡(
	`check2
(
¨gv
) == 0)

161 
	`exô
 (1);

163 i‡(
rÊag
)

164 
	`rm_åì
(
¨gv
);

166 
	`rm_fûe
(
¨gv
);

169 
	`exô
 (
evÆ
);

170 
	}
}

173 
	$rm_åì
(**
¨gv
)

175 
FTS
 *
·s
;

176 
FTSENT
 *
p
;

177 
√ed°©
;

178 
Êags
;

179 
rvÆ
;

185 
√ed°©
 = !
uid
 || (!
fÊag
 && !
iÊag
 && 
°dö_ok
);

191 
	#SKIPPED
 1

	)

193 
Êags
 = 
FTS_PHYSICAL
;

194 i‡(!
√ed°©
)

195 
Êags
 |
FTS_NOSTAT
;

196 i‡(
WÊag
)

197 
Êags
 |
FTS_WHITEOUT
;

198 i‡(!(
·s
 = 
	`·s_›í
(
¨gv
, 
Êags
, 
NULL
))) {

199 i‡(
fÊag
 && 
î∫o
 =
ENOENT
)

201 
	`îr
(1, "fts_open");

203 (
p
 = 
	`·s_ªad
(
·s
)Ë!
NULL
) {

204 
p
->
·s_öfo
) {

205 
FTS_DNR
:

206 i‡(!
fÊag
 || 
p
->
·s_î∫o
 !
ENOENT
) {

207 
	`w¨nx
("%s: %s",

208 
p
->
·s_∑th
, 
	`°ªº‹
’->
·s_î∫o
));

209 
evÆ
 = 1;

212 
FTS_ERR
:

213 
	`îrx
(1, "%s: %s", 
p
->
·s_∑th
, 
	`°ªº‹
’->
·s_î∫o
));

214 
FTS_NS
:

219 i‡(!
√ed°©
)

221 i‡(!
fÊag
 || 
p
->
·s_î∫o
 !
ENOENT
) {

222 
	`w¨nx
("%s: %s",

223 
p
->
·s_∑th
, 
	`°ªº‹
’->
·s_î∫o
));

224 
evÆ
 = 1;

227 
FTS_D
:

229 i‡(!
fÊag
 && !
	`check
(
p
->
·s_∑th
,Ö->
·s_ac˝©h
,

230 
p
->
·s_°©p
)) {

231 ()
	`·s_£t
(
·s
, 
p
, 
FTS_SKIP
);

232 
p
->
·s_numbî
 = 
SKIPPED
;

234 i‡(!
uid
 &&

235 (
p
->
·s_°©p
->
°_Êags
 & (
UF_APPEND
|
UF_IMMUTABLE
)) &&

236 !(
p
->
·s_°©p
->
°_Êags
 & (
SF_APPEND
|
SF_IMMUTABLE
)) &&

237 
	`lchÊags
(
p
->
·s_ac˝©h
,

238 
p
->
·s_°©p
->
°_Êags
 &~(
UF_APPEND
|
UF_IMMUTABLE
)) < 0)

239 
îr
;

241 
FTS_DP
:

243 i‡(
p
->
·s_numbî
 =
SKIPPED
)

247 i‡(!
fÊag
 &&

248 !
	`check
(
p
->
·s_∑th
,Ö->
·s_ac˝©h
,Ö->
·s_°©p
))

252 
rvÆ
 = 0;

253 i‡(!
uid
 &&

254 (
p
->
·s_°©p
->
°_Êags
 & (
UF_APPEND
|
UF_IMMUTABLE
)) &&

255 !(
p
->
·s_°©p
->
°_Êags
 & (
SF_APPEND
|
SF_IMMUTABLE
)))

256 
rvÆ
 = 
	`lchÊags
(
p
->
·s_ac˝©h
,

257 
p
->
·s_°©p
->
°_Êags
 &~(
UF_APPEND
|
UF_IMMUTABLE
));

258 i‡(
rvÆ
 == 0) {

264 
p
->
·s_öfo
) {

265 
FTS_DP
:

266 
FTS_DNR
:

267 
rvÆ
 = 
	`rmdú
(
p
->
·s_ac˝©h
);

268 i‡(
rvÆ
 =0 || (
fÊag
 && 
î∫o
 =
ENOENT
)) {

269 i‡(
rvÆ
 =0 && 
vÊag
)

270 ()
	`¥ötf
("%s\n",

271 
p
->
·s_∑th
);

272 i‡(
rvÆ
 =0 && 
öfo
) {

273 
öfo
 = 0;

274 ()
	`¥ötf
("%s\n",

275 
p
->
·s_∑th
);

281 
FTS_W
:

282 
rvÆ
 = 
	`undñëe
(
p
->
·s_ac˝©h
);

283 i‡(
rvÆ
 =0 && (
fÊag
 && 
î∫o
 =
ENOENT
)) {

284 i‡(
vÊag
)

285 ()
	`¥ötf
("%s\n",

286 
p
->
·s_∑th
);

287 i‡(
öfo
) {

288 
öfo
 = 0;

289 ()
	`¥ötf
("%s\n",

290 
p
->
·s_∑th
);

296 
FTS_NS
:

301 i‡(
fÊag
)

305 i‡(
PÊag
)

306 i‡(!
	`rm_ovîwrôe
(
p
->
·s_ac˝©h
, 
NULL
))

308 
rvÆ
 = 
	`u∆ök
(
p
->
·s_ac˝©h
);

309 i‡(
rvÆ
 =0 || (
fÊag
 && 
î∫o
 =
ENOENT
)) {

310 i‡(
rvÆ
 =0 && 
vÊag
)

311 ()
	`¥ötf
("%s\n",

312 
p
->
·s_∑th
);

313 i‡(
rvÆ
 =0 && 
öfo
) {

314 
öfo
 = 0;

315 ()
	`¥ötf
("%s\n",

316 
p
->
·s_∑th
);

322 
îr
:

323 
	`w¨n
("%s", 
p
->
·s_∑th
);

324 
evÆ
 = 1;

326 i‡(
î∫o
)

327 
	`îr
(1, "fts_read");

328 
	`·s_˛o£
(
·s
);

329 
	}
}

332 
	$rm_fûe
(**
¨gv
)

334 
°©
 
sb
;

335 
rvÆ
;

336 *
f
;

342 (
f
 = *
¨gv
++Ë!
NULL
) {

344 i‡(
	`l°©
(
f
, &
sb
)) {

345 i‡(
WÊag
) {

346 
sb
.
°_mode
 = 
S_IFWHT
|
S_IWUSR
|
S_IRUSR
;

348 i‡(!
fÊag
 || 
î∫o
 !
ENOENT
) {

349 
	`w¨n
("%s", 
f
);

350 
evÆ
 = 1;

354 } i‡(
WÊag
) {

355 
	`w¨nx
("%s: %s", 
f
, 
	`°ªº‹
(
EEXIST
));

356 
evÆ
 = 1;

360 i‡(
	`S_ISDIR
(
sb
.
°_mode
Ë&& !
dÊag
) {

361 
	`w¨nx
("%s: i†®dúe˘‹y", 
f
);

362 
evÆ
 = 1;

365 i‡(!
fÊag
 && !
	`S_ISWHT
(
sb
.
°_mode
Ë&& !
	`check
(
f
, f, &sb))

367 
rvÆ
 = 0;

368 i‡(!
uid
 && !
	`S_ISWHT
(
sb
.
°_mode
) &&

369 (
sb
.
°_Êags
 & (
UF_APPEND
|
UF_IMMUTABLE
)) &&

370 !(
sb
.
°_Êags
 & (
SF_APPEND
|
SF_IMMUTABLE
)))

371 
rvÆ
 = 
	`lchÊags
(
f
, 
sb
.
°_Êags
 & ~(
UF_APPEND
|
UF_IMMUTABLE
));

372 i‡(
rvÆ
 == 0) {

373 i‡(
	`S_ISWHT
(
sb
.
°_mode
))

374 
rvÆ
 = 
	`undñëe
(
f
);

375 i‡(
	`S_ISDIR
(
sb
.
°_mode
))

376 
rvÆ
 = 
	`rmdú
(
f
);

378 i‡(
PÊag
)

379 i‡(!
	`rm_ovîwrôe
(
f
, &
sb
))

381 
rvÆ
 = 
	`u∆ök
(
f
);

384 i‡(
rvÆ
 && (!
fÊag
 || 
î∫o
 !
ENOENT
)) {

385 
	`w¨n
("%s", 
f
);

386 
evÆ
 = 1;

388 i‡(
vÊag
 && 
rvÆ
 == 0)

389 ()
	`¥ötf
("%s\n", 
f
);

390 i‡(
öfo
 && 
rvÆ
 == 0) {

391 
öfo
 = 0;

392 ()
	`¥ötf
("%s\n", 
f
);

395 
	}
}

409 
	$rm_ovîwrôe
(*
fûe
, 
°©
 *
sbp
)

411 
°©
 
sb
;

412 
°©fs
 
fsb
;

413 
off_t
 
Àn
;

414 
bsize
, 
fd
, 
wÀn
;

415 *
buf
 = 
NULL
;

417 
fd
 = -1;

418 i‡(
sbp
 =
NULL
) {

419 i‡(
	`l°©
(
fûe
, &
sb
))

420 
îr
;

421 
sbp
 = &
sb
;

423 i‡(!
	`S_ISREG
(
sbp
->
°_mode
))

425 i‡(
sbp
->
°_∆ök
 > 1 && !
fÊag
) {

426 
	`w¨nx
("%s (inode %u):Çot overwritten dueÅo multipleÜinks",

427 
fûe
, 
sbp
->
°_öo
);

430 i‡((
fd
 = 
	`›í
(
fûe
, 
O_WRONLY
, 0)) == -1)

431 
îr
;

432 i‡(
	`f°©fs
(
fd
, &
fsb
) == -1)

433 
îr
;

434 
bsize
 = 
	`MAX
(
fsb
.
f_iosize
, 1024);

435 i‡((
buf
 = 
	`mÆloc
(
bsize
)Ë=
NULL
)

436 
	`îr
(1, "%s: mÆloc", 
fûe
);

438 
	#PASS
(
byã
) { \

439 
	`mem£t
(
buf
, 
byã
, 
bsize
); \

440 
Àn
 = 
sbp
->
°_size
;Üí > 0;Üí -
wÀn
) { \

441 
wÀn
 = 
Àn
 < 
bsize
 ?Üen : bsize; \

442 i‡(
	`wrôe
(
fd
, 
buf
, 
wÀn
) != wlen) \

443 
îr
; \

445 }

	)

446 
	`PASS
(0xff);

447 i‡(
	`fsync
(
fd
Ë|| 
	`l£ek
(fd, (
off_t
)0, 
SEEK_SET
))

448 
îr
;

449 
	`PASS
(0x00);

450 i‡(
	`fsync
(
fd
Ë|| 
	`l£ek
(fd, (
off_t
)0, 
SEEK_SET
))

451 
îr
;

452 
	`PASS
(0xff);

453 i‡(!
	`fsync
(
fd
Ë&& !
	`˛o£
(fd)) {

454 
	`‰ì
(
buf
);

458 
îr
: 
evÆ
 = 1;

459 i‡(
buf
)

460 
	`‰ì
(
buf
);

461 i‡(
fd
 != -1)

462 
	`˛o£
(
fd
);

463 
	`w¨n
("%s", 
fûe
);

465 
	}
}

469 
	$check
(*
∑th
, *
«me
, 
°©
 *
•
)

471 
ch
, 
fú°
;

472 
modï
[15], *
Êag•
;

475 i‡(
iÊag
)

476 ()
	`Ârötf
(
°dîr
, "ªmovê%s? ", 
∑th
);

484 i‡(!
°dö_ok
 || 
	`S_ISLNK
(
•
->
°_mode
) ||

485 (!
	`ac˚ss
(
«me
, 
W_OK
) &&

486 !(
•
->
°_Êags
 & (
SF_APPEND
|
SF_IMMUTABLE
)) &&

487 (!(
•
->
°_Êags
 & (
UF_APPEND
|
UF_IMMUTABLE
)Ë|| !
uid
)))

489 
	`°rmode
(
•
->
°_mode
, 
modï
);

490 i‡((
Êag•
 = 
	`fÊag°o°r
(
•
->
°_Êags
)Ë=
NULL
)

491 
	`îr
(1, "fflagstostr");

492 i‡(
PÊag
)

493 
	`îrx
(1,

495 
∑th
);

496 ()
	`Ârötf
(
°dîr
, "override %s%s%s/%s %s%sfor %s? ",

497 
modï
 + 1, modep[9] == ' ' ? "" : " ",

498 
	`u£r_‰om_uid
(
•
->
°_uid
, 0),

499 
	`group_‰om_gid
(
•
->
°_gid
, 0),

500 *
Êag•
 ? flagsp : "", *flagsp ? " " : "",

501 
∑th
);

502 
	`‰ì
(
Êag•
);

504 ()
	`fÊush
(
°dîr
);

506 
fú°
 = 
ch
 = 
	`gëch¨
();

507 
ch
 !'\n' && ch !
EOF
)

508 
ch
 = 
	`gëch¨
();

509  (
fú°
 == 'y' || first == 'Y');

510 
	}
}

512 
	#ISSLASH
(
a
Ë(◊)[0] ='/' && (a)[1] ='\0')

	)

514 
	$check¶ash
(**
¨gv
)

516 **
t
, **
u
;

517 
com∂aöed
;

519 
com∂aöed
 = 0;

520 
t
 = 
¨gv
; *t;) {

521 i‡(
	`ISSLASH
(*
t
)) {

522 i‡(!
com∂aöed
++)

523 
	`w¨nx
("\"/\" mayÇot beÑemoved");

524 
evÆ
 = 1;

525 
u
 = 
t
; u[0] !
NULL
; ++u)

526 
u
[0] = u[1];

528 ++
t
;

531 
	}
}

534 
	$check2
(**
¨gv
)

536 
°©
 
°
;

537 
fú°
;

538 
ch
;

539 
fcou¡
 = 0;

540 
dcou¡
 = 0;

541 
i
;

542 c⁄° *
d«me
 = 
NULL
;

544 
i
 = 0; 
¨gv
[i]; ++i) {

545 i‡(
	`l°©
(
¨gv
[
i
], &
°
) == 0) {

546 i‡(
	`S_ISDIR
(
°
.
°_mode
)) {

547 ++
dcou¡
;

548 
d«me
 = 
¨gv
[
i
];

550 ++
fcou¡
;

554 
fú°
 = 0;

555 
fú°
 != 'n' && first != 'N' && first != 'y' && first != 'Y') {

556 i‡(
dcou¡
 && 
rÊag
) {

557 
	`Ârötf
(
°dîr
, "recursivelyÑemove");

558 i‡(
dcou¡
 == 1)

559 
	`Ârötf
(
°dîr
, " %s", 
d«me
);

561 
	`Ârötf
(
°dîr
, " %d dús", 
dcou¡
);

562 i‡(
fcou¡
 == 1)

563 
	`Ârötf
(
°dîr
, "ánd 1 file");

564 i‡(
fcou¡
 > 1)

565 
	`Ârötf
(
°dîr
, "ánd %d fûes", 
fcou¡
);

566 } i‡(
dcou¡
 + 
fcou¡
 > 3) {

567 
	`Ârötf
(
°dîr
, "ªmovê%d fûes", 
dcou¡
 + 
fcou¡
);

571 
	`Ârötf
(
°dîr
, "? ");

572 
	`fÊush
(
°dîr
);

574 
fú°
 = 
ch
 = 
	`gëch¨
();

575 
ch
 !'\n' && ch !
EOF
)

576 
ch
 = 
	`gëch¨
();

577 i‡(
ch
 =
EOF
)

580  (
fú°
 == 'y' || first == 'Y');

581 
	}
}

583 
	#ISDOT
(
a
Ë(◊)[0] ='.' && (!◊)[1] || (◊)[1] ='.' && !◊)[2])))

	)

585 
	$checkdŸ
(**
¨gv
)

587 *
p
, **
ßve
, **
t
;

588 
com∂aöed
;

590 
com∂aöed
 = 0;

591 
t
 = 
¨gv
; *t;) {

592 i‡((
p
 = 
	`°ºchr
(*
t
, '/')Ë!
NULL
)

593 ++
p
;

595 
p
 = *
t
;

596 i‡(
	`ISDOT
(
p
)) {

597 i‡(!
com∂aöed
++)

598 
	`w¨nx
("\".\"ánd \"..\" mayÇot beÑemoved");

599 
evÆ
 = 1;

600 
ßve
 = 
t
; (t[0] =Å[1]Ë!
NULL
; ++t)

602 
t
 = 
ßve
;

604 ++
t
;

606 
	}
}

609 
	$ußge
()

612 ()
	`Ârötf
(
°dîr
, "%s\n%s\n",

615 
	`exô
(
EX_USAGE
);

616 
	}
}

619 
	$sigöfo
(
sig
 
__unu£d
)

622 
öfo
 = 1;

623 
	}
}

	@rmdir/rmdir.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)rmdir.c 8.3 (Berkeley) 4/2/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/rmdir/rmdir.c,v 1.20.22.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<îr.h
>

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

48 
	~<uni°d.h
>

50 
rm_∑th
(*);

51 
ußge
();

53 
	gpÊag
;

54 
	gvÊag
;

57 
	$maö
(
¨gc
, *
¨gv
[])

59 
ch
, 
îr‹s
;

61 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "pv")) != -1)

62 
ch
) {

64 
pÊag
 = 1;

67 
vÊag
 = 1;

71 
	`ußge
();

73 
¨gc
 -
›töd
;

74 
¨gv
 +
›töd
;

76 i‡(
¨gc
 == 0)

77 
	`ußge
();

79 
îr‹s
 = 0; *
¨gv
;árgv++) {

80 i‡(
	`rmdú
(*
¨gv
) < 0) {

81 
	`w¨n
("%s", *
¨gv
);

82 
îr‹s
 = 1;

84 i‡(
vÊag
)

85 
	`¥ötf
("%s\n", *
¨gv
);

86 i‡(
pÊag
)

87 
îr‹s
 |
	`rm_∑th
(*
¨gv
);

91 
	`exô
(
îr‹s
);

92 
	}
}

95 
	$rm_∑th
(*
∑th
)

97 *
p
;

99 
p
 = 
∑th
 + 
	`°æí
(path);

100 --
p
 > 
∑th
 && *p == '/')

102 *++
p
 = '\0';

103 (
p
 = 
	`°ºchr
(
∑th
, '/')Ë!
NULL
) {

105 --
p
 >
∑th
 && *p == '/')

107 *++
p
 = '\0';

108 i‡(
p
 =
∑th
)

111 i‡(
	`rmdú
(
∑th
) < 0) {

112 
	`w¨n
("%s", 
∑th
);

115 i‡(
vÊag
)

116 
	`¥ötf
("%s\n", 
∑th
);

120 
	}
}

123 
	$ußge
()

126 ()
	`Ârötf
(
°dîr
, "usage:Ñmdir [-pv] directory ...\n");

127 
	`exô
(1);

128 
	}
}

	@setfacl/file.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: src/bin/setfacl/file.c,v 1.5.22.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

30 
	~<sys/ty≥s.h
>

31 
	~<sys/a˛.h
>

33 
	~<îr.h
>

34 
	~<°dio.h
>

35 
	~<°rög.h
>

37 
	~"£tÁ˛.h
"

42 
a˛_t


43 
	$gë_a˛_‰om_fûe
(c⁄° *
fûíame
)

45 
FILE
 *
fûe
;

46 
buf
[
BUFSIZ
];

48 i‡(
fûíame
 =
NULL
)

49 
	`îr
(1, "(null) filename in get_acl_from_file()");

51 
	`bzîo
(&
buf
, (buf));

53 i‡(
	`°rcmp
(
fûíame
, "-") == 0) {

54 i‡(
have_°dö
 != 0)

55 
	`îr
(1, "cannot specify moreÅhan one stdin");

56 
fûe
 = 
°dö
;

57 
have_°dö
 = 1;

59 
fûe
 = 
	`f›í
(
fûíame
, "r");

60 i‡(
fûe
 =
NULL
)

61 
	`îr
(1, "f›í(Ë%†Áûed", 
fûíame
);

64 
	`‰ód
(
buf
, (buf), (
size_t
)1, 
fûe
);

65 i‡(
	`„º‹
(
fûe
) != 0) {

66 
	`f˛o£
(
fûe
);

67 
	`îr
(1, "îr‹Ñódög from %s", 
fûíame
);

68 } i‡(
	`„of
(
fûe
) == 0) {

69 
	`f˛o£
(
fûe
);

70 
	`îrx
(1, "löêtoÿl⁄g i¿%s", 
fûíame
);

73 
	`f˛o£
(
fûe
);

75  (
	`a˛_‰om_ãxt
(
buf
));

76 
	}
}

	@setfacl/mask.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: src/bin/setfacl/mask.c,v 1.8.22.2.6.1 2012/03/03 06:15:13 kensmith Exp $");

30 
	~<sys/ty≥s.h
>

31 
	~<sys/a˛.h
>

32 
	~<sys/°©.h
>

34 
	~<îr.h
>

35 
	~<î∫o.h
>

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

39 
	~"£tÁ˛.h
"

43 
	$£t_a˛_mask
(
a˛_t
 *
¥ev_a˛
, c⁄° *
fûíame
)

45 
a˛_íåy_t
 
íåy
;

46 
a˛_t
 
a˛
;

47 
a˛_èg_t
 
èg
;

48 
íåy_id
;

50 
íåy
 = 
NULL
;

57 i‡(
have_mask
)

60 
a˛
 = 
	`a˛_dup
(*
¥ev_a˛
);

61 i‡(
a˛
 =
NULL
)

62 
	`îr
(1, "%s:á˛_dup(ËÁûed", 
fûíame
);

64 i‡(
n_Êag
 == 0) {

72 i‡(
	`a˛_ˇlc_mask
(&
a˛
)) {

73 
	`w¨n
("%s:á˛_ˇlc_mask(ËÁûed", 
fûíame
);

74 
	`a˛_‰ì
(
a˛
);

84 
íåy_id
 = 
ACL_FIRST_ENTRY
;

86 
	`a˛_gë_íåy
(
a˛
, 
íåy_id
, &
íåy
) == 1) {

87 
íåy_id
 = 
ACL_NEXT_ENTRY
;

88 i‡(
	`a˛_gë_èg_ty≥
(
íåy
, &
èg
) == -1)

89 
	`îr
(1, "%s:ácl_get_tag_type() failed",

90 
fûíame
);

92 i‡(
èg
 =
ACL_MASK
) {

93 
	`a˛_‰ì
(
a˛
);

104 
	`w¨nx
("%s: w¨nög:ÇÿmaskÉ¡ry", 
fûíame
);

105 
	`a˛_‰ì
(
a˛
);

109 
	`a˛_‰ì
(*
¥ev_a˛
);

110 *
¥ev_a˛
 = 
	`a˛_dup
(
a˛
);

111 
	`a˛_‰ì
(
a˛
);

114 
	}
}

	@setfacl/merge.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: src/bin/setfacl/merge.c,v 1.8.22.3.6.1 2012/03/03 06:15:13 kensmith Exp $");

30 
	~<sys/ty≥s.h
>

31 
	~<sys/a˛.h
>

32 
	~<sys/°©.h
>

34 
	~<îr.h
>

35 
	~<°dio.h
>

37 
	~"£tÁ˛.h
"

39 
mîge_u£r_group
(
a˛_íåy_t
 *
íåy
,á˛_íåy_à*
íåy_√w
,

40 
a˛_bønd
);

43 
	$mîge_u£r_group
(
a˛_íåy_t
 *
íåy
,á˛_íåy_à*
íåy_√w
, 
a˛_bønd
)

45 
a˛_≥rm£t_t
 
≥rm£t
;

46 
a˛_íåy_ty≥_t
 
íåy_ty≥
;

47 
a˛_Êag£t_t
 
Êag£t
;

48 
have_íåy
;

49 
uid_t
 *
id
, *
id_√w
;

51 
have_íåy
 = 0;

53 
id
 = 
	`a˛_gë_quÆifõr
(*
íåy
);

54 i‡(
id
 =
NULL
)

55 
	`îr
(1, "acl_get_qualifier() failed");

56 
id_√w
 = 
	`a˛_gë_quÆifõr
(*
íåy_√w
);

57 i‡(
id_√w
 =
NULL
)

58 
	`îr
(1, "acl_get_qualifier() failed");

59 i‡(*
id
 =*
id_√w
) {

61 i‡(
	`a˛_gë_≥rm£t
(*
íåy
, &
≥rm£t
) == -1)

62 
	`îr
(1, "acl_get_permset() failed");

63 i‡(
	`a˛_£t_≥rm£t
(*
íåy_√w
, 
≥rm£t
) == -1)

64 
	`îr
(1, "acl_set_permset() failed");

66 i‡(
a˛_bønd
 =
ACL_BRAND_NFS4
) {

67 i‡(
	`a˛_gë_íåy_ty≥_≈
(*
íåy
, &
íåy_ty≥
))

68 
	`îr
(1, "acl_get_entry_type_np() failed");

69 i‡(
	`a˛_£t_íåy_ty≥_≈
(*
íåy_√w
, 
íåy_ty≥
))

70 
	`îr
(1, "acl_set_entry_type_np() failed");

71 i‡(
	`a˛_gë_Êag£t_≈
(*
íåy
, &
Êag£t
))

72 
	`îr
(1, "acl_get_flagset_np() failed");

73 i‡(
	`a˛_£t_Êag£t_≈
(*
íåy_√w
, 
Êag£t
))

74 
	`îr
(1, "acl_set_flagset_np() failed");

77 
have_íåy
 = 1;

79 
	`a˛_‰ì
(
id
);

80 
	`a˛_‰ì
(
id_√w
);

82  (
have_íåy
);

83 
	}
}

89 
	$mîge_a˛
(
a˛_t
 
a˛
,á˛_à*
¥ev_a˛
, c⁄° *
fûíame
)

91 
a˛_íåy_t
 
íåy
, 
íåy_√w
;

92 
a˛_≥rm£t_t
 
≥rm£t
;

93 
a˛_t
 
a˛_√w
;

94 
a˛_èg_t
 
èg
, 
èg_√w
;

95 
a˛_íåy_ty≥_t
 
íåy_ty≥
, 
íåy_ty≥_√w
;

96 
a˛_Êag£t_t
 
Êag£t
;

97 
íåy_id
, 
íåy_id_√w
, 
have_íåy
, 
íåy_numbî
 = 0;

98 
a˛_bønd
, 
¥ev_a˛_bønd
;

100 
	`a˛_gë_bønd_≈
(
a˛
, &
a˛_bønd
);

101 
	`a˛_gë_bønd_≈
(*
¥ev_a˛
, &
¥ev_a˛_bønd
);

103 i‡(
	`bøndög_mism©ch
(
a˛_bønd
, 
¥ev_a˛_bønd
)) {

104 
	`w¨nx
("%s: branding mismatch;Éxisting ACL is %s, "

105 "íåyÅÿbêmîged i†%s", 
fûíame
,

106 
	`bønd_«me
(
¥ev_a˛_bønd
), bønd_«me(
a˛_bønd
));

110 
a˛_√w
 = 
	`a˛_dup
(*
¥ev_a˛
);

111 i‡(
a˛_√w
 =
NULL
)

112 
	`îr
(1, "%s:á˛_dup(ËÁûed", 
fûíame
);

114 
íåy_id
 = 
ACL_FIRST_ENTRY
;

116 
	`a˛_gë_íåy
(
a˛
, 
íåy_id
, &
íåy
) == 1) {

117 
íåy_id
 = 
ACL_NEXT_ENTRY
;

118 
have_íåy
 = 0;

121 i‡(
	`a˛_gë_èg_ty≥
(
íåy
, &
èg
) == -1)

122 
	`îr
(1, "%s:ácl_get_tag_type() failed - "

123 "övÆid ACLÉ¡ry", 
fûíame
);

124 i‡(
èg
 =
ACL_MASK
)

125 
have_mask
 = 1;

128 
íåy_id_√w
 = 
ACL_FIRST_ENTRY
;

129 
	`a˛_gë_íåy
(
a˛_√w
, 
íåy_id_√w
, &
íåy_√w
) == 1) {

130 
íåy_id_√w
 = 
ACL_NEXT_ENTRY
;

132 i‡(
	`a˛_gë_èg_ty≥
(
íåy
, &
èg
) == -1)

133 
	`îr
(1, "%s:ácl_get_tag_type() failed",

134 
fûíame
);

135 i‡(
	`a˛_gë_èg_ty≥
(
íåy_√w
, &
èg_√w
) == -1)

136 
	`îr
(1, "%s:ácl_get_tag_type() failed",

137 
fûíame
);

138 i‡(
èg
 !
èg_√w
)

145 i‡(
a˛_bønd
 =
ACL_BRAND_NFS4
) {

146 i‡(
	`a˛_gë_íåy_ty≥_≈
(
íåy
, &
íåy_ty≥
))

147 
	`îr
(1, "%s:ácl_get_entry_type_np() "

148 "Áûed", 
fûíame
);

149 i‡(
	`a˛_gë_íåy_ty≥_≈
(
íåy_√w
, &
íåy_ty≥_√w
))

150 
	`îr
(1, "%s:ácl_get_entry_type_np() "

151 "Áûed", 
fûíame
);

152 i‡(
íåy_ty≥
 !
íåy_ty≥_√w
)

156 
èg
) {

157 
ACL_USER
:

158 
ACL_GROUP
:

159 
have_íåy
 = 
	`mîge_u£r_group
(&
íåy
,

160 &
íåy_√w
, 
a˛_bønd
);

161 i‡(
have_íåy
 == 0)

164 
ACL_USER_OBJ
:

165 
ACL_GROUP_OBJ
:

166 
ACL_OTHER
:

167 
ACL_MASK
:

168 
ACL_EVERYONE
:

169 i‡(
	`a˛_gë_≥rm£t
(
íåy
, &
≥rm£t
) == -1)

170 
	`îr
(1, "%s:ácl_get_permset() failed",

171 
fûíame
);

172 i‡(
	`a˛_£t_≥rm£t
(
íåy_√w
, 
≥rm£t
) == -1)

173 
	`îr
(1, "%s:ácl_set_permset() failed",

174 
fûíame
);

176 i‡(
a˛_bønd
 =
ACL_BRAND_NFS4
) {

177 i‡(
	`a˛_gë_íåy_ty≥_≈
(
íåy
, &
íåy_ty≥
))

178 
	`îr
(1, "%s:ácl_get_entry_type_np() failed",

179 
fûíame
);

180 i‡(
	`a˛_£t_íåy_ty≥_≈
(
íåy_√w
, 
íåy_ty≥
))

181 
	`îr
(1, "%s:ácl_set_entry_type_np() failed",

182 
fûíame
);

183 i‡(
	`a˛_gë_Êag£t_≈
(
íåy
, &
Êag£t
))

184 
	`îr
(1, "%s:ácl_get_flagset_np() failed",

185 
fûíame
);

186 i‡(
	`a˛_£t_Êag£t_≈
(
íåy_√w
, 
Êag£t
))

187 
	`îr
(1, "%s:ácl_set_flagset_np() failed",

188 
fûíame
);

190 
have_íåy
 = 1;

194 
	`îrx
(1, "%s: invÆidÅagÅy≥: %i", 
fûíame
, 
èg
);

200 i‡(
have_íåy
 == 0) {

207 i‡(
a˛_bønd
 =
ACL_BRAND_NFS4
) {

208 i‡(
	`a˛_¸óã_íåy_≈
(&
a˛_√w
, &
íåy_√w
, 
íåy_numbî
) == -1) {

209 
	`w¨n
("%s:á˛_¸óã_íåy_≈(ËÁûed", 
fûíame
);

210 
	`a˛_‰ì
(
a˛_√w
);

219 
íåy_numbî
++;

221 i‡(
	`a˛_¸óã_íåy
(&
a˛_√w
, &
íåy_√w
) == -1) {

222 
	`w¨n
("%s:á˛_¸óã_íåy(ËÁûed", 
fûíame
);

223 
	`a˛_‰ì
(
a˛_√w
);

227 i‡(
	`a˛_c›y_íåy
(
íåy_√w
, 
íåy
) == -1)

228 
	`îr
(1, "%s:á˛_c›y_íåy(ËÁûed", 
fûíame
);

232 
	`a˛_‰ì
(*
¥ev_a˛
);

233 *
¥ev_a˛
 = 
a˛_√w
;

236 
	}
}

239 
	$add_a˛
(
a˛_t
 
a˛
, 
uöt
 
íåy_numbî
,á˛_à*
¥ev_a˛
, c⁄° *
fûíame
)

241 
a˛_íåy_t
 
íåy
, 
íåy_√w
;

242 
a˛_t
 
a˛_√w
;

243 
íåy_id
, 
a˛_bønd
, 
¥ev_a˛_bønd
;

245 
	`a˛_gë_bønd_≈
(
a˛
, &
a˛_bønd
);

246 
	`a˛_gë_bønd_≈
(*
¥ev_a˛
, &
¥ev_a˛_bønd
);

248 i‡(
¥ev_a˛_bønd
 !
ACL_BRAND_NFS4
) {

249 
	`w¨nx
("%s:Åhe '-a' option is onlyápplicableÅo NFSv4 ACLs",

250 
fûíame
);

254 i‡(
	`bøndög_mism©ch
(
a˛_bønd
, 
ACL_BRAND_NFS4
)) {

255 
	`w¨nx
("%s: branding mismatch;Éxisting ACL is NFSv4, "

256 "íåyÅÿbêadded i†%s", 
fûíame
,

257 
	`bønd_«me
(
a˛_bønd
));

261 
a˛_√w
 = 
	`a˛_dup
(*
¥ev_a˛
);

262 i‡(
a˛_√w
 =
NULL
)

263 
	`îr
(1, "%s:á˛_dup(ËÁûed", 
fûíame
);

265 
íåy_id
 = 
ACL_FIRST_ENTRY
;

267 
	`a˛_gë_íåy
(
a˛
, 
íåy_id
, &
íåy
) == 1) {

268 
íåy_id
 = 
ACL_NEXT_ENTRY
;

270 i‡(
	`a˛_¸óã_íåy_≈
(&
a˛_√w
, &
íåy_√w
, 
íåy_numbî
) == -1) {

271 
	`w¨n
("%s:á˛_¸óã_íåy_≈(ËÁûed", 
fûíame
);

272 
	`a˛_‰ì
(
a˛_√w
);

282 
íåy_numbî
++;

284 i‡(
	`a˛_c›y_íåy
(
íåy_√w
, 
íåy
) == -1)

285 
	`îr
(1, "%s:á˛_c›y_íåy(ËÁûed", 
fûíame
);

288 
	`a˛_‰ì
(*
¥ev_a˛
);

289 *
¥ev_a˛
 = 
a˛_√w
;

292 
	}
}

	@setfacl/remove.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: src/bin/setfacl/remove.c,v 1.6.22.3.6.1 2012/03/03 06:15:13 kensmith Exp $");

30 
	~<sys/ty≥s.h
>

31 
	~<sys/a˛.h
>

32 
	~<sys/°©.h
>

34 
	~<îr.h
>

35 
	~<°dio.h
>

36 
	~<°rög.h
>

38 
	~"£tÁ˛.h
"

44 
	$ªmove_a˛
(
a˛_t
 
a˛
,á˛_à*
¥ev_a˛
, c⁄° *
fûíame
)

46 
a˛_íåy_t
 
íåy
;

47 
a˛_t
 
a˛_√w
;

48 
a˛_èg_t
 
èg
;

49 
ˇºõd_îr‹
, 
íåy_id
, 
a˛_bønd
, 
¥ev_a˛_bønd
;

51 
ˇºõd_îr‹
 = 0;

53 
	`a˛_gë_bønd_≈
(
a˛
, &
a˛_bønd
);

54 
	`a˛_gë_bønd_≈
(*
¥ev_a˛
, &
¥ev_a˛_bønd
);

56 i‡(
	`bøndög_mism©ch
(
a˛_bønd
, 
¥ev_a˛_bønd
)) {

57 
	`w¨nx
("%s: branding mismatch;Éxisting ACL is %s, "

58 "íåyÅÿbêªmoved i†%s", 
fûíame
,

59 
	`bønd_«me
(
¥ev_a˛_bønd
), bønd_«me(
a˛_bønd
));

63 
ˇºõd_îr‹
 = 0;

65 
a˛_√w
 = 
	`a˛_dup
(*
¥ev_a˛
);

66 i‡(
a˛_√w
 =
NULL
)

67 
	`îr
(1, "%s:á˛_dup(ËÁûed", 
fûíame
);

69 
èg
 = 
ACL_UNDEFINED_TAG
;

72 
íåy_id
 = 
ACL_FIRST_ENTRY
;

73 
	`a˛_gë_íåy
(
a˛
, 
íåy_id
, &
íåy
) == 1) {

74 
íåy_id
 = 
ACL_NEXT_ENTRY
;

75 i‡(
	`a˛_gë_èg_ty≥
(
íåy
, &
èg
) == -1)

76 
	`îr
(1, "%s:á˛_gë_èg_ty≥(ËÁûed", 
fûíame
);

77 i‡(
èg
 =
ACL_MASK
)

78 
have_mask
++;

79 i‡(
	`a˛_dñëe_íåy
(
a˛_√w
, 
íåy
) == -1) {

80 
ˇºõd_îr‹
++;

81 
	`w¨nx
("%s: cannotÑemoveÇon-existent ACLÉntry",

82 
fûíame
);

86 
	`a˛_‰ì
(*
¥ev_a˛
);

87 *
¥ev_a˛
 = 
a˛_√w
;

89 i‡(
ˇºõd_îr‹
)

93 
	}
}

96 
	$ªmove_by_numbî
(
uöt
 
íåy_numbî
, 
a˛_t
 *
¥ev_a˛
, c⁄° *
fûíame
)

98 
a˛_íåy_t
 
íåy
;

99 
a˛_t
 
a˛_√w
;

100 
a˛_èg_t
 
èg
;

101 
ˇºõd_îr‹
, 
íåy_id
;

102 
uöt
 
i
;

104 
ˇºõd_îr‹
 = 0;

106 
a˛_√w
 = 
	`a˛_dup
(*
¥ev_a˛
);

107 i‡(
a˛_√w
 =
NULL
)

108 
	`îr
(1, "%s:á˛_dup(ËÁûed", 
fûíame
);

110 
èg
 = 
ACL_UNDEFINED_TAG
;

118 
íåy_id
 = 
ACL_FIRST_ENTRY
;

119 
i
 = 0;

120 
	`a˛_gë_íåy
(
a˛_√w
, 
íåy_id
, &
íåy
) == 1) {

121 
íåy_id
 = 
ACL_NEXT_ENTRY
;

122 i‡(
i
 !
íåy_numbî
)

124 i‡(
	`a˛_gë_èg_ty≥
(
íåy
, &
èg
) == -1)

125 
	`îr
(1, "%s:á˛_gë_èg_ty≥(ËÁûed", 
fûíame
);

126 i‡(
èg
 =
ACL_MASK
)

127 
have_mask
++;

130 i‡(
	`a˛_dñëe_íåy_≈
(
a˛_√w
, 
íåy_numbî
) == -1) {

131 
ˇºõd_îr‹
++;

132 
	`w¨n
("%s:á˛_dñëe_íåy_≈(ËÁûed", 
fûíame
);

135 
	`a˛_‰ì
(*
¥ev_a˛
);

136 *
¥ev_a˛
 = 
a˛_√w
;

138 i‡(
ˇºõd_îr‹
)

142 
	}
}

148 
	$ªmove_deÁu…
(
a˛_t
 *
¥ev_a˛
, c⁄° *
fûíame
)

151 
	`a˛_‰ì
(*
¥ev_a˛
);

152 *
¥ev_a˛
 = 
	`a˛_öô
(
ACL_MAX_ENTRIES
);

153 i‡(*
¥ev_a˛
 =
NULL
)

154 
	`îr
(1, "%s:á˛_öô(ËÁûed", 
fûíame
);

157 
	}
}

163 
	$ªmove_ext
(
a˛_t
 *
¥ev_a˛
, c⁄° *
fûíame
)

165 
a˛_t
 
a˛_√w
;

167 
a˛_√w
 = 
	`a˛_°rù_≈
(*
¥ev_a˛
, !
n_Êag
);

168 i‡(
a˛_√w
 =
NULL
)

169 
	`îr
(1, "%s:á˛_°rù_≈(ËÁûed", 
fûíame
);

171 
	`a˛_‰ì
(*
¥ev_a˛
);

172 *
¥ev_a˛
 = 
a˛_√w
;

173 
	}
}

	@setfacl/setfacl.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: src/bin/setfacl/setfacl.c,v 1.14.2.3.2.1 2012/03/03 06:15:13 kensmith Exp $");

30 
	~<sys/ty≥s.h
>

31 
	~<sys/∑øm.h
>

32 
	~<sys/°©.h
>

33 
	~<sys/a˛.h
>

34 
	~<sys/queue.h
>

36 
	~<îr.h
>

37 
	~<î∫o.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<uni°d.h
>

43 
	~"£tÁ˛.h
"

45 
add_fûíame
(c⁄° *
fûíame
);

46 
ußge
();

49 
	$add_fûíame
(c⁄° *
fûíame
)

51 
sf_fûe
 *
fûe
;

53 i‡(
	`°æí
(
fûíame
Ë> 
PATH_MAX
 - 1) {

54 
	`w¨n
("illegal filename");

57 
fûe
 = 
	`zmÆloc
((
sf_fûe
));

58 
fûe
->
fûíame
 = filename;

59 
	`TAILQ_INSERT_TAIL
(&
fûñi°
, 
fûe
, 
√xt
);

60 
	}
}

63 
	$ußge
()

66 
	`Ârötf
(
°dîr
, "usage: setfacl [-bdhkn] [-aÖositionÉntries] "

68 
	`exô
(1);

69 
	}
}

72 
	$maö
(
¨gc
, *
¨gv
[])

74 
a˛_t
 
a˛
;

75 
a˛_ty≥_t
 
a˛_ty≥
;

76 
fûíame
[
PATH_MAX
];

77 
loˇl_îr‹
, 
ˇºõd_îr‹
, 
ch
, 
i
, 
íåy_numbî
, 
ªt
;

78 
h_Êag
;

79 
sf_fûe
 *
fûe
;

80 
sf_íåy
 *
íåy
;

81 c⁄° *
‚_dup
;

82 *
íd
;

83 
°©
 
sb
;

85 
a˛_ty≥
 = 
ACL_TYPE_ACCESS
;

86 
ˇºõd_îr‹
 = 
loˇl_îr‹
 = 0;

87 
h_Êag
 = 
have_mask
 = 
have_°dö
 = 
n_Êag
 = 
√ed_mask
 = 0;

89 
	`TAILQ_INIT
(&
íåyli°
);

90 
	`TAILQ_INIT
(&
fûñi°
);

92 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "M:X:a:bdhkm:nx:")) != -1)

93 
ch
) {

95 
íåy
 = 
	`zmÆloc
((
sf_íåy
));

96 
íåy
->
a˛
 = 
	`gë_a˛_‰om_fûe
(
›èrg
);

97 i‡(
íåy
->
a˛
 =
NULL
)

98 
	`îr
(1, "%s: gë_a˛_‰om_fûe(ËÁûed", 
›èrg
);

99 
íåy
->
›
 = 
OP_MERGE_ACL
;

100 
	`TAILQ_INSERT_TAIL
(&
íåyli°
, 
íåy
, 
√xt
);

103 
íåy
 = 
	`zmÆloc
((
sf_íåy
));

104 
íåy
->
a˛
 = 
	`gë_a˛_‰om_fûe
(
›èrg
);

105 
íåy
->
›
 = 
OP_REMOVE_ACL
;

106 
	`TAILQ_INSERT_TAIL
(&
íåyli°
, 
íåy
, 
√xt
);

109 
íåy
 = 
	`zmÆloc
((
sf_íåy
));

111 
íåy_numbî
 = 
	`°πﬁ
(
›èrg
, &
íd
, 10);

112 i‡(
íd
 - 
›èrg
 !()
	`°æí
(optarg))

113 
	`îrx
(1, "%s: invÆidÉ¡ryÇumbî", 
›èrg
);

114 i‡(
íåy_numbî
 < 0)

115 
	`îrx
(1, "%s:É¡ryÇumbî c™nŸ bêÀs†th™ zîo", 
›èrg
);

116 
íåy
->
íåy_numbî
 =Éntry_number;

118 i‡(
¨gv
[
›töd
] =
NULL
)

119 
	`îrx
(1, "missing ACL");

120 
íåy
->
a˛
 = 
	`a˛_‰om_ãxt
(
¨gv
[
›töd
]);

121 i‡(
íåy
->
a˛
 =
NULL
)

122 
	`îr
(1, "%s", 
¨gv
[
›töd
]);

123 
›töd
++;

124 
íåy
->
›
 = 
OP_ADD_ACL
;

125 
	`TAILQ_INSERT_TAIL
(&
íåyli°
, 
íåy
, 
√xt
);

128 
íåy
 = 
	`zmÆloc
((
sf_íåy
));

129 
íåy
->
›
 = 
OP_REMOVE_EXT
;

130 
	`TAILQ_INSERT_TAIL
(&
íåyli°
, 
íåy
, 
√xt
);

133 
a˛_ty≥
 = 
ACL_TYPE_DEFAULT
;

136 
h_Êag
 = 1;

139 
íåy
 = 
	`zmÆloc
((
sf_íåy
));

140 
íåy
->
›
 = 
OP_REMOVE_DEF
;

141 
	`TAILQ_INSERT_TAIL
(&
íåyli°
, 
íåy
, 
√xt
);

144 
íåy
 = 
	`zmÆloc
((
sf_íåy
));

145 
íåy
->
a˛
 = 
	`a˛_‰om_ãxt
(
›èrg
);

146 i‡(
íåy
->
a˛
 =
NULL
)

147 
	`îr
(1, "%s", 
›èrg
);

148 
íåy
->
›
 = 
OP_MERGE_ACL
;

149 
	`TAILQ_INSERT_TAIL
(&
íåyli°
, 
íåy
, 
√xt
);

152 
n_Êag
++;

155 
íåy
 = 
	`zmÆloc
((
sf_íåy
));

156 
íåy_numbî
 = 
	`°πﬁ
(
›èrg
, &
íd
, 10);

157 i‡(
íd
 - 
›èrg
 =()
	`°æí
(optarg)) {

158 i‡(
íåy_numbî
 < 0)

159 
	`îrx
(1, "%s:É¡ryÇumbî c™nŸ bêÀs†th™ zîo", 
›èrg
);

160 
íåy
->
íåy_numbî
 =Éntry_number;

161 
íåy
->
›
 = 
OP_REMOVE_BY_NUMBER
;

163 
íåy
->
a˛
 = 
	`a˛_‰om_ãxt
(
›èrg
);

164 i‡(
íåy
->
a˛
 =
NULL
)

165 
	`îr
(1, "%s", 
›èrg
);

166 
íåy
->
›
 = 
OP_REMOVE_ACL
;

168 
	`TAILQ_INSERT_TAIL
(&
íåyli°
, 
íåy
, 
√xt
);

171 
	`ußge
();

174 
¨gc
 -
›töd
;

175 
¨gv
 +
›töd
;

177 i‡(
n_Êag
 =0 && 
	`TAILQ_EMPTY
(&
íåyli°
))

178 
	`ußge
();

181 i‡(
¨gc
 =0 || 
	`°rcmp
(
¨gv
[0], "-") == 0) {

182 i‡(
have_°dö
)

183 
	`îr
(1, "cannot have moreÅhan one stdin");

184 
have_°dö
 = 1;

185 
	`bzîo
(&
fûíame
, (filename));

186 
	`fgës
(
fûíame
, ()(fûíame), 
°dö
)) {

188 
fûíame
[
	`°æí
(filename) - 1] = '\0';

189 
‚_dup
 = 
	`°rdup
(
fûíame
);

190 i‡(
‚_dup
 =
NULL
)

191 
	`îr
(1, "strdup() failed");

192 
	`add_fûíame
(
‚_dup
);

195 
i
 = 0; i < 
¨gc
; i++)

196 
	`add_fûíame
(
¨gv
[
i
]);

199 
	`TAILQ_FOREACH
(
fûe
, &
fûñi°
, 
√xt
) {

200 
loˇl_îr‹
 = 0;

202 i‡(
	`°©
(
fûe
->
fûíame
, &
sb
) == -1) {

203 
	`w¨n
("%s: sèt(ËÁûed", 
fûe
->
fûíame
);

204 
ˇºõd_îr‹
++;

208 i‡(
a˛_ty≥
 =
ACL_TYPE_DEFAULT
 && 
	`S_ISDIR
(
sb
.
°_mode
) == 0) {

209 
	`w¨nx
("%s: default ACL may only be set oná directory",

210 
fûe
->
fûíame
);

211 
ˇºõd_îr‹
++;

215 i‡(
h_Êag
)

216 
ªt
 = 
	`Õ©hc⁄f
(
fûe
->
fûíame
, 
_PC_ACL_NFS4
);

218 
ªt
 = 
	`∑thc⁄f
(
fûe
->
fûíame
, 
_PC_ACL_NFS4
);

219 i‡(
ªt
 > 0) {

220 i‡(
a˛_ty≥
 =
ACL_TYPE_DEFAULT
) {

221 
	`w¨nx
("%s:ÅhereáreÇo defaultÉntries "

222 "ö NFSv4 ACLs", 
fûe
->
fûíame
);

223 
ˇºõd_îr‹
++;

226 
a˛_ty≥
 = 
ACL_TYPE_NFS4
;

227 } i‡(
ªt
 == 0) {

228 i‡(
a˛_ty≥
 =
ACL_TYPE_NFS4
)

229 
a˛_ty≥
 = 
ACL_TYPE_ACCESS
;

230 } i‡(
ªt
 < 0 && 
î∫o
 !
EINVAL
) {

231 
	`w¨n
("%s:Öathconf(..., _PC_ACL_NFS4) failed",

232 
fûe
->
fûíame
);

235 i‡(
h_Êag
)

236 
a˛
 = 
	`a˛_gë_lök_≈
(
fûe
->
fûíame
, 
a˛_ty≥
);

238 
a˛
 = 
	`a˛_gë_fûe
(
fûe
->
fûíame
, 
a˛_ty≥
);

239 i‡(
a˛
 =
NULL
) {

240 i‡(
h_Êag
)

241 
	`w¨n
("%s:ácl_get_link_np() failed",

242 
fûe
->
fûíame
);

244 
	`w¨n
("%s:ácl_get_file() failed",

245 
fûe
->
fûíame
);

246 
ˇºõd_îr‹
++;

251 
	`TAILQ_FOREACH
(
íåy
, &
íåyli°
, 
√xt
) {

252 i‡(
loˇl_îr‹
)

255 
íåy
->
›
) {

256 
OP_ADD_ACL
:

257 
loˇl_îr‹
 +
	`add_a˛
(
íåy
->
a˛
,

258 
íåy
->
íåy_numbî
, &
a˛
, 
fûe
->
fûíame
);

260 
OP_MERGE_ACL
:

261 
loˇl_îr‹
 +
	`mîge_a˛
(
íåy
->
a˛
, &acl,

262 
fûe
->
fûíame
);

263 
√ed_mask
 = 1;

265 
OP_REMOVE_EXT
:

266 
	`ªmove_ext
(&
a˛
, 
fûe
->
fûíame
);

267 
√ed_mask
 = 0;

269 
OP_REMOVE_DEF
:

270 i‡(
a˛_ty≥
 =
ACL_TYPE_NFS4
) {

271 
	`w¨nx
("%s:ÅhereáreÇo defaultÉntries in NFSv4 ACLs; "

272 "ˇ¬ŸÑemove", 
fûe
->
fûíame
);

273 
loˇl_îr‹
++;

276 i‡(
	`a˛_dñëe_def_fûe
(
fûe
->
fûíame
) == -1) {

277 
	`w¨n
("%s:ácl_delete_def_file() failed",

278 
fûe
->
fûíame
);

279 
loˇl_îr‹
++;

281 i‡(
a˛_ty≥
 =
ACL_TYPE_DEFAULT
)

282 
loˇl_îr‹
 +
	`ªmove_deÁu…
(&
a˛
,

283 
fûe
->
fûíame
);

284 
√ed_mask
 = 0;

286 
OP_REMOVE_ACL
:

287 
loˇl_îr‹
 +
	`ªmove_a˛
(
íåy
->
a˛
, &acl,

288 
fûe
->
fûíame
);

289 
√ed_mask
 = 1;

291 
OP_REMOVE_BY_NUMBER
:

292 
loˇl_îr‹
 +
	`ªmove_by_numbî
(
íåy
->
íåy_numbî
,

293 &
a˛
, 
fûe
->
fûíame
);

294 
√ed_mask
 = 1;

300 i‡(
loˇl_îr‹
) {

301 
ˇºõd_îr‹
++;

305 i‡(
a˛_ty≥
 !
ACL_TYPE_NFS4
 && 
√ed_mask
 &&

306 
	`£t_a˛_mask
(&
a˛
, 
fûe
->
fûíame
) == -1) {

307 
	`w¨nx
("%s: faûedÅÿ£àACL mask", 
fûe
->
fûíame
);

308 
ˇºõd_îr‹
++;

309 } i‡(
h_Êag
) {

310 i‡(
	`a˛_£t_lök_≈
(
fûe
->
fûíame
, 
a˛_ty≥
,

311 
a˛
) == -1) {

312 
ˇºõd_îr‹
++;

313 
	`w¨n
("%s:ácl_set_link_np() failed",

314 
fûe
->
fûíame
);

317 i‡(
	`a˛_£t_fûe
(
fûe
->
fûíame
, 
a˛_ty≥
,

318 
a˛
) == -1) {

319 
ˇºõd_îr‹
++;

320 
	`w¨n
("%s:ácl_set_file() failed",

321 
fûe
->
fûíame
);

325 
	`a˛_‰ì
(
a˛
);

328  (
ˇºõd_îr‹
);

329 
	}
}

	@setfacl/setfacl.h

29 #i‚de‡
_SETFACL_H


30 
	#_SETFACL_H


	)

32 
	~<sys/ty≥s.h
>

33 
	~<sys/a˛.h
>

34 
	~<sys/queue.h
>

37 
	#OP_MERGE_ACL
 0x00

	)

38 
	#OP_REMOVE_DEF
 0x01

	)

39 
	#OP_REMOVE_EXT
 0x02

	)

40 
	#OP_REMOVE_ACL
 0x03

	)

41 
	#OP_REMOVE_BY_NUMBER
 0x04

	)

42 
	#OP_ADD_ACL
 0x05

	)

45 
	ssf_íåy
 {

46 
uöt
 
	m›
;

47 
a˛_t
 
	ma˛
;

48 
uöt
 
	míåy_numbî
;

49 
TAILQ_ENTRY
(
sf_íåy
Ë
	m√xt
;

51 
	$TAILQ_HEAD
(, 
sf_íåy
Ë
íåyli°
;

54 
	ssf_fûe
 {

55 c⁄° *
fûíame
;

56 
	`TAILQ_ENTRY
(
sf_fûe
Ë
√xt
;

58 
	$TAILQ_HEAD
(, 
sf_fûe
Ë
fûñi°
;

61 
a˛_t
 
	`gë_a˛_‰om_fûe
(c⁄° *
fûíame
);

63 
	`mîge_a˛
(
a˛_t
 
a˛
,á˛_à*
¥ev_a˛
, c⁄° *
fûíame
);

64 
	`add_a˛
(
a˛_t
 
a˛
, 
uöt
 
íåy_numbî
,á˛_à*
¥ev_a˛
, c⁄° *
fûíame
);

66 
	`ªmove_a˛
(
a˛_t
 
a˛
,á˛_à*
¥ev_a˛
, c⁄° *
fûíame
);

67 
	`ªmove_by_numbî
(
uöt
 
íåy_numbî
, 
a˛_t
 *
¥ev_a˛
, c⁄° *
fûíame
);

68 
	`ªmove_deÁu…
(
a˛_t
 *
¥ev_a˛
, c⁄° *
fûíame
);

69 
	`ªmove_ext
(
a˛_t
 *
¥ev_a˛
, c⁄° *
fûíame
);

71 
	`£t_a˛_mask
(
a˛_t
 *
¥ev_a˛
, c⁄° *
fûíame
);

73 *
	`zmÆloc
(
size_t
 
size
);

74 c⁄° *
	`bønd_«me
(
bønd
);

75 
	`bøndög_mism©ch
(
bønd1
, 
bønd2
);

77 
uöt
 
have_mask
;

78 
uöt
 
√ed_mask
;

79 
uöt
 
have_°dö
;

80 
uöt
 
n_Êag
;

	@setfacl/util.c

27 
	~<sys/cdefs.h
>

28 
__FBSDID
("$FreeBSD: src/bin/setfacl/util.c,v 1.6.22.3.6.1 2012/03/03 06:15:13 kensmith Exp $");

30 
	~<îr.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

34 
	~"£tÁ˛.h
"

37 
	$zmÆloc
(
size_t
 
size
)

39 *
±r
;

41 
±r
 = 
	`ˇŒoc
(1, 
size
);

42 i‡(
±r
 =
NULL
)

43 
	`îr
(1, "calloc() failed");

44  (
±r
);

45 
	}
}

48 
	$bønd_«me
(
bønd
)

50 
bønd
) {

51 
ACL_BRAND_NFS4
:

53 
ACL_BRAND_POSIX
:

58 
	}
}

61 
	$bøndög_mism©ch
(
bønd1
, 
bønd2
)

63 i‡(
bønd1
 =
ACL_BRAND_UNKNOWN
 || 
bønd2
 == ACL_BRAND_UNKNOWN)

65 i‡(
bønd1
 !
bønd2
)

68 
	}
}

	@sh/alias.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)alias.c 8.3 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/alias.c,v 1.25.2.3.4.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<°dlib.h
>

42 
	~"shñl.h
"

43 
	~"ouçut.h
"

44 
	~"îr‹.h
"

45 
	~"memÆloc.h
"

46 
	~"my°rög.h
"

47 
	~"Æüs.h
"

48 
	~"›ti⁄s.h
"

50 
	#ATABSIZE
 39

	)

52 
Æüs
 *
	g©ab
[
ATABSIZE
];

53 
	gÆü£s
;

55 
£èlüs
(const *, const *);

56 
u«lüs
(const *);

57 
Æüs
 **
hashÆüs
(const *);

61 
	$£èlüs
(c⁄° *
«me
, c⁄° *
vÆ
)

63 
Æüs
 *
≠
, **
≠p
;

65 
≠p
 = 
	`hashÆüs
(
«me
);

66 
≠
 = *
≠p
;áp;á∞≠->
√xt
) {

67 i‡(
	`equÆ
(
«me
, 
≠
->name)) {

68 
INTOFF
;

69 
	`ck‰ì
(
≠
->
vÆ
);

70 
≠
->
vÆ
 = 
	`ßve°r
(val);

71 
INTON
;

76 
INTOFF
;

77 
≠
 = 
	`ckmÆloc
( (
Æüs
));

78 
≠
->
«me
 = 
	`ßve°r
(name);

96 #ifde‡
nŸyë


97 
≠
->
vÆ
 = 
	`ßve°r
(val);

100 
size_t
 
Àn
 = 
	`°æí
(
vÆ
);

101 
≠
->
vÆ
 = 
	`ckmÆloc
(
Àn
 + 2);

102 
	`mem˝y
(
≠
->
vÆ
, vÆ, 
Àn
);

103 
≠
->
vÆ
[
Àn
] = ' ';

104 
≠
->
vÆ
[
Àn
+1] = '\0';

107 
≠
->
Êag
 = 0;

108 
≠
->
√xt
 = *
≠p
;

109 *
≠p
 = 
≠
;

110 
Æü£s
++;

111 
INTON
;

112 
	}
}

115 
	$u«lüs
(c⁄° *
«me
)

117 
Æüs
 *
≠
, **
≠p
;

119 
≠p
 = 
	`hashÆüs
(
«me
);

121 
≠
 = *
≠p
;áp;áµ = &◊p->
√xt
),áp =áp->next) {

122 i‡(
	`equÆ
(
«me
, 
≠
->name)) {

130 i‡(
≠
->
Êag
 & 
ALIASINUSE
)

131 *
≠
->
«me
 = '\0';

133 
INTOFF
;

134 *
≠p
 = 
≠
->
√xt
;

135 
	`ck‰ì
(
≠
->
«me
);

136 
	`ck‰ì
(
≠
->
vÆ
);

137 
	`ck‰ì
(
≠
);

138 
INTON
;

140 
Æü£s
--;

146 
	}
}

148 #ifde‡
mköô


149 
MKINIT
 
rmÆü£s
();

151 
	gSHELLPROC
 {

152 
rmÆü£s
();

157 
	$rmÆü£s
()

159 
Æüs
 *
≠
, *
tmp
;

160 
i
;

162 
INTOFF
;

163 
i
 = 0; i < 
ATABSIZE
; i++) {

164 
≠
 = 
©ab
[
i
];

165 
©ab
[
i
] = 
NULL
;

166 
≠
) {

167 
	`ck‰ì
(
≠
->
«me
);

168 
	`ck‰ì
(
≠
->
vÆ
);

169 
tmp
 = 
≠
;

170 
≠
 =áp->
√xt
;

171 
	`ck‰ì
(
tmp
);

174 
Æü£s
 = 0;

175 
INTON
;

176 
	}
}

178 
Æüs
 *

179 
	$looku∑lüs
(c⁄° *
«me
, 
check
)

181 
Æüs
 *
≠
 = *
	`hashÆüs
(
«me
);

183 ; 
≠
;á∞≠->
√xt
) {

184 i‡(
	`equÆ
(
«me
, 
≠
->name)) {

185 i‡(
check
 && (
≠
->
Êag
 & 
ALIASINUSE
))

186  (
NULL
);

187  (
≠
);

191  (
NULL
);

192 
	}
}

195 
	$com∑ªÆü£s
(c⁄° *
p1
, c⁄° *
p2
)

197 c⁄° 
Æüs
 *c⁄° *
a1
 = 
p1
;

198 c⁄° 
Æüs
 *c⁄° *
a2
 = 
p2
;

200  
	`°rcmp
((*
a1
)->
«me
, (*
a2
)->name);

201 
	}
}

204 
	$¥öèlüs
(c⁄° 
Æüs
 *
a
)

206 *
p
;

208 
	`out1fmt
("%s=", 
a
->
«me
);

210 
p
 = 
a
->
vÆ
 + 
	`°æí
(a->val) - 1;

211 *
p
 = '\0';

212 
	`out1q°r
(
a
->
vÆ
);

213 *
p
 = ' ';

214 
	`out1c
('\n');

215 
	}
}

218 
	$¥öèlü£s
()

220 
i
, 
j
;

221 
Æüs
 **
s‹ãd
, *
≠
;

223 
s‹ãd
 = 
	`ckmÆloc
(
Æü£s
 * (*sorted));

224 
j
 = 0;

225 
i
 = 0; i < 
ATABSIZE
; i++)

226 
≠
 = 
©ab
[
i
];áp;á∞≠->
√xt
)

227 i‡(*
≠
->
«me
 != '\0')

228 
s‹ãd
[
j
++] = 
≠
;

229 
	`qs‹t
(
s‹ãd
, 
Æü£s
, (*s‹ãd), 
com∑ªÆü£s
);

230 
i
 = 0; i < 
Æü£s
; i++)

231 
	`¥öèlüs
(
s‹ãd
[
i
]);

232 
	`ck‰ì
(
s‹ãd
);

233 
	}
}

236 
	$Æüscmd
(
¨gc
, **
¨gv
)

238 *
n
, *
v
;

239 
ªt
 = 0;

240 
Æüs
 *
≠
;

242 i‡(
¨gc
 == 1) {

243 
	`¥öèlü£s
();

246 (
n
 = *++
¨gv
Ë!
NULL
) {

247 i‡((
v
 = 
	`°rchr
(
n
+1, '=')Ë=
NULL
)

248 i‡((
≠
 = 
	`looku∑lüs
(
n
, 0)Ë=
NULL
) {

249 
	`outfmt
(
out2
, "Æüs: %†nŸ found\n", 
n
);

250 
ªt
 = 1;

252 
	`¥öèlüs
(
≠
);

254 *
v
++ = '\0';

255 
	`£èlüs
(
n
, 
v
);

259  (
ªt
);

260 
	}
}

263 
	$u«lüscmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

265 
i
;

267 (
i
 = 
	`√xt›t
("a")) != '\0') {

268 i‡(
i
 == 'a') {

269 
	`rmÆü£s
();

273 
i
 = 0; *
¨g±r
;árgptr++)

274 
i
 |
	`u«lüs
(*
¨g±r
);

276  (
i
);

277 
	}
}

279 
Æüs
 **

280 
	$hashÆüs
(c⁄° *
p
)

282 
hashvÆ
;

284 
hashvÆ
 = *
p
 << 4;

285 *
p
)

286 
hashvÆ
+*
p
++;

287  &
©ab
[
hashvÆ
 % 
ATABSIZE
];

288 
	}
}

	@sh/alias.h

36 
	#ALIASINUSE
 1

	)

38 
	sÆüs
 {

39 
Æüs
 *
	m√xt
;

40 *
	m«me
;

41 *
	mvÆ
;

42 
	mÊag
;

45 
Æüs
 *
looku∑lüs
(const *, );

46 
Æüscmd
(, **);

47 
u«lüscmd
(, **);

48 
rmÆü£s
();

	@sh/arith.h

33 
	~"shñl.h
"

35 
	#DIGITS
(
v¨
Ë(3 + (2 + 
CHAR_BIT
 * ((v¨))Ë/ 3)

	)

37 c⁄° *
¨ôh_buf
, *
¨ôh_°¨tbuf
;

39 
¨ôh_t
 
¨ôh
(const *);

40 
¨ôh_Àx_ª£t
();

41 
expcmd
(, **);

	@sh/arith.y

35 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)arith.y 8.3 (Berkeley) 5/4/95";

40 
	~<sys/cdefs.h
>

41 
__FBSDID
("$FreeBSD: src/bin/sh/arith.y,v 1.22.2.3.4.1 2012/03/03 06:15:13 kensmith Exp $");

43 
	~<limôs.h
>

44 
	~<°dio.h
>

46 
	~"¨ôh.h
"

47 
	~"shñl.h
"

48 
	~"v¨.h
"

51 
¨ôh_t
 
l_vÆue
;

52 * 
s_vÆue
;

54 %
tokí
 <
l_vÆue
> 
ARITH_NUM
 
ARITH_LPAREN
 
ARITH_RPAREN


55 %
tokí
 <
s_vÆue
> 
ARITH_VAR


57 %
ty≥
 <
l_vÆue
> 
ex¥


58 %
right
 
ARITH_ASSIGN


59 %
right
 
ARITH_ADDASSIGN
 
ARITH_SUBASSIGN


60 %
right
 
ARITH_MULASSIGN
 
ARITH_DIVASSIGN
 
ARITH_REMASSIGN


61 %
right
 
ARITH_RSHASSIGN
 
ARITH_LSHASSIGN


62 %
right
 
ARITH_BANDASSIGN
 
ARITH_BXORASSIGN
 
ARITH_BORASSIGN


63 %
À·
 
ARITH_OR


64 %
À·
 
ARITH_AND


65 %
À·
 
ARITH_BOR


66 %
À·
 
ARITH_BXOR


67 %
À·
 
ARITH_BAND


68 %
À·
 
ARITH_EQ
 
ARITH_NE


69 %
À·
 
ARITH_LT
 
ARITH_GT
 
ARITH_GE
 
ARITH_LE


70 %
À·
 
ARITH_LSHIFT
 
ARITH_RSHIFT


71 %
À·
 
ARITH_ADD
 
ARITH_SUB


72 %
À·
 
ARITH_MUL
 
ARITH_DIV
 
ARITH_REM


73 %
À·
 
ARITH_UNARYMINUS
 
ARITH_UNARYPLUS
 
ARITH_NOT
 
ARITH_BNOT


74 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

76 
exp
:

77 
ex¥


79 *
YYPARSE_PARAM
 = 
$1
;

84 
ex¥
:

85 
ARITH_LPAREN
 
ex¥
 
ARITH_RPAREN


86 { 
$$
 = 
$2
; } |

87 
ex¥
 
ARITH_OR
Éxpr

88 { 
$$
 = 
$1
 ? $1 : 
$3
 ? $3 : 0; } |

89 
ex¥
 
ARITH_AND
Éxpr

90 { 
$$
 = 
$1
 ? ( 
$3
 ? $3 : 0 ) : 0; } |

91 
ex¥
 
ARITH_BOR
Éxpr

92 { 
$$
 = 
$1
 | 
$3
; } |

93 
ex¥
 
ARITH_BXOR
Éxpr

94 { 
$$
 = 
$1
 ^ 
$3
; } |

95 
ex¥
 
ARITH_BAND
Éxpr

96 { 
$$
 = 
$1
 & 
$3
; } |

97 
ex¥
 
ARITH_EQ
Éxpr

98 { 
$$
 = 
$1
 =
$3
; } |

99 
ex¥
 
ARITH_GT
Éxpr

100 { 
$$
 = 
$1
 > 
$3
; } |

101 
ex¥
 
ARITH_GE
Éxpr

102 { 
$$
 = 
$1
 >
$3
; } |

103 
ex¥
 
ARITH_LT
Éxpr

104 { 
$$
 = 
$1
 < 
$3
; } |

105 
ex¥
 
ARITH_LE
Éxpr

106 { 
$$
 = 
$1
 <
$3
; } |

107 
ex¥
 
ARITH_NE
Éxpr

108 { 
$$
 = 
$1
 !
$3
; } |

109 
ex¥
 
ARITH_LSHIFT
Éxpr

110 { 
$$
 = 
$1
 << 
$3
; } |

111 
ex¥
 
ARITH_RSHIFT
Éxpr

112 { 
$$
 = 
$1
 >> 
$3
; } |

113 
ex¥
 
ARITH_ADD
Éxpr

114 { 
$$
 = 
$1
 + 
$3
; } |

115 
ex¥
 
ARITH_SUB
Éxpr

116 { 
$$
 = 
$1
 - 
$3
; } |

117 
ex¥
 
ARITH_MUL
Éxpr

118 { 
$$
 = 
$1
 * 
$3
; } |

119 
ex¥
 
ARITH_DIV
Éxpr

121 i‡(
$3
 == 0)

122 
	`yyîr‹
("division by zero");

123 
$$
 = 
$1
 / 
$3
;

125 
ex¥
 
ARITH_REM
Éxpr

127 i‡(
$3
 == 0)

128 
	`yyîr‹
("division by zero");

129 
$$
 = 
$1
 % 
$3
;

131 
ARITH_NOT
 
ex¥


132 { 
$$
 = !(
$2
); } |

133 
ARITH_BNOT
 
ex¥


134 { 
$$
 = ~(
$2
); } |

135 
ARITH_SUB
 
ex¥
 %
¥ec
 
ARITH_UNARYMINUS


136 { 
$$
 = -(
$2
); } |

137 
ARITH_ADD
 
ex¥
 %
¥ec
 
ARITH_UNARYPLUS


138 { 
$$
 = 
$2
; } |

139 
ARITH_NUM
 |

140 
ARITH_VAR


142 *
p
;

143 
¨ôh_t
 
¨ôh_vÆ
;

144 *
°r_vÆ
;

146 i‡(
	`lookupv¨
(
$1
Ë=
NULL
)

147 
	`£tv¨ß„
(
$1
, "0", 0);

148 
°r_vÆ
 = 
	`lookupv¨
(
$1
);

149 
¨ôh_vÆ
 = 
	`°πﬂrôh_t
(
°r_vÆ
, &
p
, 0);

154 i‡(*
p
 != '\0')

155 
	`yyîr‹
("variable conversionÉrror");

156 
$$
 = 
¨ôh_vÆ
;

158 
ARITH_VAR
 
ARITH_ASSIGN
 
ex¥


160 i‡(
	`¨ôh_assign
(
$1
, 
$3
) != 0)

161 
	`yyîr‹
("variableássignmentÉrror");

162 
$$
 = 
$3
;

164 
ARITH_VAR
 
ARITH_ADDASSIGN
 
ex¥


166 
¨ôh_t
 
vÆue
;

168 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë+ 
$3
;

169 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

170 
	`yyîr‹
("variableássignmentÉrror");

171 
$$
 = 
vÆue
;

173 
ARITH_VAR
 
ARITH_SUBASSIGN
 
ex¥


175 
¨ôh_t
 
vÆue
;

177 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë- 
$3
;

178 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

179 
	`yyîr‹
("variableássignmentÉrror");

180 
$$
 = 
vÆue
;

182 
ARITH_VAR
 
ARITH_MULASSIGN
 
ex¥


184 
¨ôh_t
 
vÆue
;

186 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë* 
$3
;

187 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

188 
	`yyîr‹
("variableássignmentÉrror");

189 
$$
 = 
vÆue
;

191 
ARITH_VAR
 
ARITH_DIVASSIGN
 
ex¥


193 
¨ôh_t
 
vÆue
;

195 i‡(
$3
 == 0)

196 
	`yyîr‹
("division by zero");

198 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë/ 
$3
;

199 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

200 
	`yyîr‹
("variableássignmentÉrror");

201 
$$
 = 
vÆue
;

203 
ARITH_VAR
 
ARITH_REMASSIGN
 
ex¥


205 
¨ôh_t
 
vÆue
;

207 i‡(
$3
 == 0)

208 
	`yyîr‹
("division by zero");

210 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë% 
$3
;

211 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

212 
	`yyîr‹
("variableássignmentÉrror");

213 
$$
 = 
vÆue
;

215 
ARITH_VAR
 
ARITH_RSHASSIGN
 
ex¥


217 
¨ôh_t
 
vÆue
;

219 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë>> 
$3
;

220 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

221 
	`yyîr‹
("variableássignmentÉrror");

222 
$$
 = 
vÆue
;

224 
ARITH_VAR
 
ARITH_LSHASSIGN
 
ex¥


226 
¨ôh_t
 
vÆue
;

228 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë<< 
$3
;

229 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

230 
	`yyîr‹
("variableássignmentÉrror");

231 
$$
 = 
vÆue
;

233 
ARITH_VAR
 
ARITH_BANDASSIGN
 
ex¥


235 
¨ôh_t
 
vÆue
;

237 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë& 
$3
;

238 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

239 
	`yyîr‹
("variableássignmentÉrror");

240 
$$
 = 
vÆue
;

242 
ARITH_VAR
 
ARITH_BXORASSIGN
 
ex¥


244 
¨ôh_t
 
vÆue
;

246 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë^ 
$3
;

247 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

248 
	`yyîr‹
("variableássignmentÉrror");

249 
$$
 = 
vÆue
;

251 
ARITH_VAR
 
ARITH_BORASSIGN
 
ex¥


253 
¨ôh_t
 
vÆue
;

255 
vÆue
 = 
	`©ﬂrôh_t
(
	`lookupv¨
(
$1
)Ë| 
$3
;

256 i‡(
	`¨ôh_assign
(
$1
, 
vÆue
) != 0)

257 
	`yyîr‹
("variableássignmentÉrror");

258 
$$
 = 
vÆue
;

260 
	}
%%

261 
	~"îr‹.h
"

262 
	~"ouçut.h
"

263 
	~"memÆloc.h
"

265 
	#YYPARSE_PARAM_TYPE
 
¨ôh_t
 *

	)

266 
	#YYPARSE_PARAM
 
ªsu…


	)

268 c⁄° *
	g¨ôh_buf
, *
	g¨ôh_°¨tbuf
;

270 
yyÀx
();

271 
yy∑r£
(
YYPARSE_PARAM_TYPE
);

274 
	$¨ôh_assign
(*
«me
, 
¨ôh_t
 
vÆue
)

276 *
°r
;

277 
ªt
;

279 
°r
 = (*)
	`ckmÆloc
(
	`DIGITS
(
vÆue
));

280 
	`•rötf
(
°r
, 
ARITH_FORMAT_STR
, 
vÆue
);

281 
ªt
 = 
	`£tv¨ß„
(
«me
, 
°r
, 0);

282 
	`‰ì
(
°r
);

283  
ªt
;

284 
	}
}

286 
¨ôh_t


287 
	$¨ôh
(c⁄° *
s
)

289 
¨ôh_t
 
ªsu…
;

291 
¨ôh_buf
 = 
¨ôh_°¨tbuf
 = 
s
;

293 
INTOFF
;

294 
	`yy∑r£
(&
ªsu…
);

295 
	`¨ôh_Àx_ª£t
();

296 
INTON
;

298  
ªsu…
;

299 
	}
}

302 
	$yyîr‹
(c⁄° *
s
)

305 
yyîrok
;

306 
yy˛órö
;

307 
	`¨ôh_Àx_ª£t
();

308 
	`îr‹
("¨ôhmëi¯ex¥essi⁄: %s: \"%s\"", 
s
, 
¨ôh_°¨tbuf
);

309 
	}
}

315 
	$expcmd
(
¨gc
, **
¨gv
)

317 c⁄° *
p
;

318 *
c⁄ˇt
;

319 **
≠
;

320 
¨ôh_t
 
i
;

322 i‡(
¨gc
 > 1) {

323 
p
 = 
¨gv
[1];

324 i‡(
¨gc
 > 2) {

328 
	`STARTSTACKSTR
(
c⁄ˇt
);

329 
≠
 = 
¨gv
 + 2;

331 *
p
)

332 
	`STPUTC
(*
p
++, 
c⁄ˇt
);

333 i‡((
p
 = *
≠
++Ë=
NULL
)

335 
	`STPUTC
(' ', 
c⁄ˇt
);

337 
	`STPUTC
('\0', 
c⁄ˇt
);

338 
p
 = 
	`gøb°ack°r
(
c⁄ˇt
);

341 
p
 = "";

343 
i
 = 
	`¨ôh
(
p
);

345 
	`out1fmt
(
ARITH_FORMAT_STR
 "\n", 
i
);

346  !
i
;

347 
	}
}

350 #ifde‡
TEST_ARITH


351 
	~<°dio.h
>

352 
	$maö
(
¨gc
, *
¨gv
[])

354 
	`¥ötf
("%d\n", 
	`exp
(
¨gv
[1]));

355 
	}
}

357 
	$îr‹
(c⁄° *
s
)

359 
	`Ârötf
(
°dîr
, "exp: %s\n", 
s
);

360 
	`exô
(1);

361 
	}
}

	@sh/arith_lex.l

35 #i‚de‡
löt


36 
	gsccsid
[] = "@(#)arith_lex.l 8.3 (Berkeley) 5/4/95";

40 
	~<sys/cdefs.h
>

41 
__FBSDID
("$FreeBSD: src/bin/sh/arith_lex.l,v 1.24.10.3.2.1 2012/03/03 06:15:13 kensmith Exp $");

43 
	~<°rög.h
>

45 
	~"¨ôh.h
"

46 
	~"shñl.h
"

47 
	~"y.èb.h
"

48 
	~"îr‹.h
"

49 
	~"memÆloc.h
"

50 
	~"v¨.h
"

52 
yyÀx
();

54 
	sv¨«me


56 
v¨«me
 *
	m√xt
;

57 
	m«me
[1];

59 
v¨«me
 *
	gv¨«mes
;

61 #unde‡
YY_INPUT


62 
	#YY_INPUT
(
buf
,
ªsu…
,
max
) \

64 
ªsu…
 = 
	`°∫Àn
(
¨ôh_buf
, 
max
); \

65 i‡(
ªsu…
 == 0) \

66 
ªsu…
 = 
YY_NULL
; \

68 
	`mem˝y
(
buf
, 
¨ôh_buf
, 
ªsu…
); \

69 
¨ôh_buf
 +
ªsu…
; \

71 } 0);

	)

72 
	#YY_NO_UNPUT


	)

75 %% /* 
	$yyÀx
 */

76 [ \
t
\
n
] { ; }

78 0x[
a
-
fA
-
F0
-9]+ {

79 
yylvÆ
.
l_vÆue
 = 
	`°πﬂrôh_t
(
yyãxt
, 
NULL
, 16);

80  
ARITH_NUM
;

84 
yylvÆ
.
l_vÆue
 = 
	`°πﬂrôh_t
(
yyãxt
, 
NULL
, 8);

85  
ARITH_NUM
;

89 
yylvÆ
.
l_vÆue
 = 
	`°πﬂrôh_t
(
yyãxt
, 
NULL
, 10);

90  
ARITH_NUM
;

93 [
A
-
Za
-
z
][A-Za-
z0
-9
_
]* {

98 
v¨«me
 *
ãmp
;

99 i‡(
	`lookupv¨
(
yyãxt
Ë=
NULL
)

100 
	`£tv¨ß„
(
yyãxt
, "0", 0);

101 
ãmp
 = 
	`ckmÆloc
((
v¨«me
) +

102 
	`°æí
(
yyãxt
));

103 
ãmp
->
√xt
 = 
v¨«mes
;

104 
v¨«mes
 = 
ãmp
;

105 
yylvÆ
.
s_vÆue
 = 
	`°r˝y
(
ãmp
->
«me
, 
yyãxt
);

107  
ARITH_VAR
;

110 "(" {  
ARITH_LPAREN
; }

111 ")" {  
ARITH_RPAREN
; }

112 "||" {  
ARITH_OR
; }

113 "&&" {  
ARITH_AND
; }

114 "|" {  
ARITH_BOR
; }

115 "^" {  
ARITH_BXOR
; }

116 "&" {  
ARITH_BAND
; }

117 "==" {  
ARITH_EQ
; }

118 "!=" {  
ARITH_NE
; }

119 ">" {  
ARITH_GT
; }

120 ">=" {  
ARITH_GE
; }

121 "<" {  
ARITH_LT
; }

122 "<=" {  
ARITH_LE
; }

123 "<<" {  
ARITH_LSHIFT
; }

124 ">>" {  
ARITH_RSHIFT
; }

125 "*" {  
ARITH_MUL
; }

126 "/" {  
ARITH_DIV
; }

127 "%" {  
ARITH_REM
; }

128 "+" {  
ARITH_ADD
; }

129 "-" {  
ARITH_SUB
; }

130 "~" {  
ARITH_BNOT
; }

131 "!" {  
ARITH_NOT
; }

132 "=" {  
ARITH_ASSIGN
; }

133 "+=" {  
ARITH_ADDASSIGN
; }

134 "-=" {  
ARITH_SUBASSIGN
; }

135 "*=" {  
ARITH_MULASSIGN
; }

136 "/=" {  
ARITH_DIVASSIGN
; }

137 "%=" {  
ARITH_REMASSIGN
; }

138 ">>=" {  
ARITH_RSHASSIGN
; }

139 "<<=" {  
ARITH_LSHASSIGN
; }

140 "&=" {  
ARITH_BANDASSIGN
; }

141 "^=" {  
ARITH_BXORASSIGN
; }

142 "|=" {  
ARITH_BORASSIGN
; }

144 
	`îr‹
("¨ôh: sy¡axÉº‹: \"%s\"\n", 
¨ôh_°¨tbuf
);

146 
	}
%%

149 
	$¨ôh_Àx_ª£t
()

151 
v¨«me
 *
«me
, *
√xt
;

153 
YY_NEW_FILE
;

155 
«me
 = 
v¨«mes
;

156 
«me
 !
NULL
) {

157 
√xt
 = 
«me
->next;

158 
	`ck‰ì
(
«me
);

159 
«me
 = 
√xt
;

161 
v¨«mes
 = 
NULL
;

162 
	}
}

	@sh/bltin/bltin.h

42 
	~"../shñl.h
"

43 
	~"../my°rög.h
"

44 #ifde‡
SHELL


45 
	~"../ouçut.h
"

46 #unde‡
°dout


47 
	#°dout
 
out1


	)

48 #unde‡
°dîr


49 
	#°dîr
 
out2


	)

50 
	#¥ötf
 
out1fmt


	)

51 #unde‡
putc


52 
	#putc
(
c
, 
fûe
Ë
	`outc
(c, fûe)

	)

53 #unde‡
putch¨


54 
	#putch¨
(
c
Ë
	`out1c
(c)

	)

55 
	#Ârötf
 
outfmt


	)

56 
	#Âuts
 
out°r


	)

57 
	#fÊush
 
Êushout


	)

58 
	#INITARGS
(
¨gv
)

	)

59 
	#w¨nx1
(
a
, 
b
, 
c
) { \

60 
buf
[64]; \

61 ()
	`¢¥ötf
(
buf
, (buf), 
a
); \

62 
	`îr‹
("%s", 
buf
); \

63 }

	)

64 
	#w¨nx2
(
a
, 
b
, 
c
) { \

65 
buf
[64]; \

66 ()
	`¢¥ötf
(
buf
, (buf), 
a
, 
b
); \

67 
	`îr‹
("%s", 
buf
); \

68 }

	)

69 
	#w¨nx3
(
a
, 
b
, 
c
) { \

70 
buf
[64]; \

71 ()
	`¢¥ötf
(
buf
, (buf), 
a
, 
b
, 
c
); \

72 
	`îr‹
("%s", 
buf
); \

73 }

	)

76 #unde‡
NULL


77 
	~<°dio.h
>

78 #unde‡
maö


79 
	#INITARGS
(
¨gv
Ëi‡((
comm™d«me
 =árgv[0]Ë=
NULL
Ë{
	`Âuts
("Arg¯i†zîo\n", 
°dîr
); 
	`exô
(2);} 

	)

82 
poöãr
 
°Æloc
();

83 
	$îr‹
(c⁄° *, ...Ë
	`__¥ötf0like
(1, 2);

85 
	`echocmd
(, **);

86 
	`ã°cmd
(, **);

88 *
comm™d«me
;

	@sh/bltin/echo.c

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/sh/bltin/echo.c,v 1.14.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

42 
	#maö
 
echocmd


	)

44 
	~"b…ö.h
"

49 
	$maö
(
¨gc
, *
¨gv
[])

51 **
≠
;

52 *
p
;

53 
c
;

54 
cou¡
;

55 
nÊag
 = 0;

56 #i‚de‡
eÊag


57 
eÊag
 = 0;

60 
≠
 = 
¨gv
;

61 i‡(
¨gc
)

62 
≠
++;

63 i‡((
p
 = *
≠
Ë!
NULL
) {

64 i‡(
	`equÆ
(
p
, "-n")) {

65 
nÊag
++;

66 
≠
++;

67 } i‡(
	`equÆ
(
p
, "-e")) {

68 #i‚de‡
eÊag


69 
eÊag
++;

71 
≠
++;

74 (
p
 = *
≠
++Ë!
NULL
) {

75 (
c
 = *
p
++) != '\0') {

76 i‡(
c
 ='\\' && 
eÊag
) {

77 *
p
++) {

78 'a': 
c
 = '\a'; ;

79 'b': 
c
 = '\b'; ;

81 'e': 
c
 = '\033'; ;

82 'f': 
c
 = '\f'; ;

83 'n': 
c
 = '\n'; ;

84 'r': 
c
 = '\r'; ;

85 't': 
c
 = '\t'; ;

86 'v': 
c
 = '\v'; ;

89 
c
 = 0;

90 
cou¡
 = 3;

91 --
cou¡
 >0 && ()(*
p
 - '0') < 8)

92 
c
 = (¯<< 3Ë+ (*
p
++ - '0');

95 
p
--;

99 
	`putch¨
(
c
);

101 i‡(*
≠
)

102 
	`putch¨
(' ');

104 i‡(! 
nÊag
)

105 
	`putch¨
('\n');

107 
	}
}

	@sh/cd.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)cd.c 8.2 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/cd.c,v 1.36.2.5.4.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sys/ty≥s.h
>

42 
	~<sys/°©.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 
	~<limôs.h
>

53 
	~"shñl.h
"

54 
	~"v¨.h
"

55 
	~"nodes.h
"

56 
	~"jobs.h
"

57 
	~"›ti⁄s.h
"

58 
	~"ouçut.h
"

59 
	~"memÆloc.h
"

60 
	~"îr‹.h
"

61 
	~"exec.h
"

62 
	~"ªdú.h
"

63 
	~"my°rög.h
"

64 
	~"show.h
"

65 
	~"cd.h
"

67 
cdlogiˇl
(*);

68 
cdphysiˇl
(*);

69 
docd
(*, , );

70 *
gëcomp⁄ít
();

71 *
födcwd
(*);

72 
upd©ïwd
(*);

73 *
gëpwd2
();

75 *
	gcurdú
 = 
NULL
;

76 *
	g¥evdú
;

77 *
	gcdcomµ©h
;

80 
	$cdcmd
(
¨gc
, **
¨gv
)

82 c⁄° *
de°
;

83 c⁄° *
∑th
;

84 *
p
;

85 
°©
 
°©b
;

86 
ch
, 
phys
, 
¥öt
 = 0;

88 
›åe£t
 = 1; 
›töd
 = 1; 
›ãº
 = 0;

89 
phys
 = 
PÊag
;

90 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "LP")) != -1) {

91 
ch
) {

93 
phys
 = 0;

96 
phys
 = 1;

99 
	`îr‹
("unknow¿›ti⁄: -%c", 
›t›t
);

103 
¨gc
 -
›töd
;

104 
¨gv
 +
›töd
;

106 i‡(
¨gc
 > 1)

107 
	`îr‹
("too manyárguments");

109 i‡((
de°
 = *
¨gv
Ë=
NULL
 && (de° = 
	`b…ölookup
("HOME", 1)) == NULL)

110 
	`îr‹
("HOMEÇot set");

111 i‡(*
de°
 == '\0')

112 
de°
 = ".";

113 i‡(
de°
[0] == '-' && dest[1] == '\0') {

114 
de°
 = 
¥evdú
 ?Öªvdú : 
curdú
;

115 i‡(
de°
)

116 
¥öt
 = 1;

118 
de°
 = ".";

120 i‡(*
de°
 ='/' || (
∑th
 = 
	`b…ölookup
("CDPATH", 1)Ë=
NULL
)

121 
∑th
 = 
nuŒ°r
;

122 (
p
 = 
	`∑dv™˚
(&
∑th
, 
de°
)Ë!
NULL
) {

123 i‡(
	`°©
(
p
, &
°©b
Ë>0 && 
	`S_ISDIR
(°©b.
°_mode
)) {

124 i‡(!
¥öt
) {

128 i‡(
p
[0] == '.' &&Ö[1] == '/' &&Ö[2] != '\0')

129 
¥öt
 = 
	`°rcmp
(
p
 + 2, 
de°
);

131 
¥öt
 = 
	`°rcmp
(
p
, 
de°
);

133 i‡(
	`docd
(
p
, 
¥öt
, 
phys
) >= 0)

137 
	`îr‹
("ˇn'àcdÅÿ%s", 
de°
);

140 
	}
}

148 
	$docd
(*
de°
, 
¥öt
, 
phys
)

151 
	`TRACE
(("docd(\"%s\", %d, %dËˇŒed\n", 
de°
, 
¥öt
, 
phys
));

154 i‡((
phys
 || 
	`cdlogiˇl
(
de°
Ë< 0Ë&& 
	`cdphysiˇl
(dest) < 0)

157 i‡(
¥öt
 && 
iÊag
 && 
curdú
)

158 
	`out1fmt
("%s\n", 
curdú
);

161 
	}
}

164 
	$cdlogiˇl
(*
de°
)

166 *
p
;

167 *
q
;

168 *
comp⁄ít
;

169 
°©
 
°©b
;

170 
fú°
;

171 
bad°©
;

178 
bad°©
 = 0;

179 
cdcomµ©h
 = 
	`°Æloc
(
	`°æí
(
de°
) + 1);

180 
	`sc›y
(
de°
, 
cdcomµ©h
);

181 
	`STARTSTACKSTR
(
p
);

182 i‡(*
de°
 == '/') {

183 
	`STPUTC
('/', 
p
);

184 
cdcomµ©h
++;

186 
fú°
 = 1;

187 (
q
 = 
	`gëcomp⁄ít
()Ë!
NULL
) {

188 i‡(
q
[0] == '\0' || (q[0] == '.' && q[1] == '\0'))

190 i‡(! 
fú°
)

191 
	`STPUTC
('/', 
p
);

192 
fú°
 = 0;

193 
comp⁄ít
 = 
q
;

194 *
q
)

195 
	`STPUTC
(*
q
++, 
p
);

196 i‡(
	`equÆ
(
comp⁄ít
, ".."))

198 
	`STACKSTRNUL
(
p
);

199 i‡(
	`l°©
(
	`°ackblock
(), &
°©b
) < 0) {

200 
bad°©
 = 1;

205 
INTOFF
;

206 i‡((
p
 = 
	`födcwd
(
bad°©
 ? 
NULL
 : 
de°
)Ë=NULL || 
	`chdú
(p) < 0) {

207 
INTON
;

210 
	`upd©ïwd
(
p
);

211 
INTON
;

213 
	}
}

216 
	$cdphysiˇl
(*
de°
)

218 *
p
;

220 
INTOFF
;

221 i‡(
	`chdú
(
de°
Ë< 0 || (
p
 = 
	`födcwd
(
NULL
)) == NULL) {

222 
INTON
;

225 
	`upd©ïwd
(
p
);

226 
INTON
;

228 
	}
}

235 
	$gëcomp⁄ít
()

237 *
p
;

238 *
°¨t
;

240 i‡((
p
 = 
cdcomµ©h
Ë=
NULL
)

241  
NULL
;

242 
°¨t
 = 
cdcomµ©h
;

243 *
p
 != '/' && *p != '\0')

244 
p
++;

245 i‡(*
p
 == '\0') {

246 
cdcomµ©h
 = 
NULL
;

248 *
p
++ = '\0';

249 
cdcomµ©h
 = 
p
;

251  
°¨t
;

252 
	}
}

256 
	$födcwd
(*
dú
)

258 *
√w
;

259 *
p
;

266 i‡(
dú
 =
NULL
 || 
curdú
 == NULL)

267  
	`gëpwd2
();

268 
cdcomµ©h
 = 
	`°Æloc
(
	`°æí
(
dú
) + 1);

269 
	`sc›y
(
dú
, 
cdcomµ©h
);

270 
	`STARTSTACKSTR
(
√w
);

271 i‡(*
dú
 != '/') {

272 
p
 = 
curdú
;

273 *
p
)

274 
	`STPUTC
(*
p
++, 
√w
);

275 i‡(
p
[-1] == '/')

276 
	`STUNPUTC
(
√w
);

278 (
p
 = 
	`gëcomp⁄ít
()Ë!
NULL
) {

279 i‡(
	`equÆ
(
p
, "..")) {

280 
√w
 > 
	`°ackblock
(Ë&& (
	`STUNPUTC
(new), *new) != '/');

281 } i‡(*
p
 !'\0' && ! 
	`equÆ
(p, ".")) {

282 
	`STPUTC
('/', 
√w
);

283 *
p
)

284 
	`STPUTC
(*
p
++, 
√w
);

287 i‡(
√w
 =
	`°ackblock
())

288 
	`STPUTC
('/', 
√w
);

289 
	`STACKSTRNUL
(
√w
);

290  
	`°ackblock
();

291 
	}
}

299 
	$upd©ïwd
(*
dú
)

301 
	`hashcd
();

303 i‡(
¥evdú
)

304 
	`ck‰ì
(
¥evdú
);

305 
¥evdú
 = 
curdú
;

306 
curdú
 = 
	`ßve°r
(
dú
);

307 
	`£tv¨
("PWD", 
curdú
, 
VEXPORT
);

308 
	`£tv¨
("OLDPWD", 
¥evdú
, 
VEXPORT
);

309 
	}
}

312 
	$pwdcmd
(
¨gc
, **
¨gv
)

314 *
p
;

315 
ch
, 
phys
;

317 
›åe£t
 = 1; 
›töd
 = 1; 
›ãº
 = 0;

318 
phys
 = 
PÊag
;

319 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "LP")) != -1) {

320 
ch
) {

322 
phys
 = 0;

325 
phys
 = 1;

328 
	`îr‹
("unknow¿›ti⁄: -%c", 
›t›t
);

332 
¨gc
 -
›töd
;

333 
¨gv
 +
›töd
;

335 i‡(
¨gc
 != 0)

336 
	`îr‹
("too manyárguments");

338 i‡(!
phys
 && 
	`gëpwd
()) {

339 
	`out1°r
(
curdú
);

340 
	`out1c
('\n');

342 i‡((
p
 = 
	`gëpwd2
()Ë=
NULL
)

343 
	`îr‹
(".: %s", 
	`°ªº‹
(
î∫o
));

344 
	`out1°r
(
p
);

345 
	`out1c
('\n');

349 
	}
}

355 
	$gëpwd
()

357 *
p
;

359 i‡(
curdú
)

360  
curdú
;

362 
p
 = 
	`gëpwd2
();

363 i‡(
p
 !
NULL
)

364 
curdú
 = 
	`ßve°r
(
p
);

366  
curdú
;

367 
	}
}

369 
	#MAXPWD
 256

	)

375 
	$gëpwd2
()

377 
°©
 
°dŸ
, 
°pwd
;

378 *
pwd
;

379 
i
;

381 
i
 = 
MAXPWD
;; i *= 2) {

382 
pwd
 = 
	`°Æloc
(
i
);

383 i‡(
	`gëcwd
(
pwd
, 
i
Ë!
NULL
)

384  
pwd
;

385 
	`°u«Œoc
(
pwd
);

386 i‡(
î∫o
 !
ERANGE
)

390 
pwd
 = 
	`gëív
("PWD");

391 i‡(
pwd
 && *pwd ='/' && 
	`°©
(".", &
°dŸ
) != -1 &&

392 
	`°©
(
pwd
, &
°pwd
) != -1 &&

393 
°dŸ
.
°_dev
 =
°pwd
.st_dev &&

394 
°dŸ
.
°_öo
 =
°pwd
.st_ino) {

395  
pwd
;

397  
NULL
;

398 
	}
}

	@sh/cd.h

32 *
gëpwd
();

33 
cdcmd
 (, **);

34 
pwdcmd
(, **);

	@sh/error.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)error.c 8.2 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/error.c,v 1.26.10.3.4.1 2012/03/03 06:15:13 kensmith Exp $");

45 
	~"shñl.h
"

46 
	~"maö.h
"

47 
	~"›ti⁄s.h
"

48 
	~"ouçut.h
"

49 
	~"îr‹.h
"

50 
	~"nodes.h
"

51 
	~"show.h
"

52 
	~"å≠.h
"

53 
	~<sig«l.h
>

54 
	~<°dlib.h
>

55 
	~<uni°d.h
>

56 
	~<î∫o.h
>

63 
jm∂oc
 *
	gh™dÀr
;

64 vﬁ©ûê
sig_©omic_t
 
	gex˚±i⁄
;

65 vﬁ©ûê
sig_©omic_t
 
	gsuµªssöt
;

66 vﬁ©ûê
sig_©omic_t
 
	göçídög
;

67 *
	gcomm™d«me
;

70 
	$exvîr‹
(, c⁄° *, 
va_li°
Ë
	$__¥ötf0like
(2, 0Ë
__dód2
;

79 
	$exøi£
(
e
)

81 i‡(
h™dÀr
 =
NULL
)

82 
	`ab‹t
();

83 
ex˚±i⁄
 = 
e
;

84 
	`l⁄gjmp
(
h™dÀr
->
loc
, 1);

85 
	}
}

99 
	$⁄öt
()

101 
sig£t_t
 
sigs
;

109 i‡(
suµªssöt
 && !
ö_dŸøp
) {

110 
öçídög
++;

113 
öçídög
 = 0;

114 
	`sigem±y£t
(&
sigs
);

115 
	`sig¥ocmask
(
SIG_SETMASK
, &
sigs
, 
NULL
);

121 i‡(
	`tcgëpgΩ
(0Ë=
	`gëpid
())

122 
	`wrôe
(
STDERR_FILENO
, "\n", 1);

124 i‡(
roŸshñl
 && 
iÊag
)

125 
	`exøi£
(
EXINT
);

127 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

128 
	`kûl
(
	`gëpid
(), 
SIGINT
);

130 
	}
}

139 
	$exvîr‹
(
c⁄d
, c⁄° *
msg
, 
va_li°
 
≠
)

141 
CLEAR_PENDING_INT
;

142 
INTOFF
;

144 #ifde‡
DEBUG


145 i‡(
msg
)

146 
	`TRACE
(("exvîr‹(%d, \"%s\"Ëpid=%d\n", 
c⁄d
, 
msg
, 
	`gëpid
()));

148 
	`TRACE
(("exvîr‹(%d, NULLËpid=%d\n", 
c⁄d
, 
	`gëpid
()));

150 i‡(
msg
) {

151 i‡(
comm™d«me
)

152 
	`outfmt
(&
îrout
, "%s: ", 
comm™d«me
);

153 
	`dof‹m©
(&
îrout
, 
msg
, 
≠
);

154 
	`out2c
('\n');

156 
	`ÊushÆl
();

157 
	`exøi£
(
c⁄d
);

158 
	}
}

162 
	$îr‹
(c⁄° *
msg
, ...)

164 
va_li°
 
≠
;

165 
	`va_°¨t
(
≠
, 
msg
);

166 
	`exvîr‹
(
EXERROR
, 
msg
, 
≠
);

167 
	`va_íd
(
≠
);

168 
	}
}

172 
	$exîr‹
(
c⁄d
, c⁄° *
msg
, ...)

174 
va_li°
 
≠
;

175 
	`va_°¨t
(
≠
, 
msg
);

176 
	`exvîr‹
(
c⁄d
, 
msg
, 
≠
);

177 
	`va_íd
(
≠
);

178 
	}
}

	@sh/error.h

46 
	~<£tjmp.h
>

47 
	~<sig«l.h
>

49 
	sjm∂oc
 {

50 
jmp_buf
 
	mloc
;

53 
jm∂oc
 *
h™dÀr
;

54 vﬁ©ûê
sig_©omic_t
 
ex˚±i⁄
;

57 
	#EXINT
 0

	)

58 
	#EXERROR
 1

	)

59 
	#EXSHELLPROC
 2

	)

60 
	#EXEXEC
 3

	)

70 vﬁ©ûê
sig_©omic_t
 
suµªssöt
;

71 vﬁ©ûê
sig_©omic_t
 
öçídög
;

73 
	#INTOFF
 
suµªssöt
++

	)

74 
	#INTON
 { i‡(--
suµªssöt
 =0 && 
öçídög
Ë
	`⁄öt
(); }

	)

75 
	#FORCEINTON
 {
suµªssöt
 = 0; i‡(
öçídög
Ë
	`⁄öt
();}

	)

76 
	#CLEAR_PENDING_INT
 
öçídög
 = 0

	)

77 
	#öt_≥ndög
(Ë
öçídög


	)

79 
	$exøi£
(Ë
__dód2
;

80 
	`⁄öt
();

81 
	$îr‹
(c⁄° *, ...Ë
	$__¥ötf0like
(1, 2Ë
__dód2
;

82 
	$exîr‹
(, c⁄° *, ...Ë
	$__¥ötf0like
(2, 3Ë
__dód2
;

90 
	#£tjmp
(
jm∂oc
Ë
	`_£tjmp
(jm∂oc)

	)

91 
	#l⁄gjmp
(
jm∂oc
, 
vÆ
Ë
	`_l⁄gjmp
(jm∂oc, vÆ)

	)

	@sh/eval.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)eval.c 8.9 (Berkeley) 6/8/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/eval.c,v 1.64.2.7.2.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<∑ths.h
>

42 
	~<sig«l.h
>

43 
	~<°dlib.h
>

44 
	~<uni°d.h
>

45 
	~<sys/ªsour˚.h
>

46 
	~<sys/waô.h
>

47 
	~<î∫o.h
>

53 
	~"shñl.h
"

54 
	~"nodes.h
"

55 
	~"sy¡ax.h
"

56 
	~"ex∑nd.h
"

57 
	~"∑r£r.h
"

58 
	~"jobs.h
"

59 
	~"evÆ.h
"

60 
	~"buûtös.h
"

61 
	~"›ti⁄s.h
"

62 
	~"exec.h
"

63 
	~"ªdú.h
"

64 
	~"öput.h
"

65 
	~"ouçut.h
"

66 
	~"å≠.h
"

67 
	~"v¨.h
"

68 
	~"memÆloc.h
"

69 
	~"îr‹.h
"

70 
	~"show.h
"

71 
	~"my°rög.h
"

72 #i‚de‡
NO_HISTORY


73 
	~"myhi°edô.h
"

77 
	gevÆskù
;

78 
	gskùcou¡
;

79 
MKINIT
 
	glo›√°
;

80 
	gfun˙e°
;

81 
	gbuûtö_Êags
;

84 *
	gcomm™d«me
;

85 
°æi°
 *
	gcmdívú⁄
;

86 
	gexô°©us
;

87 
	g€xô°©us
;

90 
evÆlo›
(
node
 *, );

91 
evÆf‹
(
node
 *, );

92 
evÆˇ£
(
node
 *, );

93 
evÆsubshñl
(
node
 *, );

94 
ex¥edú
(
node
 *);

95 
evÆpùe
(
node
 *);

96 
evÆcomm™d
(
node
 *, , 
backcmd
 *);

97 
¥ehash
(
node
 *);

104 #ifde‡
mköô


105 
	gINCLUDE
 "eval.h"

107 
	gRESET
 {

108 
	gevÆskù
 = 0;

109 
	glo›√°
 = 0;

110 
	gfun˙e°
 = 0;

113 
	gSHELLPROC
 {

114 
	gexô°©us
 = 0;

125 
	$evÆcmd
(
¨gc
, **
¨gv
)

127 *
p
;

128 *
c⁄ˇt
;

129 **
≠
;

131 i‡(
¨gc
 > 1) {

132 
p
 = 
¨gv
[1];

133 i‡(
¨gc
 > 2) {

134 
	`STARTSTACKSTR
(
c⁄ˇt
);

135 
≠
 = 
¨gv
 + 2;

137 *
p
)

138 
	`STPUTC
(*
p
++, 
c⁄ˇt
);

139 i‡((
p
 = *
≠
++Ë=
NULL
)

141 
	`STPUTC
(' ', 
c⁄ˇt
);

143 
	`STPUTC
('\0', 
c⁄ˇt
);

144 
p
 = 
	`gøb°ack°r
(
c⁄ˇt
);

146 
	`evÆ°rög
(
p
, 
buûtö_Êags
 & 
EV_TESTED
);

148  
exô°©us
;

149 
	}
}

157 
	$evÆ°rög
(*
s
, 
Êags
)

159 
node
 *
n
;

160 
°ackm¨k
 
sm¨k
;

161 
Êags_exô
;

163 
Êags_exô
 = 
Êags
 & 
EV_EXIT
;

164 
Êags
 &~
EV_EXIT
;

165 
	`£t°ackm¨k
(&
sm¨k
);

166 
	`£töput°rög
(
s
, 1);

167 (
n
 = 
	`∑r£cmd
(0)Ë!
NEOF
) {

168 i‡(
n
 !
NULL
) {

169 i‡(
Êags_exô
 && 
	`¥ód©eof
())

170 
	`evÆåì
(
n
, 
Êags
 | 
EV_EXIT
);

172 
	`evÆåì
(
n
, 
Êags
);

174 
	`p›°ackm¨k
(&
sm¨k
);

176 
	`p›fûe
();

177 
	`p›°ackm¨k
(&
sm¨k
);

178 i‡(
Êags_exô
)

179 
	`exôshñl
(
exô°©us
);

180 
	}
}

189 
	$evÆåì
(
node
 *
n
, 
Êags
)

191 
do_ëe°
;

193 
do_ëe°
 = 0;

194 i‡(
n
 =
NULL
) {

195 
	`TRACE
(("evaltree(NULL) called\n"));

196 
exô°©us
 = 0;

197 
out
;

199 #i‚de‡
NO_HISTORY


200 
di•œyhi°
 = 1;

202 
	`TRACE
(("evÆåì(%p: %dËˇŒed\n", (*)
n
,Ç->
ty≥
));

203 
n
->
ty≥
) {

204 
NSEMI
:

205 
	`evÆåì
(
n
->
nbö¨y
.
ch1
, 
Êags
 & ~
EV_EXIT
);

206 i‡(
evÆskù
)

207 
out
;

208 
	`evÆåì
(
n
->
nbö¨y
.
ch2
, 
Êags
);

210 
NAND
:

211 
	`evÆåì
(
n
->
nbö¨y
.
ch1
, 
EV_TESTED
);

212 i‡(
evÆskù
 || 
exô°©us
 != 0) {

213 
out
;

215 
	`evÆåì
(
n
->
nbö¨y
.
ch2
, 
Êags
);

217 
NOR
:

218 
	`evÆåì
(
n
->
nbö¨y
.
ch1
, 
EV_TESTED
);

219 i‡(
evÆskù
 || 
exô°©us
 == 0)

220 
out
;

221 
	`evÆåì
(
n
->
nbö¨y
.
ch2
, 
Êags
);

223 
NREDIR
:

224 
€xô°©us
 = 
exô°©us
;

225 
	`ex¥edú
(
n
->
ƒedú
.
ªdúe˘
);

226 
	`ªdúe˘
(
n
->
ƒedú
.
ªdúe˘
, 
REDIR_PUSH
);

227 
	`evÆåì
(
n
->
ƒedú
.n, 
Êags
);

228 
	`p›ªdú
();

230 
NSUBSHELL
:

231 
	`evÆsubshñl
(
n
, 
Êags
);

232 
do_ëe°
 = !(
Êags
 & 
EV_TESTED
);

234 
NBACKGND
:

235 
	`evÆsubshñl
(
n
, 
Êags
);

237 
NIF
: {

238 
	`evÆåì
(
n
->
nif
.
ã°
, 
EV_TESTED
);

239 i‡(
evÆskù
)

240 
out
;

241 i‡(
exô°©us
 == 0)

242 
	`evÆåì
(
n
->
nif
.
iÂ¨t
, 
Êags
);

243 i‡(
n
->
nif
.
ñ£∑π
)

244 
	`evÆåì
(
n
->
nif
.
ñ£∑π
, 
Êags
);

246 
exô°©us
 = 0;

249 
NWHILE
:

250 
NUNTIL
:

251 
	`evÆlo›
(
n
, 
Êags
 & ~
EV_EXIT
);

253 
NFOR
:

254 
	`evÆf‹
(
n
, 
Êags
 & ~
EV_EXIT
);

256 
NCASE
:

257 
	`evÆˇ£
(
n
, 
Êags
);

259 
NDEFUN
:

260 
	`defun
(
n
->
«rg
.
ãxt
,Ç->«rg.
√xt
);

261 
exô°©us
 = 0;

263 
NNOT
:

264 
	`evÆåì
(
n
->
¬Ÿ
.
com
, 
EV_TESTED
);

265 
exô°©us
 = !exitstatus;

268 
NPIPE
:

269 
	`evÆpùe
(
n
);

270 
do_ëe°
 = !(
Êags
 & 
EV_TESTED
);

272 
NCMD
:

273 
	`evÆcomm™d
(
n
, 
Êags
, (
backcmd
 *)
NULL
);

274 
do_ëe°
 = !(
Êags
 & 
EV_TESTED
);

277 
	`out1fmt
("Nodêty≥ = %d\n", 
n
->
ty≥
);

278 
	`Êushout
(&
ouçut
);

281 
out
:

282 i‡(
≥ndögsigs
)

283 
	`dŸøp
();

284 i‡((
Êags
 & 
EV_EXIT
Ë|| (
eÊag
 && 
exô°©us
 !0 && 
do_ëe°
))

285 
	`exôshñl
(
exô°©us
);

286 
	}
}

290 
	$evÆlo›
(
node
 *
n
, 
Êags
)

292 
°©us
;

294 
lo›√°
++;

295 
°©us
 = 0;

297 
	`evÆåì
(
n
->
nbö¨y
.
ch1
, 
EV_TESTED
);

298 i‡(
evÆskù
) {

299 
skùpög
: i‡(
evÆskù
 =
SKIPCONT
 && --
skùcou¡
 <= 0) {

300 
evÆskù
 = 0;

303 i‡(
evÆskù
 =
SKIPBREAK
 && --
skùcou¡
 <= 0)

304 
evÆskù
 = 0;

307 i‡(
n
->
ty≥
 =
NWHILE
) {

308 i‡(
exô°©us
 != 0)

311 i‡(
exô°©us
 == 0)

314 
	`evÆåì
(
n
->
nbö¨y
.
ch2
, 
Êags
);

315 
°©us
 = 
exô°©us
;

316 i‡(
evÆskù
)

317 
skùpög
;

319 
lo›√°
--;

320 
exô°©us
 = 
°©us
;

321 
	}
}

326 
	$evÆf‹
(
node
 *
n
, 
Êags
)

328 
¨gli°
árglist;

329 
node
 *
¨gp
;

330 
°æi°
 *
•
;

331 
°ackm¨k
 
sm¨k
;

333 
	`£t°ackm¨k
(&
sm¨k
);

334 
¨gli°
.
œ°p
 = &¨gli°.
li°
;

335 
¨gp
 = 
n
->
nf‹
.
¨gs
 ;árg∞;árg∞¨gp->
«rg
.
√xt
) {

336 
€xô°©us
 = 
exô°©us
;

337 
	`ex∑nd¨g
(
¨gp
, &
¨gli°
, 
EXP_FULL
 | 
EXP_TILDE
);

338 i‡(
evÆskù
)

339 
out
;

341 *
¨gli°
.
œ°p
 = 
NULL
;

343 
exô°©us
 = 0;

344 
lo›√°
++;

345 
•
 = 
¨gli°
.
li°
 ; s∞; s∞•->
√xt
) {

346 
	`£tv¨
(
n
->
nf‹
.
v¨
, 
•
->
ãxt
, 0);

347 
	`evÆåì
(
n
->
nf‹
.
body
, 
Êags
);

348 i‡(
evÆskù
) {

349 i‡(
evÆskù
 =
SKIPCONT
 && --
skùcou¡
 <= 0) {

350 
evÆskù
 = 0;

353 i‡(
evÆskù
 =
SKIPBREAK
 && --
skùcou¡
 <= 0)

354 
evÆskù
 = 0;

358 
lo›√°
--;

359 
out
:

360 
	`p›°ackm¨k
(&
sm¨k
);

361 
	}
}

366 
	$evÆˇ£
(
node
 *
n
, 
Êags
)

368 
node
 *
˝
;

369 
node
 *
∑ç
;

370 
¨gli°
árglist;

371 
°ackm¨k
 
sm¨k
;

373 
	`£t°ackm¨k
(&
sm¨k
);

374 
¨gli°
.
œ°p
 = &¨gli°.
li°
;

375 
€xô°©us
 = 
exô°©us
;

376 
exô°©us
 = 0;

377 
	`ex∑nd¨g
(
n
->
nˇ£
.
ex¥
, &
¨gli°
, 
EXP_TILDE
);

378 
˝
 = 
n
->
nˇ£
.
ˇ£s
 ; c∞&& 
evÆskù
 =0 ; c∞˝->
n˛i°
.
√xt
) {

379 
∑ç
 = 
˝
->
n˛i°
.
∑âîn
 ;Ö©∞;Ö©∞∑ç->
«rg
.
√xt
) {

380 i‡(
	`ˇ£m©ch
(
∑ç
, 
¨gli°
.
li°
->
ãxt
)) {

381 i‡(
evÆskù
 == 0) {

382 
	`evÆåì
(
˝
->
n˛i°
.
body
, 
Êags
);

384 
out
;

388 
out
:

389 
	`p›°ackm¨k
(&
sm¨k
);

390 
	}
}

399 
	$evÆsubshñl
(
node
 *
n
, 
Êags
)

401 
job
 *
jp
;

402 
backgnd
 = (
n
->
ty≥
 =
NBACKGND
);

404 
€xô°©us
 = 
exô°©us
;

405 
	`ex¥edú
(
n
->
ƒedú
.
ªdúe˘
);

406 i‡((!
backgnd
 && 
Êags
 & 
EV_EXIT
 && !
	`have_å≠s
()) ||

407 
	`f‹kshñl
(
jp
 = 
	`makejob
(
n
, 1),Ç, 
backgnd
) == 0) {

408 i‡(
backgnd
)

409 
Êags
 &=~ 
EV_TESTED
;

410 
	`ªdúe˘
(
n
->
ƒedú
.
ªdúe˘
, 0);

411 
	`evÆåì
(
n
->
ƒedú
.n, 
Êags
 | 
EV_EXIT
);

412 } i‡(! 
backgnd
) {

413 
INTOFF
;

414 
exô°©us
 = 
	`waôf‹job
(
jp
, (*)
NULL
);

415 
INTON
;

417 
	}
}

426 
	$ex¥edú
(
node
 *
n
)

428 
node
 *
ªdú
;

430 
ªdú
 = 
n
 ;Ñedú ;Ñedú =Ñedú->
nfûe
.
√xt
) {

431 
¨gli°
 
‚
;

432 
‚
.
œ°p
 = &‚.
li°
;

433 
ªdú
->
ty≥
) {

434 
NFROM
:

435 
NTO
:

436 
NFROMTO
:

437 
NAPPEND
:

438 
NCLOBBER
:

439 
	`ex∑nd¨g
(
ªdú
->
nfûe
.
‚ame
, &
‚
, 
EXP_TILDE
 | 
EXP_REDIR
);

440 
ªdú
->
nfûe
.
exp‚ame
 = 
‚
.
li°
->
ãxt
;

442 
NFROMFD
:

443 
NTOFD
:

444 i‡(
ªdú
->
ndup
.
v«me
) {

445 
	`ex∑nd¨g
(
ªdú
->
ndup
.
v«me
, &
‚
, 
EXP_TILDE
 | 
EXP_REDIR
);

446 
	`fixªdú
(
ªdú
, 
‚
.
li°
->
ãxt
, 1);

451 
	}
}

463 
	$evÆpùe
(
node
 *
n
)

465 
job
 *
jp
;

466 
nodñi°
 *
Õ
;

467 
pùñí
;

468 
¥evfd
;

469 
pù
[2];

471 
	`TRACE
(("evÆpùe(%pËˇŒed\n", (*)
n
));

472 
pùñí
 = 0;

473 
Õ
 = 
n
->
≈ùe
.
cmdli°
 ;Ü∞;Ü∞Õ->
√xt
)

474 
pùñí
++;

475 
INTOFF
;

476 
jp
 = 
	`makejob
(
n
, 
pùñí
);

477 
¥evfd
 = -1;

478 
Õ
 = 
n
->
≈ùe
.
cmdli°
 ;Ü∞;Ü∞Õ->
√xt
) {

479 
	`¥ehash
(
Õ
->
n
);

480 
pù
[1] = -1;

481 i‡(
Õ
->
√xt
) {

482 i‡(
	`pùe
(
pù
) < 0) {

483 
	`˛o£
(
¥evfd
);

484 
	`îr‹
("PùêˇŒ faûed: %s", 
	`°ªº‹
(
î∫o
));

487 i‡(
	`f‹kshñl
(
jp
, 
Õ
->
n
,Ç->
≈ùe
.
backgnd
) == 0) {

488 
INTON
;

489 i‡(
¥evfd
 > 0) {

490 
	`dup2
(
¥evfd
, 0);

491 
	`˛o£
(
¥evfd
);

493 i‡(
pù
[1] >= 0) {

494 i‡(!(
¥evfd
 >0 && 
pù
[0] == 0))

495 
	`˛o£
(
pù
[0]);

496 i‡(
pù
[1] != 1) {

497 
	`dup2
(
pù
[1], 1);

498 
	`˛o£
(
pù
[1]);

501 
	`evÆåì
(
Õ
->
n
, 
EV_EXIT
);

503 i‡(
¥evfd
 >= 0)

504 
	`˛o£
(
¥evfd
);

505 
¥evfd
 = 
pù
[0];

506 
	`˛o£
(
pù
[1]);

508 
INTON
;

509 i‡(
n
->
≈ùe
.
backgnd
 == 0) {

510 
INTOFF
;

511 
exô°©us
 = 
	`waôf‹job
(
jp
, (*)
NULL
);

512 
	`TRACE
(("evÆpùe: job d⁄êexô sètu†%d\n", 
exô°©us
));

513 
INTON
;

515 
	}
}

527 
	$evÆbackcmd
(
node
 *
n
, 
backcmd
 *
ªsu…
)

529 
pù
[2];

530 
job
 *
jp
;

531 
°ackm¨k
 
sm¨k
;

533 
	`£t°ackm¨k
(&
sm¨k
);

534 
ªsu…
->
fd
 = -1;

535 
ªsu…
->
buf
 = 
NULL
;

536 
ªsu…
->
∆e·
 = 0;

537 
ªsu…
->
jp
 = 
NULL
;

538 i‡(
n
 =
NULL
) {

539 
exô°©us
 = 0;

540 
out
;

542 i‡(
n
->
ty≥
 =
NCMD
) {

543 
exô°©us
 = 
€xô°©us
;

544 
	`evÆcomm™d
(
n
, 
EV_BACKCMD
, 
ªsu…
);

546 
exô°©us
 = 0;

547 i‡(
	`pùe
(
pù
) < 0)

548 
	`îr‹
("PùêˇŒ faûed: %s", 
	`°ªº‹
(
î∫o
));

549 
jp
 = 
	`makejob
(
n
, 1);

550 i‡(
	`f‹kshñl
(
jp
, 
n
, 
FORK_NOJOB
) == 0) {

551 
FORCEINTON
;

552 
	`˛o£
(
pù
[0]);

553 i‡(
pù
[1] != 1) {

554 
	`dup2
(
pù
[1], 1);

555 
	`˛o£
(
pù
[1]);

557 
	`evÆåì
(
n
, 
EV_EXIT
);

559 
	`˛o£
(
pù
[1]);

560 
ªsu…
->
fd
 = 
pù
[0];

561 
ªsu…
->
jp
 = jp;

563 
out
:

564 
	`p›°ackm¨k
(&
sm¨k
);

565 
	`TRACE
(("evalbackcmd done: fd=%d buf=%pÇleft=%d jp=%p\n",

566 
ªsu…
->
fd
,Ñesu…->
buf
,Ñesu…->
∆e·
,Ñesu…->
jp
));

567 
	}
}

576 
	$evÆcomm™d
(
node
 *
cmd
, 
Êags
, 
backcmd
 *backcmd)

578 
°ackm¨k
 
sm¨k
;

579 
node
 *
¨gp
;

580 
¨gli°
árglist;

581 
¨gli°
 
v¨li°
;

582 **
¨gv
;

583 
¨gc
;

584 **
ívp
;

585 
v¨Êag
;

586 
°æi°
 *
•
;

587 
mode
;

588 
pù
[2];

589 
cmdíåy
 cmdentry;

590 
job
 *
jp
;

591 
jm∂oc
 jmploc;

592 
jm∂oc
 *
ßveh™dÀr
;

593 *
ßvecmd«me
;

594 
sh∑øm
 
ßvï¨am
;

595 
loˇlv¨
 *
ßvñoˇlv¨s
;

596 vﬁ©ûê
e
;

597 *
œ°¨g
;

598 
ªÆ°©us
;

599 
do_˛órcmdíåy
;

602 
	`TRACE
(("evÆcomm™d(%p, %dËˇŒed\n", (*)
cmd
, 
Êags
));

603 
	`£t°ackm¨k
(&
sm¨k
);

604 
¨gli°
.
œ°p
 = &¨gli°.
li°
;

605 
v¨li°
.
œ°p
 = &v¨li°.
li°
;

606 
v¨Êag
 = 1;

607 
do_˛órcmdíåy
 = 0;

608 
€xô°©us
 = 
exô°©us
;

609 
exô°©us
 = 0;

610 
¨gp
 = 
cmd
->
ncmd
.
¨gs
 ;árg∞;árg∞¨gp->
«rg
.
√xt
) {

611 *
p
 = 
¨gp
->
«rg
.
ãxt
;

612 i‡(
v¨Êag
 && 
	`is_«me
(*
p
)) {

614 
p
++;

615 } 
	`is_ö_«me
(*
p
));

616 i‡(*
p
 == '=') {

617 
	`ex∑nd¨g
(
¨gp
, &
v¨li°
, 
EXP_VARTILDE
);

621 
	`ex∑nd¨g
(
¨gp
, &
¨gli°
, 
EXP_FULL
 | 
EXP_TILDE
);

622 
v¨Êag
 = 0;

624 *
¨gli°
.
œ°p
 = 
NULL
;

625 *
v¨li°
.
œ°p
 = 
NULL
;

626 
	`ex¥edú
(
cmd
->
ncmd
.
ªdúe˘
);

627 
¨gc
 = 0;

628 
•
 = 
¨gli°
.
li°
 ; s∞; s∞•->
√xt
)

629 
¨gc
++;

630 
¨gv
 = 
	`°Æloc
( (*Ë* (
¨gc
 + 1));

632 
•
 = 
¨gli°
.
li°
 ; s∞; s∞•->
√xt
) {

633 
	`TRACE
(("evÆcomm™dárg: %s\n", 
•
->
ãxt
));

634 *
¨gv
++ = 
•
->
ãxt
;

636 *
¨gv
 = 
NULL
;

637 
œ°¨g
 = 
NULL
;

638 i‡(
iÊag
 && 
fun˙e°
 =0 && 
¨gc
 > 0)

639 
œ°¨g
 = 
¨gv
[-1];

640 
¨gv
 -
¨gc
;

643 i‡(
xÊag
) {

644 
£p
 = 0;

645 c⁄° *
p
;

646 
	`out2°r
(
	`ps4vÆ
());

647 
•
 = 
v¨li°
.
li°
 ; s∞; s∞•->
√xt
) {

648 i‡(
£p
 != 0)

649 
	`outc
(' ', &
îrout
);

650 
p
 = 
•
->
ãxt
;

651 *
p
 != '=' && *p != '\0')

652 
	`out2c
(*
p
++);

653 i‡(*
p
 != '\0') {

654 
	`out2c
(*
p
++);

655 
	`out2q°r
(
p
);

657 
£p
 = ' ';

659 
•
 = 
¨gli°
.
li°
 ; s∞; s∞•->
√xt
) {

660 i‡(
£p
 != 0)

661 
	`outc
(' ', &
îrout
);

663 i‡(
•
 =
¨gli°
.
li°
 &&

664 
	`°rchr
(
•
->
ãxt
, '='Ë!
NULL
 &&

665 
	`°rchr
(
•
->
ãxt
, '\''Ë=
NULL
) {

666 
	`out2c
('\'');

667 
	`out2°r
(
•
->
ãxt
);

668 
	`out2c
('\'');

670 
	`out2q°r
(
•
->
ãxt
);

671 
£p
 = ' ';

673 
	`outc
('\n', &
îrout
);

674 
	`Êushout
(&
îrout
);

678 i‡(
¨gc
 == 0) {

680 
cmdíåy
.
cmdty≥
 = 
CMDBUILTIN
;

681 
cmdíåy
.
u
.
ödex
 = 
BLTINCMD
;

682 
cmdíåy
.
•ecül
 = 1;

684 c⁄° 
PATH
[] = "PATH=";

685 *
∑th
 = 
	`∑thvÆ
();

691 
•
 = 
v¨li°
.
li°
 ; s∞; s∞•->
√xt
)

692 i‡(
	`°∫cmp
(
•
->
ãxt
, 
PATH
, (PATH) - 1) == 0) {

693 
∑th
 = 
•
->
ãxt
 + (
PATH
) - 1;

712 
	`˛órcmdíåy
(0);

713 
do_˛órcmdíåy
 = 1;

716 
	`föd_comm™d
(
¨gv
[0], &
cmdíåy
, 1, 
∑th
);

717 i‡(
cmdíåy
.
cmdty≥
 =
CMDUNKNOWN
) {

718 
exô°©us
 = 127;

719 
	`Êushout
(&
îrout
);

723 i‡(
cmdíåy
.
cmdty≥
 =
CMDBUILTIN
 && cmdíåy.
u
.
ödex
 =
BLTINCMD
) {

725 
¨gv
++;

726 i‡(--
¨gc
 == 0)

728 i‡((
cmdíåy
.
u
.
ödex
 = 
	`föd_buûtö
(*
¨gv
,

729 &
cmdíåy
.
•ecül
)) < 0) {

730 
	`outfmt
(&
îrout
, "%s:ÇŸ found\n", *
¨gv
);

731 
exô°©us
 = 127;

732 
	`Êushout
(&
îrout
);

735 i‡(
cmdíåy
.
u
.
ödex
 !
BLTINCMD
)

742 i‡(
cmd
->
ncmd
.
backgnd


743 || (
cmdíåy
.
cmdty≥
 =
CMDNORMAL


744 && ((
Êags
 & 
EV_EXIT
Ë=0 || 
	`have_å≠s
()))

745 || ((
Êags
 & 
EV_BACKCMD
) != 0

746 && (
cmdíåy
.
cmdty≥
 !
CMDBUILTIN


747 || 
cmdíåy
.
u
.
ödex
 =
CDCMD


748 || 
cmdíåy
.
u
.
ödex
 =
DOTCMD


749 || 
cmdíåy
.
u
.
ödex
 =
EVALCMD
))

750 || (
cmdíåy
.
cmdty≥
 =
CMDBUILTIN
 &&

751 
cmdíåy
.
u
.
ödex
 =
COMMANDCMD
)) {

752 
jp
 = 
	`makejob
(
cmd
, 1);

753 
mode
 = 
cmd
->
ncmd
.
backgnd
;

754 i‡(
Êags
 & 
EV_BACKCMD
) {

755 
mode
 = 
FORK_NOJOB
;

756 i‡(
	`pùe
(
pù
) < 0)

757 
	`îr‹
("PùêˇŒ faûed: %s", 
	`°ªº‹
(
î∫o
));

759 i‡(
	`f‹kshñl
(
jp
, 
cmd
, 
mode
) != 0)

760 
∑ª¡
;

761 i‡(
Êags
 & 
EV_BACKCMD
) {

762 
FORCEINTON
;

763 
	`˛o£
(
pù
[0]);

764 i‡(
pù
[1] != 1) {

765 
	`dup2
(
pù
[1], 1);

766 
	`˛o£
(
pù
[1]);

769 
Êags
 |
EV_EXIT
;

774 i‡(
cmdíåy
.
cmdty≥
 =
CMDFUNCTION
) {

775 #ifde‡
DEBUG


776 
	`åputs
("Shñ»fun˘i⁄: "); 
	`å¨gs
(
¨gv
);

778 
	`ªdúe˘
(
cmd
->
ncmd
.
ªdúe˘
, 
REDIR_PUSH
);

779 
ßvï¨am
 = 
shñÕ¨am
;

780 
shñÕ¨am
.
mÆloc
 = 0;

781 
shñÕ¨am
.
ª£t
 = 1;

782 
shñÕ¨am
.
≈¨am
 = 
¨gc
 - 1;

783 
shñÕ¨am
.
p
 = 
¨gv
 + 1;

784 
shñÕ¨am
.
›äext
 = 
NULL
;

785 
INTOFF
;

786 
ßvñoˇlv¨s
 = 
loˇlv¨s
;

787 
loˇlv¨s
 = 
NULL
;

788 
	`ªffunc
(
cmdíåy
.
u
.
func
);

789 
INTON
;

790 
ßveh™dÀr
 = 
h™dÀr
;

791 i‡(
	`£tjmp
(
jm∂oc
.
loc
)) {

792 i‡(
ex˚±i⁄
 =
EXSHELLPROC
)

793 
	`‰ì∑øm
(&
ßvï¨am
);

795 
	`‰ì∑øm
(&
shñÕ¨am
);

796 
shñÕ¨am
 = 
ßvï¨am
;

798 
	`uƒeffunc
(
cmdíåy
.
u
.
func
);

799 
	`p›loˇlv¨s
();

800 
loˇlv¨s
 = 
ßvñoˇlv¨s
;

801 
h™dÀr
 = 
ßveh™dÀr
;

802 
	`l⁄gjmp
(
h™dÀr
->
loc
, 1);

804 
h™dÀr
 = &
jm∂oc
;

805 
•
 = 
v¨li°
.
li°
 ; s∞; s∞•->
√xt
)

806 
	`mkloˇl
(
•
->
ãxt
);

807 
fun˙e°
++;

808 
exô°©us
 = 
€xô°©us
;

809 i‡(
Êags
 & 
EV_TESTED
)

810 
	`evÆåì
(
	`gëfun˙ode
(
cmdíåy
.
u
.
func
), 
EV_TESTED
);

812 
	`evÆåì
(
	`gëfun˙ode
(
cmdíåy
.
u
.
func
), 0);

813 
fun˙e°
--;

814 
INTOFF
;

815 
	`uƒeffunc
(
cmdíåy
.
u
.
func
);

816 
	`p›loˇlv¨s
();

817 
loˇlv¨s
 = 
ßvñoˇlv¨s
;

818 
	`‰ì∑øm
(&
shñÕ¨am
);

819 
shñÕ¨am
 = 
ßvï¨am
;

820 
h™dÀr
 = 
ßveh™dÀr
;

821 
	`p›ªdú
();

822 
INTON
;

823 i‡(
evÆskù
 =
SKIPFUNC
) {

824 
evÆskù
 = 0;

825 
skùcou¡
 = 0;

827 i‡(
Êags
 & 
EV_EXIT
)

828 
	`exôshñl
(
exô°©us
);

829 } i‡(
cmdíåy
.
cmdty≥
 =
CMDBUILTIN
) {

830 #ifde‡
DEBUG


831 
	`åputs
("buûtö comm™d: "); 
	`å¨gs
(
¨gv
);

833 
mode
 = (
cmdíåy
.
u
.
ödex
 =
EXECCMD
)? 0 : 
REDIR_PUSH
;

834 i‡(
Êags
 =
EV_BACKCMD
) {

835 
memout
.
∆e·
 = 0;

836 
memout
.
√xtc
 = memout.
buf
;

837 
memout
.
bufsize
 = 64;

838 
mode
 |
REDIR_BACKQ
;

840 
ßvecmd«me
 = 
comm™d«me
;

841 
cmdívú⁄
 = 
v¨li°
.
li°
;

842 
e
 = -1;

843 
ßveh™dÀr
 = 
h™dÀr
;

844 i‡(
	`£tjmp
(
jm∂oc
.
loc
)) {

845 
e
 = 
ex˚±i⁄
;

846 
exô°©us
 = (
e
 =
EXINT
)? 
SIGINT
+128 : 2;

847 
cmdd⁄e
;

849 
h™dÀr
 = &
jm∂oc
;

850 
	`ªdúe˘
(
cmd
->
ncmd
.
ªdúe˘
, 
mode
);

851 i‡(
cmdíåy
.
•ecül
)

852 
	`li°£tv¨
(
cmdívú⁄
);

853 
comm™d«me
 = 
¨gv
[0];

854 
¨g±r
 = 
¨gv
 + 1;

855 
√xt›t_›çå
 = 
NULL
;

856 
buûtö_Êags
 = 
Êags
;

857 
exô°©us
 = (*
buûtöfunc
[
cmdíåy
.
u
.
ödex
])(
¨gc
, 
¨gv
);

858 
	`ÊushÆl
();

859 
cmdd⁄e
:

860 
cmdívú⁄
 = 
NULL
;

861 
out1
 = &
ouçut
;

862 
out2
 = &
îrout
;

863 
	`‰ì°dout
();

864 i‡(
e
 !
EXSHELLPROC
) {

865 
comm™d«me
 = 
ßvecmd«me
;

866 i‡(
Êags
 & 
EV_EXIT
) {

867 
	`exôshñl
(
exô°©us
);

870 
h™dÀr
 = 
ßveh™dÀr
;

871 i‡(
e
 != -1) {

872 i‡((
e
 !
EXERROR
 &&É !
EXEXEC
)

873 || 
cmdíåy
.
•ecül
)

874 
	`exøi£
(
e
);

875 
FORCEINTON
;

877 i‡(
cmdíåy
.
u
.
ödex
 !
EXECCMD
)

878 
	`p›ªdú
();

879 i‡(
Êags
 =
EV_BACKCMD
) {

880 
backcmd
->
buf
 = 
memout
.buf;

881 
backcmd
->
∆e·
 = 
memout
.
√xtc
 - memout.
buf
;

882 
memout
.
buf
 = 
NULL
;

885 #ifde‡
DEBUG


886 
	`åputs
("n‹mÆ comm™d: "); 
	`å¨gs
(
¨gv
);

888 
	`˛óºedú
();

889 
	`ªdúe˘
(
cmd
->
ncmd
.
ªdúe˘
, 0);

890 
•
 = 
v¨li°
.
li°
 ; s∞; s∞•->
√xt
)

891 
	`£tv¨eq
(
•
->
ãxt
, 
VEXPORT
|
VSTACK
);

892 
ívp
 = 
	`ívú⁄mít
();

893 
	`shñÀxec
(
¨gv
, 
ívp
, 
	`∑thvÆ
(), 
cmdíåy
.
u
.
ödex
);

896 
out
;

898 
∑ª¡
:

899 i‡(
mode
 =
FORK_FG
) {

900 
INTOFF
;

901 
exô°©us
 = 
	`waôf‹job
(
jp
, &
ªÆ°©us
);

902 
INTON
;

903 i‡(
iÊag
 && 
lo›√°
 > 0 && 
	`WIFSIGNALED
(
ªÆ°©us
)) {

904 
evÆskù
 = 
SKIPBREAK
;

905 
skùcou¡
 = 
lo›√°
;

907 } i‡(
mode
 =
FORK_NOJOB
) {

908 
backcmd
->
fd
 = 
pù
[0];

909 
	`˛o£
(
pù
[1]);

910 
backcmd
->
jp
 = jp;

913 
out
:

914 i‡(
œ°¨g
)

915 
	`£tv¨
("_", 
œ°¨g
, 0);

916 i‡(
do_˛órcmdíåy
)

917 
	`˛órcmdíåy
(0);

918 
	`p›°ackm¨k
(&
sm¨k
);

919 
	}
}

931 
	$¥ehash
(
node
 *
n
)

933 
cmdíåy
 
íåy
;

935 i‡(
n
 &&Ç->
ty≥
 =
NCMD
 &&Ç->
ncmd
.
¨gs
)

936 i‡(
	`good«me
(
n
->
ncmd
.
¨gs
->
«rg
.
ãxt
))

937 
	`föd_comm™d
(
n
->
ncmd
.
¨gs
->
«rg
.
ãxt
, &
íåy
, 0,

938 
	`∑thvÆ
());

939 
	}
}

953 
	$b…öcmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

959  
exô°©us
;

960 
	}
}

975 
	$bªakcmd
(
¨gc
, **
¨gv
)

977 
n
 = 
¨gc
 > 1 ? 
	`numbî
(
¨gv
[1]) : 1;

979 i‡(
n
 > 
lo›√°
)

980 
n
 = 
lo›√°
;

981 i‡(
n
 > 0) {

982 
evÆskù
 = (**
¨gv
 ='c')? 
SKIPCONT
 : 
SKIPBREAK
;

983 
skùcou¡
 = 
n
;

986 
	}
}

992 
	$comm™dcmd
(
¨gc
, **
¨gv
)

994 
°d∑th
[] = 
_PATH_STDPATH
;

995 
jm∂oc
 
loc
, *
ﬁd
;

996 
°æi°
 *
•
;

997 *
∑th
;

998 
ch
;

999 
cmd
 = -1;

1001 
•
 = 
cmdívú⁄
; s∞; s∞•->
√xt
)

1002 
	`£tv¨eq
(
•
->
ãxt
, 
VEXPORT
|
VSTACK
);

1003 
∑th
 = 
	`∑thvÆ
();

1005 
›töd
 = 
›åe£t
 = 1;

1006 
›ãº
 = 0;

1007 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "pvV")) != -1) {

1008 
ch
) {

1010 
∑th
 = 
°d∑th
;

1013 
cmd
 = 
TYPECMD_SMALLV
;

1016 
cmd
 = 
TYPECMD_BIGV
;

1020 
	`îr‹
("unknow¿›ti⁄: -%c", 
›t›t
);

1023 
¨gc
 -
›töd
;

1024 
¨gv
 +
›töd
;

1026 i‡(
cmd
 != -1) {

1027 i‡(
¨gc
 != 1)

1028 
	`îr‹
("wrongÇumber ofárguments");

1029  
	`ty≥cmd_im∂
(2, 
¨gv
 - 1, 
cmd
);

1031 i‡(
¨gc
 != 0) {

1032 
ﬁd
 = 
h™dÀr
;

1033 
h™dÀr
 = &
loc
;

1034 i‡(
	`£tjmp
(
h™dÀr
->
loc
) == 0)

1035 
	`shñÀxec
(
¨gv
, 
	`ívú⁄mít
(), 
∑th
, 0);

1036 
h™dÀr
 = 
ﬁd
;

1037 i‡(
ex˚±i⁄
 =
EXEXEC
)

1038 
	`exô
(
exî∫o
);

1039 
	`exøi£
(
ex˚±i⁄
);

1046 
	`exô
(0);

1047 
	}
}

1055 
	$ªtu∫cmd
(
¨gc
, **
¨gv
)

1057 
ªt
 = 
¨gc
 > 1 ? 
	`numbî
(
¨gv
[1]Ë: 
€xô°©us
;

1059 i‡(
fun˙e°
) {

1060 
evÆskù
 = 
SKIPFUNC
;

1061 
skùcou¡
 = 1;

1064 
evÆskù
 = 
SKIPFILE
;

1065 
skùcou¡
 = 1;

1067  
ªt
;

1068 
	}
}

1072 
	$Ál£cmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

1075 
	}
}

1079 
	$åuecmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

1082 
	}
}

1086 
	$execcmd
(
¨gc
, **
¨gv
)

1088 i‡(
¨gc
 > 1) {

1089 
°æi°
 *
•
;

1091 
iÊag
 = 0;

1092 
mÊag
 = 0;

1093 
	`›tsch™ged
();

1094 
•
 = 
cmdívú⁄
; s∞; s∞•->
√xt
)

1095 
	`£tv¨eq
(
•
->
ãxt
, 
VEXPORT
|
VSTACK
);

1096 
	`shñÀxec
(
¨gv
 + 1, 
	`ívú⁄mít
(), 
	`∑thvÆ
(), 0);

1100 
	}
}

1104 
	$timescmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

1106 
rußge
 
ru
;

1107 
shumös
, 
shsmös
, 
chumös
, 
chsmös
;

1108 
shu£cs
, 
shs£cs
, 
chu£cs
, 
chs£cs
;

1110 i‡(
	`gërußge
(
RUSAGE_SELF
, &
ru
) < 0)

1112 
shumös
 = 
ru
.
ru_utime
.
tv_£c
 / 60;

1113 
shu£cs
 = 
ru
.
ru_utime
.
tv_£c
 % 60 +Ñu.ru_utime.
tv_u£c
 / 1000000.;

1114 
shsmös
 = 
ru
.
ru_°ime
.
tv_£c
 / 60;

1115 
shs£cs
 = 
ru
.
ru_°ime
.
tv_£c
 % 60 +Ñu.ru_°ime.
tv_u£c
 / 1000000.;

1116 i‡(
	`gërußge
(
RUSAGE_CHILDREN
, &
ru
) < 0)

1118 
chumös
 = 
ru
.
ru_utime
.
tv_£c
 / 60;

1119 
chu£cs
 = 
ru
.
ru_utime
.
tv_£c
 % 60 +Ñu.ru_utime.
tv_u£c
 / 1000000.;

1120 
chsmös
 = 
ru
.
ru_°ime
.
tv_£c
 / 60;

1121 
chs£cs
 = 
ru
.
ru_°ime
.
tv_£c
 % 60 +Ñu.ru_°ime.
tv_u£c
 / 1000000.;

1122 
	`out1fmt
("%ldm%.3f†%ldm%.3fs\n%ldm%.3f†%ldm%.3fs\n", 
shumös
,

1123 
shu£cs
, 
shsmös
, 
shs£cs
, 
chumös
, 
chu£cs
, 
chsmös
, 
chs£cs
);

1125 
	}
}

	@sh/eval.h

36 *
comm™d«me
;

37 
exô°©us
;

38 
€xô°©us
;

39 
°æi°
 *
cmdívú⁄
;

42 
	sbackcmd
 {

43 
	mfd
;

44 *
	mbuf
;

45 
	m∆e·
;

46 
job
 *
	mjp
;

50 
	#EV_EXIT
 01

	)

51 
	#EV_TESTED
 02

	)

52 
	#EV_BACKCMD
 04

	)

54 
evÆcmd
(, **);

55 
evÆ°rög
(*, );

56 
	gnode
;

57 
evÆåì
(
node
 *, );

58 
evÆbackcmd
(
node
 *, 
backcmd
 *);

59 
b…öcmd
(, **);

60 
bªakcmd
(, **);

61 
ªtu∫cmd
(, **);

62 
Ál£cmd
(, **);

63 
åuecmd
(, **);

64 
execcmd
(, **);

65 
timescmd
(, **);

66 
comm™dcmd
(, **);

69 
	#ö_fun˘i⁄
(Ë
fun˙e°


	)

70 
fun˙e°
;

71 
evÆskù
;

72 
skùcou¡
;

75 
	#SKIPBREAK
 1

	)

76 
	#SKIPCONT
 2

	)

77 
	#SKIPFUNC
 3

	)

78 
	#SKIPFILE
 4

	)

	@sh/exec.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)exec.c 8.4 (Berkeley) 6/8/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/exec.c,v 1.34.2.5.4.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sys/ty≥s.h
>

42 
	~<sys/°©.h
>

43 
	~<uni°d.h
>

44 
	~<f˙é.h
>

45 
	~<î∫o.h
>

46 
	~<°dlib.h
>

57 
	~"shñl.h
"

58 
	~"maö.h
"

59 
	~"nodes.h
"

60 
	~"∑r£r.h
"

61 
	~"ªdú.h
"

62 
	~"evÆ.h
"

63 
	~"exec.h
"

64 
	~"buûtös.h
"

65 
	~"v¨.h
"

66 
	~"›ti⁄s.h
"

67 
	~"öput.h
"

68 
	~"ouçut.h
"

69 
	~"sy¡ax.h
"

70 
	~"memÆloc.h
"

71 
	~"îr‹.h
"

72 
	~"öô.h
"

73 
	~"my°rög.h
"

74 
	~"show.h
"

75 
	~"jobs.h
"

76 
	~"Æüs.h
"

79 
	#CMDTABLESIZE
 31

	)

80 
	#ARB
 1

	)

84 
	stbÀ¡ry
 {

85 
tbÀ¡ry
 *
	m√xt
;

86 
∑øm
 
	m∑øm
;

87 
	m•ecül
;

88 
	mcmdty≥
;

89 
	mªhash
;

90 
	mcmd«me
[
ARB
];

94 
tbÀ¡ry
 *
	gcmdèbÀ
[
CMDTABLESIZE
];

95 
	gbuûtöloc
 = -1;

96 
	gexî∫o
 = 0;

99 
åyexec
(*, **, **);

100 
¥öã¡ry
(
tbÀ¡ry
 *, );

101 
tbÀ¡ry
 *
cmdlookup
(const *, );

102 
dñëe_cmd_íåy
();

112 
	$shñÀxec
(**
¨gv
, **
ívp
, c⁄° *
∑th
, 
idx
)

114 *
cmd«me
;

115 
e
;

117 i‡(
	`°rchr
(
¨gv
[0], '/'Ë!
NULL
) {

118 
	`åyexec
(
¨gv
[0],árgv, 
ívp
);

119 
e
 = 
î∫o
;

121 
e
 = 
ENOENT
;

122 (
cmd«me
 = 
	`∑dv™˚
(&
∑th
, 
¨gv
[0])Ë!
NULL
) {

123 i‡(--
idx
 < 0 && 
∑th›t
 =
NULL
) {

124 
	`åyexec
(
cmd«me
, 
¨gv
, 
ívp
);

125 i‡(
î∫o
 !
ENOENT
 &&Éºnÿ!
ENOTDIR
)

126 
e
 = 
î∫o
;

128 
	`°u«Œoc
(
cmd«me
);

133 
e
) {

134 
EACCES
:

135 
exî∫o
 = 126;

137 
ENOENT
:

138 
exî∫o
 = 127;

141 
exî∫o
 = 2;

144 i‡(
e
 =
ENOENT
 ||É =
ENOTDIR
)

145 
	`exîr‹
(
EXEXEC
, "%s:ÇŸ found", 
¨gv
[0]);

146 
	`exîr‹
(
EXEXEC
, "%s: %s", 
¨gv
[0], 
	`°ªº‹
(
e
));

147 
	}
}

151 
	$åyexec
(*
cmd
, **
¨gv
, **
ívp
)

153 
e
;

155 
	`execve
(
cmd
, 
¨gv
, 
ívp
);

156 
e
 = 
î∫o
;

157 i‡(
e
 =
ENOEXEC
) {

158 
	`öôshñÕroc
();

159 
	`£töputfûe
(
cmd
, 0);

160 
comm™d«me
 = 
¨g0
 = 
	`ßve°r
(
¨gv
[0]);

161 
	`£ç¨am
(
¨gv
 + 1);

162 
	`exøi£
(
EXSHELLPROC
);

165 
î∫o
 = 
e
;

166 
	}
}

178 c⁄° *
	g∑th›t
;

181 
	$∑dv™˚
(c⁄° **
∑th
, c⁄° *
«me
)

183 c⁄° *
p
, *
°¨t
;

184 *
q
;

185 
Àn
;

187 i‡(*
∑th
 =
NULL
)

188  
NULL
;

189 
°¨t
 = *
∑th
;

190 
p
 = 
°¨t
; *p && *p != ':' && *p != '%';Ö++)

192 
Àn
 = 
p
 - 
°¨t
 + 
	`°æí
(
«me
) + 2;

193 
	`°ackblocksize
(Ë< 
Àn
)

194 
	`grow°ackblock
();

195 
q
 = 
	`°ackblock
();

196 i‡(
p
 !
°¨t
) {

197 
	`mem˝y
(
q
, 
°¨t
, 
p
 - start);

198 
q
 +
p
 - 
°¨t
;

199 *
q
++ = '/';

201 
	`°r˝y
(
q
, 
«me
);

202 
∑th›t
 = 
NULL
;

203 i‡(*
p
 == '%') {

204 
∑th›t
 = ++
p
;

205 *
p
 && *p != ':')Ö++;

207 i‡(*
p
 == ':')

208 *
∑th
 = 
p
 + 1;

210 *
∑th
 = 
NULL
;

211  
	`°Æloc
(
Àn
);

212 
	}
}

220 
	$hashcmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

222 
tbÀ¡ry
 **
µ
;

223 
tbÀ¡ry
 *
cmdp
;

224 
c
;

225 
vîbo£
;

226 
cmdíåy
 
íåy
;

227 *
«me
;

229 
vîbo£
 = 0;

230 (
c
 = 
	`√xt›t
("rv")) != '\0') {

231 i‡(
c
 == 'r') {

232 
	`˛órcmdíåy
(0);

233 } i‡(
c
 == 'v') {

234 
vîbo£
++;

237 i‡(*
¨g±r
 =
NULL
) {

238 
µ
 = 
cmdèbÀ
 ;Ö∞< &cmdèbÀ[
CMDTABLESIZE
] ;Öp++) {

239 
cmdp
 = *
µ
 ; cmd∞; cmd∞cmdp->
√xt
) {

240 i‡(
cmdp
->
cmdty≥
 =
CMDNORMAL
)

241 
	`¥öã¡ry
(
cmdp
, 
vîbo£
);

246 (
«me
 = *
¨g±r
Ë!
NULL
) {

247 i‡((
cmdp
 = 
	`cmdlookup
(
«me
, 0)Ë!
NULL


248 && (
cmdp
->
cmdty≥
 =
CMDNORMAL


249 || (
cmdp
->
cmdty≥
 =
CMDBUILTIN
 && 
buûtöloc
 >= 0)))

250 
	`dñëe_cmd_íåy
();

251 
	`föd_comm™d
(
«me
, &
íåy
, 1, 
	`∑thvÆ
());

252 i‡(
vîbo£
) {

253 i‡(
íåy
.
cmdty≥
 !
CMDUNKNOWN
) {

254 
cmdp
 = 
	`cmdlookup
(
«me
, 0);

255 i‡(
cmdp
 !
NULL
)

256 
	`¥öã¡ry
(
cmdp
, 
vîbo£
);

258 
	`outfmt
(&
îrout
, "%s:ÇŸ found\n", 
«me
);

260 
	`ÊushÆl
();

262 
¨g±r
++;

265 
	}
}

269 
	$¥öã¡ry
(
tbÀ¡ry
 *
cmdp
, 
vîbo£
)

271 
idx
;

272 c⁄° *
∑th
;

273 *
«me
;

275 i‡(
cmdp
->
cmdty≥
 =
CMDNORMAL
) {

276 
idx
 = 
cmdp
->
∑øm
.
ödex
;

277 
∑th
 = 
	`∑thvÆ
();

279 
«me
 = 
	`∑dv™˚
(&
∑th
, 
cmdp
->
cmd«me
);

280 
	`°u«Œoc
(
«me
);

281 } --
idx
 >= 0);

282 
	`out1°r
(
«me
);

283 } i‡(
cmdp
->
cmdty≥
 =
CMDBUILTIN
) {

284 
	`out1fmt
("buûtö %s", 
cmdp
->
cmd«me
);

285 } i‡(
cmdp
->
cmdty≥
 =
CMDFUNCTION
) {

286 
	`out1fmt
("fun˘i⁄ %s", 
cmdp
->
cmd«me
);

287 i‡(
vîbo£
) {

288 
INTOFF
;

289 
«me
 = 
	`comm™dãxt
(
	`gëfun˙ode
(
cmdp
->
∑øm
.
func
));

290 
	`out1c
(' ');

291 
	`out1°r
(
«me
);

292 
	`ck‰ì
(
«me
);

293 
INTON
;

295 #ifde‡
DEBUG


297 
	`îr‹
("öã∫ÆÉº‹: cmdty≥ %d", 
cmdp
->
cmdty≥
);

300 i‡(
cmdp
->
ªhash
)

301 
	`out1c
('*');

302 
	`out1c
('\n');

303 
	}
}

313 
	$föd_comm™d
(c⁄° *
«me
, 
cmdíåy
 *
íåy
, 
¥öãº
,

314 c⁄° *
∑th
)

316 
tbÀ¡ry
 *
cmdp
;

317 
idx
;

318 
¥ev
;

319 *
fuŒ«me
;

320 
°©
 
°©b
;

321 
e
;

322 
i
;

323 
•ec
;

326 i‡(
	`°rchr
(
«me
, '/'Ë!
NULL
) {

327 
íåy
->
cmdty≥
 = 
CMDNORMAL
;

328 
íåy
->
u
.
ödex
 = 0;

333 i‡((
cmdp
 = 
	`cmdlookup
(
«me
, 0)Ë!
NULL
 && cmdp->
ªhash
 == 0)

334 
suc˚ss
;

337 i‡(
buûtöloc
 < 0 && (
i
 = 
	`föd_buûtö
(
«me
, &
•ec
)) >= 0) {

338 
INTOFF
;

339 
cmdp
 = 
	`cmdlookup
(
«me
, 1);

340 
cmdp
->
cmdty≥
 = 
CMDBUILTIN
;

341 
cmdp
->
∑øm
.
ödex
 = 
i
;

342 
cmdp
->
•ecül
 = 
•ec
;

343 
INTON
;

344 
suc˚ss
;

348 
¥ev
 = -1;

349 i‡(
cmdp
) {

350 i‡(
cmdp
->
cmdty≥
 =
CMDBUILTIN
)

351 
¥ev
 = 
buûtöloc
;

353 
¥ev
 = 
cmdp
->
∑øm
.
ödex
;

356 
e
 = 
ENOENT
;

357 
idx
 = -1;

358 
lo›
:

359 (
fuŒ«me
 = 
	`∑dv™˚
(&
∑th
, 
«me
)Ë!
NULL
) {

360 
	`°u«Œoc
(
fuŒ«me
);

361 
idx
++;

362 i‡(
∑th›t
) {

363 i‡(
	`¥efix
("buûtö", 
∑th›t
)) {

364 i‡((
i
 = 
	`föd_buûtö
(
«me
, &
•ec
)) < 0)

365 
lo›
;

366 
INTOFF
;

367 
cmdp
 = 
	`cmdlookup
(
«me
, 1);

368 
cmdp
->
cmdty≥
 = 
CMDBUILTIN
;

369 
cmdp
->
∑øm
.
ödex
 = 
i
;

370 
cmdp
->
•ecül
 = 
•ec
;

371 
INTON
;

372 
suc˚ss
;

373 } i‡(
	`¥efix
("func", 
∑th›t
)) {

376 
lo›
;

380 i‡(
fuŒ«me
[0] ='/' && 
idx
 <
¥ev
) {

381 i‡(
idx
 < 
¥ev
)

382 
lo›
;

383 
	`TRACE
(("£¨chexe¯\"%s\":Çÿch™ge\n", 
«me
));

384 
suc˚ss
;

386 i‡(
	`°©
(
fuŒ«me
, &
°©b
) < 0) {

387 i‡(
î∫o
 !
ENOENT
 &&Éºnÿ!
ENOTDIR
)

388 
e
 = 
î∫o
;

389 
lo›
;

391 
e
 = 
EACCES
;

392 i‡(!
	`S_ISREG
(
°©b
.
°_mode
))

393 
lo›
;

394 i‡(
∑th›t
) {

395 
	`°Æloc
(
	`°æí
(
fuŒ«me
) + 1);

396 
	`ªadcmdfûe
(
fuŒ«me
);

397 i‡((
cmdp
 = 
	`cmdlookup
(
«me
, 0)Ë=
NULL
 || cmdp->
cmdty≥
 !
CMDFUNCTION
)

398 
	`îr‹
("%†nŸ deföed i¿%s", 
«me
, 
fuŒ«me
);

399 
	`°u«Œoc
(
fuŒ«me
);

400 
suc˚ss
;

402 #ifde‡
nŸdef


403 i‡(
°©b
.
°_uid
 =
	`gëeuid
()) {

404 i‡((
°©b
.
°_mode
 & 0100) == 0)

405 
lo›
;

406 } i‡(
°©b
.
°_gid
 =
	`gëegid
()) {

407 i‡((
°©b
.
°_mode
 & 010) == 0)

408 
lo›
;

410 i‡((
°©b
.
°_mode
 & 01) == 0)

411 
lo›
;

414 
	`TRACE
(("£¨chexe¯\"%s\"Ñëu∫†\"%s\"\n", 
«me
, 
fuŒ«me
));

415 
INTOFF
;

416 
cmdp
 = 
	`cmdlookup
(
«me
, 1);

417 
cmdp
->
cmdty≥
 = 
CMDNORMAL
;

418 
cmdp
->
∑øm
.
ödex
 = 
idx
;

419 
INTON
;

420 
suc˚ss
;

424 i‡(
cmdp
)

425 
	`dñëe_cmd_íåy
();

426 i‡(
¥öãº
) {

427 i‡(
e
 =
ENOENT
 ||É =
ENOTDIR
)

428 
	`outfmt
(
out2
, "%s:ÇŸ found\n", 
«me
);

430 
	`outfmt
(
out2
, "%s: %s\n", 
«me
, 
	`°ªº‹
(
e
));

432 
íåy
->
cmdty≥
 = 
CMDUNKNOWN
;

435 
suc˚ss
:

436 
cmdp
->
ªhash
 = 0;

437 
íåy
->
cmdty≥
 = 
cmdp
->cmdtype;

438 
íåy
->
u
 = 
cmdp
->
∑øm
;

439 
íåy
->
•ecül
 = 
cmdp
->special;

440 
	}
}

449 
	$föd_buûtö
(c⁄° *
«me
, *
•ecül
)

451 c⁄° 
buûtöcmd
 *
bp
;

453 
bp
 = 
buûtöcmd
 ; bp->
«me
 ; bp++) {

454 i‡(*
bp
->
«me
 =*«mê&& 
	`equÆ
(bp->name,Çame)) {

455 *
•ecül
 = 
bp
->special;

456  
bp
->
code
;

460 
	}
}

470 
	$hashcd
()

472 
tbÀ¡ry
 **
µ
;

473 
tbÀ¡ry
 *
cmdp
;

475 
µ
 = 
cmdèbÀ
 ;Ö∞< &cmdèbÀ[
CMDTABLESIZE
] ;Öp++) {

476 
cmdp
 = *
µ
 ; cmd∞; cmd∞cmdp->
√xt
) {

477 i‡(
cmdp
->
cmdty≥
 =
CMDNORMAL


478 || (
cmdp
->
cmdty≥
 =
CMDBUILTIN
 && 
buûtöloc
 >= 0))

479 
cmdp
->
ªhash
 = 1;

482 
	}
}

493 
	$ch™gï©h
(c⁄° *
√wvÆ
)

495 c⁄° *
ﬁd
, *
√w
;

496 
idx
;

497 
fú°ch™ge
;

498 
b…ö
;

500 
ﬁd
 = 
	`∑thvÆ
();

501 
√w
 = 
√wvÆ
;

502 
fú°ch™ge
 = 9999;

503 
idx
 = 0;

504 
b…ö
 = -1;

506 i‡(*
ﬁd
 !*
√w
) {

507 
fú°ch™ge
 = 
idx
;

508 i‡((*
ﬁd
 ='\0' && *
√w
 == ':')

509 || (*
ﬁd
 =':' && *
√w
 == '\0'))

510 
fú°ch™ge
++;

511 
ﬁd
 = 
√w
;

513 i‡(*
√w
 == '\0')

515 i‡(*
√w
 ='%' && 
b…ö
 < 0 && 
	`¥efix
("builtin",Çew + 1))

516 
b…ö
 = 
idx
;

517 i‡(*
√w
 == ':') {

518 
idx
++;

520 
√w
++, 
ﬁd
++;

522 i‡(
buûtöloc
 < 0 && 
b…ö
 >= 0)

523 
buûtöloc
 = 
b…ö
;

524 i‡(
buûtöloc
 >0 && 
b…ö
 < 0)

525 
fú°ch™ge
 = 0;

526 
	`˛órcmdíåy
(
fú°ch™ge
);

527 
buûtöloc
 = 
b…ö
;

528 
	}
}

537 
	$˛órcmdíåy
(
fú°ch™ge
)

539 
tbÀ¡ry
 **
tbÕ
;

540 
tbÀ¡ry
 **
µ
;

541 
tbÀ¡ry
 *
cmdp
;

543 
INTOFF
;

544 
tbÕ
 = 
cmdèbÀ
 ;ÅbÕ < &cmdèbÀ[
CMDTABLESIZE
] ;Åblp++) {

545 
µ
 = 
tbÕ
;

546 (
cmdp
 = *
µ
Ë!
NULL
) {

547 i‡((
cmdp
->
cmdty≥
 =
CMDNORMAL
 &&

548 
cmdp
->
∑øm
.
ödex
 >
fú°ch™ge
)

549 || (
cmdp
->
cmdty≥
 =
CMDBUILTIN
 &&

550 
buûtöloc
 >
fú°ch™ge
)) {

551 *
µ
 = 
cmdp
->
√xt
;

552 
	`ck‰ì
(
cmdp
);

554 
µ
 = &
cmdp
->
√xt
;

558 
INTON
;

559 
	}
}

566 #ifde‡
mköô


567 
MKINIT
 
dñëefuncs
();

569 
	gSHELLPROC
 {

570 
dñëefuncs
();

575 
	$dñëefuncs
()

577 
tbÀ¡ry
 **
tbÕ
;

578 
tbÀ¡ry
 **
µ
;

579 
tbÀ¡ry
 *
cmdp
;

581 
INTOFF
;

582 
tbÕ
 = 
cmdèbÀ
 ;ÅbÕ < &cmdèbÀ[
CMDTABLESIZE
] ;Åblp++) {

583 
µ
 = 
tbÕ
;

584 (
cmdp
 = *
µ
Ë!
NULL
) {

585 i‡(
cmdp
->
cmdty≥
 =
CMDFUNCTION
) {

586 *
µ
 = 
cmdp
->
√xt
;

587 
	`uƒeffunc
(
cmdp
->
∑øm
.
func
);

588 
	`ck‰ì
(
cmdp
);

590 
µ
 = &
cmdp
->
√xt
;

594 
INTON
;

595 
	}
}

607 
tbÀ¡ry
 **
	gœ°cmdíåy
;

610 
tbÀ¡ry
 *

611 
	$cmdlookup
(c⁄° *
«me
, 
add
)

613 
hashvÆ
;

614 c⁄° *
p
;

615 
tbÀ¡ry
 *
cmdp
;

616 
tbÀ¡ry
 **
µ
;

618 
p
 = 
«me
;

619 
hashvÆ
 = *
p
 << 4;

620 *
p
)

621 
hashvÆ
 +*
p
++;

622 
hashvÆ
 &= 0x7FFF;

623 
µ
 = &
cmdèbÀ
[
hashvÆ
 % 
CMDTABLESIZE
];

624 
cmdp
 = *
µ
 ; cmd∞; cmd∞cmdp->
√xt
) {

625 i‡(
	`equÆ
(
cmdp
->
cmd«me
, 
«me
))

627 
µ
 = &
cmdp
->
√xt
;

629 i‡(
add
 && 
cmdp
 =
NULL
) {

630 
INTOFF
;

631 
cmdp
 = *
µ
 = 
	`ckmÆloc
( (
tbÀ¡ry
Ë- 
ARB


632 + 
	`°æí
(
«me
) + 1);

633 
cmdp
->
√xt
 = 
NULL
;

634 
cmdp
->
cmdty≥
 = 
CMDUNKNOWN
;

635 
cmdp
->
ªhash
 = 0;

636 
	`°r˝y
(
cmdp
->
cmd«me
, 
«me
);

637 
INTON
;

639 
œ°cmdíåy
 = 
µ
;

640  
cmdp
;

641 
	}
}

648 
	$dñëe_cmd_íåy
()

650 
tbÀ¡ry
 *
cmdp
;

652 
INTOFF
;

653 
cmdp
 = *
œ°cmdíåy
;

654 *
œ°cmdíåy
 = 
cmdp
->
√xt
;

655 
	`ck‰ì
(
cmdp
);

656 
INTON
;

657 
	}
}

667 
	$addcmdíåy
(c⁄° *
«me
, 
cmdíåy
 *
íåy
)

669 
tbÀ¡ry
 *
cmdp
;

671 
INTOFF
;

672 
cmdp
 = 
	`cmdlookup
(
«me
, 1);

673 i‡(
cmdp
->
cmdty≥
 =
CMDFUNCTION
) {

674 
	`uƒeffunc
(
cmdp
->
∑øm
.
func
);

676 
cmdp
->
cmdty≥
 = 
íåy
->cmdtype;

677 
cmdp
->
∑øm
 = 
íåy
->
u
;

678 
INTON
;

679 
	}
}

687 
	$defun
(c⁄° *
«me
, 
node
 *
func
)

689 
cmdíåy
 
íåy
;

691 
INTOFF
;

692 
íåy
.
cmdty≥
 = 
CMDFUNCTION
;

693 
íåy
.
u
.
func
 = 
	`c›yfunc
(func);

694 
	`addcmdíåy
(
«me
, &
íåy
);

695 
INTON
;

696 
	}
}

704 
	$un£tfunc
(c⁄° *
«me
)

706 
tbÀ¡ry
 *
cmdp
;

708 i‡((
cmdp
 = 
	`cmdlookup
(
«me
, 0)Ë!
NULL
 && cmdp->
cmdty≥
 =
CMDFUNCTION
) {

709 
	`uƒeffunc
(
cmdp
->
∑øm
.
func
);

710 
	`dñëe_cmd_íåy
();

714 
	}
}

722 
	$ty≥cmd_im∂
(
¨gc
, **
¨gv
, 
cmd
)

724 
cmdíåy
 
íåy
;

725 
tbÀ¡ry
 *
cmdp
;

726 c⁄° *c⁄° *
µ
;

727 
Æüs
 *
≠
;

728 
i
;

729 
îr‹1
 = 0;

731 
i
 = 1; i < 
¨gc
; i++) {

733 
µ
 = 
∑r£kwd
; *pp;Öp++)

734 i‡(**
µ
 =*
¨gv
[
i
] && 
	`equÆ
(*pp,árgv[i]))

737 i‡(*
µ
) {

738 i‡(
cmd
 =
TYPECMD_SMALLV
)

739 
	`out1fmt
("%s\n", 
¨gv
[
i
]);

741 
	`out1fmt
("%†i†®shñ»keyw‹d\n", 
¨gv
[
i
]);

746 i‡((
≠
 = 
	`looku∑lüs
(
¨gv
[
i
], 1)Ë!
NULL
) {

747 i‡(
cmd
 =
TYPECMD_SMALLV
)

748 
	`out1fmt
("Æü†%s='%s'\n", 
¨gv
[
i
], 
≠
->
vÆ
);

750 
	`out1fmt
("%†i†™álü†f‹ %s\n", 
¨gv
[
i
],

751 
≠
->
vÆ
);

756 i‡((
cmdp
 = 
	`cmdlookup
(
¨gv
[
i
], 0)Ë!
NULL
) {

757 
íåy
.
cmdty≥
 = 
cmdp
->cmdtype;

758 
íåy
.
u
 = 
cmdp
->
∑øm
;

759 
íåy
.
•ecül
 = 
cmdp
->special;

763 
	`föd_comm™d
(
¨gv
[
i
], &
íåy
, 0, 
	`∑thvÆ
());

766 
íåy
.
cmdty≥
) {

767 
CMDNORMAL
: {

768 i‡(
	`°rchr
(
¨gv
[
i
], '/'Ë=
NULL
) {

769 c⁄° *
∑th
 = 
	`∑thvÆ
();

770 *
«me
;

771 
j
 = 
íåy
.
u
.
ödex
;

773 
«me
 = 
	`∑dv™˚
(&
∑th
, 
¨gv
[
i
]);

774 
	`°u«Œoc
(
«me
);

775 } --
j
 >= 0);

776 i‡(
cmd
 =
TYPECMD_SMALLV
)

777 
	`out1fmt
("%s\n", 
«me
);

779 
	`out1fmt
("%†is%†%s\n", 
¨gv
[
i
],

780 (
cmdp
 && 
cmd
 =
TYPECMD_TYPE
) ?

782 
«me
);

784 i‡(
	`óc˚ss
(
¨gv
[
i
], 
X_OK
) == 0) {

785 i‡(
cmd
 =
TYPECMD_SMALLV
)

786 
	`out1fmt
("%s\n", 
¨gv
[
i
]);

788 
	`out1fmt
("%†i†%s\n", 
¨gv
[
i
],

789 
¨gv
[
i
]);

791 i‡(
cmd
 !
TYPECMD_SMALLV
)

792 
	`outfmt
(
out2
, "%s: %s\n",

793 
¨gv
[
i
], 
	`°ªº‹
(
î∫o
));

794 
îr‹1
 |= 127;

799 
CMDFUNCTION
:

800 i‡(
cmd
 =
TYPECMD_SMALLV
)

801 
	`out1fmt
("%s\n", 
¨gv
[
i
]);

803 
	`out1fmt
("%†i†®shñ»fun˘i⁄\n", 
¨gv
[
i
]);

806 
CMDBUILTIN
:

807 i‡(
cmd
 =
TYPECMD_SMALLV
)

808 
	`out1fmt
("%s\n", 
¨gv
[
i
]);

809 i‡(
íåy
.
•ecül
)

810 
	`out1fmt
("%s isá special shell builtin\n",

811 
¨gv
[
i
]);

813 
	`out1fmt
("%†i†®shñ»buûtö\n", 
¨gv
[
i
]);

817 i‡(
cmd
 !
TYPECMD_SMALLV
)

818 
	`outfmt
(
out2
, "%s:ÇŸ found\n", 
¨gv
[
i
]);

819 
îr‹1
 |= 127;

823  
îr‹1
;

824 
	}
}

831 
	$ty≥cmd
(
¨gc
, **
¨gv
)

833  
	`ty≥cmd_im∂
(
¨gc
, 
¨gv
, 
TYPECMD_TYPE
);

834 
	}
}

	@sh/exec.h

37 
	#CMDUNKNOWN
 -1

	)

38 
	#CMDNORMAL
 0

	)

39 
	#CMDBUILTIN
 1

	)

40 
	#CMDFUNCTION
 2

	)

44 
	mTYPECMD_SMALLV
,

45 
	mTYPECMD_BIGV
,

46 
	mTYPECMD_TYPE


49 
	gnode
;

50 
	scmdíåy
 {

51 
	mcmdty≥
;

52 
	u∑øm
 {

53 
	mödex
;

54 
funcdef
 *
	mfunc
;

55 } 
	mu
;

56 
	m•ecül
;

60 c⁄° *
∑th›t
;

61 
exî∫o
;

63 
	$shñÀxec
(**, **, c⁄° *, Ë
__dód2
;

64 *
	`∑dv™˚
(const **, const *);

65 
	`hashcmd
(, **);

66 
	`föd_comm™d
(c⁄° *, 
cmdíåy
 *, , const *);

67 
	`föd_buûtö
(const *, *);

68 
	`hashcd
();

69 
	`ch™gï©h
(const *);

70 
	`dñëefuncs
();

71 
	`addcmdíåy
(c⁄° *, 
cmdíåy
 *);

72 
	`defun
(c⁄° *, 
node
 *);

73 
	`un£tfunc
(const *);

74 
	`ty≥cmd_im∂
(, **, );

75 
	`ty≥cmd
(, **);

76 
	`˛órcmdíåy
();

	@sh/expand.c

35 #i‚de‡
löt


37 
	gsccsid
[] = "@(#)expand.c 8.5 (Berkeley) 5/15/95";

40 
	~<sys/cdefs.h
>

41 
__FBSDID
("$FreeBSD: src/bin/sh/expand.c,v 1.55.2.12.2.1 2012/03/03 06:15:13 kensmith Exp $");

43 
	~<sys/ty≥s.h
>

44 
	~<sys/time.h
>

45 
	~<sys/°©.h
>

46 
	~<dúít.h
>

47 
	~<î∫o.h
>

48 
	~<öây≥s.h
>

49 
	~<limôs.h
>

50 
	~<pwd.h
>

51 
	~<°dio.h
>

52 
	~<°dlib.h
>

53 
	~<°rög.h
>

54 
	~<uni°d.h
>

61 
	~"shñl.h
"

62 
	~"maö.h
"

63 
	~"nodes.h
"

64 
	~"evÆ.h
"

65 
	~"ex∑nd.h
"

66 
	~"sy¡ax.h
"

67 
	~"∑r£r.h
"

68 
	~"jobs.h
"

69 
	~"›ti⁄s.h
"

70 
	~"v¨.h
"

71 
	~"öput.h
"

72 
	~"ouçut.h
"

73 
	~"memÆloc.h
"

74 
	~"îr‹.h
"

75 
	~"my°rög.h
"

76 
	~"¨ôh.h
"

77 
	~"show.h
"

84 
	sif§egi⁄
 {

85 
if§egi⁄
 *
	m√xt
;

86 
	mbegoff
;

87 
	mídoff
;

88 
	möquŸes
;

92 *
	gexpde°
;

93 
nodñi°
 *
	g¨gbackq
;

94 
if§egi⁄
 
	gifsfú°
;

95 
if§egi⁄
 *
	gif¶a°p
;

96 
¨gli°
 
	gex∑rg
;

98 
¨g°r
(*, );

99 *
ex±ûde
(*, );

100 
expbackq
(
node
 *, , );

101 
subevÆv¨
(*, *, , , , );

102 *
evÆv¨
(*, );

103 
v¨is£t
(*, );

104 
v¨vÆue
(*, , , );

105 
ªc‹dªgi⁄
(, , );

106 
ªmovîec‹dªgi⁄s
();

107 
ifsbªakup
(*, 
¨gli°
 *);

108 
ex∑ndmëa
(
°æi°
 *, );

109 
expmëa
(*, *);

110 
add‚ame
(*);

111 
°æi°
 *
exps‹t
(strlist *);

112 
°æi°
 *
ms‹t
(strlist *, );

113 
pm©ch
(const *, const *, );

114 *
cväum
(, *);

115 
cﬁœã_ønge_cmp
(, );

118 
	$cﬁœã_ønge_cmp
(
c1
, 
c2
)

120 
s1
[2], 
s2
[2];

122 
s1
[0] = 
c1
;

123 
s2
[0] = 
c2
;

124  (
	`°rcﬁl
(
s1
, 
s2
));

125 
	}
}

134 
	$ex∑ndhîe
(
node
 *
¨g
, 
fd
)

136 
hîefd
 = 
fd
;

137 
	`ex∑nd¨g
(
¨g
, (
¨gli°
 *)
NULL
, 0);

138 
	`xwrôe
(
fd
, 
	`°ackblock
(), 
expde°
 - stackblock());

139 
	}
}

156 
	$ex∑nd¨g
(
node
 *
¨g
, 
¨gli°
 *¨gli°, 
Êag
)

158 
°æi°
 *
•
;

159 *
p
;

161 
¨gbackq
 = 
¨g
->
«rg
.
backquŸe
;

162 
	`STARTSTACKSTR
(
expde°
);

163 
ifsfú°
.
√xt
 = 
NULL
;

164 
if¶a°p
 = 
NULL
;

165 
	`¨g°r
(
¨g
->
«rg
.
ãxt
, 
Êag
);

166 i‡(
¨gli°
 =
NULL
) {

169 
	`STPUTC
('\0', 
expde°
);

170 
p
 = 
	`gøb°ack°r
(
expde°
);

171 
ex∑rg
.
œ°p
 = &ex∑rg.
li°
;

175 i‡(
Êag
 & 
EXP_FULL
) {

176 
	`ifsbªakup
(
p
, &
ex∑rg
);

177 *
ex∑rg
.
œ°p
 = 
NULL
;

178 
ex∑rg
.
œ°p
 = &ex∑rg.
li°
;

179 
	`ex∑ndmëa
(
ex∑rg
.
li°
, 
Êag
);

181 i‡(
Êag
 & 
EXP_REDIR
)

182 
	`rmesˇ≥s
(
p
);

183 
•
 = (
°æi°
 *)
	`°Æloc
( (strlist));

184 
•
->
ãxt
 = 
p
;

185 *
ex∑rg
.
œ°p
 = 
•
;

186 
ex∑rg
.
œ°p
 = &
•
->
√xt
;

188 
ifsfú°
.
√xt
 !
NULL
) {

189 
if§egi⁄
 *
if•
;

190 
INTOFF
;

191 
if•
 = 
ifsfú°
.
√xt
->next;

192 
	`ck‰ì
(
ifsfú°
.
√xt
);

193 
ifsfú°
.
√xt
 = 
if•
;

194 
INTON
;

196 *
ex∑rg
.
œ°p
 = 
NULL
;

197 i‡(
ex∑rg
.
li°
) {

198 *
¨gli°
->
œ°p
 = 
ex∑rg
.
li°
;

199 
¨gli°
->
œ°p
 = 
ex∑rg
.lastp;

201 
	}
}

215 
	$¨g°r
(*
p
, 
Êag
)

217 
c
;

218 
quŸes
 = 
Êag
 & (
EXP_FULL
 | 
EXP_CASE
 | 
EXP_REDIR
);

219 
fú°eq
 = 1;

221 i‡(*
p
 ='~' && (
Êag
 & (
EXP_TILDE
 | 
EXP_VARTILDE
)))

222 
p
 = 
	`ex±ûde
’, 
Êag
);

224 
c
 = *
p
++) {

226 
CTLENDVAR
:

227 
bªaklo›
;

228 
CTLQUOTEMARK
:

230 i‡(
p
[0] =
CTLVAR
 &&Ö[2] == '@' &&Ö[3] == '=')

232 i‡((
Êag
 & 
EXP_FULL
) != 0)

233 
	`STPUTC
(
c
, 
expde°
);

235 
CTLESC
:

236 i‡(
quŸes
)

237 
	`STPUTC
(
c
, 
expde°
);

238 
c
 = *
p
++;

239 
	`STPUTC
(
c
, 
expde°
);

241 
CTLVAR
:

242 
p
 = 
	`evÆv¨
’, 
Êag
);

244 
CTLBACKQ
:

245 
CTLBACKQ
|
CTLQUOTE
:

246 
	`expbackq
(
¨gbackq
->
n
, 
c
 & 
CTLQUOTE
, 
Êag
);

247 
¨gbackq
 =árgbackq->
√xt
;

249 
CTLENDARI
:

250 
	`ex∑ri
(
Êag
);

258 
	`STPUTC
(
c
, 
expde°
);

259 i‡(
Êag
 & 
EXP_VARTILDE
 && *
p
 == '~') {

260 i‡(
c
 == '=') {

261 i‡(
fú°eq
)

262 
fú°eq
 = 0;

266 
p
 = 
	`ex±ûde
’, 
Êag
);

270 
	`STPUTC
(
c
, 
expde°
);

273 
bªaklo›
:;

274 
	}
}

281 
	$ex±ûde
(*
p
, 
Êag
)

283 
c
, *
°¨ç
 = 
p
;

284 
∑sswd
 *
pw
;

285 *
home
;

286 
quŸes
 = 
Êag
 & (
EXP_FULL
 | 
EXP_CASE
 | 
EXP_REDIR
);

288 (
c
 = *
p
) != '\0') {

289 
c
) {

290 
CTLESC
:

291  (
°¨ç
);

292 
CTLQUOTEMARK
:

293  (
°¨ç
);

295 i‡(
Êag
 & 
EXP_VARTILDE
)

296 
d⁄e
;

299 
d⁄e
;

301 
p
++;

303 
d⁄e
:

304 *
p
 = '\0';

305 i‡(*(
°¨ç
+1) == '\0') {

306 i‡((
home
 = 
	`lookupv¨
("HOME")Ë=
NULL
)

307 
lo£
;

309 i‡((
pw
 = 
	`gëpw«m
(
°¨ç
+1)Ë=
NULL
)

310 
lo£
;

311 
home
 = 
pw
->
pw_dú
;

313 i‡(*
home
 == '\0')

314 
lo£
;

315 *
p
 = 
c
;

316 (
c
 = *
home
++) != '\0') {

317 i‡(
quŸes
 && 
SQSYNTAX
[()
c
] =
CCTL
)

318 
	`STPUTC
(
CTLESC
, 
expde°
);

319 
	`STPUTC
(
c
, 
expde°
);

321  (
p
);

322 
lo£
:

323 *
p
 = 
c
;

324  (
°¨ç
);

325 
	}
}

329 
	$ªmovîec‹dªgi⁄s
(
ídoff
)

331 i‡(
if¶a°p
 =
NULL
)

334 i‡(
ifsfú°
.
ídoff
 >Éndoff) {

335 
ifsfú°
.
√xt
 !
NULL
) {

336 
if§egi⁄
 *
if•
;

337 
INTOFF
;

338 
if•
 = 
ifsfú°
.
√xt
->next;

339 
	`ck‰ì
(
ifsfú°
.
√xt
);

340 
ifsfú°
.
√xt
 = 
if•
;

341 
INTON
;

343 i‡(
ifsfú°
.
begoff
 > 
ídoff
)

344 
if¶a°p
 = 
NULL
;

346 
if¶a°p
 = &
ifsfú°
;

347 
ifsfú°
.
ídoff
 =Éndoff;

352 
if¶a°p
 = &
ifsfú°
;

353 
if¶a°p
->
√xt
 && if¶a°p->√xt->
begoff
 < 
ídoff
)

354 
if¶a°p
=if¶a°p->
√xt
;

355 
if¶a°p
->
√xt
 !
NULL
) {

356 
if§egi⁄
 *
if•
;

357 
INTOFF
;

358 
if•
 = 
if¶a°p
->
√xt
->next;

359 
	`ck‰ì
(
if¶a°p
->
√xt
);

360 
if¶a°p
->
√xt
 = 
if•
;

361 
INTON
;

363 i‡(
if¶a°p
->
ídoff
 >Éndoff)

364 
if¶a°p
->
ídoff
 =Éndoff;

365 
	}
}

372 
	$ex∑ri
(
Êag
)

374 *
p
, *
°¨t
;

375 
¨ôh_t
 
ªsu…
;

376 
begoff
;

377 
quŸes
 = 
Êag
 & (
EXP_FULL
 | 
EXP_CASE
 | 
EXP_REDIR
);

378 
quŸed
;

390 
	`CHECKSTRSPACE
(
	`DIGITS
(
ªsu…
Ë- 2, 
expde°
);

391 
	`USTPUTC
('\0', 
expde°
);

392 
°¨t
 = 
	`°ackblock
();

393 
p
 = 
expde°
 - 2;

394 
p
 >
°¨t
 && *∞!
CTLARI
)

395 --
p
;

396 i‡(
p
 < 
°¨t
 || *∞!
CTLARI
)

397 
	`îr‹
("missing CTLARI (shouldn't happen)");

398 i‡(
p
 > 
°¨t
 && *’ - 1Ë=
CTLESC
)

399 
p
 = 
°¨t
; *∞!
CTLARI
;Ö++)

400 i‡(*
p
 =
CTLESC
)

401 
p
++;

403 i‡(
p
[1] == '"')

404 
quŸed
=1;

406 
quŸed
=0;

407 
begoff
 = 
p
 - 
°¨t
;

408 
	`ªmovîec‹dªgi⁄s
(
begoff
);

409 i‡(
quŸes
)

410 
	`rmesˇ≥s
(
p
+2);

411 
ªsu…
 = 
	`¨ôh
(
p
+2);

412 
	`fmt°r
(
p
, 
	`DIGITS
(
ªsu…
), 
ARITH_FORMAT_STR
,Ñesult);

413 *
p
++)

415 i‡(
quŸed
 == 0)

416 
	`ªc‹dªgi⁄
(
begoff
, 
p
 - 1 - 
°¨t
, 0);

417 
ªsu…
 = 
expde°
 - 
p
 + 1;

418 
	`STADJUST
(-
ªsu…
, 
expde°
);

419 
	}
}

426 
	$expbackq
(
node
 *
cmd
, 
quŸed
, 
Êag
)

428 
backcmd
 
ö
;

429 
i
;

430 
buf
[128];

431 *
p
;

432 *
de°
 = 
expde°
;

433 
if§egi⁄
 
ßveifs
, *
ßvña°p
;

434 
nodñi°
 *
ßvórgbackq
;

435 
œ°c
;

436 
°¨éoc
 = 
de°
 - 
	`°ackblock
();

437 c⁄° *
sy¡ax
 = 
quŸed
? 
DQSYNTAX
 : 
BASESYNTAX
;

438 
ßvehîefd
;

439 
quŸes
 = 
Êag
 & (
EXP_FULL
 | 
EXP_CASE
 | 
EXP_REDIR
);

440 
¬l
;

442 
INTOFF
;

443 
ßveifs
 = 
ifsfú°
;

444 
ßvña°p
 = 
if¶a°p
;

445 
ßvórgbackq
 = 
¨gbackq
;

446 
ßvehîefd
 = 
hîefd
;

447 
hîefd
 = -1;

448 
p
 = 
	`gøb°ack°r
(
de°
);

449 
	`evÆbackcmd
(
cmd
, &
ö
);

450 
	`ungøb°ack°r
(
p
, 
de°
);

451 
ifsfú°
 = 
ßveifs
;

452 
if¶a°p
 = 
ßvña°p
;

453 
¨gbackq
 = 
ßvórgbackq
;

454 
hîefd
 = 
ßvehîefd
;

456 
p
 = 
ö
.
buf
;

457 
œ°c
 = '\0';

458 
¬l
 = 0;

461 i‡(--
ö
.
∆e·
 < 0) {

462 i‡(
ö
.
fd
 < 0)

464 (
i
 = 
	`ªad
(
ö
.
fd
, 
buf
,  buf)Ë< 0 && 
î∫o
 =
EINTR
);

465 
	`TRACE
(("expbackq:ÑódÑëu∫†%d\n", 
i
));

466 i‡(
i
 <= 0)

468 
p
 = 
buf
;

469 
ö
.
∆e·
 = 
i
 - 1;

471 
œ°c
 = *
p
++;

472 i‡(
œ°c
 != '\0') {

473 i‡(
œ°c
 == '\n') {

474 
¬l
++;

476 
¬l
 > 0) {

477 
¬l
--;

478 
	`STPUTC
('\n', 
de°
);

480 i‡(
quŸes
 && 
sy¡ax
[()
œ°c
] =
CCTL
)

481 
	`STPUTC
(
CTLESC
, 
de°
);

482 
	`STPUTC
(
œ°c
, 
de°
);

487 i‡(
ö
.
fd
 >= 0)

488 
	`˛o£
(
ö
.
fd
);

489 i‡(
ö
.
buf
)

490 
	`ck‰ì
(
ö
.
buf
);

491 i‡(
ö
.
jp
)

492 
exô°©us
 = 
	`waôf‹job
(
ö
.
jp
, (*)
NULL
);

493 i‡(
quŸed
 == 0)

494 
	`ªc‹dªgi⁄
(
°¨éoc
, 
de°
 - 
	`°ackblock
(), 0);

495 
	`TRACE
(("expbackq: size=%td: \"%.*s\"\n",

496 ((
de°
 - 
	`°ackblock
()Ë- 
°¨éoc
),

497 ()((
de°
 - 
	`°ackblock
()Ë- 
°¨éoc
),

498 
	`°ackblock
(Ë+ 
°¨éoc
));

499 
expde°
 = 
de°
;

500 
INTON
;

501 
	}
}

506 
	$subevÆv¨
(*
p
, *
°r
, 
°æoc
, 
subty≥
, 
°¨éoc
,

507 
v¨Êags
)

509 *
°¨ç
;

510 *
loc
 = 
NULL
;

511 *
q
;

512 
c
 = 0;

513 
ßvehîefd
 = 
hîefd
;

514 
nodñi°
 *
ßvórgbackq
 = 
¨gbackq
;

515 
amou¡
;

517 
hîefd
 = -1;

518 
	`¨g°r
(
p
, 0);

519 
	`STACKSTRNUL
(
expde°
);

520 
hîefd
 = 
ßvehîefd
;

521 
¨gbackq
 = 
ßvórgbackq
;

522 
°¨ç
 = 
	`°ackblock
(Ë+ 
°¨éoc
;

523 i‡(
°r
 =
NULL
)

524 
°r
 = 
	`°ackblock
(Ë+ 
°æoc
;

526 
subty≥
) {

527 
VSASSIGN
:

528 
	`£tv¨
(
°r
, 
°¨ç
, 0);

529 
amou¡
 = 
°¨ç
 - 
expde°
;

530 
	`STADJUST
(
amou¡
, 
expde°
);

531 
v¨Êags
 &~
VSNUL
;

532 i‡(
c
 != 0)

533 *
loc
 = 
c
;

536 
VSQUESTION
:

537 i‡(*
p
 !
CTLENDVAR
) {

538 
	`outfmt
(&
îrout
, "%s\n", 
°¨ç
);

539 
	`îr‹
((*)
NULL
);

541 
	`îr‹
("%.*s:Ö¨amëî %¢Ÿ së", ()(
p
 - 
°r
 - 1),

542 
°r
, (
v¨Êags
 & 
VSNUL
) ? "null or "

543 : 
nuŒ°r
);

546 
VSTRIMLEFT
:

547 
loc
 = 
°¨ç
;Üo¯< 
°r
;Üoc++) {

548 
c
 = *
loc
;

549 *
loc
 = '\0';

550 i‡(
	`∑tm©ch
(
°r
, 
°¨ç
, 
v¨Êags
 & 
VSQUOTE
)) {

551 *
loc
 = 
c
;

552 
ªc‹dÀ·
;

554 *
loc
 = 
c
;

555 i‡((
v¨Êags
 & 
VSQUOTE
Ë&& *
loc
 =
CTLESC
)

556 
loc
++;

560 
VSTRIMLEFTMAX
:

561 
loc
 = 
°r
 - 1;Üo¯>
°¨ç
;) {

562 
c
 = *
loc
;

563 *
loc
 = '\0';

564 i‡(
	`∑tm©ch
(
°r
, 
°¨ç
, 
v¨Êags
 & 
VSQUOTE
)) {

565 *
loc
 = 
c
;

566 
ªc‹dÀ·
;

568 *
loc
 = 
c
;

569 
loc
--;

570 i‡((
v¨Êags
 & 
VSQUOTE
Ë&& 
loc
 > 
°¨ç
 &&

571 *(
loc
 - 1Ë=
CTLESC
) {

572 
q
 = 
°¨ç
; q < 
loc
; q++)

573 i‡(*
q
 =
CTLESC
)

574 
q
++;

575 i‡(
q
 > 
loc
)

576 
loc
--;

581 
VSTRIMRIGHT
:

582 
loc
 = 
°r
 - 1;Üo¯>
°¨ç
;) {

583 i‡(
	`∑tm©ch
(
°r
, 
loc
, 
v¨Êags
 & 
VSQUOTE
)) {

584 
amou¡
 = 
loc
 - 
expde°
;

585 
	`STADJUST
(
amou¡
, 
expde°
);

588 
loc
--;

589 i‡((
v¨Êags
 & 
VSQUOTE
Ë&& 
loc
 > 
°¨ç
 &&

590 *(
loc
 - 1Ë=
CTLESC
) {

591 
q
 = 
°¨ç
; q < 
loc
; q++)

592 i‡(*
q
 =
CTLESC
)

593 
q
++;

594 i‡(
q
 > 
loc
)

595 
loc
--;

600 
VSTRIMRIGHTMAX
:

601 
loc
 = 
°¨ç
;Üo¯< 
°r
 - 1;Üoc++) {

602 i‡(
	`∑tm©ch
(
°r
, 
loc
, 
v¨Êags
 & 
VSQUOTE
)) {

603 
amou¡
 = 
loc
 - 
expde°
;

604 
	`STADJUST
(
amou¡
, 
expde°
);

607 i‡((
v¨Êags
 & 
VSQUOTE
Ë&& *
loc
 =
CTLESC
)

608 
loc
++;

614 
	`ab‹t
();

617 
ªc‹dÀ·
:

618 
amou¡
 = ((
°r
 - 1Ë- (
loc
 - 
°¨ç
)Ë- 
expde°
;

619 
	`STADJUST
(
amou¡
, 
expde°
);

620 
loc
 !
°r
 - 1)

621 *
°¨ç
++ = *
loc
++;

623 
	}
}

632 
	$evÆv¨
(*
p
, 
Êag
)

634 
subty≥
;

635 
v¨Êags
;

636 *
v¨
;

637 *
vÆ
;

638 
∑éoc
;

639 
c
;

640 
£t
;

641 
•ecül
;

642 
°¨éoc
;

643 
v¨Àn
;

644 
ósy
;

645 
quŸes
 = 
Êag
 & (
EXP_FULL
 | 
EXP_CASE
 | 
EXP_REDIR
);

647 
v¨Êags
 = ()*
p
++;

648 
subty≥
 = 
v¨Êags
 & 
VSTYPE
;

649 
v¨
 = 
p
;

650 
•ecül
 = 0;

651 i‡(! 
	`is_«me
(*
p
))

652 
•ecül
 = 1;

653 
p
 = 
	`°rchr
(p, '=') + 1;

654 
agaö
:

655 i‡(
v¨Êags
 & 
VSLINENO
) {

656 
£t
 = 1;

657 
•ecül
 = 0;

658 
vÆ
 = 
v¨
;

659 
p
[-1] = '\0';

661 } i‡(
•ecül
) {

662 
£t
 = 
	`v¨is£t
(
v¨
, 
v¨Êags
 & 
VSNUL
);

663 
vÆ
 = 
NULL
;

665 
vÆ
 = 
	`b…ölookup
(
v¨
, 1);

666 i‡(
vÆ
 =
NULL
 || ((
v¨Êags
 & 
VSNUL
) && val[0] == '\0')) {

667 
vÆ
 = 
NULL
;

668 
£t
 = 0;

670 
£t
 = 1;

672 
v¨Àn
 = 0;

673 
°¨éoc
 = 
expde°
 - 
	`°ackblock
();

674 i‡(!
£t
 && 
uÊag
 && *
v¨
 != '@' && *var != '*') {

675 
subty≥
) {

676 
VSNORMAL
:

677 
VSTRIMLEFT
:

678 
VSTRIMLEFTMAX
:

679 
VSTRIMRIGHT
:

680 
VSTRIMRIGHTMAX
:

681 
VSLENGTH
:

682 
	`îr‹
("%.*s:Ö¨amëîÇŸ së", ()(
p
 - 
v¨
 - 1),

683 
v¨
);

686 i‡(
£t
 && 
subty≥
 !
VSPLUS
) {

688 i‡(
•ecül
) {

689 
	`v¨vÆue
(
v¨
, 
v¨Êags
 & 
VSQUOTE
, 
subty≥
, 
Êag
);

690 i‡(
subty≥
 =
VSLENGTH
) {

691 
v¨Àn
 = 
expde°
 - 
	`°ackblock
(Ë- 
°¨éoc
;

692 
	`STADJUST
(-
v¨Àn
, 
expde°
);

695 c⁄° *
sy¡ax
 = (
v¨Êags
 & 
VSQUOTE
Ë? 
DQSYNTAX


696 : 
BASESYNTAX
;

698 i‡(
subty≥
 =
VSLENGTH
) {

699 ;*
vÆ
; val++)

700 
v¨Àn
++;

703 *
vÆ
) {

704 i‡(
quŸes
 &&

705 
sy¡ax
[()*
vÆ
] =
CCTL
)

706 
	`STPUTC
(
CTLESC
, 
expde°
);

707 
	`STPUTC
(*
vÆ
++, 
expde°
);

714 i‡(
subty≥
 =
VSPLUS
)

715 
£t
 = ! set;

717 
ósy
 = ((
v¨Êags
 & 
VSQUOTE
) == 0 ||

718 (*
v¨
 ='@' && 
shñÕ¨am
.
≈¨am
 != 1));

721 
subty≥
) {

722 
VSLENGTH
:

723 
expde°
 = 
	`cväum
(
v¨Àn
,Éxpdest);

724 
ªc‹d
;

726 
VSNORMAL
:

727 i‡(!
ósy
)

729 
ªc‹d
:

730 
	`ªc‹dªgi⁄
(
°¨éoc
, 
expde°
 - 
	`°ackblock
(),

731 
v¨Êags
 & 
VSQUOTE
);

734 
VSPLUS
:

735 
VSMINUS
:

736 i‡(!
£t
) {

737 
	`¨g°r
(
p
, 
Êag
);

740 i‡(
ósy
)

741 
ªc‹d
;

744 
VSTRIMLEFT
:

745 
VSTRIMLEFTMAX
:

746 
VSTRIMRIGHT
:

747 
VSTRIMRIGHTMAX
:

748 i‡(!
£t
)

754 
	`STPUTC
('\0', 
expde°
);

755 
∑éoc
 = 
expde°
 - 
	`°ackblock
();

756 i‡(
	`subevÆv¨
(
p
, 
NULL
, 
∑éoc
, 
subty≥
,

757 
°¨éoc
, 
v¨Êags
) == 0) {

758 
amou¡
 = (
expde°
 - 
	`°ackblock
(Ë- 
∑éoc
) + 1;

759 
	`STADJUST
(-
amou¡
, 
expde°
);

762 
	`ªmovîec‹dªgi⁄s
(
°¨éoc
);

763 
ªc‹d
;

765 
VSASSIGN
:

766 
VSQUESTION
:

767 i‡(!
£t
) {

768 i‡(
	`subevÆv¨
(
p
, 
v¨
, 0, 
subty≥
, 
°¨éoc
, 
v¨Êags
)) {

769 
v¨Êags
 &~
VSNUL
;

774 
	`ªmovîec‹dªgi⁄s
(
°¨éoc
);

775 
agaö
;

779 i‡(
ósy
)

780 
ªc‹d
;

783 
VSERROR
:

784 
c
 = 
p
 - 
v¨
 - 1;

785 
	`îr‹
("${%.*s%s}: Bad sub°ôuti⁄", 
c
, 
v¨
,

786 (
c
 > 0 && *
p
 !
CTLENDVAR
) ? "..." : "");

789 
	`ab‹t
();

791 
p
[-1] = '=';

793 i‡(
subty≥
 !
VSNORMAL
) {

794 
√°ög
 = 1;

796 i‡((
c
 = *
p
++Ë=
CTLESC
)

797 
p
++;

798 i‡(
c
 =
CTLBACKQ
 || c =(CTLBACKQ|
CTLQUOTE
)) {

799 i‡(
£t
)

800 
¨gbackq
 =árgbackq->
√xt
;

801 } i‡(
c
 =
CTLVAR
) {

802 i‡((*
p
++ & 
VSTYPE
Ë!
VSNORMAL
)

803 
√°ög
++;

804 } i‡(
c
 =
CTLENDVAR
) {

805 i‡(--
√°ög
 == 0)

810  
p
;

811 
	}
}

820 
	$v¨is£t
(*
«me
, 
nulok
)

823 i‡(*
«me
 == '!')

824  
backgndpid
 != -1;

825 i‡(*
«me
 == '@' || *name == '*') {

826 i‡(*
shñÕ¨am
.
p
 =
NULL
)

829 i‡(
nulok
) {

830 **
av
;

832 
av
 = 
shñÕ¨am
.
p
; *av;áv++)

833 i‡(**
av
 != '\0')

837 } i‡(
	`is_digô
(*
«me
)) {

838 *
≠
;

839 
num
 = 
	`©oi
(
«me
);

841 i‡(
num
 > 
shñÕ¨am
.
≈¨am
)

844 i‡(
num
 == 0)

845 
≠
 = 
¨g0
;

847 
≠
 = 
shñÕ¨am
.
p
[
num
 - 1];

849 i‡(
nulok
 && (
≠
 =
NULL
 || *ap == '\0'))

853 
	}
}

862 
	$v¨vÆue
(*
«me
, 
quŸed
, 
subty≥
, 
Êag
)

864 
num
;

865 *
p
;

866 
i
;

867 
£p
;

868 **
≠
;

869 c⁄° *
sy¡ax
;

871 
	#STRTODEST
(
p
) \

873 i‡(
Êag
 & (
EXP_FULL
 | 
EXP_CASE
Ë&& 
subty≥
 !
VSLENGTH
) { \

874 
sy¡ax
 = 
quŸed
? 
DQSYNTAX
 : 
BASESYNTAX
; \

875 *
p
) { \

876 i‡(
sy¡ax
[()*
p
] =
CCTL
) \

877 
	`STPUTC
(
CTLESC
, 
expde°
); \

878 
	`STPUTC
(*
p
++, 
expde°
); \

881 *
p
) \

882 
	`STPUTC
(*
p
++, 
expde°
); \

883 } 0)

	)

886 *
«me
) {

888 
num
 = 
roŸpid
;

889 
numv¨
;

891 
num
 = 
€xô°©us
;

892 
numv¨
;

894 
num
 = 
shñÕ¨am
.
≈¨am
;

895 
numv¨
;

897 
num
 = 
backgndpid
;

898 
numv¨
:

899 
expde°
 = 
	`cväum
(
num
,Éxpdest);

902 
i
 = 0 ; i < 
NOPTS
 ; i++) {

903 i‡(
›éi°
[
i
].
vÆ
)

904 
	`STPUTC
(
›éi°
[
i
].
Àâî
, 
expde°
);

908 i‡(
Êag
 & 
EXP_FULL
 && 
quŸed
) {

909 
≠
 = 
shñÕ¨am
.
p
 ; (∞*≠++Ë!
NULL
 ; ) {

910 
	`STRTODEST
(
p
);

911 i‡(*
≠
)

912 
	`STPUTC
('\0', 
expde°
);

918 i‡(
	`ifs£t
())

919 
£p
 = 
	`ifsvÆ
()[0];

921 
£p
 = ' ';

922 
≠
 = 
shñÕ¨am
.
p
 ; (∞*≠++Ë!
NULL
 ; ) {

923 
	`STRTODEST
(
p
);

924 i‡(*
≠
 && 
£p
)

925 
	`STPUTC
(
£p
, 
expde°
);

929 
p
 = 
¨g0
;

930 
	`STRTODEST
(
p
);

933 i‡(
	`is_digô
(*
«me
)) {

934 
num
 = 
	`©oi
(
«me
);

935 i‡(
num
 > 0 &&Çum <
shñÕ¨am
.
≈¨am
) {

936 
p
 = 
shñÕ¨am
.p[
num
 - 1];

937 
	`STRTODEST
(
p
);

942 
	}
}

952 
	$ªc‹dªgi⁄
(
°¨t
, 
íd
, 
öquŸes
)

954 
if§egi⁄
 *
if•
;

956 i‡(
if¶a°p
 =
NULL
) {

957 
if•
 = &
ifsfú°
;

959 i‡(
if¶a°p
->
ídoff
 =
°¨t


960 && 
if¶a°p
->
öquŸes
 == inquotes) {

962 
if¶a°p
->
ídoff
 = 
íd
;

965 
if•
 = (
if§egi⁄
 *)
	`ckmÆloc
( (ifsregion));

966 
if¶a°p
->
√xt
 = 
if•
;

968 
if¶a°p
 = 
if•
;

969 
if¶a°p
->
√xt
 = 
NULL
;

970 
if¶a°p
->
begoff
 = 
°¨t
;

971 
if¶a°p
->
ídoff
 = 
íd
;

972 
if¶a°p
->
öquŸes
 = inquotes;

973 
	}
}

989 
	$ifsbªakup
(*
°rög
, 
¨gli°
 *arglist)

991 
if§egi⁄
 *
if•
;

992 
°æi°
 *
•
;

993 *
°¨t
;

994 *
p
;

995 *
q
;

996 c⁄° *
ifs
;

997 c⁄° *
ifs•c
;

998 
had_∑øm_ch
 = 0;

1000 
°¨t
 = 
°rög
;

1002 i‡(
if¶a°p
 =
NULL
) {

1004 
•
 = (
°æi°
 *)
	`°Æloc
( *sp);

1005 
•
->
ãxt
 = 
°¨t
;

1006 *
¨gli°
->
œ°p
 = 
•
;

1007 
¨gli°
->
œ°p
 = &
•
->
√xt
;

1011 
ifs
 = 
	`ifs£t
(Ë? 
	`ifsvÆ
() : " \t\n";

1013 
if•
 = &
ifsfú°
; if• !
NULL
; if• = if•->
√xt
) {

1014 
p
 = 
°rög
 + 
if•
->
begoff
;

1015 
p
 < 
°rög
 + 
if•
->
ídoff
) {

1016 
q
 = 
p
;

1017 i‡(*
p
 =
CTLESC
)

1018 
p
++;

1019 i‡(
if•
->
öquŸes
) {

1021 
had_∑øm_ch
 = 1;

1022 i‡(*
p
 != 0) {

1023 
p
++;

1026 
ifs•c
 = 
NULL
;

1028 i‡(!
	`°rchr
(
ifs
, *
p
)) {

1029 
had_∑øm_ch
 = 1;

1030 
p
++;

1033 
ifs•c
 = 
	`°rchr
(" \t\n", *
p
);

1036 i‡(
q
 =
°¨t
 && 
ifs•c
 !
NULL
) {

1037 
p
++;

1038 
°¨t
 = 
p
;

1041 
had_∑øm_ch
 = 0;

1045 *
q
 = '\0';

1046 
•
 = (
°æi°
 *)
	`°Æloc
( *sp);

1047 
•
->
ãxt
 = 
°¨t
;

1048 *
¨gli°
->
œ°p
 = 
•
;

1049 
¨gli°
->
œ°p
 = &
•
->
√xt
;

1050 
p
++;

1052 i‡(
ifs•c
 !
NULL
) {

1054 ; 
p
 < 
°rög
 + 
if•
->
ídoff
;Ö++) {

1055 
q
 = 
p
;

1056 i‡(*
p
 =
CTLESC
)

1057 
p
++;

1058 i‡(
	`°rchr
(
ifs
, *
p
Ë=
NULL
) {

1059 
p
 = 
q
;

1062 i‡(
	`°rchr
(" \t\n", *
p
Ë=
NULL
) {

1063 
p
++;

1068 
°¨t
 = 
p
;

1079 i‡(
had_∑øm_ch
 || *
°¨t
 != 0) {

1080 
•
 = (
°æi°
 *)
	`°Æloc
( *sp);

1081 
•
->
ãxt
 = 
°¨t
;

1082 *
¨gli°
->
œ°p
 = 
•
;

1083 
¨gli°
->
œ°p
 = &
•
->
√xt
;

1085 
	}
}

1088 
	gexpdú
[
PATH_MAX
];

1089 
	#expdú_íd
 (
expdú
 + ”xpdú))

	)

1097 
	$ex∑ndmëa
(
°æi°
 *
°r
, 
Êag
 
__unu£d
)

1099 *
p
;

1100 
°æi°
 **
ßvña°p
;

1101 
°æi°
 *
•
;

1102 
c
;

1105 
°r
) {

1106 i‡(
fÊag
)

1107 
nomëa
;

1108 
p
 = 
°r
->
ãxt
;

1110 i‡((
c
 = *
p
++) == '\0')

1111 
nomëa
;

1112 i‡(
c
 == '*' || c == '?' || c == '[' || c == '!')

1115 
ßvña°p
 = 
ex∑rg
.
œ°p
;

1116 
INTOFF
;

1117 
	`expmëa
(
expdú
, 
°r
->
ãxt
);

1118 
INTON
;

1119 i‡(
ex∑rg
.
œ°p
 =
ßvña°p
) {

1123 
nomëa
:

1124 *
ex∑rg
.
œ°p
 = 
°r
;

1125 
	`rmesˇ≥s
(
°r
->
ãxt
);

1126 
ex∑rg
.
œ°p
 = &
°r
->
√xt
;

1128 *
ex∑rg
.
œ°p
 = 
NULL
;

1129 *
ßvña°p
 = 
•
 = 
	`exps‹t
(*savelastp);

1130 
•
->
√xt
 !
NULL
)

1131 
•
 = sp->
√xt
;

1132 
ex∑rg
.
œ°p
 = &
•
->
√xt
;

1134 
°r
 = så->
√xt
;

1136 
	}
}

1144 
	$expmëa
(*
íddú
, *
«me
)

1146 *
p
;

1147 *
q
;

1148 *
°¨t
;

1149 *
íd«me
;

1150 
mëaÊag
;

1151 
°©
 
°©b
;

1152 
DIR
 *
dúp
;

1153 
dúít
 *
dp
;

1154 
©íd
;

1155 
m©chdŸ
;

1156 
esc
;

1158 
mëaÊag
 = 0;

1159 
°¨t
 = 
«me
;

1160 
p
 = 
«me
; 
esc
 = 0, *p;Ö +=Ésc + 1) {

1161 i‡(*
p
 == '*' || *p == '?')

1162 
mëaÊag
 = 1;

1163 i‡(*
p
 == '[') {

1164 
q
 = 
p
 + 1;

1165 i‡(*
q
 == '!' || *q == '^')

1166 
q
++;

1168 *
q
 =
CTLQUOTEMARK
)

1169 
q
++;

1170 i‡(*
q
 =
CTLESC
)

1171 
q
++;

1172 i‡(*
q
 == '/' || *q == '\0')

1174 i‡(*++
q
 == ']') {

1175 
mëaÊag
 = 1;

1179 } i‡(*
p
 ='!' &&Ö[1] ='!' && (∞=
«me
 ||Ö[-1] == '/')) {

1180 
mëaÊag
 = 1;

1181 } i‡(*
p
 == '\0')

1183 i‡(*
p
 =
CTLQUOTEMARK
)

1186 i‡(*
p
 =
CTLESC
)

1187 
esc
++;

1188 i‡(
p
[
esc
] == '/') {

1189 i‡(
mëaÊag
)

1191 
°¨t
 = 
p
 + 
esc
 + 1;

1195 i‡(
mëaÊag
 == 0) {

1196 i‡(
íddú
 !
expdú
)

1197 
mëaÊag
++;

1198 
p
 = 
«me
 ; ;Ö++) {

1199 i‡(*
p
 =
CTLQUOTEMARK
)

1201 i‡(*
p
 =
CTLESC
)

1202 
p
++;

1203 *
íddú
++ = *
p
;

1204 i‡(*
p
 == '\0')

1206 i‡(
íddú
 =
expdú_íd
)

1209 i‡(
mëaÊag
 =0 || 
	`l°©
(
expdú
, &
°©b
) >= 0)

1210 
	`add‚ame
(
expdú
);

1213 
íd«me
 = 
p
;

1214 i‡(
°¨t
 !
«me
) {

1215 
p
 = 
«me
;

1216 
p
 < 
°¨t
) {

1217 *
p
 =
CTLQUOTEMARK
)

1218 
p
++;

1219 i‡(*
p
 =
CTLESC
)

1220 
p
++;

1221 *
íddú
++ = *
p
++;

1222 i‡(
íddú
 =
expdú_íd
)

1226 i‡(
íddú
 =
expdú
) {

1227 
p
 = ".";

1228 } i‡(
íddú
 =
expdú
 + 1 && *expdir == '/') {

1229 
p
 = "/";

1231 
p
 = 
expdú
;

1232 
íddú
[-1] = '\0';

1234 i‡((
dúp
 = 
	`›ídú
(
p
)Ë=
NULL
)

1236 i‡(
íddú
 !
expdú
)

1237 
íddú
[-1] = '/';

1238 i‡(*
íd«me
 == 0) {

1239 
©íd
 = 1;

1241 
©íd
 = 0;

1242 *
íd«me
 = '\0';

1243 
íd«me
 +
esc
 + 1;

1245 
m©chdŸ
 = 0;

1246 
p
 = 
°¨t
;

1247 *
p
 =
CTLQUOTEMARK
)

1248 
p
++;

1249 i‡(*
p
 =
CTLESC
)

1250 
p
++;

1251 i‡(*
p
 == '.')

1252 
m©chdŸ
++;

1253 ! 
	`öt_≥ndög
(Ë&& (
dp
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

1254 i‡(
dp
->
d_«me
[0] ='.' && ! 
m©chdŸ
)

1256 i‡(
	`∑tm©ch
(
°¨t
, 
dp
->
d_«me
, 0)) {

1257 i‡(
íddú
 + 
dp
->
d_«mÀn
 + 1 > 
expdú_íd
)

1259 
	`mem˝y
(
íddú
, 
dp
->
d_«me
, dp->
d_«mÀn
 + 1);

1260 i‡(
©íd
)

1261 
	`add‚ame
(
expdú
);

1263 i‡(
íddú
 + 
dp
->
d_«mÀn
 + 2 > 
expdú_íd
)

1265 
íddú
[
dp
->
d_«mÀn
] = '/';

1266 
íddú
[
dp
->
d_«mÀn
 + 1] = '\0';

1267 
	`expmëa
(
íddú
 + 
dp
->
d_«mÀn
 + 1, 
íd«me
);

1271 
	`˛o£dú
(
dúp
);

1272 i‡(! 
©íd
)

1273 
íd«me
[-
esc
 - 1] =És¯? 
CTLESC
 : '/';

1274 
	}
}

1282 
	$add‚ame
(*
«me
)

1284 *
p
;

1285 
°æi°
 *
•
;

1287 
p
 = 
	`°Æloc
(
	`°æí
(
«me
) + 1);

1288 
	`sc›y
(
«me
, 
p
);

1289 
•
 = (
°æi°
 *)
	`°Æloc
( *sp);

1290 
•
->
ãxt
 = 
p
;

1291 *
ex∑rg
.
œ°p
 = 
•
;

1292 
ex∑rg
.
œ°p
 = &
•
->
√xt
;

1293 
	}
}

1302 
°æi°
 *

1303 
	$exps‹t
(
°æi°
 *
°r
)

1305 
Àn
;

1306 
°æi°
 *
•
;

1308 
Àn
 = 0;

1309 
•
 = 
°r
 ; s∞; s∞•->
√xt
)

1310 
Àn
++;

1311  
	`ms‹t
(
°r
, 
Àn
);

1312 
	}
}

1315 
°æi°
 *

1316 
	$ms‹t
(
°æi°
 *
li°
, 
Àn
)

1318 
°æi°
 *
p
, *
q
 = 
NULL
;

1319 
°æi°
 **
Õp
;

1320 
hÆf
;

1321 
n
;

1323 i‡(
Àn
 <= 1)

1324  
li°
;

1325 
hÆf
 = 
Àn
 >> 1;

1326 
p
 = 
li°
;

1327 
n
 = 
hÆf
 ; --n >= 0 ; ) {

1328 
q
 = 
p
;

1329 
p
 =Ö->
√xt
;

1331 
q
->
√xt
 = 
NULL
;

1332 
q
 = 
	`ms‹t
(
li°
, 
hÆf
);

1333 
p
 = 
	`ms‹t
’, 
Àn
 - 
hÆf
);

1334 
Õp
 = &
li°
;

1336 i‡(
	`°rcmp
(
p
->
ãxt
, 
q
->text) < 0) {

1337 *
Õp
 = 
p
;

1338 
Õp
 = &
p
->
√xt
;

1339 i‡((
p
 = *
Õp
Ë=
NULL
) {

1340 *
Õp
 = 
q
;

1344 *
Õp
 = 
q
;

1345 
Õp
 = &
q
->
√xt
;

1346 i‡((
q
 = *
Õp
Ë=
NULL
) {

1347 *
Õp
 = 
p
;

1352  
li°
;

1353 
	}
}

1362 
	$∑tm©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
squŸed
)

1364 #ifde‡
nŸdef


1365 i‡(
∑âîn
[0] == '!' &&Öattern[1] == '!')

1366  1 - 
	`pm©ch
(
∑âîn
 + 2, 
°rög
);

1369  
	`pm©ch
(
∑âîn
, 
°rög
, 
squŸed
);

1370 
	}
}

1374 
	$pm©ch
(c⁄° *
∑âîn
, c⁄° *
°rög
, 
squŸed
)

1376 c⁄° *
p
, *
q
;

1377 
c
;

1379 
p
 = 
∑âîn
;

1380 
q
 = 
°rög
;

1382 
c
 = *
p
++) {

1384 
bªaklo›
;

1385 
CTLESC
:

1386 i‡(
squŸed
 && *
q
 =
CTLESC
)

1387 
q
++;

1388 i‡(*
q
++ !*
p
++)

1391 
CTLQUOTEMARK
:

1394 i‡(
squŸed
 && *
q
 =
CTLESC
)

1395 
q
++;

1396 i‡(*
q
++ == '\0')

1400 
c
 = *
p
;

1401 
c
 =
CTLQUOTEMARK
 || c == '*')

1402 
c
 = *++
p
;

1403 i‡(
c
 !
CTLESC
 && c !
CTLQUOTEMARK
 &&

1404 
c
 != '?' && c != '*' && c != '[') {

1405 *
q
 !
c
) {

1406 i‡(
squŸed
 && *
q
 =
CTLESC
 &&

1407 
q
[1] =
c
)

1409 i‡(*
q
 == '\0')

1411 i‡(
squŸed
 && *
q
 =
CTLESC
)

1412 
q
++;

1413 
q
++;

1417 i‡(
	`pm©ch
(
p
, 
q
, 
squŸed
))

1419 i‡(
squŸed
 && *
q
 =
CTLESC
)

1420 
q
++;

1421 } *
q
++ != '\0');

1424 c⁄° *
ídp
;

1425 
övît
, 
found
;

1426 
chr
;

1428 
ídp
 = 
p
;

1429 i‡(*
ídp
 == '!' || *endp == '^')

1430 
ídp
++;

1432 *
ídp
 =
CTLQUOTEMARK
)

1433 
ídp
++;

1434 i‡(*
ídp
 == '\0')

1435 
d·
;

1436 i‡(*
ídp
 =
CTLESC
)

1437 
ídp
++;

1438 i‡(*++
ídp
 == ']')

1441 
övît
 = 0;

1442 i‡(*
p
 == '!' || *p == '^') {

1443 
övît
++;

1444 
p
++;

1446 
found
 = 0;

1447 
chr
 = *
q
++;

1448 i‡(
squŸed
 && 
chr
 =
CTLESC
)

1449 
chr
 = *
q
++;

1450 i‡(
chr
 == '\0')

1452 
c
 = *
p
++;

1454 i‡(
c
 =
CTLQUOTEMARK
)

1456 i‡(
c
 =
CTLESC
)

1457 
c
 = *
p
++;

1458 i‡(*
p
 == '-' &&Ö[1] != ']') {

1459 
p
++;

1460 *
p
 =
CTLQUOTEMARK
)

1461 
p
++;

1462 i‡(*
p
 =
CTLESC
)

1463 
p
++;

1464 i‡–
	`cﬁœã_ønge_cmp
(
chr
, 
c
) >= 0

1465 && 
	`cﬁœã_ønge_cmp
(
chr
, *
p
) <= 0

1467 
found
 = 1;

1468 
p
++;

1470 i‡(
chr
 =
c
)

1471 
found
 = 1;

1473 } (
c
 = *
p
++) != ']');

1474 i‡(
found
 =
övît
)

1478 
d·
: :

1479 i‡(
squŸed
 && *
q
 =
CTLESC
)

1480 
q
++;

1481 i‡(*
q
++ !
c
)

1486 
bªaklo›
:

1487 i‡(*
q
 != '\0')

1490 
	}
}

1499 
	$rmesˇ≥s
(*
°r
)

1501 *
p
, *
q
;

1503 
p
 = 
°r
;

1504 *
p
 !
CTLESC
 && *∞!
CTLQUOTEMARK
) {

1505 i‡(*
p
++ == '\0')

1508 
q
 = 
p
;

1509 *
p
) {

1510 i‡(*
p
 =
CTLQUOTEMARK
) {

1511 
p
++;

1514 i‡(*
p
 =
CTLESC
)

1515 
p
++;

1516 *
q
++ = *
p
++;

1518 *
q
 = '\0';

1519 
	}
}

1528 
	$ˇ£m©ch
(
node
 *
∑âîn
, c⁄° *
vÆ
)

1530 
°ackm¨k
 
sm¨k
;

1531 
ªsu…
;

1532 *
p
;

1534 
	`£t°ackm¨k
(&
sm¨k
);

1535 
¨gbackq
 = 
∑âîn
->
«rg
.
backquŸe
;

1536 
	`STARTSTACKSTR
(
expde°
);

1537 
if¶a°p
 = 
NULL
;

1538 
	`¨g°r
(
∑âîn
->
«rg
.
ãxt
, 
EXP_TILDE
 | 
EXP_CASE
);

1539 
	`STPUTC
('\0', 
expde°
);

1540 
p
 = 
	`gøb°ack°r
(
expde°
);

1541 
ªsu…
 = 
	`∑tm©ch
(
p
, 
vÆ
, 0);

1542 
	`p›°ackm¨k
(&
sm¨k
);

1543  
ªsu…
;

1544 
	}
}

1551 
	$cväum
(
num
, *
buf
)

1553 
ãmp
[32];

1554 
√g
 = 
num
 < 0;

1555 *
p
 = 
ãmp
 + 31;

1557 
ãmp
[31] = '\0';

1560 *--
p
 = 
num
 % 10 + '0';

1561 } (
num
 /= 10) != 0);

1563 i‡(
√g
)

1564 *--
p
 = '-';

1566 *
p
)

1567 
	`STPUTC
(*
p
++, 
buf
);

1568  
buf
;

1569 
	}
}

1576 
	$w‹dexpcmd
(
¨gc
, **
¨gv
)

1578 
size_t
 
Àn
;

1579 
i
;

1581 
	`out1fmt
("%08x", 
¨gc
 - 1);

1582 
i
 = 1, 
Àn
 = 0; i < 
¨gc
; i++)

1583 
Àn
 +
	`°æí
(
¨gv
[
i
]);

1584 
	`out1fmt
("%08x", ()
Àn
);

1585 
i
 = 1; i < 
¨gc
; i++) {

1586 
	`out1°r
(
¨gv
[
i
]);

1587 
	`out1c
('\0');

1590 
	}
}

	@sh/expand.h

36 
	s°æi°
 {

37 
°æi°
 *
	m√xt
;

38 *
	mãxt
;

42 
	s¨gli°
 {

43 
°æi°
 *
	mli°
;

44 
°æi°
 **
	mœ°p
;

50 
	#EXP_FULL
 0x1

	)

51 
	#EXP_TILDE
 0x2

	)

52 
	#EXP_VARTILDE
 0x4

	)

53 
	#EXP_REDIR
 0x8

	)

54 
	#EXP_CASE
 0x10

	)

57 
	gnode
;

58 
ex∑ndhîe
(
node
 *, );

59 
ex∑nd¨g
(
node
 *, 
¨gli°
 *, );

60 
ex∑ri
();

61 
∑tm©ch
(const *, const *, );

62 
rmesˇ≥s
(*);

63 
ˇ£m©ch
(
node
 *, const *);

64 
w‹dexpcmd
(, **);

	@sh/histedit.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)histedit.c 8.2 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/histedit.c,v 1.31.2.7.2.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sys/∑øm.h
>

42 
	~<limôs.h
>

43 
	~<∑ths.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<uni°d.h
>

50 
	~"shñl.h
"

51 
	~"∑r£r.h
"

52 
	~"v¨.h
"

53 
	~"›ti⁄s.h
"

54 
	~"maö.h
"

55 
	~"ouçut.h
"

56 
	~"my°rög.h
"

57 #i‚de‡
NO_HISTORY


58 
	~"myhi°edô.h
"

59 
	~"îr‹.h
"

60 
	~"evÆ.h
"

61 
	~"memÆloc.h
"

63 
	#MAXHISTLOOPS
 4

	)

64 
	#DEFEDITOR
 "ed"

	)

66 
Hi°‹y
 *
	ghi°
;

67 
EdôLöe
 *
	gñ
;

68 
	gdi•œyhi°
;

69 
FILE
 *
	gñ_ö
, *
	gñ_out
, *
	gñ_îr
;

71 *
fc_ª∂a˚
(const *, *, *);

78 
	$hi°edô
()

81 
	#edôög
 (
EÊag
 || 
VÊag
)

	)

83 i‡(
iÊag
) {

84 i‡(!
hi°
) {

88 
INTOFF
;

89 
hi°
 = 
	`hi°‹y_öô
();

90 
INTON
;

92 i‡(
hi°
 !
NULL
)

93 
	`£thi°size
(
	`hi°sizevÆ
());

95 
	`out2°r
("sh: can't initialize history\n");

97 i‡(
edôög
 && !
ñ
 && 
	`ißây
(0)) {

101 
INTOFF
;

102 i‡(
ñ_ö
 =
NULL
)

103 
ñ_ö
 = 
	`fd›í
(0, "r");

104 i‡(
ñ_îr
 =
NULL
)

105 
ñ_îr
 = 
	`fd›í
(1, "w");

106 i‡(
ñ_out
 =
NULL
)

107 
ñ_out
 = 
	`fd›í
(2, "w");

108 i‡(
ñ_ö
 =
NULL
 || 
ñ_îr
 =NULL || 
ñ_out
 == NULL)

109 
bad
;

110 
ñ
 = 
	`ñ_öô
(
¨g0
, 
ñ_ö
, 
ñ_out
, 
ñ_îr
);

111 i‡(
ñ
 !
NULL
) {

112 i‡(
hi°
)

113 
	`ñ_£t
(
ñ
, 
EL_HIST
, 
hi°‹y
, 
hi°
);

114 
	`ñ_£t
(
ñ
, 
EL_PROMPT
, 
gë¥om±
);

116 
bad
:

117 
	`out2°r
("sh: can't initializeÉditing\n");

119 
INTON
;

120 } i‡(!
edôög
 && 
ñ
) {

121 
INTOFF
;

122 
	`ñ_íd
(
ñ
);

123 
ñ
 = 
NULL
;

124 
INTON
;

126 i‡(
ñ
) {

127 i‡(
VÊag
)

128 
	`ñ_£t
(
ñ
, 
EL_EDITOR
, "vi");

129 i‡(
EÊag
)

130 
	`ñ_£t
(
ñ
, 
EL_EDITOR
, "emacs");

131 
	`ñ_sour˚
(
ñ
, 
NULL
);

134 
INTOFF
;

135 i‡(
ñ
) {

136 
	`ñ_íd
(
ñ
);

137 
ñ
 = 
NULL
;

139 i‡(
hi°
) {

140 
	`hi°‹y_íd
(
hi°
);

141 
hi°
 = 
NULL
;

143 
INTON
;

145 
	}
}

149 
	$£thi°size
(
hs
)

150 c⁄° *
hs
;

152 
hi°size
;

153 
Hi°Evít
 
he
;

155 i‡(
hi°
 !
NULL
) {

156 i‡(
hs
 =
NULL
 || *hs == '\0' ||

157 (
hi°size
 = 
	`©oi
(
hs
)) < 0)

158 
hi°size
 = 100;

159 
	`hi°‹y
(
hi°
, &
he
, 
H_SETSIZE
, 
hi°size
);

160 
	`hi°‹y
(
hi°
, &
he
, 
H_SETUNIQUE
, 1);

162 
	}
}

165 
	$hi°cmd
(
¨gc
, **
¨gv
)

167 
ch
;

168 c⁄° *
edô‹
 = 
NULL
;

169 
Hi°Evít
 
he
;

170 
lÊg
 = 0, 
nÊg
 = 0, 
rÊg
 = 0, 
sÊg
 = 0;

171 
i
, 
ªtvÆ
;

172 c⁄° *
fú°°r
, *
œ°°r
;

173 
fú°
, 
œ°
, 
dúe˘i⁄
;

174 *
∑t
 = 
NULL
, *
ª∂
 = NULL;

175 
a˘ive
 = 0;

176 
jm∂oc
 jmploc;

177 
jm∂oc
 *
ßveh™dÀr
;

178 
edôfûe°r
[
PATH_MAX
];

179 *vﬁ©ûê
edôfûe
;

180 
FILE
 *
eÂ
 = 
NULL
;

181 
ﬁdhi°num
;

183 i‡(
hi°
 =
NULL
)

184 
	`îr‹
("historyÇotáctive");

186 i‡(
¨gc
 == 1)

187 
	`îr‹
("missing historyárgument");

189 
›åe£t
 = 1; 
›töd
 = 1;

190 
›ãº
 = 0;

191 
	`nŸ_f˙umbî
(
¨gv
[
›töd
]) &&

192 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, ":e:lnrs")) != -1)

193 ()
ch
) {

195 
edô‹
 = 
›èrg
;

198 
lÊg
 = 1;

201 
nÊg
 = 1;

204 
rÊg
 = 1;

207 
sÊg
 = 1;

210 
	`îr‹
("›ti⁄ -%¯ex≥˘†¨gumít", 
›t›t
);

213 
	`îr‹
("unknow¿›ti⁄: -%c", 
›t›t
);

215 
¨gc
 -
›töd
, 
¨gv
 += optind;

217 
ßveh™dÀr
 = 
h™dÀr
;

221 i‡(
lÊg
 =0 || 
edô‹
 || 
sÊg
) {

222 
lÊg
 = 0;

223 
edôfûe
 = 
NULL
;

228 i‡(
	`£tjmp
(
jm∂oc
.
loc
)) {

229 
a˘ive
 = 0;

230 i‡(
edôfûe
)

231 
	`u∆ök
(
edôfûe
);

232 
h™dÀr
 = 
ßveh™dÀr
;

233 
	`l⁄gjmp
(
h™dÀr
->
loc
, 1);

235 
h™dÀr
 = &
jm∂oc
;

236 i‡(++
a˘ive
 > 
MAXHISTLOOPS
) {

237 
a˘ive
 = 0;

238 
di•œyhi°
 = 0;

239 
	`îr‹
("calledÑecursivelyÅoo manyÅimes");

244 i‡(
sÊg
 == 0) {

245 i‡(
edô‹
 =
NULL
 &&

246 (
edô‹
 = 
	`b…ölookup
("FCEDIT", 1)Ë=
NULL
 &&

247 (
edô‹
 = 
	`b…ölookup
("EDITOR", 1)Ë=
NULL
)

248 
edô‹
 = 
DEFEDITOR
;

249 i‡(
edô‹
[0] == '-' &&Éditor[1] == '\0') {

250 
sÊg
 = 1;

251 
edô‹
 = 
NULL
;

259 i‡(
lÊg
 =0 && 
¨gc
 > 0 &&

260 ((
ª∂
 = 
	`°rchr
(
¨gv
[0], '=')Ë!
NULL
)) {

261 
∑t
 = 
¨gv
[0];

262 *
ª∂
++ = '\0';

263 
¨gc
--, 
¨gv
++;

268 
¨gc
) {

270 
fú°°r
 = 
lÊg
 ? "-16" : "-1";

271 
œ°°r
 = "-1";

274 
fú°°r
 = 
¨gv
[0];

275 
œ°°r
 = 
lÊg
 ? "-1" : 
¨gv
[0];

278 
fú°°r
 = 
¨gv
[0];

279 
œ°°r
 = 
¨gv
[1];

282 
	`îr‹
("too manyárgs");

287 
fú°
 = 
	`°r_to_evít
(
fú°°r
, 0);

288 
œ°
 = 
	`°r_to_evít
(
œ°°r
, 1);

290 i‡(
rÊg
) {

291 
i
 = 
œ°
;

292 
œ°
 = 
fú°
;

293 
fú°
 = 
i
;

300 
dúe˘i⁄
 = 
fú°
 < 
œ°
 ? 
H_PREV
 : 
H_NEXT
;

305 i‡(
edô‹
) {

306 
fd
;

307 
INTOFF
;

308 
	`•rötf
(
edôfûe°r
, "%s/_shXXXXXX", 
_PATH_TMP
);

309 i‡((
fd
 = 
	`mk°emp
(
edôfûe°r
)) < 0)

310 
	`îr‹
("ˇn'à¸óãÅemp‹¨y fûê%s", 
edôfûe
);

311 
edôfûe
 = 
edôfûe°r
;

312 i‡((
eÂ
 = 
	`fd›í
(
fd
, "w")Ë=
NULL
) {

313 
	`˛o£
(
fd
);

314 
	`îr‹
("can'tállocate stdio buffer forÅemp");

326 
	`hi°‹y
(
hi°
, &
he
, 
H_FIRST
);

327 
ªtvÆ
 = 
	`hi°‹y
(
hi°
, &
he
, 
H_NEXT_EVENT
, 
fú°
);

328 ;
ªtvÆ
 !-1;ÑëvÆ = 
	`hi°‹y
(
hi°
, &
he
, 
dúe˘i⁄
)) {

329 i‡(
lÊg
) {

330 i‡(!
nÊg
)

331 
	`out1fmt
("%5d ", 
he
.
num
);

332 
	`out1°r
(
he
.
°r
);

334 *
s
 = 
∑t
 ?

335 
	`fc_ª∂a˚
(
he
.
°r
, 
∑t
, 
ª∂
) : (*)he.str;

337 i‡(
sÊg
) {

338 i‡(
di•œyhi°
) {

339 
	`out2°r
(
s
);

341 
	`evÆ°rög
(
s
, 0);

342 i‡(
di•œyhi°
 && 
hi°
) {

347 
ﬁdhi°num
 = 
he
.
num
;

348 
	`hi°‹y
(
hi°
, &
he
, 
H_ENTER
, 
s
);

354 
ªtvÆ
 = 
	`hi°‹y
(
hi°
, &
he
,

355 
H_NEXT_EVENT
, 
ﬁdhi°num
);

358 
	`Âuts
(
s
, 
eÂ
);

364 i‡(
he
.
num
 =
œ°
)

367 i‡(
edô‹
) {

368 *
edôcmd
;

370 
	`f˛o£
(
eÂ
);

371 
edôcmd
 = 
	`°Æloc
(
	`°æí
(
edô‹
Ë+ såÀn(
edôfûe
) + 2);

372 
	`•rötf
(
edôcmd
, "%†%s", 
edô‹
, 
edôfûe
);

373 
	`evÆ°rög
(
edôcmd
, 0);

374 
INTON
;

375 
	`ªadcmdfûe
(
edôfûe
);

376 
	`u∆ök
(
edôfûe
);

379 i‡(
lÊg
 =0 && 
a˘ive
 > 0)

380 --
a˘ive
;

381 i‡(
di•œyhi°
)

382 
di•œyhi°
 = 0;

383 
h™dÀr
 = 
ßveh™dÀr
;

385 
	}
}

388 
	$fc_ª∂a˚
(c⁄° *
s
, *
p
, *
r
)

390 *
de°
;

391 
∂í
 = 
	`°æí
(
p
);

393 
	`STARTSTACKSTR
(
de°
);

394 *
s
) {

395 i‡(*
s
 =*
p
 && 
	`°∫cmp
(s,Ö, 
∂í
) == 0) {

396 *
r
)

397 
	`STPUTC
(*
r
++, 
de°
);

398 
s
 +
∂í
;

399 *
p
 = '\0';

401 
	`STPUTC
(*
s
++, 
de°
);

403 
	`STPUTC
('\0', 
de°
);

404 
de°
 = 
	`gøb°ack°r
(dest);

406  (
de°
);

407 
	}
}

410 
	$nŸ_f˙umbî
(c⁄° *
s
)

412 i‡(
s
 =
NULL
)

414 i‡(*
s
 == '-')

415 
s
++;

416  (!
	`is_numbî
(
s
));

417 
	}
}

420 
	$°r_to_evít
(c⁄° *
°r
, 
œ°
)

422 
Hi°Evít
 
he
;

423 c⁄° *
s
 = 
°r
;

424 
ªœtive
 = 0;

425 
i
, 
ªtvÆ
;

427 
ªtvÆ
 = 
	`hi°‹y
(
hi°
, &
he
, 
H_FIRST
);

428 *
s
) {

430 
ªœtive
 = 1;

433 
s
++;

435 i‡(
	`is_numbî
(
s
)) {

436 
i
 = 
	`©oi
(
s
);

437 i‡(
ªœtive
) {

438 
ªtvÆ
 !-1 && 
i
--) {

439 
ªtvÆ
 = 
	`hi°‹y
(
hi°
, &
he
, 
H_NEXT
);

441 i‡(
ªtvÆ
 == -1)

442 
ªtvÆ
 = 
	`hi°‹y
(
hi°
, &
he
, 
H_LAST
);

444 
ªtvÆ
 = 
	`hi°‹y
(
hi°
, &
he
, 
H_NEXT_EVENT
, 
i
);

445 i‡(
ªtvÆ
 == -1) {

450 
ªtvÆ
 = 
	`hi°‹y
(
hi°
, &
he
, 
œ°
 ? 
H_FIRST
 : 
H_LAST
);

453 i‡(
ªtvÆ
 == -1)

454 
	`îr‹
("historyÇumber %sÇot found (internalÉrror)",

455 
°r
);

460 
ªtvÆ
 = 
	`hi°‹y
(
hi°
, &
he
, 
H_PREV_STR
, 
°r
);

461 i‡(
ªtvÆ
 == -1)

462 
	`îr‹
("hi°‹yÖ©ã∫ÇŸ found: %s", 
°r
);

464  (
he
.
num
);

465 
	}
}

468 
	$bödcmd
(
¨gc
, **
¨gv
)

471 i‡(
ñ
 =
NULL
)

472 
	`îr‹
("lineÉditing is disabled");

473  (
	`ñ_∑r£
(
ñ
, 
¨gc
, (c⁄° **)
¨gv
));

474 
	}
}

477 
	~"îr‹.h
"

480 
	$hi°cmd
(
¨gc
, **
¨gv
)

483 
	`îr‹
("not compiled with history support");

486 
	}
}

489 
	$bödcmd
(
¨gc
, **
¨gv
)

492 
	`îr‹
("not compiled withÜineÉditing support");

494 
	}
}

	@sh/init.h

36 
öô
();

37 
ª£t
();

38 
öôshñÕroc
();

	@sh/input.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)input.c 8.3 (Berkeley) 6/9/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/input.c,v 1.25.2.4.4.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<°dio.h
>

42 
	~<f˙é.h
>

43 
	~<î∫o.h
>

44 
	~<uni°d.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

52 
	~"shñl.h
"

53 
	~"ªdú.h
"

54 
	~"sy¡ax.h
"

55 
	~"öput.h
"

56 
	~"ouçut.h
"

57 
	~"›ti⁄s.h
"

58 
	~"memÆloc.h
"

59 
	~"îr‹.h
"

60 
	~"Æüs.h
"

61 
	~"∑r£r.h
"

62 
	~"myhi°edô.h
"

63 
	~"å≠.h
"

65 
	#EOF_NLEFT
 -99

	)

67 
MKINIT


68 
	s°Ωush
 {

69 
°Ωush
 *
	m¥ev
;

70 *
	m¥ev°rög
;

71 
	m¥ev∆e·
;

72 
	m¥evŒe·
;

73 
Æüs
 *
	m≠
;

81 
MKINIT


82 
	s∑r£fûe
 {

83 
∑r£fûe
 *
	m¥ev
;

84 
	mlöno
;

85 
	mfd
;

86 
	m∆e·
;

87 
	mŒe·
;

88 *
	m√xtc
;

89 *
	mbuf
;

90 
°Ωush
 *
	m°Ωush
;

91 
°Ωush
 
	mba£°Ωush
;

95 
	g∂öno
 = 1;

96 
	g∑r£∆e·
;

97 
MKINIT
 
	g∑r£Œe·
;

98 *
	g∑r£√xtc
;

99 
MKINIT
 
∑r£fûe
 
	gba£pf
;

100 
	gba£buf
[
BUFSIZ
];

101 
∑r£fûe
 *
	g∑r£fûe
 = &
ba£pf
;

102 
	göô_edôlöe
 = 0;

103 
	gwhich¥om±
;

105 
EdôLöe
 *
	gñ
;

107 
pushfûe
();

108 
¥ódfd
();

110 #ifde‡
mköô


111 
	gINCLUDE
 "input.h"

112 
	gINCLUDE
 "error.h"

114 
MKINIT
 
	gba£buf
[];

116 
	gINIT
 {

117 
	gba£pf
.
	g√xtc
 = 
ba£pf
.
buf
 = 
ba£buf
;

120 
	gRESET
 {

121 
p›Ælfûes
();

122 i‡(
	gex˚±i⁄
 !
EXSHELLPROC
)

123 
∑r£Œe·
 = 
∑r£∆e·
 = 0;

126 
	gSHELLPROC
 {

127 
p›Ælfûes
();

137 
	$pfgës
(*
löe
, 
Àn
)

139 *
p
 = 
löe
;

140 
∆e·
 = 
Àn
;

141 
c
;

143 --
∆e·
 > 0) {

144 
c
 = 
	`pgëc_ma¸o
();

145 i‡(
c
 =
PEOF
) {

146 i‡(
p
 =
löe
)

147  
NULL
;

150 *
p
++ = 
c
;

151 i‡(
c
 == '\n')

154 *
p
 = '\0';

155  
löe
;

156 
	}
}

166 
	$pgëc
()

168  
	`pgëc_ma¸o
();

169 
	}
}

173 
	$¥ódfd
()

175 
ƒ
;

176 
∑r£√xtc
 = 
∑r£fûe
->
buf
;

178 #i‚de‡
NO_HISTORY


179 i‡(
ñ
 !
NULL
 && 
gŸwöch
) {

180 
gŸwöch
 = 0;

181 
	`ñ_ªsize
(
ñ
);

184 
ªåy
:

185 #i‚de‡
NO_HISTORY


186 i‡(
∑r£fûe
->
fd
 =0 && 
ñ
) {

187 c⁄° *
æ_˝
;

188 
ñ_Àn
;

190 i‡(
æ_˝
 =
NULL
)

191 
æ_˝
 = 
	`ñ_gës
(
ñ
, &
ñ_Àn
);

192 i‡(
æ_˝
 =
NULL
)

193 
ƒ
 = 0;

195 
ƒ
 = 
ñ_Àn
;

196 i‡(
ƒ
 > 
BUFSIZ
 - 1)

197 
ƒ
 = 
BUFSIZ
 - 1;

198 
	`mem˝y
(
∑r£√xtc
, 
æ_˝
, 
ƒ
);

199 i‡(
ƒ
 !
ñ_Àn
) {

200 
ñ_Àn
 -
ƒ
;

201 
æ_˝
 +
ƒ
;

203 
æ_˝
 = 
NULL
;

207 
ƒ
 = 
	`ªad
(
∑r£fûe
->
fd
, 
∑r£√xtc
, 
BUFSIZ
 - 1);

209 i‡(
ƒ
 <= 0) {

210 i‡(
ƒ
 < 0) {

211 i‡(
î∫o
 =
EINTR
)

212 
ªåy
;

213 i‡(
∑r£fûe
->
fd
 =0 && 
î∫o
 =
EWOULDBLOCK
) {

214 
Êags
 = 
	`f˙é
(0, 
F_GETFL
, 0);

215 i‡(
Êags
 >0 && fœg†& 
O_NONBLOCK
) {

216 
Êags
 &=~ 
O_NONBLOCK
;

217 i‡(
	`f˙é
(0, 
F_SETFL
, 
Êags
) >= 0) {

218 
	`out2°r
("sh:Åurning off NDELAY mode\n");

219 
ªåy
;

224 
ƒ
 = -1;

226  
ƒ
;

227 
	}
}

240 
	$¥ódbuf„r
()

242 *
p
, *
q
;

243 
m‹e
;

244 
somëhög
;

245 
ßvec
;

247 i‡(
∑r£fûe
->
°Ωush
) {

248 
	`p›°rög
();

249 i‡(--
∑r£∆e·
 >= 0)

250  (*
∑r£√xtc
++);

252 i‡(
∑r£∆e·
 =
EOF_NLEFT
 || 
∑r£fûe
->
buf
 =
NULL
)

253  
PEOF
;

254 
	`Êushout
(&
ouçut
);

255 
	`Êushout
(&
îrout
);

257 
agaö
:

258 i‡(
∑r£Œe·
 <= 0) {

259 i‡((
∑r£Œe·
 = 
	`¥ódfd
()) == -1) {

260 
∑r£Œe·
 = 
∑r£∆e·
 = 
EOF_NLEFT
;

261  
PEOF
;

265 
q
 = 
p
 = 
∑r£√xtc
;

268 
somëhög
 = 0;

269 
m‹e
 = 1; more;) {

270 *
p
) {

272 
p
++;

273 
check
;

280 
∑r£∆e·
 = 
q
 - 
∑r£√xtc
;

281 
m‹e
 = 0;

285 
somëhög
 = 1;

289 *
q
++ = *
p
++;

290 
check
:

291 i‡(--
∑r£Œe·
 <= 0) {

292 
∑r£∆e·
 = 
q
 - 
∑r£√xtc
 - 1;

293 i‡(
∑r£∆e·
 < 0)

294 
agaö
;

295 *
q
 = '\0';

296 
m‹e
 = 0;

300 
ßvec
 = *
q
;

301 *
q
 = '\0';

303 #i‚de‡
NO_HISTORY


304 i‡(
∑r£fûe
->
fd
 =0 && 
hi°
 && 
somëhög
) {

305 
Hi°Evít
 
he
;

306 
INTOFF
;

307 
	`hi°‹y
(
hi°
, &
he
, 
which¥om±
 =1 ? 
H_ENTER
 : 
H_ADD
,

308 
∑r£√xtc
);

309 
INTON
;

313 i‡(
vÊag
) {

314 
	`out2°r
(
∑r£√xtc
);

315 
	`Êushout
(
out2
);

318 *
q
 = 
ßvec
;

320  *
∑r£√xtc
++;

321 
	}
}

329 
	$¥ód©eof
()

331 i‡(
∑r£∆e·
 > 0)

333 i‡(
∑r£fûe
->
°Ωush
)

335 i‡(
∑r£∆e·
 =
EOF_NLEFT
 || 
∑r£fûe
->
buf
 =
NULL
)

338 
	}
}

346 
	$pungëc
()

348 
∑r£∆e·
++;

349 
∑r£√xtc
--;

350 
	}
}

357 
	$push°rög
(*
s
, 
Àn
, *
≠
)

359 
°Ωush
 *
•
;

361 
INTOFF
;

363 i‡(
∑r£fûe
->
°Ωush
) {

364 
•
 = 
	`ckmÆloc
( (
°Ωush
));

365 
•
->
¥ev
 = 
∑r£fûe
->
°Ωush
;

366 
∑r£fûe
->
°Ωush
 = 
•
;

368 
•
 = 
∑r£fûe
->
°Ωush
 = &’¨£fûe->
ba£°Ωush
);

369 
•
->
¥ev°rög
 = 
∑r£√xtc
;

370 
•
->
¥ev∆e·
 = 
∑r£∆e·
;

371 
•
->
¥evŒe·
 = 
∑r£Œe·
;

372 
•
->
≠
 = (
Æüs
 *)ap;

373 i‡(
≠
)

374 ((
Æüs
 *)
≠
)->
Êag
 |
ALIASINUSE
;

375 
∑r£√xtc
 = 
s
;

376 
∑r£∆e·
 = 
Àn
;

377 
INTON
;

378 
	}
}

381 
	$p›°rög
()

383 
°Ωush
 *
•
 = 
∑r£fûe
->strpush;

385 
INTOFF
;

386 
∑r£√xtc
 = 
•
->
¥ev°rög
;

387 
∑r£∆e·
 = 
•
->
¥ev∆e·
;

388 
∑r£Œe·
 = 
•
->
¥evŒe·
;

390 i‡(
•
->
≠
)

391 
•
->
≠
->
Êag
 &~
ALIASINUSE
;

392 
∑r£fûe
->
°Ωush
 = 
•
->
¥ev
;

393 i‡(
•
 !&(
∑r£fûe
->
ba£°Ωush
))

394 
	`ck‰ì
(
•
);

395 
INTON
;

396 
	}
}

404 
	$£töputfûe
(c⁄° *
‚ame
, 
push
)

406 
fd
;

407 
fd2
;

409 
INTOFF
;

410 i‡((
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
)) < 0)

411 
	`îr‹
("C™'à›í %s: %s", 
‚ame
, 
	`°ªº‹
(
î∫o
));

412 i‡(
fd
 < 10) {

413 
fd2
 = 
	`f˙é
(
fd
, 
F_DUPFD
, 10);

414 
	`˛o£
(
fd
);

415 i‡(
fd2
 < 0)

416 
	`îr‹
("Out of file descriptors");

417 
fd
 = 
fd2
;

419 
	`£töputfd
(
fd
, 
push
);

420 
INTON
;

421 
	}
}

430 
	$£töputfd
(
fd
, 
push
)

432 ()
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
);

433 i‡(
push
) {

434 
	`pushfûe
();

435 
∑r£fûe
->
buf
 = 
	`ckmÆloc
(
BUFSIZ
);

437 i‡(
∑r£fûe
->
fd
 > 0)

438 
	`˛o£
(
∑r£fûe
->
fd
);

439 
∑r£fûe
->
fd
 = fd;

440 i‡(
∑r£fûe
->
buf
 =
NULL
)

441 
∑r£fûe
->
buf
 = 
	`ckmÆloc
(
BUFSIZ
);

442 
∑r£Œe·
 = 
∑r£∆e·
 = 0;

443 
∂öno
 = 1;

444 
	}
}

452 
	$£töput°rög
(*
°rög
, 
push
)

454 
INTOFF
;

455 i‡(
push
)

456 
	`pushfûe
();

457 
∑r£√xtc
 = 
°rög
;

458 
∑r£Œe·
 = 
∑r£∆e·
 = 
	`°æí
(
°rög
);

459 
∑r£fûe
->
buf
 = 
NULL
;

460 
∂öno
 = 1;

461 
INTON
;

462 
	}
}

472 
	$pushfûe
()

474 
∑r£fûe
 *
pf
;

476 
∑r£fûe
->
∆e·
 = 
∑r£∆e·
;

477 
∑r£fûe
->
Œe·
 = 
∑r£Œe·
;

478 
∑r£fûe
->
√xtc
 = 
∑r£√xtc
;

479 
∑r£fûe
->
löno
 = 
∂öno
;

480 
pf
 = (
∑r£fûe
 *)
	`ckmÆloc
( (parsefile));

481 
pf
->
¥ev
 = 
∑r£fûe
;

482 
pf
->
fd
 = -1;

483 
pf
->
°Ωush
 = 
NULL
;

484 
pf
->
ba£°Ωush
.
¥ev
 = 
NULL
;

485 
∑r£fûe
 = 
pf
;

486 
	}
}

490 
	$p›fûe
()

492 
∑r£fûe
 *
pf
 =Öarsefile;

494 
INTOFF
;

495 i‡(
pf
->
fd
 >= 0)

496 
	`˛o£
(
pf
->
fd
);

497 i‡(
pf
->
buf
)

498 
	`ck‰ì
(
pf
->
buf
);

499 
pf
->
°Ωush
)

500 
	`p›°rög
();

501 
∑r£fûe
 = 
pf
->
¥ev
;

502 
	`ck‰ì
(
pf
);

503 
∑r£∆e·
 = 
∑r£fûe
->
∆e·
;

504 
∑r£Œe·
 = 
∑r£fûe
->
Œe·
;

505 
∑r£√xtc
 = 
∑r£fûe
->
√xtc
;

506 
∂öno
 = 
∑r£fûe
->
löno
;

507 
INTON
;

508 
	}
}

516 
	$p›Ælfûes
()

518 
∑r£fûe
 !&
ba£pf
)

519 
	`p›fûe
();

520 
	}
}

530 
	$˛o£s¸ùt
()

532 
	`p›Ælfûes
();

533 i‡(
∑r£fûe
->
fd
 > 0) {

534 
	`˛o£
(
∑r£fûe
->
fd
);

535 
∑r£fûe
->
fd
 = 0;

537 
	}
}

	@sh/input.h

43 
∂öno
;

44 
∑r£∆e·
;

45 *
∑r£√xtc
;

46 
öô_edôlöe
;

48 *
pfgës
(*, );

49 
pgëc
();

50 
¥ódbuf„r
();

51 
¥ód©eof
();

52 
pungëc
();

53 
push°rög
(*, , *);

54 
p›°rög
();

55 
£töputfûe
(const *, );

56 
£töputfd
(, );

57 
£töput°rög
(*, );

58 
p›fûe
();

59 
p›Ælfûes
();

60 
˛o£s¸ùt
();

62 
	#pgëc_ma¸o
(Ë(--
∑r£∆e·
 >0? *
∑r£√xtc
++ : 
	`¥ódbuf„r
())

	)

	@sh/jobs.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)jobs.c 8.5 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/jobs.c,v 1.72.10.8.2.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sys/io˘l.h
>

42 
	~<sys/∑øm.h
>

43 
	~<sys/ªsour˚.h
>

44 
	~<sys/time.h
>

45 
	~<sys/waô.h
>

46 
	~<î∫o.h
>

47 
	~<f˙é.h
>

48 
	~<∑ths.h
>

49 
	~<sig«l.h
>

50 
	~<°ddef.h
>

51 
	~<°dlib.h
>

52 
	~<uni°d.h
>

54 
	~"shñl.h
"

55 #i‡
JOBS


56 
	~<ãrmios.h
>

57 #unde‡
CEOF


59 
	~"ªdú.h
"

60 
	~"show.h
"

61 
	~"maö.h
"

62 
	~"∑r£r.h
"

63 
	~"nodes.h
"

64 
	~"jobs.h
"

65 
	~"›ti⁄s.h
"

66 
	~"å≠.h
"

67 
	~"sy¡ax.h
"

68 
	~"öput.h
"

69 
	~"ouçut.h
"

70 
	~"memÆloc.h
"

71 
	~"îr‹.h
"

72 
	~"my°rög.h
"

75 
job
 *
	gjobèb
;

76 
	gnjobs
;

77 
MKINIT
 
pid_t
 
	gbackgndpid
 = -1;

78 #i‡
JOBS


79 
job
 *
	gjobmru
;

80 
pid_t
 
	göôüÕgΩ
;

82 
	gö_waôcmd
 = 0;

83 
	gö_dowaô
 = 0;

84 vﬁ©ûê
sig_©omic_t
 
	gbªakwaôcmd
 = 0;

85 
	gâyfd
 = -1;

87 #i‡
JOBS


88 
ª°¨tjob
(
job
 *);

90 
‰ìjob
(
job
 *);

91 
job
 *
gëjob
(*);

92 
pid_t
 
dowaô
(, 
job
 *);

93 
pid_t
 
waô¥oc
(, *);

94 
checkzombõs
();

95 
cmdtxt
(
node
 *);

96 
cmdputs
(const *);

97 #i‡
JOBS


98 
£tcurjob
(
job
 *);

99 
dñjob
(
job
 *);

100 
job
 *
gëcurjob
(job *);

102 
showjob
(
job
 *, 
pid_t
, );

109 
MKINIT
 
	gjob˘l
;

111 #i‡
JOBS


113 
	$£tjob˘l
(
⁄
)

115 
i
;

117 i‡(
⁄
 =
job˘l
 || 
roŸshñl
 == 0)

119 i‡(
⁄
) {

120 i‡(
âyfd
 != -1)

121 
	`˛o£
(
âyfd
);

122 i‡((
âyfd
 = 
	`›í
(
_PATH_TTY
, 
O_RDWR
)) < 0) {

123 
i
 = 0;

124 
i
 <2 && !
	`ißây
(i))

125 
i
++;

126 i‡(
i
 > 2 || (
âyfd
 = 
	`f˙é
(i, 
F_DUPFD
, 10)) < 0)

127 
out
;

129 i‡(
âyfd
 < 10) {

134 i‡((
i
 = 
	`f˙é
(
âyfd
, 
F_DUPFD
, 10)) < 0) {

135 
	`˛o£
(
âyfd
);

136 
âyfd
 = -1;

137 
out
;

139 
	`˛o£
(
âyfd
);

140 
âyfd
 = 
i
;

142 i‡(
	`f˙é
(
âyfd
, 
F_SETFD
, 
FD_CLOEXEC
) < 0) {

143 
	`˛o£
(
âyfd
);

144 
âyfd
 = -1;

145 
out
;

148 
öôüÕgΩ
 = 
	`tcgëpgΩ
(
âyfd
);

149 i‡(
öôüÕgΩ
 < 0) {

150 
out
: 
	`out2°r
("sh: can'táccessÅty; job controlÅurned off\n");

151 
mÊag
 = 0;

154 i‡(
öôüÕgΩ
 == -1)

155 
öôüÕgΩ
 = 
	`gëpgΩ
();

156 i‡(
öôüÕgΩ
 !
	`gëpgΩ
()) {

157 
	`kûÕg
(0, 
SIGTTIN
);

161 
	`£tsig«l
(
SIGTSTP
);

162 
	`£tsig«l
(
SIGTTOU
);

163 
	`£tsig«l
(
SIGTTIN
);

164 
	`£çgid
(0, 
roŸpid
);

165 
	`tc£çgΩ
(
âyfd
, 
roŸpid
);

167 
	`£çgid
(0, 
öôüÕgΩ
);

168 
	`tc£çgΩ
(
âyfd
, 
öôüÕgΩ
);

169 
	`˛o£
(
âyfd
);

170 
âyfd
 = -1;

171 
	`£tsig«l
(
SIGTSTP
);

172 
	`£tsig«l
(
SIGTTOU
);

173 
	`£tsig«l
(
SIGTTIN
);

175 
job˘l
 = 
⁄
;

176 
	}
}

180 #ifde‡
mköô


181 
	gINCLUDE
 <
	gsys
/
	gty≥s
.
	gh
>

182 
	gINCLUDE
 <
	g°dlib
.
	gh
>

184 
	gSHELLPROC
 {

185 
	gbackgndpid
 = -1;

186 #i‡
JOBS


187 
	gjob˘l
 = 0;

195 #i‡
JOBS


197 
	$fgcmd
(
¨gc
 
__unu£d
, **
¨gv
)

199 
job
 *
jp
;

200 
pid_t
 
pgΩ
;

201 
°©us
;

203 
jp
 = 
	`gëjob
(
¨gv
[1]);

204 i‡(
jp
->
job˘l
 == 0)

205 
	`îr‹
("jobÇot created under job control");

206 
	`out1°r
(
jp
->
ps
[0].
cmd
);

207 
	`out1c
('\n');

208 
	`Êushout
(&
ouçut
);

209 
pgΩ
 = 
jp
->
ps
[0].
pid
;

210 
	`tc£çgΩ
(
âyfd
, 
pgΩ
);

211 
	`ª°¨tjob
(
jp
);

212 
jp
->
f‹eground
 = 1;

213 
INTOFF
;

214 
°©us
 = 
	`waôf‹job
(
jp
, (*)
NULL
);

215 
INTON
;

216  
°©us
;

217 
	}
}

221 
	$bgcmd
(
¨gc
, **
¨gv
)

223 
s
[64];

224 
job
 *
jp
;

227 
jp
 = 
	`gëjob
(*++
¨gv
);

228 i‡(
jp
->
job˘l
 == 0)

229 
	`îr‹
("jobÇot created under job control");

230 i‡(
jp
->
°©e
 =
JOBDONE
)

232 
	`ª°¨tjob
(
jp
);

233 
jp
->
f‹eground
 = 0;

234 
	`fmt°r
(
s
, 64, "[%td] ", 
jp
 - 
jobèb
 + 1);

235 
	`out1°r
(
s
);

236 
	`out1°r
(
jp
->
ps
[0].
cmd
);

237 
	`out1c
('\n');

238 } --
¨gc
 > 1);

240 
	}
}

244 
	$ª°¨tjob
(
job
 *
jp
)

246 
¥oc°©
 *
ps
;

247 
i
;

249 i‡(
jp
->
°©e
 =
JOBDONE
)

251 
	`£tcurjob
(
jp
);

252 
INTOFF
;

253 
	`kûÕg
(
jp
->
ps
[0].
pid
, 
SIGCONT
);

254 
ps
 = 
jp
->ps, 
i
 = jp->
≈rocs
 ; --i >= 0 ;Ös++) {

255 i‡(
	`WIFSTOPPED
(
ps
->
°©us
)) {

256 
ps
->
°©us
 = -1;

257 
jp
->
°©e
 = 0;

260 
INTON
;

261 
	}
}

266 
	$jobscmd
(
¨gc
, *
¨gv
[])

268 *
id
;

269 
ch
, 
mode
;

271 
›töd
 = 
›åe£t
 = 1;

272 
›ãº
 = 0;

273 
mode
 = 
SHOWJOBS_DEFAULT
;

274 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "lps")) != -1) {

275 
ch
) {

277 
mode
 = 
SHOWJOBS_VERBOSE
;

280 
mode
 = 
SHOWJOBS_PGIDS
;

283 
mode
 = 
SHOWJOBS_PIDS
;

287 
	`îr‹
("unknow¿›ti⁄: -%c", 
›t›t
);

290 
¨gc
 -
›töd
;

291 
¨gv
 +
›töd
;

293 i‡(
¨gc
 == 0)

294 
	`showjobs
(0, 
mode
);

296 (
id
 = *
¨gv
++Ë!
NULL
)

297 
	`showjob
(
	`gëjob
(
id
), 0, 
mode
);

300 
	}
}

303 
	$showjob
(
job
 *
jp
, 
pid_t
 
pid
, 
mode
)

305 
s
[64];

306 
¥oc°©
 *
ps
;

307 
job
 *
j
;

308 
cﬁ
, 
cuº
, 
i
, 
jobno
, 
¥ev
, 
¥o˙o
;

309 
pid_t
 
µid
;

310 
c
;

312 
¥o˙o
 = (
mode
 =
SHOWJOBS_PGIDS
Ë? 1 : 
jp
->
≈rocs
;

313 
jobno
 = 
jp
 - 
jobèb
 + 1;

314 
cuº
 = 
¥ev
 = 0;

315 #i‡
JOBS


316 i‡((
j
 = 
	`gëcurjob
(
NULL
)) != NULL) {

317 
cuº
 = 
j
 - 
jobèb
 + 1;

318 i‡((
j
 = 
	`gëcurjob
(j)Ë!
NULL
)

319 
¥ev
 = 
j
 - 
jobèb
 + 1;

322 
ps
 = 
jp
->ps ; ;Ös++) {

323 i‡(
mode
 =
SHOWJOBS_PIDS
 || modê=
SHOWJOBS_PGIDS
) {

324 
µid
 = (
mode
 =
SHOWJOBS_PIDS
Ë? 
ps
->
pid
 :

325 
	`gëpgid
(
ps
->
pid
);

326 
	`out1fmt
("%d\n", ()
µid
);

327 
skù
;

329 i‡(
mode
 !
SHOWJOBS_VERBOSE
 && 
ps
 !
jp
->p†&& 
pid
 == 0)

330 
skù
;

331 i‡(
pid
 !0 &&Öid !
ps
->pid)

332 
skù
;

333 i‡(
jobno
 =
cuº
 && 
ps
 =
jp
->ps)

334 
c
 = '+';

335 i‡(
jobno
 =
¥ev
 && 
ps
 =
jp
->ps)

336 
c
 = '-';

338 
c
 = ' ';

339 i‡(
ps
 =
jp
->ps)

340 
	`fmt°r
(
s
, 64, "[%d] %¯", 
jobno
, 
c
);

342 
	`fmt°r
(
s
, 64, " %¯", 
c
);

343 
	`out1°r
(
s
);

344 
cﬁ
 = 
	`°æí
(
s
);

345 i‡(
mode
 =
SHOWJOBS_VERBOSE
) {

346 
	`fmt°r
(
s
, 64, "%d ", ()
ps
->
pid
);

347 
	`out1°r
(
s
);

348 
cﬁ
 +
	`°æí
(
s
);

350 
s
[0] = '\0';

351 i‡(
ps
 !
jp
->ps) {

352 *
s
 = '\0';

353 } i‡(
ps
->
°©us
 == -1) {

354 
	`°r˝y
(
s
, "Running");

355 } i‡(
	`WIFEXITED
(
ps
->
°©us
)) {

356 i‡(
	`WEXITSTATUS
(
ps
->
°©us
) == 0)

357 
	`°r˝y
(
s
, "Done");

359 
	`fmt°r
(
s
, 64, "Done (%d)",

360 
	`WEXITSTATUS
(
ps
->
°©us
));

362 #i‡
JOBS


363 i‡(
	`WIFSTOPPED
(
ps
->
°©us
))

364 
i
 = 
	`WSTOPSIG
(
ps
->
°©us
);

367 
i
 = 
	`WTERMSIG
(
ps
->
°©us
);

368 i‡((
i
 & 0x7FË< 
sys_nsig
 && 
sys_sigli°
[i & 0x7F])

369 
	`sc›y
(
sys_sigli°
[
i
 & 0x7F], 
s
);

371 
	`fmt°r
(
s
, 64, "Sig«»%d", 
i
 & 0x7F);

372 i‡(
	`WCOREDUMP
(
ps
->
°©us
))

373 
	`°rˇt
(
s
, " (core dumped)");

375 
	`out1°r
(
s
);

376 
cﬁ
 +
	`°æí
(
s
);

378 
	`out1c
(' ');

379 
cﬁ
++;

380 } 
cﬁ
 < 30);

381 
	`out1°r
(
ps
->
cmd
);

382 
	`out1c
('\n');

383 
skù
: i‡(--
¥o˙o
 <= 0)

386 
	}
}

398 
	$showjobs
(
ch™ge
, 
mode
)

400 
jobno
;

401 
job
 *
jp
;

403 
	`TRACE
(("showjobs(%dËˇŒed\n", 
ch™ge
));

404 
	`checkzombõs
();

405 
jobno
 = 1, 
jp
 = 
jobèb
 ; jobnÿ<
njobs
 ; jobno++, jp++) {

406 i‡(! 
jp
->
u£d
)

408 i‡(
jp
->
≈rocs
 == 0) {

409 
	`‰ìjob
(
jp
);

412 i‡(
ch™ge
 && ! 
jp
->
ch™ged
)

414 
	`showjob
(
jp
, 0, 
mode
);

415 
jp
->
ch™ged
 = 0;

416 i‡(
jp
->
°©e
 =
JOBDONE
) {

417 
	`‰ìjob
(
jp
);

420 
	}
}

428 
	$‰ìjob
(
job
 *
jp
)

430 
¥oc°©
 *
ps
;

431 
i
;

433 
INTOFF
;

434 
i
 = 
jp
->
≈rocs
, 
ps
 = jp->ps ; --i >= 0 ;Ös++) {

435 i‡(
ps
->
cmd
 !
nuŒ°r
)

436 
	`ck‰ì
(
ps
->
cmd
);

438 i‡(
jp
->
ps
 !&jp->
ps0
)

439 
	`ck‰ì
(
jp
->
ps
);

440 
jp
->
u£d
 = 0;

441 #i‡
JOBS


442 
	`dñjob
(
jp
);

444 
INTON
;

445 
	}
}

450 
	$waôcmd
(
¨gc
, **
¨gv
)

452 
job
 *job;

453 
°©us
, 
ªtvÆ
;

454 
job
 *
jp
;

456 i‡(
¨gc
 > 1) {

457 
job
 = 
	`gëjob
(
¨gv
[1]);

459 
job
 = 
NULL
;

467 
ö_waôcmd
++;

469 i‡(
job
 !
NULL
) {

470 i‡(
job
->
°©e
) {

471 
°©us
 = 
job
->
ps
[job->
≈rocs
 - 1].status;

472 i‡(
	`WIFEXITED
(
°©us
))

473 
ªtvÆ
 = 
	`WEXITSTATUS
(
°©us
);

474 #i‡
JOBS


475 i‡(
	`WIFSTOPPED
(
°©us
))

476 
ªtvÆ
 = 
	`WSTOPSIG
(
°©us
) + 128;

479 
ªtvÆ
 = 
	`WTERMSIG
(
°©us
) + 128;

480 i‡(! 
iÊag
)

481 
	`‰ìjob
(
job
);

482 
ö_waôcmd
--;

483  
ªtvÆ
;

486 
jp
 = 
jobèb
 ; ; jp++) {

487 i‡(
jp
 >
jobèb
 + 
njobs
) {

488 
ö_waôcmd
--;

491 i‡(
jp
->
u£d
 && jp->
°©e
 == 0)

495 } 
	`dowaô
(1, (
job
 *)
NULL
) != -1);

496 
ö_waôcmd
--;

499 
	}
}

504 
	$jobidcmd
(
¨gc
 
__unu£d
, **
¨gv
)

506 
job
 *
jp
;

507 
i
;

509 
jp
 = 
	`gëjob
(
¨gv
[1]);

510 
i
 = 0 ; i < 
jp
->
≈rocs
 ; ) {

511 
	`out1fmt
("%d", ()
jp
->
ps
[
i
].
pid
);

512 
	`out1c
(++
i
 < 
jp
->
≈rocs
? ' ' : '\n');

515 
	}
}

523 
job
 *

524 
	$gëjob
(*
«me
)

526 
jobno
;

527 
job
 *
found
, *
jp
;

528 
pid_t
 
pid
;

529 
i
;

531 i‡(
«me
 =
NULL
) {

532 #i‡
JOBS


533 
cuºítjob
: i‡((
jp
 = 
	`gëcurjob
(
NULL
)) == NULL)

534 
	`îr‹
("No current job");

535  (
jp
);

537 
	`îr‹
("No current job");

539 } i‡(
«me
[0] == '%') {

540 i‡(
	`is_digô
(
«me
[1])) {

541 
jobno
 = 
	`numbî
(
«me
 + 1);

542 i‡(
jobno
 > 0 && jobnÿ<
njobs


543 && 
jobèb
[
jobno
 - 1].
u£d
 != 0)

544  &
jobèb
[
jobno
 - 1];

545 #i‡
JOBS


546 } i‡(
«me
[1] == '%' &&Çame[2] == '\0') {

547 
cuºítjob
;

548 } i‡(
«me
[1] == '+' &&Çame[2] == '\0') {

549 
cuºítjob
;

550 } i‡(
«me
[1] == '-' &&Çame[2] == '\0') {

551 i‡((
jp
 = 
	`gëcurjob
(
NULL
)) == NULL ||

552 (
jp
 = 
	`gëcurjob
(jp)Ë=
NULL
)

553 
	`îr‹
("NoÖrevious job");

554  (
jp
);

556 } i‡(
«me
[1] == '?') {

557 
found
 = 
NULL
;

558 
jp
 = 
jobèb
, 
i
 = 
njobs
 ; --i >= 0 ; jp++) {

559 i‡(
jp
->
u£d
 && jp->
≈rocs
 > 0

560 && 
	`°r°r
(
jp
->
ps
[0].
cmd
, 
«me
 + 2Ë!
NULL
) {

561 i‡(
found
)

562 
	`îr‹
("%s:ámbiguous", 
«me
);

563 
found
 = 
jp
;

566 i‡(
found
 !
NULL
)

567  (
found
);

569 
found
 = 
NULL
;

570 
jp
 = 
jobèb
, 
i
 = 
njobs
 ; --i >= 0 ; jp++) {

571 i‡(
jp
->
u£d
 && jp->
≈rocs
 > 0

572 && 
	`¥efix
(
«me
 + 1, 
jp
->
ps
[0].
cmd
)) {

573 i‡(
found
)

574 
	`îr‹
("%s:ámbiguous", 
«me
);

575 
found
 = 
jp
;

578 i‡(
found
)

579  
found
;

581 } i‡(
	`is_numbî
(
«me
)) {

582 
pid
 = (
pid_t
)
	`numbî
(
«me
);

583 
jp
 = 
jobèb
, 
i
 = 
njobs
 ; --i >= 0 ; jp++) {

584 i‡(
jp
->
u£d
 && jp->
≈rocs
 > 0

585 && 
jp
->
ps
[jp->
≈rocs
 - 1].
pid
 ==Öid)

586  
jp
;

589 
	`îr‹
("Nÿsuch job: %s", 
«me
);

591  
NULL
;

592 
	}
}

600 
job
 *

601 
	$makejob
(
node
 *nodê
__unu£d
, 
≈rocs
)

603 
i
;

604 
job
 *
jp
;

606 
i
 = 
njobs
, 
jp
 = 
jobèb
 ; ; jp++) {

607 i‡(--
i
 < 0) {

608 
INTOFF
;

609 i‡(
njobs
 == 0) {

610 
jobèb
 = 
	`ckmÆloc
(4 *  jobtab[0]);

611 #i‡
JOBS


612 
jobmru
 = 
NULL
;

615 
jp
 = 
	`ckmÆloc
((
njobs
 + 4Ë*  
jobèb
[0]);

616 
	`mem˝y
(
jp
, 
jobèb
, 
njobs
 *  jp[0]);

617 #i‡
JOBS


619 i‡(
jobmru
 !
NULL
)

620 
jobmru
 = &
jp
[jobmru - 
jobèb
];

621 
i
 = 0; i < 
njobs
; i++)

622 i‡(
jp
[
i
].
√xt
 !
NULL
)

623 
jp
[
i
].
√xt
 = &jp[jp[i].next -

624 
jobèb
];

627 
i
 = 0; i < 
njobs
; i++)

628 i‡(
jp
[
i
].
ps
 =&
jobèb
[i].
ps0
)

629 
jp
[
i
].
ps
 = &jp[i].
ps0
;

630 
	`ck‰ì
(
jobèb
);

631 
jobèb
 = 
jp
;

633 
jp
 = 
jobèb
 + 
njobs
;

634 
i
 = 4 ; --ò>0 ; 
jobèb
[
njobs
++].
u£d
 = 0);

635 
INTON
;

638 i‡(
jp
->
u£d
 == 0)

641 
INTOFF
;

642 
jp
->
°©e
 = 0;

643 
jp
->
u£d
 = 1;

644 
jp
->
ch™ged
 = 0;

645 
jp
->
≈rocs
 = 0;

646 
jp
->
f‹eground
 = 0;

647 #i‡
JOBS


648 
jp
->
job˘l
 = jobctl;

649 
jp
->
√xt
 = 
NULL
;

651 i‡(
≈rocs
 > 1) {

652 
jp
->
ps
 = 
	`ckmÆloc
(
≈rocs
 *  (
¥oc°©
));

654 
jp
->
ps
 = &jp->
ps0
;

656 
INTON
;

657 
	`TRACE
(("makejob(%p, %dËªtu∫†%%%td\n", (*)
node
, 
≈rocs
,

658 
jp
 - 
jobèb
 + 1));

659  
jp
;

660 
	}
}

662 #i‡
JOBS


664 
	$£tcurjob
(
job
 *
cj
)

666 
job
 *
jp
, *
¥ev
;

668 
¥ev
 = 
NULL
, 
jp
 = 
jobmru
; j∞!NULL;Öªv = jp, j∞jp->
√xt
) {

669 i‡(
jp
 =
cj
) {

670 i‡(
¥ev
 !
NULL
)

671 
¥ev
->
√xt
 = 
jp
->next;

673 
jobmru
 = 
jp
->
√xt
;

674 
jp
->
√xt
 = 
jobmru
;

675 
jobmru
 = 
cj
;

679 
cj
->
√xt
 = 
jobmru
;

680 
jobmru
 = 
cj
;

681 
	}
}

684 
	$dñjob
(
job
 *
j
)

686 
job
 *
jp
, *
¥ev
;

688 
¥ev
 = 
NULL
, 
jp
 = 
jobmru
; j∞!NULL;Öªv = jp, j∞jp->
√xt
) {

689 i‡(
jp
 =
j
) {

690 i‡(
¥ev
 !
NULL
)

691 
¥ev
->
√xt
 = 
jp
->next;

693 
jobmru
 = 
jp
->
√xt
;

697 
	}
}

703 
job
 *

704 
	$gëcurjob
(
job
 *
nj
)

706 
job
 *
jp
;

709 
jp
 = 
jobmru
; j∞!
NULL
; j∞jp->
√xt
)

710 i‡(
jp
->
u£d
 && j∞!
nj
 && jp->
°©e
 =
JOBSTOPPED
)

711  (
jp
);

713 
jp
 = 
jobmru
; j∞!
NULL
; j∞jp->
√xt
)

714 i‡(
jp
->
u£d
 && j∞!
nj
)

715  (
jp
);

717  (
NULL
);

718 
	}
}

737 
pid_t


738 
	$f‹kshñl
(
job
 *
jp
, 
node
 *
n
, 
mode
)

740 
pid_t
 
pid
;

741 
pid_t
 
pgΩ
;

743 
	`TRACE
(("f‹kshñl(%%%td, %p, %dËˇŒed\n", 
jp
 - 
jobèb
, (*)
n
,

744 
mode
));

745 
INTOFF
;

746 i‡(
mode
 =
FORK_BG
 && (
jp
 =
NULL
 || jp->
≈rocs
 == 0))

747 
	`checkzombõs
();

748 
	`ÊushÆl
();

749 
pid
 = 
	`f‹k
();

750 i‡(
pid
 == -1) {

751 
	`TRACE
(("F‹k faûed,Éºno=%d\n", 
î∫o
));

752 
INTON
;

753 
	`îr‹
("C™nŸ f‹k: %s", 
	`°ªº‹
(
î∫o
));

755 i‡(
pid
 == 0) {

756 
job
 *
p
;

757 
wa§oŸ
;

758 
i
;

760 
	`TRACE
(("Chûd shñ»%d\n", ()
	`gëpid
()));

761 
wa§oŸ
 = 
roŸshñl
;

762 
roŸshñl
 = 0;

763 
	`˛o£s¸ùt
();

764 
INTON
;

765 
	`˛ór_å≠s
();

766 #i‡
JOBS


767 
job˘l
 = 0;

768 i‡(
wa§oŸ
 && 
mode
 !
FORK_NOJOB
 && 
mÊag
) {

769 i‡(
jp
 =
NULL
 || jp->
≈rocs
 == 0)

770 
pgΩ
 = 
	`gëpid
();

772 
pgΩ
 = 
jp
->
ps
[0].
pid
;

773 i‡(
	`£çgid
(0, 
pgΩ
Ë=0 && 
mode
 =
FORK_FG
) {

775 i‡(
	`tc£çgΩ
(
âyfd
, 
pgΩ
) < 0)

776 
	`îr‹
("tc£çgΩ faûed,Éºno=%d", 
î∫o
);

778 
	`£tsig«l
(
SIGTSTP
);

779 
	`£tsig«l
(
SIGTTOU
);

780 } i‡(
mode
 =
FORK_BG
) {

781 
	`ign‹esig
(
SIGINT
);

782 
	`ign‹esig
(
SIGQUIT
);

783 i‡((
jp
 =
NULL
 || jp->
≈rocs
 == 0) &&

784 ! 
	`fd0_ªdúe˘ed_p
 ()) {

785 
	`˛o£
(0);

786 i‡(
	`›í
(
_PATH_DEVNULL
, 
O_RDONLY
) != 0)

787 
	`îr‹
("Can't open %s: %s",

788 
_PATH_DEVNULL
, 
	`°ªº‹
(
î∫o
));

792 i‡(
mode
 =
FORK_BG
) {

793 
	`ign‹esig
(
SIGINT
);

794 
	`ign‹esig
(
SIGQUIT
);

795 i‡((
jp
 =
NULL
 || jp->
≈rocs
 == 0) &&

796 ! 
	`fd0_ªdúe˘ed_p
 ()) {

797 
	`˛o£
(0);

798 i‡(
	`›í
(
_PATH_DEVNULL
, 
O_RDONLY
) != 0)

799 
	`îr‹
("Can't open %s: %s",

800 
_PATH_DEVNULL
, 
	`°ªº‹
(
î∫o
));

804 
INTOFF
;

805 
i
 = 
njobs
, 
p
 = 
jobèb
 ; --i >= 0 ;Ö++)

806 i‡(
p
->
u£d
)

807 
	`‰ìjob
(
p
);

808 
INTON
;

809 i‡(
wa§oŸ
 && 
iÊag
) {

810 
	`£tsig«l
(
SIGINT
);

811 
	`£tsig«l
(
SIGQUIT
);

812 
	`£tsig«l
(
SIGTERM
);

814  
pid
;

816 i‡(
roŸshñl
 && 
mode
 !
FORK_NOJOB
 && 
mÊag
) {

817 i‡(
jp
 =
NULL
 || jp->
≈rocs
 == 0)

818 
pgΩ
 = 
pid
;

820 
pgΩ
 = 
jp
->
ps
[0].
pid
;

821 
	`£çgid
(
pid
, 
pgΩ
);

823 i‡(
mode
 =
FORK_BG
)

824 
backgndpid
 = 
pid
;

825 i‡(
jp
) {

826 
¥oc°©
 *
ps
 = &
jp
->ps[jp->
≈rocs
++];

827 
ps
->
pid
 =Öid;

828 
ps
->
°©us
 = -1;

829 
ps
->
cmd
 = 
nuŒ°r
;

830 i‡(
iÊag
 && 
roŸshñl
 && 
n
)

831 
ps
->
cmd
 = 
	`comm™dãxt
(
n
);

832 
jp
->
f‹eground
 = 
mode
 =
FORK_FG
;

833 #i‡
JOBS


834 
	`£tcurjob
(
jp
);

837 
INTON
;

838 
	`TRACE
(("I¿∑ª¡ shñl: chûd = %d\n", ()
pid
));

839  
pid
;

840 
	}
}

864 
	$waôf‹job
(
job
 *
jp
, *
‹ig°©us
)

866 #i‡
JOBS


867 
pid_t
 
mypgΩ
 = 
	`gëpgΩ
();

868 
¥›ag©e_öt
 = 
jp
->
job˘l
 && jp->
f‹eground
;

870 
°©us
;

871 
°
;

873 
INTOFF
;

874 
	`TRACE
(("waôf‹job(%%%tdËˇŒed\n", 
jp
 - 
jobèb
 + 1));

875 
jp
->
°©e
 == 0)

876 i‡(
	`dowaô
(1, 
jp
) == -1)

877 
	`dŸøp
();

878 #i‡
JOBS


879 i‡(
jp
->
job˘l
) {

880 i‡(
	`tc£çgΩ
(
âyfd
, 
mypgΩ
) < 0)

881 
	`îr‹
("tc£çgΩ faûed,Éºno=%d\n", 
î∫o
);

883 i‡(
jp
->
°©e
 =
JOBSTOPPED
)

884 
	`£tcurjob
(
jp
);

886 
°©us
 = 
jp
->
ps
[jp->
≈rocs
 - 1].status;

887 i‡(
‹ig°©us
 !
NULL
)

888 *
‹ig°©us
 = 
°©us
;

890 i‡(
	`WIFEXITED
(
°©us
))

891 
°
 = 
	`WEXITSTATUS
(
°©us
);

892 #i‡
JOBS


893 i‡(
	`WIFSTOPPED
(
°©us
))

894 
°
 = 
	`WSTOPSIG
(
°©us
) + 128;

897 
°
 = 
	`WTERMSIG
(
°©us
) + 128;

898 i‡(! 
JOBS
 || 
jp
->
°©e
 =
JOBDONE
)

899 
	`‰ìjob
(
jp
);

900 i‡(
	`öt_≥ndög
()) {

901 i‡(
	`WIFSIGNALED
(
°©us
Ë&& 
	`WTERMSIG
(°©usË=
SIGINT
)

902 
	`kûl
(
	`gëpid
(), 
SIGINT
);

904 
CLEAR_PENDING_INT
;

906 #i‡
JOBS


907 i‡(
roŸshñl
 && 
iÊag
 && 
¥›ag©e_öt
 &&

908 
	`WIFSIGNALED
(
°©us
Ë&& 
	`WTERMSIG
(°©usË=
SIGINT
)

909 
	`kûl
(
	`gëpid
(), 
SIGINT
);

911 
INTON
;

912  
°
;

913 
	}
}

921 
pid_t


922 
	$dowaô
(
block
, 
job
 *job)

924 
pid_t
 
pid
;

925 
°©us
;

926 
¥oc°©
 *
•
;

927 
job
 *
jp
;

928 
job
 *
thisjob
;

929 
d⁄e
;

930 
°›≥d
;

931 
sig
;

932 
i
;

934 
ö_dowaô
++;

935 
	`TRACE
(("dowaô(%dËˇŒed\n", 
block
));

937 
pid
 = 
	`waô¥oc
(
block
, &
°©us
);

938 
	`TRACE
(("waôÑëu∫†%d, sètus=%d\n", ()
pid
, 
°©us
));

939 } (
pid
 =-1 && 
î∫o
 =
EINTR
 && 
bªakwaôcmd
 == 0) ||

940 (
pid
 > 0 && 
	`WIFSTOPPED
(
°©us
Ë&& !
iÊag
));

941 
ö_dowaô
--;

942 i‡(
pid
 =-1 && 
î∫o
 =
ECHILD
 && 
job
 !
NULL
)

943 
job
->
°©e
 = 
JOBDONE
;

944 i‡(
bªakwaôcmd
 != 0) {

945 
bªakwaôcmd
 = 0;

946 i‡(
pid
 <= 0)

949 i‡(
pid
 <= 0)

950  
pid
;

951 
INTOFF
;

952 
thisjob
 = 
NULL
;

953 
jp
 = 
jobèb
 ; j∞< jobèb + 
njobs
 ; jp++) {

954 i‡(
jp
->
u£d
 && jp->
≈rocs
 > 0) {

955 
d⁄e
 = 1;

956 
°›≥d
 = 1;

957 
•
 = 
jp
->
ps
 ; s∞< jp->p†+ jp->
≈rocs
 ; sp++) {

958 i‡(
•
->
pid
 == -1)

960 i‡(
•
->
pid
 ==Öid) {

961 
	`TRACE
(("Changing status ofÖroc %d from 0x%xÅo 0x%x\n",

962 ()
pid
, 
•
->
°©us
,

963 
°©us
));

964 
•
->
°©us
 = status;

965 
thisjob
 = 
jp
;

967 i‡(
•
->
°©us
 == -1)

968 
°›≥d
 = 0;

969 i‡(
	`WIFSTOPPED
(
•
->
°©us
))

970 
d⁄e
 = 0;

972 i‡(
°›≥d
) {

973 
°©e
 = 
d⁄e
? 
JOBDONE
 : 
JOBSTOPPED
;

974 i‡(
jp
->
°©e
 != state) {

975 
	`TRACE
(("Job %td: ch™gög sèã from %dÅÿ%d\n", 
jp
 - 
jobèb
 + 1, jp->
°©e
, state));

976 
jp
->
°©e
 = state;

977 #i‡
JOBS


978 i‡(
d⁄e
)

979 
	`dñjob
(
jp
);

985 
INTON
;

986 i‡(! 
roŸshñl
 || ! 
iÊag
 || (
job
 && 
thisjob
 == job)) {

987 #i‡
JOBS


988 i‡(
	`WIFSTOPPED
(
°©us
))

989 
sig
 = 
	`WSTOPSIG
(
°©us
);

993 i‡(
	`WIFEXITED
(
°©us
))

994 
sig
 = 0;

996 
sig
 = 
	`WTERMSIG
(
°©us
);

998 i‡(
sig
 !0 && sig !
SIGINT
 && sig !
SIGPIPE
) {

999 i‡(!
mÊag
 ||

1000 (
thisjob
->
f‹eground
 && !
	`WIFSTOPPED
(
°©us
))) {

1001 
i
 = 
	`WTERMSIG
(
°©us
);

1002 i‡((
i
 & 0x7FË< 
sys_nsig
 && 
sys_sigli°
[i & 0x7F])

1003 
	`out1°r
(
sys_sigli°
[
i
 & 0x7F]);

1005 
	`out1fmt
("Sig«»%d", 
i
 & 0x7F);

1006 i‡(
	`WCOREDUMP
(
°©us
))

1007 
	`out1°r
(" (core dumped)");

1008 
	`out1c
('\n');

1010 
	`showjob
(
thisjob
, 
pid
, 
SHOWJOBS_DEFAULT
);

1011 
	`Êushout
(
out1
);

1014 
	`TRACE
(("NŸÖrötög sètus,ÑoŸshñl=%d, job=%p\n", 
roŸshñl
, 
job
));

1015 i‡(
thisjob
)

1016 
thisjob
->
ch™ged
 = 1;

1018  
pid
;

1019 
	}
}

1028 
pid_t


1029 
	$waô¥oc
(
block
, *
°©us
)

1031 
Êags
;

1033 #i‡
JOBS


1034 
Êags
 = 
WUNTRACED
;

1036 
Êags
 = 0;

1038 i‡(
block
 == 0)

1039 
Êags
 |
WNOHANG
;

1040  
	`waô3
(
°©us
, 
Êags
, (
rußge
 *)
NULL
);

1041 
	}
}

1046 
	gjob_w¨nög
 = 0;

1048 
	$°›≥djobs
()

1050 
jobno
;

1051 
job
 *
jp
;

1053 i‡(
job_w¨nög
)

1055 
jobno
 = 1, 
jp
 = 
jobèb
; jobnÿ<
njobs
; jobno++, jp++) {

1056 i‡(
jp
->
u£d
 == 0)

1058 i‡(
jp
->
°©e
 =
JOBSTOPPED
) {

1059 
	`out2°r
("You have stopped jobs.\n");

1060 
job_w¨nög
 = 2;

1066 
	}
}

1070 
	$checkzombõs
()

1072 
njobs
 > 0 && 
	`dowaô
(0, 
NULL
) > 0)

1074 
	}
}

1082 *
	gcmd√xtc
;

1083 
	gcmd∆e·
;

1084 
	#MAXCMDTEXT
 200

	)

1087 
	$comm™dãxt
(
node
 *
n
)

1089 *
«me
;

1091 
cmd√xtc
 = 
«me
 = 
	`ckmÆloc
(
MAXCMDTEXT
);

1092 
cmd∆e·
 = 
MAXCMDTEXT
 - 4;

1093 
	`cmdtxt
(
n
);

1094 *
cmd√xtc
 = '\0';

1095  
«me
;

1096 
	}
}

1100 
	$cmdtxt
(
node
 *
n
)

1102 
node
 *
≈
;

1103 
nodñi°
 *
Õ
;

1104 c⁄° *
p
;

1105 
i
;

1106 
s
[2];

1108 i‡(
n
 =
NULL
)

1110 
n
->
ty≥
) {

1111 
NSEMI
:

1112 
	`cmdtxt
(
n
->
nbö¨y
.
ch1
);

1113 
	`cmdputs
("; ");

1114 
	`cmdtxt
(
n
->
nbö¨y
.
ch2
);

1116 
NAND
:

1117 
	`cmdtxt
(
n
->
nbö¨y
.
ch1
);

1118 
	`cmdputs
(" && ");

1119 
	`cmdtxt
(
n
->
nbö¨y
.
ch2
);

1121 
NOR
:

1122 
	`cmdtxt
(
n
->
nbö¨y
.
ch1
);

1123 
	`cmdputs
(" || ");

1124 
	`cmdtxt
(
n
->
nbö¨y
.
ch2
);

1126 
NPIPE
:

1127 
Õ
 = 
n
->
≈ùe
.
cmdli°
 ;Ü∞;Ü∞Õ->
√xt
) {

1128 
	`cmdtxt
(
Õ
->
n
);

1129 i‡(
Õ
->
√xt
)

1130 
	`cmdputs
(" | ");

1133 
NSUBSHELL
:

1134 
	`cmdputs
("(");

1135 
	`cmdtxt
(
n
->
ƒedú
.n);

1136 
	`cmdputs
(")");

1138 
NREDIR
:

1139 
NBACKGND
:

1140 
	`cmdtxt
(
n
->
ƒedú
.n);

1142 
NIF
:

1143 
	`cmdputs
("if ");

1144 
	`cmdtxt
(
n
->
nif
.
ã°
);

1145 
	`cmdputs
(";Åhen ");

1146 
	`cmdtxt
(
n
->
nif
.
iÂ¨t
);

1147 
	`cmdputs
("...");

1149 
NWHILE
:

1150 
	`cmdputs
("while ");

1151 
u¡û
;

1152 
NUNTIL
:

1153 
	`cmdputs
("until ");

1154 
u¡û
:

1155 
	`cmdtxt
(
n
->
nbö¨y
.
ch1
);

1156 
	`cmdputs
("; do ");

1157 
	`cmdtxt
(
n
->
nbö¨y
.
ch2
);

1158 
	`cmdputs
("; done");

1160 
NFOR
:

1161 
	`cmdputs
("for ");

1162 
	`cmdputs
(
n
->
nf‹
.
v¨
);

1163 
	`cmdputs
(" in ...");

1165 
NCASE
:

1166 
	`cmdputs
("case ");

1167 
	`cmdputs
(
n
->
nˇ£
.
ex¥
->
«rg
.
ãxt
);

1168 
	`cmdputs
(" in ...");

1170 
NDEFUN
:

1171 
	`cmdputs
(
n
->
«rg
.
ãxt
);

1172 
	`cmdputs
("() ...");

1174 
NCMD
:

1175 
≈
 = 
n
->
ncmd
.
¨gs
 ;Ç∞;Ç∞≈->
«rg
.
√xt
) {

1176 
	`cmdtxt
(
≈
);

1177 i‡(
≈
->
«rg
.
√xt
)

1178 
	`cmdputs
(" ");

1180 
≈
 = 
n
->
ncmd
.
ªdúe˘
 ;Ç∞;Ç∞≈->
nfûe
.
√xt
) {

1181 
	`cmdputs
(" ");

1182 
	`cmdtxt
(
≈
);

1185 
NARG
:

1186 
	`cmdputs
(
n
->
«rg
.
ãxt
);

1188 
NTO
:

1189 
p
 = ">"; 
i
 = 1; 
ªdú
;

1190 
NAPPEND
:

1191 
p
 = ">>"; 
i
 = 1; 
ªdú
;

1192 
NTOFD
:

1193 
p
 = ">&"; 
i
 = 1; 
ªdú
;

1194 
NCLOBBER
:

1195 
p
 = ">|"; 
i
 = 1; 
ªdú
;

1196 
NFROM
:

1197 
p
 = "<"; 
i
 = 0; 
ªdú
;

1198 
NFROMTO
:

1199 
p
 = "<>"; 
i
 = 0; 
ªdú
;

1200 
NFROMFD
:

1201 
p
 = "<&"; 
i
 = 0; 
ªdú
;

1202 
ªdú
:

1203 i‡(
n
->
nfûe
.
fd
 !
i
) {

1204 
s
[0] = 
n
->
nfûe
.
fd
 + '0';

1205 
s
[1] = '\0';

1206 
	`cmdputs
(
s
);

1208 
	`cmdputs
(
p
);

1209 i‡(
n
->
ty≥
 =
NTOFD
 ||Ç->ty≥ =
NFROMFD
) {

1210 i‡(
n
->
ndup
.
dupfd
 >= 0)

1211 
s
[0] = 
n
->
ndup
.
dupfd
 + '0';

1213 
s
[0] = '-';

1214 
s
[1] = '\0';

1215 
	`cmdputs
(
s
);

1217 
	`cmdtxt
(
n
->
nfûe
.
‚ame
);

1220 
NHERE
:

1221 
NXHERE
:

1222 
	`cmdputs
("<<...");

1225 
	`cmdputs
("???");

1228 
	}
}

1233 
	$cmdputs
(c⁄° *
s
)

1235 c⁄° *
p
;

1236 *
q
;

1237 
c
;

1238 
subty≥
 = 0;

1240 i‡(
cmd∆e·
 <= 0)

1242 
p
 = 
s
;

1243 
q
 = 
cmd√xtc
;

1244 (
c
 = *
p
++) != '\0') {

1245 i‡(
c
 =
CTLESC
)

1246 *
q
++ = *
p
++;

1247 i‡(
c
 =
CTLVAR
) {

1248 *
q
++ = '$';

1249 i‡(--
cmd∆e·
 > 0)

1250 *
q
++ = '{';

1251 
subty≥
 = *
p
++;

1252 } i‡(
c
 ='=' && 
subty≥
 != 0) {

1253 *
q
++ = "}-+?="[(
subty≥
 & 
VSTYPE
Ë- 
VSNORMAL
];

1254 
subty≥
 = 0;

1255 } i‡(
c
 =
CTLENDVAR
) {

1256 *
q
++ = '}';

1257 } i‡(
c
 =
CTLBACKQ
 || c =CTLBACKQ+
CTLQUOTE
)

1258 
cmd∆e·
++;

1260 *
q
++ = 
c
;

1261 i‡(--
cmd∆e·
 <= 0) {

1262 *
q
++ = '.';

1263 *
q
++ = '.';

1264 *
q
++ = '.';

1268 
cmd√xtc
 = 
q
;

1269 
	}
}

	@sh/jobs.h

37 
	#FORK_FG
 0

	)

38 
	#FORK_BG
 1

	)

39 
	#FORK_NOJOB
 2

	)

41 
	~<sig«l.h
>

50 
	s¥oc°©
 {

51 
pid_t
 
	mpid
;

52 
	m°©us
;

53 *
	mcmd
;

58 
	#JOBSTOPPED
 1

	)

59 
	#JOBDONE
 2

	)

62 
	sjob
 {

63 
¥oc°©
 
	mps0
;

64 
¥oc°©
 *
	mps
;

65 
	m≈rocs
;

66 
pid_t
 
	mpgΩ
;

67 
	m°©e
;

68 
	mu£d
;

69 
	mch™ged
;

70 
	mf‹eground
;

71 #i‡
JOBS


72 
	mjob˘l
;

73 
job
 *
	m√xt
;

78 
	mSHOWJOBS_DEFAULT
,

79 
	mSHOWJOBS_VERBOSE
,

80 
	mSHOWJOBS_PIDS
,

81 
	mSHOWJOBS_PGIDS


84 
pid_t
 
backgndpid
;

85 
job_w¨nög
;

86 
ö_waôcmd
;

87 
ö_dowaô
;

88 vﬁ©ûê
sig_©omic_t
 
bªakwaôcmd
;

90 
£tjob˘l
();

91 
fgcmd
(, **);

92 
bgcmd
(, **);

93 
jobscmd
(, **);

94 
showjobs
(, );

95 
waôcmd
(, **);

96 
jobidcmd
(, **);

97 
job
 *
makejob
(
node
 *, );

98 
pid_t
 
f‹kshñl
(
job
 *, 
node
 *, );

99 
waôf‹job
(
job
 *, *);

100 
°›≥djobs
();

101 *
comm™dãxt
(
node
 *);

103 #i‡! 
JOBS


104 
	#£tjob˘l
(
⁄
Ë

	)

	@sh/mail.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)mail.c 8.2 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/mail.c,v 1.14.10.3.4.1 2012/03/03 06:15:13 kensmith Exp $");

45 
	~"shñl.h
"

46 
	~"exec.h
"

47 
	~"maû.h
"

48 
	~"v¨.h
"

49 
	~"ouçut.h
"

50 
	~"memÆloc.h
"

51 
	~"îr‹.h
"

52 
	~<sys/ty≥s.h
>

53 
	~<sys/°©.h
>

54 
	~<°dlib.h
>

57 
	#MAXMBOXES
 10

	)

60 
	gnmboxes
;

61 
time_t
 
	gmaûtime
[
MAXMBOXES
];

72 
	$chkmaû
(
sûít
)

74 
i
;

75 c⁄° *
m∑th
;

76 *
p
;

77 *
q
;

78 
°ackm¨k
 
sm¨k
;

79 
°©
 
°©b
;

81 i‡(
sûít
)

82 
nmboxes
 = 10;

83 i‡(
nmboxes
 == 0)

85 
	`£t°ackm¨k
(&
sm¨k
);

86 
m∑th
 = 
	`m∑th£t
()? 
	`m∑thvÆ
(Ë: 
	`maûvÆ
();

87 
i
 = 0 ; i < 
nmboxes
 ; i++) {

88 
p
 = 
	`∑dv™˚
(&
m∑th
, 
nuŒ°r
);

89 i‡(
p
 =
NULL
)

91 i‡(*
p
 == '\0')

93 
q
 = 
p
 ; *q ; q++);

94 i‡(
q
[-1] != '/')

95 
	`ab‹t
();

96 
q
[-1] = '\0';

97 #ifde‡
nŸdef


98 i‡(
	`°©
(
p
, &
°©b
) < 0)

99 
°©b
.
°_mtime
 = 0;

100 i‡(
°©b
.
°_mtime
 > 
maûtime
[
i
] && ! 
sûít
) {

101 
	`out2°r
(
∑th›t
?Öathopt : "you have mail");

102 
	`out2c
('\n');

104 
maûtime
[
i
] = 
°©b
.
°_mtime
;

106 i‡(
	`°©
(
p
, &
°©b
) < 0)

107 
°©b
.
°_size
 = 0;

108 i‡(
°©b
.
°_size
 > 
maûtime
[
i
] && ! 
sûít
) {

109 
	`out2°r
(
∑th›t
?Öathopt : "you have mail");

110 
	`out2c
('\n');

112 
maûtime
[
i
] = 
°©b
.
°_size
;

115 
nmboxes
 = 
i
;

116 
	`p›°ackm¨k
(&
sm¨k
);

117 
	}
}

	@sh/mail.h

36 
chkmaû
();

	@sh/main.c

33 #i‚de‡
löt


34 c⁄° 
	gc›yright
[] =

39 #i‚de‡
löt


41 
	gsccsid
[] = "@(#)main.c 8.6 (Berkeley) 5/28/95";

44 
	~<sys/cdefs.h
>

45 
__FBSDID
("$FreeBSD: src/bin/sh/main.c,v 1.31.2.7.2.1 2012/03/03 06:15:13 kensmith Exp $");

47 
	~<°dio.h
>

48 
	~<sig«l.h
>

49 
	~<sys/°©.h
>

50 
	~<uni°d.h
>

51 
	~<f˙é.h
>

52 
	~<loˇÀ.h
>

53 
	~<î∫o.h
>

55 
	~"shñl.h
"

56 
	~"maö.h
"

57 
	~"maû.h
"

58 
	~"›ti⁄s.h
"

59 
	~"ouçut.h
"

60 
	~"∑r£r.h
"

61 
	~"nodes.h
"

62 
	~"ex∑nd.h
"

63 
	~"evÆ.h
"

64 
	~"jobs.h
"

65 
	~"öput.h
"

66 
	~"å≠.h
"

67 
	~"v¨.h
"

68 
	~"show.h
"

69 
	~"memÆloc.h
"

70 
	~"îr‹.h
"

71 
	~"öô.h
"

72 
	~"my°rög.h
"

73 
	~"exec.h
"

74 
	~"cd.h
"

76 
	groŸpid
;

77 
	groŸshñl
;

79 
ªad_¥ofûe
(const *);

80 *
föd_dŸ_fûe
(*);

91 
	$maö
(
¨gc
, *
¨gv
[])

93 
jm∂oc
 jmploc;

94 
°ackm¨k
 
sm¨k
;

95 vﬁ©ûê
°©e
;

96 *
shöô
;

98 (Ë
	`£éoˇÀ
(
LC_ALL
, "");

99 
°©e
 = 0;

100 i‡(
	`£tjmp
(
jm∂oc
.
loc
)) {

106 
ex˚±i⁄
) {

107 
EXSHELLPROC
:

108 
roŸpid
 = 
	`gëpid
();

109 
roŸshñl
 = 1;

110 
möusc
 = 
NULL
;

111 
°©e
 = 3;

114 
EXEXEC
:

115 
exô°©us
 = 
exî∫o
;

118 
EXERROR
:

119 
exô°©us
 = 2;

126 i‡(
ex˚±i⁄
 !
EXSHELLPROC
) {

127 i‡(
°©e
 =0 || 
iÊag
 =0 || ! 
roŸshñl
)

128 
	`exôshñl
(
exô°©us
);

130 
	`ª£t
();

131 i‡(
ex˚±i⁄
 =
EXINT
) {

132 
	`out2c
('\n');

133 
	`Êushout
(&
îrout
);

135 
	`p›°ackm¨k
(&
sm¨k
);

136 
FORCEINTON
;

137 i‡(
°©e
 == 1)

138 
°©e1
;

139 i‡(
°©e
 == 2)

140 
°©e2
;

141 i‡(
°©e
 == 3)

142 
°©e3
;

144 
°©e4
;

146 
h™dÀr
 = &
jm∂oc
;

147 #ifde‡
DEBUG


148 
	`›íåa˚
();

149 
	`åputs
("Shñ»¨gs: "); 
	`å¨gs
(
¨gv
);

151 
roŸpid
 = 
	`gëpid
();

152 
roŸshñl
 = 1;

153 
	`öô
();

154 
	`£t°ackm¨k
(&
sm¨k
);

155 
	`¥oˇrgs
(
¨gc
, 
¨gv
);

156 i‡(
	`gëpwd
(Ë=
NULL
 && 
iÊag
)

157 
	`out2°r
("sh: cannot determine working directory\n");

158 i‡(
	`gëpwd
(Ë!
NULL
)

159 
	`£tv¨
 ("PWD", 
	`gëpwd
(), 
VEXPORT
);

160 i‡(
iÊag
)

161 
	`chkmaû
(1);

162 i‡(
¨gv
[0] &&árgv[0][0] == '-') {

163 
°©e
 = 1;

164 
	`ªad_¥ofûe
("/etc/profile");

165 
°©e1
:

166 
°©e
 = 2;

167 i‡(
¥ivûeged
 == 0)

168 
	`ªad_¥ofûe
(".profile");

170 
	`ªad_¥ofûe
("/etc/suid_profile");

172 
°©e2
:

173 
°©e
 = 3;

174 i‡(!
¥ivûeged
 && 
iÊag
) {

175 i‡((
shöô
 = 
	`lookupv¨
("ENV")Ë!
NULL
 && *shinit != '\0') {

176 
°©e
 = 3;

177 
	`ªad_¥ofûe
(
shöô
);

180 
°©e3
:

181 
°©e
 = 4;

182 i‡(
möusc
) {

183 
	`evÆ°rög
(
möusc
, 
sÊag
 ? 0 : 
EV_EXIT
);

185 i‡(
sÊag
 || 
möusc
 =
NULL
) {

186 
°©e4
:

187 
	`cmdlo›
(1);

189 
	`exôshñl
(
exô°©us
);

192 
	}
}

201 
	$cmdlo›
(
t›
)

203 
node
 *
n
;

204 
°ackm¨k
 
sm¨k
;

205 
öãr
;

206 
numeof
 = 0;

208 
	`TRACE
(("cmdlo›(%dËˇŒed\n", 
t›
));

209 
	`£t°ackm¨k
(&
sm¨k
);

211 i‡(
≥ndögsigs
)

212 
	`dŸøp
();

213 
öãr
 = 0;

214 i‡(
iÊag
 && 
t›
) {

215 
öãr
++;

216 
	`showjobs
(1, 
SHOWJOBS_DEFAULT
);

217 
	`chkmaû
(0);

218 
	`Êushout
(&
ouçut
);

220 
n
 = 
	`∑r£cmd
(
öãr
);

222 i‡(
n
 =
NEOF
) {

223 i‡(!
t›
 || 
numeof
 >= 50)

225 i‡(!
	`°›≥djobs
()) {

226 i‡(!
IÊag
)

228 
	`out2°r
("\nUse \"exit\"ÅoÜeave shell.\n");

230 
numeof
++;

231 } i‡(
n
 !
NULL
 && 
nÊag
 == 0) {

232 
job_w¨nög
 = (job_warning == 2) ? 1 : 0;

233 
numeof
 = 0;

234 
	`evÆåì
(
n
, 0);

236 
	`p›°ackm¨k
(&
sm¨k
);

237 
	`£t°ackm¨k
(&
sm¨k
);

238 i‡(
evÆskù
 =
SKIPFILE
) {

239 
evÆskù
 = 0;

243 
	`p›°ackm¨k
(&
sm¨k
);

244 
	}
}

253 
	$ªad_¥ofûe
(c⁄° *
«me
)

255 
fd
;

257 
INTOFF
;

258 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) >= 0)

259 
	`£töputfd
(
fd
, 1);

260 
INTON
;

261 i‡(
fd
 < 0)

263 
	`cmdlo›
(0);

264 
	`p›fûe
();

265 
	}
}

274 
	$ªadcmdfûe
(c⁄° *
«me
)

276 
fd
;

278 
INTOFF
;

279 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) >= 0)

280 
	`£töputfd
(
fd
, 1);

282 
	`îr‹
("C™'à›í %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

283 
INTON
;

284 
	`cmdlo›
(0);

285 
	`p›fûe
();

286 
	}
}

297 
	$föd_dŸ_fûe
(*
ba£«me
)

299 *
fuŒ«me
;

300 c⁄° *
∑th
 = 
	`∑thvÆ
();

301 
°©
 
°©b
;

304 if–
	`°rchr
(
ba£«me
, '/'))

305  
ba£«me
;

307 (
fuŒ«me
 = 
	`∑dv™˚
(&
∑th
, 
ba£«me
)Ë!
NULL
) {

308 i‡((
	`°©
(
fuŒ«me
, &
°©b
Ë=0Ë&& 
	`S_ISREG
(°©b.
°_mode
)) {

313  
fuŒ«me
;

315 
	`°u«Œoc
(
fuŒ«me
);

317  
ba£«me
;

318 
	}
}

321 
	$dŸcmd
(
¨gc
, **
¨gv
)

323 *
fuŒ«me
;

325 i‡(
¨gc
 < 2)

326 
	`îr‹
("missing filename");

328 
exô°©us
 = 0;

330 
fuŒ«me
 = 
	`föd_dŸ_fûe
(
¨gv
[1]);

331 
	`£töputfûe
(
fuŒ«me
, 1);

332 
comm™d«me
 = 
fuŒ«me
;

333 
	`cmdlo›
(0);

334 
	`p›fûe
();

335  
exô°©us
;

336 
	}
}

340 
	$exôcmd
(
¨gc
, **
¨gv
)

342 i‡(
	`°›≥djobs
())

344 i‡(
¨gc
 > 1)

345 
exô°©us
 = 
	`numbî
(
¨gv
[1]);

347 
exô°©us
 = 
€xô°©us
;

348 
	`exôshñl
(
exô°©us
);

351 
	}
}

	@sh/main.h

36 
roŸpid
;

37 
roŸshñl
;

39 
ªadcmdfûe
(const *);

40 
cmdlo›
();

41 
dŸcmd
(, **);

42 
exôcmd
(, **);

	@sh/memalloc.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)memalloc.c 8.3 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/memalloc.c,v 1.28.2.4.4.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sys/∑øm.h
>

42 
	~"shñl.h
"

43 
	~"ouçut.h
"

44 
	~"memÆloc.h
"

45 
	~"îr‹.h
"

46 
	~"my°rög.h
"

47 
	~"ex∑nd.h
"

48 
	~<°dlib.h
>

49 
	~<uni°d.h
>

55 
poöãr


56 
	$ckmÆloc
(
size_t
 
nbyãs
)

58 
poöãr
 
p
;

60 
INTOFF
;

61 
p
 = 
	`mÆloc
(
nbyãs
);

62 
INTON
;

63 i‡(
p
 =
NULL
)

64 
	`îr‹
("Out of space");

65  
p
;

66 
	}
}

73 
poöãr


74 
	$ckªÆloc
(
poöãr
 
p
, 
nbyãs
)

76 
INTOFF
;

77 
p
 = 
	`ªÆloc
’, 
nbyãs
);

78 
INTON
;

79 i‡(
p
 =
NULL
)

80 
	`îr‹
("Out of space");

81  
p
;

82 
	}
}

85 
	$ck‰ì
(
poöãr
 
p
)

87 
INTOFF
;

88 
	`‰ì
(
p
);

89 
INTON
;

90 
	}
}

98 
	$ßve°r
(c⁄° *
s
)

100 *
p
;

102 
p
 = 
	`ckmÆloc
(
	`°æí
(
s
) + 1);

103 
	`sc›y
(
s
, 
p
);

104  
p
;

105 
	}
}

117 
	#MINSIZE
 496

	)

120 
	s°ack_block
 {

121 
°ack_block
 *
	m¥ev
;

124 
	#SPACE
(
•
Ë((*)(•Ë+ 
	`ALIGN
((
°ack_block
)))

	)

126 
°ack_block
 *
	g°ackp
;

127 
°ackm¨k
 *
	gm¨kp
;

128 *
	g°acknxt
;

129 
	g°ack∆e·
;

130 
	gs°∫À·
;

131 
	ghîefd
 = -1;

135 
	$°√wblock
(
nbyãs
)

137 
°ack_block
 *
•
;

138 
Ælocsize
;

140 i‡(
nbyãs
 < 
MINSIZE
)

141 
nbyãs
 = 
MINSIZE
;

143 
Ælocsize
 = 
	`ALIGN
((
°ack_block
)Ë+ ALIGN(
nbyãs
);

145 
INTOFF
;

146 
•
 = 
	`ckmÆloc
(
Ælocsize
);

147 
•
->
¥ev
 = 
°ackp
;

148 
°acknxt
 = 
	`SPACE
(
•
);

149 
°ack∆e·
 = 
Ælocsize
 - (
°acknxt
 - (*)
•
);

150 
°ackp
 = 
•
;

151 
INTON
;

152 
	}
}

155 
poöãr


156 
	$°Æloc
(
nbyãs
)

158 *
p
;

160 
nbyãs
 = 
	`ALIGN
(nbytes);

161 i‡(
nbyãs
 > 
°ack∆e·
)

162 
	`°√wblock
(
nbyãs
);

163 
p
 = 
°acknxt
;

164 
°acknxt
 +
nbyãs
;

165 
°ack∆e·
 -
nbyãs
;

166  
p
;

167 
	}
}

171 
	$°u«Œoc
(
poöãr
 
p
)

173 i‡(
p
 =
NULL
) {

174 
	`wrôe
(
STDERR_FILENO
, "stunalloc\n", 10);

175 
	`ab‹t
();

177 
°ack∆e·
 +
°acknxt
 - (*)
p
;

178 
°acknxt
 = 
p
;

179 
	}
}

184 
	$£t°ackm¨k
(
°ackm¨k
 *
m¨k
)

186 
m¨k
->
°ackp
 = stackp;

187 
m¨k
->
°acknxt
 = stacknxt;

188 
m¨k
->
°ack∆e·
 = stacknleft;

189 
m¨k
->
m¨k√xt
 = 
m¨kp
;

190 
m¨kp
 = 
m¨k
;

191 
	}
}

195 
	$p›°ackm¨k
(
°ackm¨k
 *
m¨k
)

197 
°ack_block
 *
•
;

199 
INTOFF
;

200 
m¨kp
 = 
m¨k
->
m¨k√xt
;

201 
°ackp
 !
m¨k
->stackp) {

202 
•
 = 
°ackp
;

203 
°ackp
 = 
•
->
¥ev
;

204 
	`ck‰ì
(
•
);

206 
°acknxt
 = 
m¨k
->stacknxt;

207 
°ack∆e·
 = 
m¨k
->stacknleft;

208 
INTON
;

209 
	}
}

223 
	$grow°ackblock
()

225 *
p
;

226 
√wÀn
;

227 *
ﬁd•a˚
;

228 
ﬁdÀn
;

229 
°ack_block
 *
•
;

230 
°ack_block
 *
ﬁd°ackp
;

231 
°ackm¨k
 *
xm¨k
;

233 
√wÀn
 = (
°ack∆e·
 =0Ë? 
MINSIZE
 : stacknleft * 2 + 100;

234 
√wÀn
 = 
	`ALIGN
(newlen);

235 
ﬁd•a˚
 = 
°acknxt
;

236 
ﬁdÀn
 = 
°ack∆e·
;

238 i‡(
°ackp
 !
NULL
 && 
°acknxt
 =
	`SPACE
(stackp)) {

239 
INTOFF
;

240 
ﬁd°ackp
 = 
°ackp
;

241 
°ackp
 = 
ﬁd°ackp
->
¥ev
;

242 
•
 = 
	`ckªÆloc
((
poöãr
)
ﬁd°ackp
, 
√wÀn
);

243 
•
->
¥ev
 = 
°ackp
;

244 
°ackp
 = 
•
;

245 
°acknxt
 = 
	`SPACE
(
•
);

246 
°ack∆e·
 = 
√wÀn
 - (
°acknxt
 - (*)
•
);

252 
xm¨k
 = 
m¨kp
;

253 
xm¨k
 !
NULL
 && xm¨k->
°ackp
 =
ﬁd°ackp
) {

254 
xm¨k
->
°ackp
 = stackp;

255 
xm¨k
->
°acknxt
 = stacknxt;

256 
xm¨k
->
°ack∆e·
 = stacknleft;

257 
xm¨k
 = xm¨k->
m¨k√xt
;

259 
INTON
;

261 
p
 = 
	`°Æloc
(
√wÀn
);

262 i‡(
ﬁdÀn
 != 0)

263 
	`mem˝y
(
p
, 
ﬁd•a˚
, 
ﬁdÀn
);

264 
	`°u«Œoc
(
p
);

266 
	}
}

271 
	$gøb°ackblock
(
Àn
)

273 
Àn
 = 
	`ALIGN
(len);

274 
°acknxt
 +
Àn
;

275 
°ack∆e·
 -
Àn
;

276 
	}
}

299 
	$grow°r°ackblock
(
n
)

301 
	`grow°ackblock
();

302 
s°∫À·
 = 
	`°ackblocksize
(Ë- 
n
;

303  
	`°ackblock
(Ë+ 
n
;

304 
	}
}

307 
	$grow°ack°r
()

309 
Àn
;

311 
Àn
 = 
	`°ackblocksize
();

312 i‡(
hîefd
 >0 && 
Àn
 >= 1024) {

313 
	`xwrôe
(
hîefd
, 
	`°ackblock
(), 
Àn
);

314 
s°∫À·
 = 
Àn
;

315  
	`°ackblock
();

317  
	`grow°r°ackblock
(
Àn
);

318 
	}
}

326 
	$make°r•a˚
()

328 
Àn
;

330 
Àn
 = 
	`°ackblocksize
(Ë- 
s°∫À·
;

331  
	`grow°r°ackblock
(
Àn
);

332 
	}
}

337 
	$ungøb°ack°r
(*
s
, *
p
)

339 
°ack∆e·
 +
°acknxt
 - 
s
;

340 
°acknxt
 = 
s
;

341 
s°∫À·
 = 
°ack∆e·
 - (
p
 - 
s
);

342 
	}
}

	@sh/memalloc.h

36 
	~<°rög.h
>

38 
	s°ackm¨k
 {

39 
°ack_block
 *
	m°ackp
;

40 *
	m°acknxt
;

41 
	m°ack∆e·
;

42 
°ackm¨k
 *
	mm¨k√xt
;

46 *
°acknxt
;

47 
°ack∆e·
;

48 
s°∫À·
;

49 
hîefd
;

51 
poöãr
 
ckmÆloc
(
size_t
);

52 
poöãr
 
ckªÆloc
(pointer, );

53 
ck‰ì
(
poöãr
);

54 *
ßve°r
(const *);

55 
poöãr
 
°Æloc
();

56 
°u«Œoc
(
poöãr
);

57 
£t°ackm¨k
(
°ackm¨k
 *);

58 
p›°ackm¨k
(
°ackm¨k
 *);

59 
grow°ackblock
();

60 
gøb°ackblock
();

61 *
grow°ack°r
();

62 *
make°r•a˚
();

63 
ungøb°ack°r
(*, *);

67 
	#°ackblock
(Ë
°acknxt


	)

68 
	#°ackblocksize
(Ë
°ack∆e·


	)

69 
	#STARTSTACKSTR
(
p
Ë∞
	`°ackblock
(), 
s°∫À·
 = 
	`°ackblocksize
()

	)

70 
	#STPUTC
(
c
, 
p
Ë(--
s°∫À·
 >0? (*p++ = (c)Ë: (∞
	`grow°ack°r
(), --s°∫À·, *p++ = (c)))

	)

71 
	#CHECKSTRSPACE
(
n
, 
p
Ë{ i‡(
s°∫À·
 <ÇË∞
	`make°r•a˚
(); }

	)

72 
	#USTPUTC
(
c
, 
p
Ë(--
s°∫À·
, *p++ = (c))

	)

80 
	#STACKSTRNUL
(
p
Ë(
s°∫À·
 =0? (∞
	`grow°ack°r
(), *∞'\0'Ë: (*∞'\0'))

	)

81 
	#STUNPUTC
(
p
Ë(++
s°∫À·
, --p)

	)

82 
	#STTOPC
(
p
Ëp[-1]

	)

83 
	#STADJUST
(
amou¡
, 
p
Ë’ +◊mou¡), 
s°∫À·
 -◊mou¡))

	)

84 
	#gøb°ack°r
(
p
Ë
	`°Æloc
(
	`°ackblocksize
(Ë- 
s°∫À·
)

	)

	@sh/miscbltin.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)miscbltin.c 8.4 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/miscbltin.c,v 1.41.2.3.4.1 2012/03/03 06:15:13 kensmith Exp $");

45 
	~<sys/ty≥s.h
>

46 
	~<sys/°©.h
>

47 
	~<sys/time.h
>

48 
	~<sys/ªsour˚.h
>

49 
	~<uni°d.h
>

50 
	~<˘y≥.h
>

51 
	~<î∫o.h
>

52 
	~<°döt.h
>

53 
	~<°dio.h
>

54 
	~<°dlib.h
>

55 
	~<ãrmios.h
>

57 
	~"shñl.h
"

58 
	~"›ti⁄s.h
"

59 
	~"v¨.h
"

60 
	~"ouçut.h
"

61 
	~"memÆloc.h
"

62 
	~"îr‹.h
"

63 
	~"my°rög.h
"

65 #unde‡
eÊag


67 
ªadcmd
(, **);

68 
umaskcmd
(, **);

69 
ulimôcmd
(, **);

89 
	$ªadcmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

91 **
≠
;

92 
back¶ash
;

93 
c
;

94 
rÊag
;

95 *
¥om±
;

96 c⁄° *
ifs
;

97 *
p
;

98 
°¨tw‹d
;

99 
°©us
;

100 
i
;

101 
is_ifs
;

102 
ßvóŒ
 = 0;

103 
timevÆ
 
tv
;

104 *
tv±r
;

105 
fd_£t
 
ifds
;

107 
rÊag
 = 0;

108 
¥om±
 = 
NULL
;

109 
tv
.
tv_£c
 = -1;

110 
tv
.
tv_u£c
 = 0;

111 (
i
 = 
	`√xt›t
("erp:t:")) != '\0') {

112 
i
) {

114 
¥om±
 = 
sh›èrg
;

119 
rÊag
 = 1;

122 
tv
.
tv_£c
 = 
	`°πﬁ
(
sh›èrg
, &
tv±r
, 0);

123 i‡(
tv±r
 =
sh›èrg
)

124 
	`îr‹
("timeout value");

125 *
tv±r
) {

130 
tv
.
tv_£c
 *= 60;

133 
tv
.
tv_£c
 *= 60;

136 
	`îr‹
("timeout unit");

141 i‡(
¥om±
 && 
	`ißây
(0)) {

142 
	`out2°r
(
¥om±
);

143 
	`ÊushÆl
();

145 i‡(*(
≠
 = 
¨g±r
Ë=
NULL
)

146 
	`îr‹
("arg count");

147 i‡((
ifs
 = 
	`b…ölookup
("IFS", 1)Ë=
NULL
)

148 
ifs
 = " \t\n";

150 i‡(
tv
.
tv_£c
 >= 0) {

154 
	`FD_ZERO
(&
ifds
);

155 
	`FD_SET
(0, &
ifds
);

156 
°©us
 = 
	`£À˘
(1, &
ifds
, 
NULL
, NULL, &
tv
);

160 i‡(
°©us
 <= 0)

164 
°©us
 = 0;

165 
°¨tw‹d
 = 2;

166 
back¶ash
 = 0;

167 
	`STARTSTACKSTR
(
p
);

169 i‡(
	`ªad
(
STDIN_FILENO
, &
c
, 1) != 1) {

170 
°©us
 = 1;

173 i‡(
c
 == '\0')

175 i‡(
back¶ash
) {

176 
back¶ash
 = 0;

177 
°¨tw‹d
 = 0;

178 i‡(
c
 != '\n')

179 
	`STPUTC
(
c
, 
p
);

182 i‡(!
rÊag
 && 
c
 == '\\') {

183 
back¶ash
++;

186 i‡(
c
 == '\n')

188 i‡(
	`°rchr
(
ifs
, 
c
))

189 
is_ifs
 = 
	`°rchr
(" \t\n", 
c
) ? 1 : 2;

191 
is_ifs
 = 0;

193 i‡(
°¨tw‹d
 != 0) {

194 i‡(
is_ifs
 == 1) {

196 i‡(
ßvóŒ
)

197 
	`STPUTC
(
c
, 
p
);

200 i‡(
is_ifs
 =2 && 
°¨tw‹d
 == 1) {

202 
°¨tw‹d
 = 2;

203 i‡(
ßvóŒ
)

204 
	`STPUTC
(
c
, 
p
);

209 i‡(
is_ifs
 == 0) {

211 
°¨tw‹d
 = 0;

212 i‡(
ßvóŒ
)

214 
ßvóŒ
++;

215 
	`STPUTC
(
c
, 
p
);

220 
°¨tw‹d
 = 
is_ifs
;

222 i‡(
≠
[1] =
NULL
) {

224 
ßvóŒ
++;

225 
	`STPUTC
(
c
, 
p
);

229 
	`STACKSTRNUL
(
p
);

230 
	`£tv¨
(*
≠
, 
	`°ackblock
(), 0);

231 
≠
++;

232 
	`STARTSTACKSTR
(
p
);

234 
	`STACKSTRNUL
(
p
);

237 ; 
	`°ackblock
(Ë<--
p
; *p = 0) {

238 i‡(!
	`°rchr
(
ifs
, *
p
))

240 i‡(
	`°rchr
(" \t\n", *
p
))

243 i‡(
ßvóŒ
 > 1)

247 
	`£tv¨
(*
≠
, 
	`°ackblock
(), 0);

250 *++
≠
 !
NULL
)

251 
	`£tv¨
(*
≠
, 
nuŒ°r
, 0);

252  
°©us
;

253 
	}
}

258 
	$umaskcmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

260 *
≠
;

261 
mask
;

262 
i
;

263 
symbﬁic_mode
 = 0;

265 (
i
 = 
	`√xt›t
("S")) != '\0') {

266 
symbﬁic_mode
 = 1;

269 
INTOFF
;

270 
mask
 = 
	`umask
(0);

271 
	`umask
(
mask
);

272 
INTON
;

274 i‡((
≠
 = *
¨g±r
Ë=
NULL
) {

275 i‡(
symbﬁic_mode
) {

276 
u
[4], 
g
[4], 
o
[4];

278 
i
 = 0;

279 i‡((
mask
 & 
S_IRUSR
) == 0)

280 
u
[
i
++] = 'r';

281 i‡((
mask
 & 
S_IWUSR
) == 0)

282 
u
[
i
++] = 'w';

283 i‡((
mask
 & 
S_IXUSR
) == 0)

284 
u
[
i
++] = 'x';

285 
u
[
i
] = '\0';

287 
i
 = 0;

288 i‡((
mask
 & 
S_IRGRP
) == 0)

289 
g
[
i
++] = 'r';

290 i‡((
mask
 & 
S_IWGRP
) == 0)

291 
g
[
i
++] = 'w';

292 i‡((
mask
 & 
S_IXGRP
) == 0)

293 
g
[
i
++] = 'x';

294 
g
[
i
] = '\0';

296 
i
 = 0;

297 i‡((
mask
 & 
S_IROTH
) == 0)

298 
o
[
i
++] = 'r';

299 i‡((
mask
 & 
S_IWOTH
) == 0)

300 
o
[
i
++] = 'w';

301 i‡((
mask
 & 
S_IXOTH
) == 0)

302 
o
[
i
++] = 'x';

303 
o
[
i
] = '\0';

305 
	`out1fmt
("u=%s,g=%s,o=%s\n", 
u
, 
g
, 
o
);

307 
	`out1fmt
("%.4o\n", 
mask
);

310 i‡(
	`isdigô
(*
≠
)) {

311 
mask
 = 0;

313 i‡(*
≠
 >= '8' || *ap < '0')

314 
	`îr‹
("IŒegÆÇumbî: %s", *
¨g±r
);

315 
mask
 = (mask << 3Ë+ (*
≠
 - '0');

316 } *++
≠
 != '\0');

317 
	`umask
(
mask
);

319 *
£t
;

320 
INTOFF
;

321 i‡((
£t
 = 
	`£tmode
 (
≠
)) == 0)

322 
	`îr‹
("IŒegÆÇumbî: %s", 
≠
);

324 
mask
 = 
	`gëmode
 (
£t
, ~mask & 0777);

325 
	`umask
(~
mask
 & 0777);

326 
	`‰ì
(
£t
);

327 
INTON
;

331 
	}
}

343 
	slimôs
 {

344 c⁄° *
	m«me
;

345 c⁄° *
	munôs
;

346 
	mcmd
;

347 
	mÁ˘‹
;

348 
	m›ti⁄
;

351 c⁄° 
limôs
 
	glimôs
[] = {

352 #ifde‡
RLIMIT_CPU


353 { "˝uÅime", "£c⁄ds", 
RLIMIT_CPU
, 1, 't' },

355 #ifde‡
RLIMIT_FSIZE


356 { "fûêsize", "512-blocks", 
RLIMIT_FSIZE
, 512, 'f' },

358 #ifde‡
RLIMIT_DATA


359 { "d©®£g size", "kbyãs", 
RLIMIT_DATA
, 1024, 'd' },

361 #ifde‡
RLIMIT_STACK


362 { "°ack size", "kbyãs", 
RLIMIT_STACK
, 1024, 's' },

364 #ifde‡ 
RLIMIT_CORE


365 { "c‹êfûêsize", "512-blocks", 
RLIMIT_CORE
, 512, 'c' },

367 #ifde‡
RLIMIT_RSS


368 { "max mem‹y size", "kbyãs", 
RLIMIT_RSS
, 1024, 'm' },

370 #ifde‡
RLIMIT_MEMLOCK


371 { "locked mem‹y", "kbyãs", 
RLIMIT_MEMLOCK
, 1024, 'l' },

373 #ifde‡
RLIMIT_NPROC


374 { "max u£∏¥o˚s£s", (*)0, 
RLIMIT_NPROC
, 1, 'u' },

376 #ifde‡
RLIMIT_NOFILE


377 { "›í fûes", (*)0, 
RLIMIT_NOFILE
, 1, 'n' },

379 #ifde‡
RLIMIT_VMEM


380 { "vútuÆ mem size", "kbyãs", 
RLIMIT_VMEM
, 1024, 'v' },

382 #ifde‡
RLIMIT_SWAP


383 { "sw≠Üimô", "kbyãs", 
RLIMIT_SWAP
, 1024, 'w' },

385 #ifde‡
RLIMIT_SBSIZE


386 { "sbsize", "byãs", 
RLIMIT_SBSIZE
, 1, 'b' },

388 #ifde‡
RLIMIT_NPTS


389 { "p£udo-ãrmöÆs", (*)0, 
RLIMIT_NPTS
, 1, 'p' },

395 
	$ulimôcmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

397 
c
;

398 
æim_t
 
vÆ
 = 0;

399 íum { 
SOFT
 = 0x1, 
HARD
 = 0x2 }

400 
how
 = 
SOFT
 | 
HARD
;

401 c⁄° 
limôs
 *
l
;

402 
£t
, 
Æl
 = 0;

403 
›tc
, 
wh©
;

404 
æimô
 
limô
;

406 
wh©
 = 'f';

407 (
›tc
 = 
	`√xt›t
("HSatfdsmcnuvlbpw")) != '\0')

408 
›tc
) {

410 
how
 = 
HARD
;

413 
how
 = 
SOFT
;

416 
Æl
 = 1;

419 
wh©
 = 
›tc
;

422 
l
 = 
limôs
;Ü->
«me
 &&Ü->
›ti⁄
 !
wh©
;Ü++)

424 i‡(!
l
->
«me
)

425 
	`îr‹
("öã∫ÆÉº‹ (%c)", 
wh©
);

427 
£t
 = *
¨g±r
 ? 1 : 0;

428 i‡(
£t
) {

429 *
p
 = *
¨g±r
;

431 i‡(
Æl
 || 
¨g±r
[1])

432 
	`îr‹
("too manyárguments");

433 i‡(
	`°rcmp
(
p
, "unlimited") == 0)

434 
vÆ
 = 
RLIM_INFINITY
;

436 
vÆ
 = 0;

438 (
c
 = *
p
++) >= '0' && c <= '9')

440 
vÆ
 = (vÆ * 10Ë+ ()(
c
 - '0');

441 i‡(
vÆ
 < 0)

444 i‡(
c
)

445 
	`îr‹
("badÇumber");

446 
vÆ
 *
l
->
Á˘‹
;

449 i‡(
Æl
) {

450 
l
 = 
limôs
;Ü->
«me
;Ü++) {

451 
›tbuf
[40];

452 i‡(
	`gëæimô
(
l
->
cmd
, &
limô
) < 0)

453 
	`îr‹
("ˇn'àgëÜimô: %s", 
	`°ªº‹
(
î∫o
));

454 i‡(
how
 & 
SOFT
)

455 
vÆ
 = 
limô
.
æim_cur
;

456 i‡(
how
 & 
HARD
)

457 
vÆ
 = 
limô
.
æim_max
;

459 i‡(
l
->
unôs
)

460 
	`¢¥ötf
(
›tbuf
, (optbuf),

461 "(%s, -%cË", 
l
->
unôs
,Ü->
›ti⁄
);

463 
	`¢¥ötf
(
›tbuf
, (optbuf),

464 "(-%cË", 
l
->
›ti⁄
);

465 
	`out1fmt
("%-18†%18†", 
l
->
«me
, 
›tbuf
);

466 i‡(
vÆ
 =
RLIM_INFINITY
)

467 
	`out1fmt
("unlimited\n");

470 
vÆ
 /
l
->
Á˘‹
;

471 
	`out1fmt
("%jd\n", (
ötmax_t
)
vÆ
);

477 i‡(
	`gëæimô
(
l
->
cmd
, &
limô
) < 0)

478 
	`îr‹
("ˇn'àgëÜimô: %s", 
	`°ªº‹
(
î∫o
));

479 i‡(
£t
) {

480 i‡(
how
 & 
SOFT
)

481 
limô
.
æim_cur
 = 
vÆ
;

482 i‡(
how
 & 
HARD
)

483 
limô
.
æim_max
 = 
vÆ
;

484 i‡(
	`£ålimô
(
l
->
cmd
, &
limô
) < 0)

485 
	`îr‹
("badÜimô: %s", 
	`°ªº‹
(
î∫o
));

487 i‡(
how
 & 
SOFT
)

488 
vÆ
 = 
limô
.
æim_cur
;

489 i‡(
how
 & 
HARD
)

490 
vÆ
 = 
limô
.
æim_max
;

492 i‡(
vÆ
 =
RLIM_INFINITY
)

493 
	`out1fmt
("unlimited\n");

496 
vÆ
 /
l
->
Á˘‹
;

497 
	`out1fmt
("%jd\n", (
ötmax_t
)
vÆ
);

501 
	}
}

	@sh/mkinit.c

33 #i‚de‡
löt


34 c⁄° 
	gc›yright
[] =

39 #i‚de‡
löt


41 
	gsccsid
[] = "@(#)mkinit.c 8.2 (Berkeley) 5/4/95";

44 
	~<sys/cdefs.h
>

45 
__FBSDID
("$FreeBSD: src/bin/sh/mkinit.c,v 1.19.2.2.4.1 2012/03/03 06:15:13 kensmith Exp $");

58 
	~<sys/cdefs.h
>

59 
	~<sys/ty≥s.h
>

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 
	~<f˙é.h
>

64 
	~<uni°d.h
>

65 
	~<î∫o.h
>

73 
	#OUTFILE
 "öô.c"

	)

74 
	#OUTTEMP
 "öô.c.√w"

	)

85 
	#BLOCKSIZE
 512

	)

87 
	sãxt
 {

88 *
	m√xtc
;

89 
	m∆e·
;

90 
block
 *
	m°¨t
;

91 
block
 *
	mœ°
;

94 
	sblock
 {

95 
block
 *
	m√xt
;

96 
	mãxt
[
BLOCKSIZE
];

104 
	sevít
 {

105 c⁄° *
	m«me
;

106 c⁄° *
	mroutöe
;

107 c⁄° *
	mcommít
;

108 
ãxt
 
	mcode
;

112 
	gwrôî
[] = "\
/*\n\
* This file was generated byÅhe mkinitÖrogram.\n\
*/\n\
\n";

118 
	göô
[] = "\
/*\n\
* Initialization code.\n\
*/\n";

123 
	gª£t
[] = "\
/*\n\
* ThisÑoutine is called whenánÉrror orán interrupt occurs inán\n\
* interactive shellánd control isÑeturnedÅoÅhe main commandÜoop.\n\
*/\n";

129 
	gshñÕroc
[] = "\
/*\n\
* ThisÑoutine is calledÅo initializeÅhe shellÅoÑuná shellÖrocedure.\n\
*/\n";

135 
evít
 
	gevít
[] = {

136 { "INIT", "öô", 
öô
, { 
NULL
, 0, NULL, NULL } },

137 { "RESET", "ª£t", 
ª£t
, { 
NULL
, 0, NULL, NULL } },

138 { "SHELLPROC", "öôshñÕroc", 
shñÕroc
, { 
NULL
, 0, NULL, NULL } },

139 { 
NULL
, NULL, NULL, { NULL, 0, NULL, NULL } }

143 c⁄° *
	gcurfûe
;

144 
	glöno
;

145 *
	ghódî_fûes
[200];

146 
ãxt
 
	gdeföes
;

147 
ãxt
 
	gde˛s
;

148 
	gamidde˛s
;

151 
ªadfûe
(const *);

152 
m©ch
(const *, const *);

153 
gooddeföe
(const *);

154 
d€vít
(
evít
 *, 
FILE
 *, const *);

155 
doö˛ude
(*);

156 
dode˛
(*, 
FILE
 *);

157 
ouçut
();

158 
add°r
(c⁄° *, 
ãxt
 *);

159 
addch¨
(, 
ãxt
 *);

160 
wrôëext
(
ãxt
 *, 
FILE
 *);

161 
FILE
 *
ckf›í
(const *, const *);

162 *
ckmÆloc
(
size_t
);

163 *
ßve°r
(const *);

164 
îr‹
(const *);

166 
	#equÆ
(
s1
, 
s2
Ë(
	`°rcmp
(s1, s2Ë=0)

	)

169 
	$maö
(
¨gc
 
__unu£d
, *
¨gv
[])

171 **
≠
;

173 
hódî_fûes
[0] = 
	`ßve°r
("\"shell.h\"");

174 
hódî_fûes
[1] = 
	`ßve°r
("\"mystring.h\"");

175 
hódî_fûes
[2] = 
	`ßve°r
("\"init.h\"");

176 
≠
 = 
¨gv
 + 1 ; *ap ;áp++)

177 
	`ªadfûe
(*
≠
);

178 
	`ouçut
();

179 
	`ª«me
(
OUTTEMP
, 
OUTFILE
);

180 
	`exô
(0);

181 
	}
}

189 
	$ªadfûe
(c⁄° *
‚ame
)

191 
FILE
 *
Â
;

192 
löe
[1024];

193 
evít
 *
ï
;

195 
Â
 = 
	`ckf›í
(
‚ame
, "r");

196 
curfûe
 = 
‚ame
;

197 
löno
 = 0;

198 
amidde˛s
 = 0;

199 
	`fgës
(
löe
, Üöe, 
Â
Ë!
NULL
) {

200 
löno
++;

201 
ï
 = 
evít
 ;Ép->
«me
 ;Ép++) {

202 i‡(
löe
[0] =
ï
->
«me
[0] && 
	`m©ch
(ep->name,Üine)) {

203 
	`d€vít
(
ï
, 
Â
, 
‚ame
);

207 i‡(
löe
[0] ='I' && 
	`m©ch
("INCLUDE",Üine))

208 
	`doö˛ude
(
löe
);

209 i‡(
löe
[0] ='M' && 
	`m©ch
("MKINIT",Üine))

210 
	`dode˛
(
löe
, 
Â
);

211 i‡(
löe
[0] ='#' && 
	`gooddeföe
(line)) {

212 *
˝
;

213 
löe2
[1024];

214 c⁄° 
undef
[] = "#undef ";

216 
	`°r˝y
(
löe2
, 
löe
);

217 
	`mem˝y
(
löe2
, 
undef
, (undef) - 1);

218 
˝
 = 
löe2
 + (
undef
) - 1;

219 *
˝
 && (*cp == ' ' || *cp == '\t'))

220 
˝
++;

221 *
˝
 && *cp != ' ' && *cp != '\t' && *cp != '\n')

222 
˝
++;

223 *
˝
++ = '\n'; *cp = '\0';

224 
	`add°r
(
löe2
, &
deföes
);

225 
	`add°r
(
löe
, &
deföes
);

228 
	`f˛o£
(
Â
);

229 
	}
}

233 
	$m©ch
(c⁄° *
«me
, c⁄° *
löe
)

235 c⁄° *
p
, *
q
;

237 
p
 = 
«me
, 
q
 = 
löe
;

238 *
p
) {

239 i‡(*
p
++ !*
q
++)

242 i‡(*
q
 != '{' && *q != ' ' && *q != '\t' && *q != '\n')

245 
	}
}

249 
	$gooddeföe
(c⁄° *
löe
)

251 c⁄° *
p
;

253 i‡(! 
	`m©ch
("#deföe", 
löe
))

255 
p
 = 
löe
 + 7;

256 *
p
 == ' ' || *p == '\t')

257 
p
++;

258 *
p
 != ' ' && *p != '\t') {

259 i‡(*
p
 == '(')

261 
p
++;

263 *
p
 != '\n' && *p != '\0')

264 
p
++;

265 i‡(
p
[-1] == '\\')

268 
	}
}

272 
	$d€vít
(
evít
 *
ï
, 
FILE
 *
Â
, c⁄° *
‚ame
)

274 
löe
[1024];

275 
ödít
;

276 c⁄° *
p
;

278 
	`•rötf
(
löe
, "\¿ /* from %s: */\n", 
‚ame
);

279 
	`add°r
(
löe
, &
ï
->
code
);

280 
	`add°r
(" {\n", &
ï
->
code
);

282 
löno
++;

283 i‡(
	`fgës
(
löe
, Üöe, 
Â
Ë=
NULL
)

284 
	`îr‹
("Unexpected EOF");

285 i‡(
	`equÆ
(
löe
, "}\n"))

287 
ödít
 = 6;

288 
p
 = 
löe
 ; *p == '\t' ;Ö++)

289 
ödít
 += 8;

290  ; *
p
 == ' ' ;Ö++)

291 
ödít
++;

292 i‡(*
p
 == '\n' || *p == '#')

293 
ödít
 = 0;

294 
ödít
 >= 8) {

295 
	`addch¨
('\t', &
ï
->
code
);

296 
ödít
 -= 8;

298 
ödít
 > 0) {

299 
	`addch¨
(' ', &
ï
->
code
);

300 
ödít
--;

302 
	`add°r
(
p
, &
ï
->
code
);

304 
	`add°r
(" }\n", &
ï
->
code
);

305 
	}
}

309 
	$doö˛ude
(*
löe
)

311 *
p
;

312 *
«me
;

313 **
µ
;

315 
p
 = 
löe
 ; *p != '"' && *p != '<' && *p != '\0' ;Ö++);

316 i‡(*
p
 == '\0')

317 
	`îr‹
("Expecting '\"' or '<'");

318 
«me
 = 
p
;

319 *
p
 != ' ' && *p != '\t' && *p != '\n')

320 
p
++;

321 i‡(
p
[-1] != '"' &&Ö[-1] != '>')

322 
	`îr‹
("MissingÅerminator");

323 *
p
 = '\0';

326 
µ
 = 
hódî_fûes
 ; *µ && ! 
	`equÆ
(*µ, 
«me
) ;Öp++);

327 i‡(*
µ
 =
NULL
)

328 *
µ
 = 
	`ßve°r
(
«me
);

329 
	}
}

333 
	$dode˛
(*
löe1
, 
FILE
 *
Â
)

335 
löe
[1024];

336 *
p
, *
q
;

338 i‡(
	`°rcmp
(
löe1
, "MKINIT\n") == 0) {

339 
	`addch¨
('\n', &
de˛s
);

341 
löno
++;

342 i‡(
	`fgës
(
löe
, Üöe, 
Â
Ë=
NULL
)

343 
	`îr‹
("Unterminated structure declaration");

344 
	`add°r
(
löe
, &
de˛s
);

345 } 
löe
[0] != '}');

346 
amidde˛s
 = 0;

348 i‡(! 
amidde˛s
)

349 
	`addch¨
('\n', &
de˛s
);

350 
q
 = 
NULL
;

351 
p
 = 
löe1
 + 6 ; *∞&& 
	`°rchr
("=/\n", *pË=
NULL
;Ö++)

353 i‡(*
p
 == '=') {

354 
q
 = 
p
 ; *q && *q != ';' ; q++);

355 i‡(*
q
 == '\0')

356 
q
 = 
NULL
;

358 
p
[-1] == ' ')

359 
p
--;

360 *
p
 = '\0';

363 
	`add°r
("exã∫", &
de˛s
);

364 
	`add°r
(
löe1
 + 6, &
de˛s
);

365 i‡(
q
 !
NULL
)

366 
	`add°r
(
q
, &
de˛s
);

367 
amidde˛s
 = 1;

369 
	}
}

378 
	$ouçut
()

380 
FILE
 *
Â
;

381 **
µ
;

382 
evít
 *
ï
;

384 
Â
 = 
	`ckf›í
(
OUTTEMP
, "w");

385 
	`Âuts
(
wrôî
, 
Â
);

386 
µ
 = 
hódî_fûes
 ; *pp ;Öp++)

387 
	`Ârötf
(
Â
, "#ö˛udê%s\n", *
µ
);

388 
	`Âuts
("\n\n\n", 
Â
);

389 
	`wrôëext
(&
deföes
, 
Â
);

390 
	`Âuts
("\n\n", 
Â
);

391 
	`wrôëext
(&
de˛s
, 
Â
);

392 
ï
 = 
evít
 ;Ép->
«me
 ;Ép++) {

393 
	`Âuts
("\n\n\n", 
Â
);

394 
	`Âuts
(
ï
->
commít
, 
Â
);

395 
	`Ârötf
(
Â
, "\nvoid\n%s(void)\n{\n", 
ï
->
routöe
);

396 
	`wrôëext
(&
ï
->
code
, 
Â
);

397 
	`Ârötf
(
Â
, "}\n");

399 
	`f˛o£
(
Â
);

400 
	}
}

410 
	$add°r
(c⁄° *
s
, 
ãxt
 *text)

412 *
s
) {

413 i‡(--
ãxt
->
∆e·
 < 0)

414 
	`addch¨
(*
s
++, 
ãxt
);

416 *
ãxt
->
√xtc
++ = *
s
++;

418 
	}
}

422 
	$addch¨
(
c
, 
ãxt
 *text)

424 
block
 *
bp
;

426 i‡(--
ãxt
->
∆e·
 < 0) {

427 
bp
 = 
	`ckmÆloc
( *bp);

428 i‡(
ãxt
->
°¨t
 =
NULL
)

429 
ãxt
->
°¨t
 = 
bp
;

431 
ãxt
->
œ°
->
√xt
 = 
bp
;

432 
ãxt
->
œ°
 = 
bp
;

433 
ãxt
->
√xtc
 = 
bp
->text;

434 
ãxt
->
∆e·
 = 
BLOCKSIZE
 - 1;

436 *
ãxt
->
√xtc
++ = 
c
;

437 
	}
}

443 
	$wrôëext
(
ãxt
 *ãxt, 
FILE
 *
Â
)

445 
block
 *
bp
;

447 i‡(
ãxt
->
°¨t
 !
NULL
) {

448 
bp
 = 
ãxt
->
°¨t
 ; b∞!ãxt->
œ°
 ; b∞bp->
√xt
)

449 
	`fwrôe
(
bp
->
ãxt
,  (), 
BLOCKSIZE
, 
Â
);

450 
	`fwrôe
(
bp
->
ãxt
,  (), 
BLOCKSIZE
 -Åext->
∆e·
, 
Â
);

452 
	}
}

454 
FILE
 *

455 
	$ckf›í
(c⁄° *
fûe
, c⁄° *
mode
)

457 
FILE
 *
Â
;

459 i‡((
Â
 = 
	`f›í
(
fûe
, 
mode
)Ë=
NULL
) {

460 
	`Ârötf
(
°dîr
, "C™'à›í %s: %s\n", 
fûe
, 
	`°ªº‹
(
î∫o
));

461 
	`exô
(2);

463  
Â
;

464 
	}
}

467 
	$ckmÆloc
(
size_t
 
nbyãs
)

469 *
p
;

471 i‡((
p
 = 
	`mÆloc
(
nbyãs
)Ë=
NULL
)

472 
	`îr‹
("Out of space");

473  
p
;

474 
	}
}

477 
	$ßve°r
(c⁄° *
s
)

479 *
p
;

481 
p
 = 
	`ckmÆloc
(
	`°æí
(
s
) + 1);

482 
	`°r˝y
(
p
, 
s
);

483  
p
;

484 
	}
}

487 
	$îr‹
(c⁄° *
msg
)

489 i‡(
curfûe
 !
NULL
)

490 
	`Ârötf
(
°dîr
, "%s:%d: ", 
curfûe
, 
löno
);

491 
	`Ârötf
(
°dîr
, "%s\n", 
msg
);

492 
	`exô
(2);

493 
	}
}

	@sh/mknodes.c

34 #i‚de‡
löt


35 c⁄° 
	gc›yright
[] =

40 #i‚de‡
löt


41 
	gsccsid
[] = "@(#)mknodes.c 8.2 (Berkeley) 5/4/95";

44 
	~<sys/cdefs.h
>

45 
__FBSDID
("$FreeBSD: src/bin/sh/mknodes.c,v 1.18.2.2.8.1 2012/03/03 06:15:13 kensmith Exp $");

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

55 
	~<î∫o.h
>

56 
	~<°d¨g.h
>

58 
	#MAXTYPES
 50

	)

59 
	#MAXFIELDS
 20

	)

60 
	#BUFLEN
 100

	)

63 
	#T_NODE
 1

	)

64 
	#T_NODELIST
 2

	)

65 
	#T_STRING
 3

	)

66 
	#T_INT
 4

	)

67 
	#T_OTHER
 5

	)

68 
	#T_TEMP
 6

	)

71 
	sfõld
 {

72 *
	m«me
;

73 
	mty≥
;

74 *
	mde˛
;

78 
	s°r
 {

79 *
	mèg
;

80 
	mnfõlds
;

81 
fõld
 
	mfõld
[
MAXFIELDS
];

82 
	md⁄e
;

86 
	g¡y≥s
;

87 *
	gnodíame
[
MAXTYPES
];

88 
°r
 *
	gnode°r
[
MAXTYPES
];

89 
	gn°r
;

90 
°r
 
	g°r
[
MAXTYPES
];

91 
°r
 *
	gcur°r
;

92 
FILE
 *
	göÂ
;

93 
	glöe
[1024];

94 
	glöno
;

95 *
	glöï
;

97 
∑r£node
();

98 
∑r£fõld
();

99 
ouçut
(*);

100 
outsizes
(
FILE
 *);

101 
outfunc
(
FILE
 *, );

102 
ödít
(, 
FILE
 *);

103 
√xtfõld
(*);

104 
skùbl
();

105 
ªadlöe
();

106 
	$îr‹
(c⁄° *, ...Ë
	$__¥ötf0like
(1, 2Ë
__dód2
;

107 *
	`ßve°r
(const *);

111 
	$maö
(
¨gc
, *
¨gv
[])

113 i‡(
¨gc
 != 3)

114 
	`îr‹
("usage: mknodes file");

115 
öÂ
 = 
°dö
;

116 i‡((
öÂ
 = 
	`f›í
(
¨gv
[1], "r")Ë=
NULL
)

117 
	`îr‹
("C™'à›í %s: %s", 
¨gv
[1], 
	`°ªº‹
(
î∫o
));

118 
	`ªadlöe
()) {

119 i‡(
löe
[0] == ' ' ||Üine[0] == '\t')

120 
	`∑r£fõld
();

121 i‡(
löe
[0] != '\0')

122 
	`∑r£node
();

124 
	`ouçut
(
¨gv
[2]);

125 
	`exô
(0);

126 
	}
}

131 
	$∑r£node
()

133 
«me
[
BUFLEN
];

134 
èg
[
BUFLEN
];

135 
°r
 *
•
;

137 i‡(
cur°r
 && cur°r->
nfõlds
 > 0)

138 
cur°r
->
d⁄e
 = 1;

139 
	`√xtfõld
(
«me
);

140 i‡(! 
	`√xtfõld
(
èg
))

141 
	`îr‹
("TagÉxpected");

142 i‡(*
löï
 != '\0')

143 
	`îr‹
("GarbageátÉnd ofÜine");

144 
nodíame
[
¡y≥s
] = 
	`ßve°r
(
«me
);

145 
•
 = 
°r
 ; s∞< så + 
n°r
 ; sp++) {

146 i‡(
	`°rcmp
(
•
->
èg
,Åag) == 0)

149 i‡(
•
 >
°r
 + 
n°r
) {

150 
•
->
èg
 = 
	`ßve°r
(tag);

151 
•
->
nfõlds
 = 0;

152 
cur°r
 = 
•
;

153 
n°r
++;

155 
node°r
[
¡y≥s
] = 
•
;

156 
¡y≥s
++;

157 
	}
}

161 
	$∑r£fõld
()

163 
«me
[
BUFLEN
];

164 
ty≥
[
BUFLEN
];

165 
de˛
[2 * 
BUFLEN
];

166 
fõld
 *
Â
;

168 i‡(
cur°r
 =
NULL
 || cur°r->
d⁄e
)

169 
	`îr‹
("No current structureÅoádd fieldÅo");

170 i‡(! 
	`√xtfõld
(
«me
))

171 
	`îr‹
("No fieldÇame");

172 i‡(! 
	`√xtfõld
(
ty≥
))

173 
	`îr‹
("No fieldÅype");

174 
Â
 = &
cur°r
->
fõld
[cur°r->
nfõlds
];

175 
Â
->
«me
 = 
	`ßve°r
(name);

176 i‡(
	`°rcmp
(
ty≥
, "nodeptr") == 0) {

177 
Â
->
ty≥
 = 
T_NODE
;

178 
	`•rötf
(
de˛
, "uni⁄Çodê*%s", 
«me
);

179 } i‡(
	`°rcmp
(
ty≥
, "nodelist") == 0) {

180 
Â
->
ty≥
 = 
T_NODELIST
;

181 
	`•rötf
(
de˛
, "°ru˘Çodñi° *%s", 
«me
);

182 } i‡(
	`°rcmp
(
ty≥
, "string") == 0) {

183 
Â
->
ty≥
 = 
T_STRING
;

184 
	`•rötf
(
de˛
, "ch¨ *%s", 
«me
);

185 } i‡(
	`°rcmp
(
ty≥
, "int") == 0) {

186 
Â
->
ty≥
 = 
T_INT
;

187 
	`•rötf
(
de˛
, "öà%s", 
«me
);

188 } i‡(
	`°rcmp
(
ty≥
, "other") == 0) {

189 
Â
->
ty≥
 = 
T_OTHER
;

190 } i‡(
	`°rcmp
(
ty≥
, "temp") == 0) {

191 
Â
->
ty≥
 = 
T_TEMP
;

193 
	`îr‹
("Unknow¿ty≥ %s", 
ty≥
);

195 i‡(
Â
->
ty≥
 =
T_OTHER
 || fp->ty≥ =
T_TEMP
) {

196 
	`skùbl
();

197 
Â
->
de˛
 = 
	`ßve°r
(
löï
);

199 i‡(*
löï
)

200 
	`îr‹
("GarbageátÉnd ofÜine");

201 
Â
->
de˛
 = 
	`ßve°r
(decl);

203 
cur°r
->
nfõlds
++;

204 
	}
}

207 
	gwrôî
[] = "\
/*\n\
* This file was generated byÅhe mknodesÖrogram.\n\
*/\n\
\n";

214 
	$ouçut
(*
fûe
)

216 
FILE
 *
hfûe
;

217 
FILE
 *
cfûe
;

218 
FILE
 *
∑tfûe
;

219 
i
;

220 
°r
 *
•
;

221 
fõld
 *
Â
;

222 *
p
;

224 i‡((
∑tfûe
 = 
	`f›í
(
fûe
, "r")Ë=
NULL
)

225 
	`îr‹
("C™'à›í %s: %s", 
fûe
, 
	`°ªº‹
(
î∫o
));

226 i‡((
hfûe
 = 
	`f›í
("nodes.h", "w")Ë=
NULL
)

227 
	`îr‹
("C™'à¸óãÇodes.h: %s", 
	`°ªº‹
(
î∫o
));

228 i‡((
cfûe
 = 
	`f›í
("nodes.c", "w")Ë=
NULL
)

229 
	`îr‹
("Can't createÇodes.c");

230 
	`Âuts
(
wrôî
, 
hfûe
);

231 
i
 = 0 ; i < 
¡y≥s
 ; i++)

232 
	`Ârötf
(
hfûe
, "#deföê%†%d\n", 
nodíame
[
i
], i);

233 
	`Âuts
("\n\n\n", 
hfûe
);

234 
•
 = 
°r
 ; s∞< &°r[
n°r
] ; sp++) {

235 
	`Ârötf
(
hfûe
, "°ru˘ %†{\n", 
•
->
èg
);

236 
i
 = 
•
->
nfõlds
, 
Â
 = sp->
fõld
 ; --i >= 0 ; fp++) {

237 
	`Ârötf
(
hfûe
, " %s;\n", 
Â
->
de˛
);

239 
	`Âuts
("};\n\n\n", 
hfûe
);

241 
	`Âuts
("uni⁄Çodê{\n", 
hfûe
);

242 
	`Ârötf
(
hfûe
, " intÅype;\n");

243 
•
 = 
°r
 ; s∞< &°r[
n°r
] ; sp++) {

244 
	`Ârötf
(
hfûe
, " såu˘ %†%s;\n", 
•
->
èg
, sp->tag);

246 
	`Âuts
("};\n\n\n", 
hfûe
);

247 
	`Âuts
("°ru˘Çodñi° {\n", 
hfûe
);

248 
	`Âuts
("\t°ru˘Çodñi° *√xt;\n", 
hfûe
);

249 
	`Âuts
("\tuni⁄Çodê*n;\n", 
hfûe
);

250 
	`Âuts
("};\n\n\n", 
hfûe
);

251 
	`Âuts
("°ru˘ funcdef;\n", 
hfûe
);

252 
	`Âuts
("°ru˘ funcde‡*c›yfunc(uni⁄Çodê*);\n", 
hfûe
);

253 
	`Âuts
("uni⁄Çodê*gëfun˙ode(°ru˘ funcde‡*);\n", 
hfûe
);

254 
	`Âuts
("voidÑeffunc(°ru˘ funcde‡*);\n", 
hfûe
);

255 
	`Âuts
("void uƒeffunc(°ru˘ funcde‡*);\n", 
hfûe
);

257 
	`Âuts
(
wrôî
, 
cfûe
);

258 
	`fgës
(
löe
, Üöe, 
∑tfûe
Ë!
NULL
) {

259 
p
 = 
löe
 ; *p == ' ' || *p == '\t' ;Ö++);

260 i‡(
	`°rcmp
(
p
, "%SIZES\n") == 0)

261 
	`outsizes
(
cfûe
);

262 i‡(
	`°rcmp
(
p
, "%CALCSIZE\n") == 0)

263 
	`outfunc
(
cfûe
, 1);

264 i‡(
	`°rcmp
(
p
, "%COPY\n") == 0)

265 
	`outfunc
(
cfûe
, 0);

267 
	`Âuts
(
löe
, 
cfûe
);

269 
	}
}

274 
	$outsizes
(
FILE
 *
cfûe
)

276 
i
;

278 
	`Ârötf
(
cfûe
, "°©i¯c⁄° sh‹ànodesize[%d] = {\n", 
¡y≥s
);

279 
i
 = 0 ; i < 
¡y≥s
 ; i++) {

280 
	`Ârötf
(
cfûe
, " ALIGN(sizeo‡(°ru˘ %s)),\n", 
node°r
[
i
]->
èg
);

282 
	`Ârötf
(
cfûe
, "};\n");

283 
	}
}

287 
	$outfunc
(
FILE
 *
cfûe
, 
ˇlcsize
)

289 
°r
 *
•
;

290 
fõld
 *
Â
;

291 
i
;

293 
	`Âuts
(" i‡“ =NULL)\n", 
cfûe
);

294 i‡(
ˇlcsize
)

295 
	`Âuts
("Ñëu∫;\n", 
cfûe
);

297 
	`Âuts
("Ñëu∫ NULL;\n", 
cfûe
);

298 i‡(
ˇlcsize
)

299 
	`Âuts
(" funcblocksizê+nodesize[n->ty≥];\n", 
cfûe
);

301 
	`Âuts
("Çew = funcblock;\n", 
cfûe
);

302 
	`Âuts
(" funcblock = (ch¨ *)funcblock +Çodesize[n->ty≥];\n", 
cfûe
);

304 
	`Âuts
(" swôch (n->ty≥Ë{\n", 
cfûe
);

305 
•
 = 
°r
 ; s∞< &°r[
n°r
] ; sp++) {

306 
i
 = 0 ; i < 
¡y≥s
 ; i++) {

307 i‡(
node°r
[
i
] =
•
)

308 
	`Ârötf
(
cfûe
, " ca£ %s:\n", 
nodíame
[
i
]);

310 
i
 = 
•
->
nfõlds
 ; --i >= 1 ; ) {

311 
Â
 = &
•
->
fõld
[
i
];

312 
Â
->
ty≥
) {

313 
T_NODE
:

314 i‡(
ˇlcsize
) {

315 
	`ödít
(12, 
cfûe
);

316 
	`Ârötf
(
cfûe
, "calcsize(n->%s.%s);\n",

317 
•
->
èg
, 
Â
->
«me
);

319 
	`ödít
(12, 
cfûe
);

320 
	`Ârötf
(
cfûe
, "new->%s.%s = copynode(n->%s.%s);\n",

321 
•
->
èg
, 
Â
->
«me
, sp->tag, fp->name);

324 
T_NODELIST
:

325 i‡(
ˇlcsize
) {

326 
	`ödít
(12, 
cfûe
);

327 
	`Ârötf
(
cfûe
, "sizenodelist(n->%s.%s);\n",

328 
•
->
èg
, 
Â
->
«me
);

330 
	`ödít
(12, 
cfûe
);

331 
	`Ârötf
(
cfûe
, "new->%s.%s = copynodelist(n->%s.%s);\n",

332 
•
->
èg
, 
Â
->
«me
, sp->tag, fp->name);

335 
T_STRING
:

336 i‡(
ˇlcsize
) {

337 
	`ödít
(12, 
cfûe
);

338 
	`Ârötf
(
cfûe
, "funcstringsize += strlen(n->%s.%s) + 1;\n",

339 
•
->
èg
, 
Â
->
«me
);

341 
	`ödít
(12, 
cfûe
);

342 
	`Ârötf
(
cfûe
, "new->%s.%s =Çodesavestr(n->%s.%s);\n",

343 
•
->
èg
, 
Â
->
«me
, sp->tag, fp->name);

346 
T_INT
:

347 
T_OTHER
:

348 i‡(! 
ˇlcsize
) {

349 
	`ödít
(12, 
cfûe
);

350 
	`Ârötf
(
cfûe
, "new->%s.%s =Ç->%s.%s;\n",

351 
•
->
èg
, 
Â
->
«me
, sp->tag, fp->name);

356 
	`ödít
(12, 
cfûe
);

357 
	`Âuts
("bªak;\n", 
cfûe
);

359 
	`Âuts
(" };\n", 
cfûe
);

360 i‡(! 
ˇlcsize
)

361 
	`Âuts
("Çew->ty≥ =Ç->ty≥;\n", 
cfûe
);

362 
	}
}

366 
	$ödít
(
amou¡
, 
FILE
 *
Â
)

368 
amou¡
 >= 8) {

369 
	`putc
('\t', 
Â
);

370 
amou¡
 -= 8;

372 --
amou¡
 >= 0) {

373 
	`putc
(' ', 
Â
);

375 
	}
}

379 
	$√xtfõld
(*
buf
)

381 *
p
, *
q
;

383 
p
 = 
löï
;

384 *
p
 == ' ' || *p == '\t')

385 
p
++;

386 
q
 = 
buf
;

387 *
p
 != ' ' && *p != '\t' && *p != '\0')

388 *
q
++ = *
p
++;

389 *
q
 = '\0';

390 
löï
 = 
p
;

391  (
q
 > 
buf
);

392 
	}
}

396 
	$skùbl
()

398 *
löï
 == ' ' || *linep == '\t')

399 
löï
++;

400 
	}
}

404 
	$ªadlöe
()

406 *
p
;

408 i‡(
	`fgës
(
löe
, 1024, 
öÂ
Ë=
NULL
)

410 
p
 = 
löe
 ; *p != '#' && *p != '\n' && *p != '\0' ;Ö++);

411 
p
 > 
löe
 && (p[-1] == ' ' ||Ö[-1] == '\t'))

412 
p
--;

413 *
p
 = '\0';

414 
löï
 = 
löe
;

415 
löno
++;

416 i‡(
p
 - 
löe
 > 
BUFLEN
)

417 
	`îr‹
("LineÅooÜong");

419 
	}
}

424 
	$îr‹
(c⁄° *
msg
, ...)

426 
va_li°
 
va
;

427 
	`va_°¨t
(
va
, 
msg
);

429 (Ë
	`Ârötf
(
°dîr
, "löê%d: ", 
löno
);

430 (Ë
	`vÂrötf
(
°dîr
, 
msg
, 
va
);

431 (Ë
	`Âutc
('\n', 
°dîr
);

433 
	`va_íd
(
va
);

435 
	`exô
(2);

436 
	}
}

441 
	$ßve°r
(c⁄° *
s
)

443 *
p
;

445 i‡((
p
 = 
	`mÆloc
(
	`°æí
(
s
Ë+ 1)Ë=
NULL
)

446 
	`îr‹
("Out of space");

447 (Ë
	`°r˝y
(
p
, 
s
);

448  
p
;

449 
	}
}

	@sh/mksyntax.c

34 #i‚de‡
löt


35 c⁄° 
	gc›yright
[] =

40 #i‚de‡
löt


41 
	gsccsid
[] = "@(#)mksyntax.c 8.2 (Berkeley) 5/4/95";

44 
	~<sys/cdefs.h
>

45 
__FBSDID
("$FreeBSD: src/bin/sh/mksyntax.c,v 1.26.2.2.4.1 2012/03/03 06:15:13 kensmith Exp $");

51 
	~<°dio.h
>

52 
	~<°dlib.h
>

53 
	~<°rög.h
>

54 
	~"∑r£r.h
"

57 
	ssyn˛ass
 {

58 c⁄° *
	m«me
;

59 c⁄° *
	mcommít
;

63 
syn˛ass
 
	gsyn˛ass
[] = {

78 { 
NULL
, NULL }

86 
syn˛ass
 
	gis_íåy
[] = {

92 { 
NULL
, NULL }

95 
	gwrôî
[] = "\
/*\n\
* This file was generated byÅhe mksyntaxÖrogram.\n\
*/\n\
\n";

102 
FILE
 *
	gcfûe
;

103 
FILE
 *
	ghfûe
;

104 c⁄° *
	gsy¡ax
[513];

105 
	gba£
;

106 
	gsize
;

107 
	gnbôs
;

108 
	gdigô_c⁄tig
;

110 
fû…abÀ
(const *);

111 
öô
();

112 
add
(const *, const *);

113 
¥öt
(const *);

114 
ouçut_ty≥_ma¸os
();

115 
digô_c⁄vît
();

118 
	$maö
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

120 
c
;

121 
d
;

122 
sign
;

123 
i
;

124 
buf
[80];

125 
pos
;

126 
digô
[] = "0123456789";

129 i‡((
cfûe
 = 
	`f›í
("sy¡ax.c", "w")Ë=
NULL
) {

130 
	`≥º‹
("syntax.c");

131 
	`exô
(2);

133 i‡((
hfûe
 = 
	`f›í
("sy¡ax.h", "w")Ë=
NULL
) {

134 
	`≥º‹
("syntax.h");

135 
	`exô
(2);

137 
	`Âuts
(
wrôî
, 
hfûe
);

138 
	`Âuts
(
wrôî
, 
cfûe
);

141 
c
 = -1;

142 
sign
 = (
c
 > 0) ? 0 : 1;

143 
nbôs
 = 1 ; ;Çbits++) {

144 
d
 = (1 << 
nbôs
) - 1;

145 i‡(
d
 =
c
)

149 
	`¥ötf
("%†%d bô ch¨s\n", 
sign
? "sig√d" : "unsig√d", 
nbôs
);

151 i‡(
nbôs
 > 9) {

152 
	`Âuts
("Ch¨a˘î†ˇn'àhavêm‹êth™ 9 bôs\n", 
°dîr
);

153 
	`exô
(2);

155 
size
 = (1 << 
nbôs
) + 1;

156 
ba£
 = 1;

157 i‡(
sign
)

158 
ba£
 +1 << (
nbôs
 - 1);

159 
digô_c⁄tig
 = 1;

160 
i
 = 0 ; i < 10 ; i++) {

161 i‡(
digô
[
i
] != '0' + i)

162 
digô_c⁄tig
 = 0;

165 
	`Âuts
("#ö˛udê<sys/cdefs.h>\n", 
hfûe
);

166 
	`Âuts
("#ö˛udê<˘y≥.h>\n", 
hfûe
);

169 
	`Âuts
("/* Sy¡ax cœs£†*/\n", 
hfûe
);

170 
i
 = 0 ; 
syn˛ass
[i].
«me
 ; i++) {

171 
	`•rötf
(
buf
, "#deföê%†%d", 
syn˛ass
[
i
].
«me
, i);

172 
	`Âuts
(
buf
, 
hfûe
);

173 
pos
 = 
	`°æí
(
buf
) ;Öos < 32 ;Öos = (pos + 8) & ~07)

174 
	`putc
('\t', 
hfûe
);

175 
	`Ârötf
(
hfûe
, "/* %†*/\n", 
syn˛ass
[
i
].
commít
);

177 
	`putc
('\n', 
hfûe
);

178 
	`Âuts
("/* Sy¡ax cœs£†f‹ is_ fun˘i⁄†*/\n", 
hfûe
);

179 
i
 = 0 ; 
is_íåy
[i].
«me
 ; i++) {

180 
	`•rötf
(
buf
, "#deföê%†%#o", 
is_íåy
[
i
].
«me
, 1 << i);

181 
	`Âuts
(
buf
, 
hfûe
);

182 
pos
 = 
	`°æí
(
buf
) ;Öos < 32 ;Öos = (pos + 8) & ~07)

183 
	`putc
('\t', 
hfûe
);

184 
	`Ârötf
(
hfûe
, "/* %†*/\n", 
is_íåy
[
i
].
commít
);

186 
	`putc
('\n', 
hfûe
);

187 
	`Ârötf
(
hfûe
, "#deföêSYNBASE %d\n", 
ba£
);

188 
	`Ârötf
(
hfûe
, "#deföêPEOF %d\n\n", -
ba£
);

189 
	`putc
('\n', 
hfûe
);

190 
	`Âuts
("#deföêBASESYNTAX (ba£sy¡ax + SYNBASE)\n", 
hfûe
);

191 
	`Âuts
("#deföêDQSYNTAX (dqsy¡ax + SYNBASE)\n", 
hfûe
);

192 
	`Âuts
("#deföêSQSYNTAX (sqsy¡ax + SYNBASE)\n", 
hfûe
);

193 
	`Âuts
("#deföêARISYNTAX (¨isy¡ax + SYNBASE)\n", 
hfûe
);

194 
	`putc
('\n', 
hfûe
);

195 
	`ouçut_ty≥_ma¸os
();

196 
	`putc
('\n', 
hfûe
);

199 
	`Âuts
("#ö˛udê\"shñl.h\"\n", 
cfûe
);

200 
	`Âuts
("#ö˛udê\"sy¡ax.h\"\n\n", 
cfûe
);

201 
	`öô
();

202 
	`Âuts
("/* sy¡axÅabÀ u£d whíÇŸ i¿quŸe†*/\n", 
cfûe
);

203 
	`add
("\n", "CNL");

204 
	`add
("\\", "CBACK");

205 
	`add
("'", "CSQUOTE");

206 
	`add
("\"", "CDQUOTE");

207 
	`add
("`", "CBQUOTE");

208 
	`add
("$", "CVAR");

209 
	`add
("}", "CENDVAR");

210 
	`add
("<>();&| \t", "CSPCL");

211 
	`¥öt
("basesyntax");

212 
	`öô
();

213 
	`Âuts
("\n/* sy¡axÅabÀ u£d whí i¿doubÀ quŸe†*/\n", 
cfûe
);

214 
	`add
("\n", "CNL");

215 
	`add
("\\", "CBACK");

216 
	`add
("\"", "CENDQUOTE");

217 
	`add
("`", "CBQUOTE");

218 
	`add
("$", "CVAR");

219 
	`add
("}", "CENDVAR");

221 
	`add
("!*?[=~:/-", "CCTL");

222 
	`¥öt
("dqsyntax");

223 
	`öô
();

224 
	`Âuts
("\n/* sy¡axÅabÀ u£d whí i¿sögÀ quŸe†*/\n", 
cfûe
);

225 
	`add
("\n", "CNL");

226 
	`add
("'", "CENDQUOTE");

228 
	`add
("!*?[=~:/-", "CCTL");

229 
	`¥öt
("sqsyntax");

230 
	`öô
();

231 
	`Âuts
("\n/* sy¡axÅabÀ u£d whí i¿¨ôhmëi¯*/\n", 
cfûe
);

232 
	`add
("\n", "CNL");

233 
	`add
("\\", "CBACK");

234 
	`add
("`", "CBQUOTE");

235 
	`add
("'", "CSQUOTE");

236 
	`add
("\"", "CDQUOTE");

237 
	`add
("$", "CVAR");

238 
	`add
("}", "CENDVAR");

239 
	`add
("(", "CLP");

240 
	`add
(")", "CRP");

241 
	`¥öt
("arisyntax");

242 
	`fû…abÀ
("0");

243 
	`Âuts
("\n/* ch¨a˘î cœssifiˇti⁄ÅabÀ */\n", 
cfûe
);

244 
	`add
("0123456789", "ISDIGIT");

245 
	`add
("abcdefghijklmnopqrstucvwxyz", "ISLOWER");

246 
	`add
("ABCDEFGHIJKLMNOPQRSTUCVWXYZ", "ISUPPER");

247 
	`add
("_", "ISUNDER");

248 
	`add
("#?$!-*@", "ISSPECL");

249 
	`¥öt
("is_type");

250 i‡(! 
digô_c⁄tig
)

251 
	`digô_c⁄vît
();

252 
	`exô
(0);

253 
	}
}

262 
	$fû…abÀ
(c⁄° *
d·vÆ
)

264 
i
;

266 
i
 = 0 ; i < 
size
 ; i++)

267 
sy¡ax
[
i
] = 
d·vÆ
;

268 
	}
}

276 
	$öô
()

278 
	`fû…abÀ
("CWORD");

279 
sy¡ax
[0] = "CEOF";

280 
sy¡ax
[
ba£
 + 
CTLESC
] = "CCTL";

281 
sy¡ax
[
ba£
 + 
CTLVAR
] = "CCTL";

282 
sy¡ax
[
ba£
 + 
CTLENDVAR
] = "CCTL";

283 
sy¡ax
[
ba£
 + 
CTLBACKQ
] = "CCTL";

284 
sy¡ax
[
ba£
 + 
CTLBACKQ
 + 
CTLQUOTE
] = "CCTL";

285 
sy¡ax
[
ba£
 + 
CTLARI
] = "CCTL";

286 
sy¡ax
[
ba£
 + 
CTLENDARI
] = "CCTL";

287 
sy¡ax
[
ba£
 + 
CTLQUOTEMARK
] = "CCTL";

288 
	}
}

296 
	$add
(c⁄° *
p
, c⁄° *
ty≥
)

298 *
p
)

299 
sy¡ax
[*
p
++ + 
ba£
] = 
ty≥
;

300 
	}
}

309 
	$¥öt
(c⁄° *
«me
)

311 
i
;

312 
cﬁ
;

314 
	`Ârötf
(
hfûe
, "exã∫ c⁄° ch¨ %s[];\n", 
«me
);

315 
	`Ârötf
(
cfûe
, "c⁄° ch¨ %s[%d] = {\n", 
«me
, 
size
);

316 
cﬁ
 = 0;

317 
i
 = 0 ; i < 
size
 ; i++) {

318 i‡(
i
 == 0) {

319 
	`Âuts
(" ", 
cfûe
);

320 } i‡((
i
 & 03) == 0) {

321 
	`Âuts
(",\¿ ", 
cfûe
);

322 
cﬁ
 = 0;

324 
	`putc
(',', 
cfûe
);

325 ++
cﬁ
 < 9 * (
i
 & 03))

326 
	`putc
(' ', 
cfûe
);

328 
	`Âuts
(
sy¡ax
[
i
], 
cfûe
);

329 
cﬁ
 +
	`°æí
(
sy¡ax
[
i
]);

331 
	`Âuts
("\n};\n", 
cfûe
);

332 
	}
}

341 c⁄° *
	gma¸o
[] = {

348 
NULL


352 
	$ouçut_ty≥_ma¸os
()

354 c⁄° **
µ
;

356 i‡(
digô_c⁄tig
)

357 
ma¸o
[0] = "#define is_digit(c)\t((unsigned int)((c) - '0') <= 9)";

358 
µ
 = 
ma¸o
 ; *pp ;Öp++)

359 
	`Ârötf
(
hfûe
, "%s\n", *
µ
);

360 i‡(
digô_c⁄tig
)

361 
	`Âuts
("#deföêdigô_vÆ(c)\t((cË- '0')\n", 
hfûe
);

363 
	`Âuts
("#deföêdigô_vÆ(c)\t(digô_vÆue[c])\n", 
hfûe
);

364 
	}
}

373 
	$digô_c⁄vît
()

375 
maxdigô
;

376 
digô
[] = "0123456789";

377 *
p
;

378 
i
;

380 
maxdigô
 = 0;

381 
p
 = 
digô
 ; *p ;Ö++)

382 i‡(*
p
 > 
maxdigô
)

383 
maxdigô
 = *
p
;

384 
	`Âuts
("exã∫ c⁄° ch¨ digô_vÆue[];\n", 
hfûe
);

385 
	`Âuts
("\n\nc⁄° ch¨ digô_vÆue[] = {\n", 
cfûe
);

386 
i
 = 0 ; i <
maxdigô
 ; i++) {

387 
p
 = 
digô
 ; *∞&& *∞!
i
 ;Ö++);

388 i‡(*
p
 == '\0')

389 
p
 = 
digô
;

390 
	`Ârötf
(
cfûe
, " %d,\n", ()(
p
 - 
digô
));

392 
	`Âuts
("};\n", 
cfûe
);

393 
	}
}

	@sh/myhistedit.h

33 
	~<hi°edô.h
>

35 
Hi°‹y
 *
hi°
;

36 
EdôLöe
 *
ñ
;

37 
di•œyhi°
;

39 
hi°edô
();

40 
£thi°size
(const *);

41 
hi°cmd
(, **);

42 
nŸ_f˙umbî
(const *);

43 
°r_to_evít
(const *, );

44 
bödcmd
(, **);

	@sh/mystring.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)mystring.c 8.2 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/mystring.c,v 1.13.30.2.4.1 2012/03/03 06:15:13 kensmith Exp $");

51 
	~<°dlib.h
>

52 
	~"shñl.h
"

53 
	~"sy¡ax.h
"

54 
	~"îr‹.h
"

55 
	~"my°rög.h
"

58 
	gnuŒ°r
[1];

76 
	$sc›yn
(c⁄° *
‰om
, *
to
, 
size
)

79 --
size
 > 0) {

80 i‡((*
to
++ = *
‰om
++) == '\0')

83 *
to
 = '\0';

84 
	}
}

92 
	$¥efix
(c⁄° *
pfx
, c⁄° *
°rög
)

94 *
pfx
) {

95 i‡(*
pfx
++ !*
°rög
++)

99 
	}
}

108 
	$numbî
(c⁄° *
s
)

110 i‡(! 
	`is_numbî
(
s
))

111 
	`îr‹
("IŒegÆÇumbî: %s", 
s
);

112  
	`©oi
(
s
);

113 
	}
}

122 
	$is_numbî
(c⁄° *
p
)

125 i‡(! 
	`is_digô
(*
p
))

127 } *++
p
 != '\0');

129 
	}
}

	@sh/mystring.h

36 
	~<°rög.h
>

38 
sc›yn
(const *, *, );

39 
¥efix
(const *, const *);

40 
numbî
(const *);

41 
is_numbî
(const *);

43 
	#equÆ
(
s1
, 
s2
Ë(
	`°rcmp
(s1, s2Ë=0)

	)

44 
	#sc›y
(
s1
, 
s2
Ë(()
	`°r˝y
(s2, s1))

	)

	@sh/options.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)options.c 8.2 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/options.c,v 1.27.2.6.2.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sig«l.h
>

42 
	~<uni°d.h
>

43 
	~<°dlib.h
>

45 
	~"shñl.h
"

46 
	#DEFINE_OPTIONS


	)

47 
	~"›ti⁄s.h
"

48 #unde‡
DEFINE_OPTIONS


49 
	~"nodes.h
"

50 
	~"evÆ.h
"

51 
	~"jobs.h
"

52 
	~"öput.h
"

53 
	~"ouçut.h
"

54 
	~"å≠.h
"

55 
	~"v¨.h
"

56 
	~"memÆloc.h
"

57 
	~"îr‹.h
"

58 
	~"my°rög.h
"

59 #i‚de‡
NO_HISTORY


60 
	~"myhi°edô.h
"

63 *
	g¨g0
;

64 
sh∑øm
 
	gshñÕ¨am
;

65 **
	g¨g±r
;

66 *
	gsh›èrg
;

67 *
	g√xt›t_›çå
;

69 *
	gmöusc
;

72 
›ti⁄s
();

73 
möus_o
(*, );

74 
£t›ti⁄
(, );

75 
gë›ts
(*, *, **, ***, **);

83 
	$¥oˇrgs
(
¨gc
, **
¨gv
)

85 
i
;

87 
¨g±r
 = 
¨gv
;

88 i‡(
¨gc
 > 0)

89 
¨g±r
++;

90 
i
 = 0; i < 
NOPTS
; i++)

91 
›éi°
[
i
].
vÆ
 = 2;

92 
¥ivûeged
 = (
	`gëuid
(Ë!
	`gëeuid
(Ë|| 
	`gëgid
(Ë!
	`gëegid
());

93 
	`›ti⁄s
(1);

94 i‡(*
¨g±r
 =
NULL
 && 
möusc
 == NULL)

95 
sÊag
 = 1;

96 i‡(
iÊag
 =2 && 
sÊag
 =1 && 
	`ißây
(0) && isatty(1))

97 
iÊag
 = 1;

98 i‡(
mÊag
 == 2)

99 
mÊag
 = 
iÊag
;

100 
i
 = 0; i < 
NOPTS
; i++)

101 i‡(
›éi°
[
i
].
vÆ
 == 2)

102 
›éi°
[
i
].
vÆ
 = 0;

103 
¨g0
 = 
¨gv
[0];

104 i‡(
sÊag
 =0 && 
möusc
 =
NULL
) {

105 
comm™d«me
 = 
¨g0
 = *
¨g±r
++;

106 
	`£töputfûe
(
comm™d«me
, 0);

109 i‡(
¨g±r
 && 
möusc
 && *argptr)

110 
¨g0
 = *
¨g±r
++;

112 
shñÕ¨am
.
p
 = 
¨g±r
;

113 
shñÕ¨am
.
ª£t
 = 1;

115 *
¨g±r
) {

116 
shñÕ¨am
.
≈¨am
++;

117 
¨g±r
++;

119 
	`›tsch™ged
();

120 
	}
}

124 
	$›tsch™ged
()

126 
	`£töãø˘ive
(
iÊag
);

127 #i‚de‡
NO_HISTORY


128 
	`hi°edô
();

130 
	`£tjob˘l
(
mÊag
);

131 
	}
}

139 
	$›ti⁄s
(
cmdlöe
)

141 *
kp
, *
p
;

142 
vÆ
;

143 
c
;

145 i‡(
cmdlöe
)

146 
möusc
 = 
NULL
;

147 (
p
 = *
¨g±r
Ë!
NULL
) {

148 
¨g±r
++;

149 i‡((
c
 = *
p
++) == '-') {

150 
vÆ
 = 1;

152 i‡(
p
[0] == '\0')

153 
íd_›ti⁄s1
;

154 i‡(
p
[0] == '-' &&Ö[1] == '\0')

155 
íd_›ti⁄s2
;

168 i‡(
p
[0] == '-') {

169 
kp
 = 
p
 + 1;

170 *
kp
 == ' ' || *kp == '\t')

171 
kp
++;

172 i‡(*
kp
 == '#' || *kp == '\0')

173 
íd_›ti⁄s2
;

175 } i‡(
c
 == '+') {

176 
vÆ
 = 0;

178 
¨g±r
--;

181 (
c
 = *
p
++) != '\0') {

182 i‡(
c
 ='c' && 
cmdlöe
) {

183 *
q
;

184 #ifde‡
NOHACK


185 i‡(*
p
 == '\0')

187 
q
 = *
¨g±r
++;

188 i‡(
q
 =
NULL
 || 
möusc
 != NULL)

189 
	`îr‹
("Bad -c option");

190 
möusc
 = 
q
;

191 #ifde‡
NOHACK


194 } i‡(
c
 == 'o') {

195 
	`möus_o
(*
¨g±r
, 
vÆ
);

196 i‡(*
¨g±r
)

197 
¨g±r
++;

199 
	`£t›ti⁄
(
c
, 
vÆ
);

205 
íd_›ti⁄s1
:

206 i‡(!
cmdlöe
) {

207 
xÊag
 = 
vÊag
 = 0;

217 
íd_›ti⁄s2
:

218 i‡(!
cmdlöe
) {

219 i‡(*
¨g±r
 =
NULL
)

220 
	`£ç¨am
(
¨g±r
);

233 
p
 = *
¨g±r
;

234 i‡(
p
 !
NULL
 &&Ö[0] == '#' &&Ö[1] == '\0') {

235 *
¨g±r
 !
NULL
)

236 
¨g±r
++;

238 
¨g±r
--;

240 
	}
}

243 
	$möus_o
(*
«me
, 
vÆ
)

245 
i
;

247 i‡(
«me
 =
NULL
) {

248 i‡(
vÆ
) {

250 
	`out1°r
("Current option settings\n");

251 
i
 = 0; i < 
NOPTS
; i++)

252 
	`out1fmt
("%-16s%s\n", 
›éi°
[
i
].
«me
,

253 
›éi°
[
i
].
vÆ
 ? "on" : "off");

256 
i
 = 0; i < 
NOPTS
; i++) {

257 i‡(
i
 % 6 == 0)

258 
	`out1°r
(
i
 == 0 ? "set" : "\nset");

259 
	`out1fmt
(" %cÿ%s", 
›éi°
[
i
].
vÆ
 ? '-' : '+',

260 
›éi°
[
i
].
«me
);

262 
	`out1c
('\n');

265 
i
 = 0; i < 
NOPTS
; i++)

266 i‡(
	`equÆ
(
«me
, 
›éi°
[
i
].name)) {

267 
	`£t›ti⁄
(
›éi°
[
i
].
Àâî
, 
vÆ
);

270 
	`îr‹
("IŒegÆ o±i⁄ -ÿ%s", 
«me
);

272 
	}
}

276 
	$£t›ti⁄
(
Êag
, 
vÆ
)

278 
i
;

280 i‡(
Êag
 ='p' && !
vÆ
 && 
¥ivûeged
) {

281 i‡(
	`£tgid
(
	`gëgid
()) == -1)

282 
	`îr‹
("setgid");

283 i‡(
	`£tuid
(
	`gëuid
()) == -1)

284 
	`îr‹
("setuid");

286 
i
 = 0; i < 
NOPTS
; i++)

287 i‡(
›éi°
[
i
].
Àâî
 =
Êag
) {

288 
›éi°
[
i
].
vÆ
 = val;

289 i‡(
vÆ
) {

291 i‡(
Êag
 == 'V')

292 
EÊag
 = 0;

293 i‡(
Êag
 == 'E')

294 
VÊag
 = 0;

298 
	`îr‹
("IŒegÆ o±i⁄ -%c", 
Êag
);

299 
	}
}

303 #ifde‡
mköô


304 
	gINCLUDE
 "options.h"

306 
	gSHELLPROC
 {

307 
	gi
;

309 
	gi
 = 0; i < 
	gNOPTS
; i++)

310 
	g›éi°
[
i
].
	gvÆ
 = 0;

311 
›tsch™ged
();

322 
	$£ç¨am
(**
¨gv
)

324 **
√w∑øm
;

325 **
≠
;

326 
≈¨am
;

328 
≈¨am
 = 0 ; 
¨gv
[nparam] ;Çparam++);

329 
≠
 = 
√w∑øm
 = 
	`ckmÆloc
((
≈¨am
 + 1) *  *ap);

330 *
¨gv
) {

331 *
≠
++ = 
	`ßve°r
(*
¨gv
++);

333 *
≠
 = 
NULL
;

334 
	`‰ì∑øm
(&
shñÕ¨am
);

335 
shñÕ¨am
.
mÆloc
 = 1;

336 
shñÕ¨am
.
≈¨am
 =Çparam;

337 
shñÕ¨am
.
p
 = 
√w∑øm
;

338 
shñÕ¨am
.
ª£t
 = 1;

339 
shñÕ¨am
.
›äext
 = 
NULL
;

340 
	}
}

348 
	$‰ì∑øm
(
sh∑øm
 *
∑øm
)

350 **
≠
;

352 i‡(
∑øm
->
mÆloc
) {

353 
≠
 = 
∑øm
->
p
 ; *ap ;áp++)

354 
	`ck‰ì
(*
≠
);

355 
	`ck‰ì
(
∑øm
->
p
);

357 
	}
}

366 
	$shi·cmd
(
¨gc
, **
¨gv
)

368 
n
;

369 **
≠1
, **
≠2
;

371 
n
 = 1;

372 i‡(
¨gc
 > 1)

373 
n
 = 
	`numbî
(
¨gv
[1]);

374 i‡(
n
 > 
shñÕ¨am
.
≈¨am
)

376 
INTOFF
;

377 
shñÕ¨am
.
≈¨am
 -
n
;

378 
≠1
 = 
shñÕ¨am
.
p
 ; --
n
 >= 0 ;áp1++) {

379 i‡(
shñÕ¨am
.
mÆloc
)

380 
	`ck‰ì
(*
≠1
);

382 
≠2
 = 
shñÕ¨am
.
p
;

383 (*
≠2
++ = *
≠1
++Ë!
NULL
);

384 
shñÕ¨am
.
ª£t
 = 1;

385 
INTON
;

387 
	}
}

396 
	$£tcmd
(
¨gc
, **
¨gv
)

398 i‡(
¨gc
 == 1)

399  
	`showv¨scmd
(
¨gc
, 
¨gv
);

400 
INTOFF
;

401 
	`›ti⁄s
(0);

402 
	`›tsch™ged
();

403 i‡(*
¨g±r
 !
NULL
) {

404 
	`£ç¨am
(
¨g±r
);

406 
INTON
;

408 
	}
}

412 
	$gë›t§e£t
(c⁄° *
vÆue
)

414 i‡(
	`numbî
(
vÆue
) == 1) {

415 
shñÕ¨am
.
ª£t
 = 1;

417 
	}
}

427 
	$gë›tscmd
(
¨gc
, **
¨gv
)

429 **
›tba£
 = 
NULL
;

431 i‡(
¨gc
 < 3)

432 
	`îr‹
("usage: getopts optstring var [arg]");

433 i‡(
¨gc
 == 3)

434 
›tba£
 = 
shñÕ¨am
.
p
;

436 
›tba£
 = &
¨gv
[3];

438 i‡(
shñÕ¨am
.
ª£t
 == 1) {

439 
shñÕ¨am
.
›äext
 = 
›tba£
;

440 
shñÕ¨am
.
›çå
 = 
NULL
;

441 
shñÕ¨am
.
ª£t
 = 0;

444  
	`gë›ts
(
¨gv
[1],árgv[2], 
›tba£
, &
shñÕ¨am
.
›äext
,

445 &
shñÕ¨am
.
›çå
);

446 
	}
}

449 
	$gë›ts
(*
›t°r
, *
›tv¨
, **
›tfú°
, ***
›äext
,

450 **
›çå
)

452 *
p
, *
q
;

453 
c
 = '?';

454 
d⁄e
 = 0;

455 
öd
 = 0;

456 
îr
 = 0;

457 
s
[10];

459 i‡((
p
 = *
›çå
Ë=
NULL
 || *p == '\0') {

461 i‡(*
›äext
 =
NULL
)

463 
p
 = **
›äext
;

464 i‡(
p
 =
NULL
 || *p != '-' || *++p == '\0') {

465 
©íd
:

466 
öd
 = *
›äext
 - 
›tfú°
 + 1;

467 *
›äext
 = 
NULL
;

468 
p
 = 
NULL
;

469 
d⁄e
 = 1;

470 
out
;

472 (*
›äext
)++;

473 i‡(
p
[0] == '-' &&Ö[1] == '\0')

474 
©íd
;

477 
c
 = *
p
++;

478 
q
 = 
›t°r
; *q !
c
; ) {

479 i‡(*
q
 == '\0') {

480 i‡(
›t°r
[0] == ':') {

481 
s
[0] = 
c
;

482 
s
[1] = '\0';

483 
îr
 |
	`£tv¨ß„
("OPTARG", 
s
, 0);

486 
	`out1fmt
("IŒegÆ o±i⁄ -%c\n", 
c
);

487 (Ë
	`un£tv¨
("OPTARG");

489 
c
 = '?';

490 
bad
;

492 i‡(*++
q
 == ':')

493 
q
++;

496 i‡(*++
q
 == ':') {

497 i‡(*
p
 ='\0' && (∞**
›äext
Ë=
NULL
) {

498 i‡(
›t°r
[0] == ':') {

499 
s
[0] = 
c
;

500 
s
[1] = '\0';

501 
îr
 |
	`£tv¨ß„
("OPTARG", 
s
, 0);

502 
c
 = ':';

505 
	`out1fmt
("Nÿ¨g f‹ -%¯›ti⁄\n", 
c
);

506 (Ë
	`un£tv¨
("OPTARG");

507 
c
 = '?';

509 
bad
;

512 i‡(
p
 =**
›äext
)

513 (*
›äext
)++;

514 
	`£tv¨ß„
("OPTARG", 
p
, 0);

515 
p
 = 
NULL
;

518 
	`£tv¨ß„
("OPTARG", "", 0);

519 
öd
 = *
›äext
 - 
›tfú°
 + 1;

520 
out
;

522 
bad
:

523 
öd
 = 1;

524 *
›äext
 = 
NULL
;

525 
p
 = 
NULL
;

526 
out
:

527 *
›çå
 = 
p
;

528 
	`fmt°r
(
s
, (s), "%d", 
öd
);

529 
îr
 |
	`£tv¨ß„
("OPTIND", 
s
, 
VNOFUNC
);

530 
s
[0] = 
c
;

531 
s
[1] = '\0';

532 
îr
 |
	`£tv¨ß„
(
›tv¨
, 
s
, 0);

533 i‡(
îr
) {

534 *
›äext
 = 
NULL
;

535 *
›çå
 = 
NULL
;

536 
	`ÊushÆl
();

537 
	`exøi£
(
EXERROR
);

539  
d⁄e
;

540 
	}
}

554 
	$√xt›t
(c⁄° *
›t°rög
)

556 *
p
;

557 c⁄° *
q
;

558 
c
;

560 i‡((
p
 = 
√xt›t_›çå
Ë=
NULL
 || *p == '\0') {

561 
p
 = *
¨g±r
;

562 i‡(
p
 =
NULL
 || *p != '-' || *++p == '\0')

564 
¨g±r
++;

565 i‡(
p
[0] == '-' &&Ö[1] == '\0')

568 
c
 = *
p
++;

569 
q
 = 
›t°rög
 ; *q !
c
 ; ) {

570 i‡(*
q
 == '\0')

571 
	`îr‹
("IŒegÆ o±i⁄ -%c", 
c
);

572 i‡(*++
q
 == ':')

573 
q
++;

575 i‡(*++
q
 == ':') {

576 i‡(*
p
 ='\0' && (∞*
¨g±r
++Ë=
NULL
)

577 
	`îr‹
("Nÿ¨g f‹ -%¯›ti⁄", 
c
);

578 
sh›èrg
 = 
p
;

579 
p
 = 
NULL
;

581 
√xt›t_›çå
 = 
p
;

582  
c
;

583 
	}
}

	@sh/options.h

36 
	ssh∑øm
 {

37 
	m≈¨am
;

38 
	mmÆloc
;

39 
	mª£t
;

40 **
	mp
;

41 **
	m›äext
;

42 *
	m›çå
;

47 
	#eÊag
 
›éi°
[0].
vÆ


	)

48 
	#fÊag
 
›éi°
[1].
vÆ


	)

49 
	#IÊag
 
›éi°
[2].
vÆ


	)

50 
	#iÊag
 
›éi°
[3].
vÆ


	)

51 
	#mÊag
 
›éi°
[4].
vÆ


	)

52 
	#nÊag
 
›éi°
[5].
vÆ


	)

53 
	#sÊag
 
›éi°
[6].
vÆ


	)

54 
	#xÊag
 
›éi°
[7].
vÆ


	)

55 
	#vÊag
 
›éi°
[8].
vÆ


	)

56 
	#VÊag
 
›éi°
[9].
vÆ


	)

57 
	#EÊag
 
›éi°
[10].
vÆ


	)

58 
	#CÊag
 
›éi°
[11].
vÆ


	)

59 
	#aÊag
 
›éi°
[12].
vÆ


	)

60 
	#bÊag
 
›éi°
[13].
vÆ


	)

61 
	#uÊag
 
›éi°
[14].
vÆ


	)

62 
	#¥ivûeged
 
›éi°
[15].
vÆ


	)

63 
	#TÊag
 
›éi°
[16].
vÆ


	)

64 
	#PÊag
 
›éi°
[17].
vÆ


	)

66 
	#NOPTS
 18

	)

68 
	s›ã¡
 {

69 c⁄° *
	m«me
;

70 c⁄° 
	mÀâî
;

71 
	mvÆ
;

74 #ifde‡
DEFINE_OPTIONS


75 
›ã¡
 
	g›éi°
[
NOPTS
] = {

96 
›ã¡
 
›éi°
[
NOPTS
];

100 *
möusc
;

101 *
¨g0
;

102 
sh∑øm
 
shñÕ¨am
;

103 **
¨g±r
;

104 *
sh›èrg
;

105 *
√xt›t_›çå
;

107 
¥oˇrgs
(, **);

108 
›tsch™ged
();

109 
£ç¨am
(**);

110 
‰ì∑øm
(
sh∑øm
 *);

111 
shi·cmd
(, **);

112 
£tcmd
(, **);

113 
gë›tscmd
(, **);

114 
√xt›t
(const *);

115 
gë›t§e£t
(const *);

	@sh/output.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)output.c 8.2 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/output.c,v 1.21.2.3.4.1 2012/03/03 06:15:13 kensmith Exp $");

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<°d¨g.h
>

54 
	~<î∫o.h
>

55 
	~<uni°d.h
>

56 
	~<°dlib.h
>

58 
	~"shñl.h
"

59 
	~"sy¡ax.h
"

60 
	~"ouçut.h
"

61 
	~"memÆloc.h
"

62 
	~"îr‹.h
"

63 
	~"v¨.h
"

66 
	#OUTBUFSIZ
 
BUFSIZ


	)

67 
	#BLOCK_OUT
 -2

	)

68 
	#MEM_OUT
 -3

	)

69 
	#OUTPUT_ERR
 01

	)

71 
dof‹m©_wr
(*, const *, );

73 
ouçut
 
	gouçut
 = {
NULL
, 0, NULL, 
OUTBUFSIZ
, 1, 0};

74 
ouçut
 
	gîrout
 = {
NULL
, 0, NULL, 100, 2, 0};

75 
ouçut
 
	gmemout
 = {
NULL
, 0, NULL, 0, 
MEM_OUT
, 0};

76 
ouçut
 *
	gout1
 = &output;

77 
ouçut
 *
	gout2
 = &
îrout
;

81 #ifde‡
mköô


83 
	gINCLUDE
 "output.h"

84 
	gINCLUDE
 "memalloc.h"

86 
	gRESET
 {

87 
	gout1
 = &
ouçut
;

88 
	gout2
 = &
îrout
;

89 i‡(
	gmemout
.
	gbuf
 !
NULL
) {

90 
ck‰ì
(
memout
.
buf
);

91 
	gmemout
.
	gbuf
 = 
NULL
;

99 
	$out1°r
(c⁄° *
p
)

101 
	`out°r
(
p
, 
out1
);

102 
	}
}

105 
	$out1q°r
(c⁄° *
p
)

107 
	`outq°r
(
p
, 
out1
);

108 
	}
}

111 
	$out2°r
(c⁄° *
p
)

113 
	`out°r
(
p
, 
out2
);

114 
	}
}

117 
	$out2q°r
(c⁄° *
p
)

119 
	`outq°r
(
p
, 
out2
);

120 
	}
}

123 
	$out°r
(c⁄° *
p
, 
ouçut
 *
fûe
)

125 *
p
)

126 
	`outc
(*
p
++, 
fûe
);

127 i‡(
fûe
 =
out2
)

128 
	`Êushout
(
fûe
);

129 
	}
}

133 
	$outq°r
(c⁄° *
p
, 
ouçut
 *
fûe
)

135 
ch
;

136 
öquŸes
;

138 i‡(
p
[0] == '\0') {

139 
	`out°r
("''", 
fûe
);

143 i‡(
p
[
	`°rc•n
(p, "|&;<>()$`\\\"' \t\n*?[~#")] == '\0' ||

144 
	`°rcmp
(
p
, "[") == 0) {

145 
	`out°r
(
p
, 
fûe
);

149 
öquŸes
 = 0;

150 (
ch
 = *
p
++) != '\0') {

151 
ch
) {

154 i‡(
öquŸes
)

155 
	`outc
('\'', 
fûe
);

156 
öquŸes
 = 0;

157 
	`out°r
("\\'", 
fûe
);

160 i‡(!
öquŸes
)

161 
	`outc
('\'', 
fûe
);

162 
öquŸes
 = 1;

163 
	`outc
(
ch
, 
fûe
);

166 i‡(
öquŸes
)

167 
	`outc
('\'', 
fûe
);

168 
	}
}

170 
	gout_junk
[16];

173 
	$em±youtbuf
(
ouçut
 *
de°
)

175 
off£t
;

177 i‡(
de°
->
fd
 =
BLOCK_OUT
) {

178 
de°
->
√xtc
 = 
out_junk
;

179 
de°
->
∆e·
 =  
out_junk
;

180 
de°
->
Êags
 |
OUTPUT_ERR
;

181 } i‡(
de°
->
buf
 =
NULL
) {

182 
INTOFF
;

183 
de°
->
buf
 = 
	`ckmÆloc
(de°->
bufsize
);

184 
de°
->
√xtc
 = de°->
buf
;

185 
de°
->
∆e·
 = de°->
bufsize
;

186 
INTON
;

187 } i‡(
de°
->
fd
 =
MEM_OUT
) {

188 
off£t
 = 
de°
->
bufsize
;

189 
INTOFF
;

190 
de°
->
bufsize
 <<= 1;

191 
de°
->
buf
 = 
	`ckªÆloc
(de°->buf, de°->
bufsize
);

192 
de°
->
∆e·
 = de°->
bufsize
 - 
off£t
;

193 
de°
->
√xtc
 = de°->
buf
 + 
off£t
;

194 
INTON
;

196 
	`Êushout
(
de°
);

198 
de°
->
∆e·
--;

199 
	}
}

203 
	$ÊushÆl
()

205 
	`Êushout
(&
ouçut
);

206 
	`Êushout
(&
îrout
);

207 
	}
}

211 
	$Êushout
(
ouçut
 *
de°
)

214 i‡(
de°
->
buf
 =
NULL
 || de°->
√xtc
 =de°->bu‡|| de°->
fd
 < 0)

216 i‡(
	`xwrôe
(
de°
->
fd
, de°->
buf
, de°->
√xtc
 - dest->buf) < 0)

217 
de°
->
Êags
 |
OUTPUT_ERR
;

218 
de°
->
√xtc
 = de°->
buf
;

219 
de°
->
∆e·
 = de°->
bufsize
;

220 
	}
}

224 
	$‰ì°dout
()

226 
INTOFF
;

227 i‡(
ouçut
.
buf
) {

228 
	`ck‰ì
(
ouçut
.
buf
);

229 
ouçut
.
buf
 = 
NULL
;

230 
ouçut
.
∆e·
 = 0;

232 
INTON
;

233 
	}
}

237 
	$outfmt
(
ouçut
 *
fûe
, c⁄° *
fmt
, ...)

239 
va_li°
 
≠
;

241 
	`va_°¨t
(
≠
, 
fmt
);

242 
	`dof‹m©
(
fûe
, 
fmt
, 
≠
);

243 
	`va_íd
(
≠
);

244 
	}
}

248 
	$out1fmt
(c⁄° *
fmt
, ...)

250 
va_li°
 
≠
;

252 
	`va_°¨t
(
≠
, 
fmt
);

253 
	`dof‹m©
(
out1
, 
fmt
, 
≠
);

254 
	`va_íd
(
≠
);

255 
	}
}

258 
	$d¥ötf
(c⁄° *
fmt
, ...)

260 
va_li°
 
≠
;

262 
	`va_°¨t
(
≠
, 
fmt
);

263 
	`dof‹m©
(
out2
, 
fmt
, 
≠
);

264 
	`va_íd
(
≠
);

265 
	`Êushout
(
out2
);

266 
	}
}

269 
	$fmt°r
(*
outbuf
, 
Àngth
, c⁄° *
fmt
, ...)

271 
va_li°
 
≠
;

272 
ouçut
 
°rout
;

274 
°rout
.
√xtc
 = 
outbuf
;

275 
°rout
.
∆e·
 = 
Àngth
;

276 
°rout
.
fd
 = 
BLOCK_OUT
;

277 
°rout
.
Êags
 = 0;

278 
	`va_°¨t
(
≠
, 
fmt
);

279 
	`dof‹m©
(&
°rout
, 
fmt
, 
≠
);

280 
	`va_íd
(
≠
);

281 
	`outc
('\0', &
°rout
);

282 i‡(
°rout
.
Êags
 & 
OUTPUT_ERR
)

283 
outbuf
[
Àngth
 - 1] = '\0';

284 
	}
}

287 
	$dof‹m©_wr
(*
cookõ
, c⁄° *
buf
, 
Àn
)

289 
ouçut
 *
o
;

290 
‹igÀn
;

291 
c
;

293 
o
 = (
ouçut
 *)
cookõ
;

294 
‹igÀn
 = 
Àn
;

295 
Àn
-- != 0) {

296 
c
 = ()*
buf
++;

297 
	`outc
(
c
, 
o
);

300  (
‹igÀn
);

301 
	}
}

304 
	$dof‹m©
(
ouçut
 *
de°
, c⁄° *
f
, 
va_li°
 
≠
)

306 
FILE
 *
Â
;

308 i‡((
Â
 = 
	`fw›í
(
de°
, 
dof‹m©_wr
)Ë!
NULL
) {

309 
	`vÂrötf
(
Â
, 
f
, 
≠
);

310 
	`f˛o£
(
Â
);

312 
	}
}

319 
	$xwrôe
(
fd
, c⁄° *
buf
, 
nbyãs
)

321 
¡ry
;

322 
i
;

323 
n
;

325 
n
 = 
nbyãs
;

326 
¡ry
 = 0;

328 
i
 = 
	`wrôe
(
fd
, 
buf
, 
n
);

329 i‡(
i
 > 0) {

330 i‡((
n
 -
i
) <= 0)

331  
nbyãs
;

332 
buf
 +
i
;

333 
¡ry
 = 0;

334 } i‡(
i
 == 0) {

335 i‡(++
¡ry
 > 10)

336  
nbyãs
 - 
n
;

337 } i‡(
î∫o
 !
EINTR
) {

341 
	}
}

	@sh/output.h

36 #i‚de‡
OUTPUT_INCL


38 
	~<°d¨g.h
>

40 
	souçut
 {

41 *
	m√xtc
;

42 
	m∆e·
;

43 *
	mbuf
;

44 
	mbufsize
;

45 
	mfd
;

46 
	mÊags
;

49 
ouçut
 output;

50 
ouçut
 
îrout
;

51 
ouçut
 
memout
;

52 
ouçut
 *
out1
;

53 
ouçut
 *
out2
;

55 
›í_mem
(*, , 
ouçut
 *);

56 
out1°r
(const *);

57 
out1q°r
(const *);

58 
out2°r
(const *);

59 
out2q°r
(const *);

60 
out°r
(c⁄° *, 
ouçut
 *);

61 
outq°r
(c⁄° *, 
ouçut
 *);

62 
em±youtbuf
(
ouçut
 *);

63 
ÊushÆl
();

64 
Êushout
(
ouçut
 *);

65 
‰ì°dout
();

66 
	$outfmt
(
ouçut
 *, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

67 
	$out1fmt
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

68 
	$d¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

69 
	$fmt°r
(*, , c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

70 
	$dof‹m©
(
ouçut
 *, c⁄° *, 
va_li°
Ë
	`__¥ötÊike
(2, 0);

71 
	`xwrôe
(, const *, );

73 
	#outc
(
c
, 
fûe
Ë(--(fûe)->
∆e·
 < 0? (
	`em±youtbuf
(fûe), *(fûe)->
√xtc
++ = (c)Ë: (*(fûe)->√xtc++ = (c)))

	)

74 
	#out1c
(
c
Ë
	`outc
(c, 
out1
);

	)

75 
	#out2c
(
c
Ë
	`outc
(c, 
out2
);

	)

77 
	#OUTPUT_INCL


	)

	@sh/parser.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)parser.c 8.7 (Berkeley) 5/16/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/parser.c,v 1.63.2.11.2.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<°dlib.h
>

42 
	~<uni°d.h
>

43 
	~<°dio.h
>

45 
	~"shñl.h
"

46 
	~"∑r£r.h
"

47 
	~"nodes.h
"

48 
	~"ex∑nd.h
"

49 
	~"sy¡ax.h
"

50 
	~"›ti⁄s.h
"

51 
	~"öput.h
"

52 
	~"ouçut.h
"

53 
	~"v¨.h
"

54 
	~"îr‹.h
"

55 
	~"memÆloc.h
"

56 
	~"my°rög.h
"

57 
	~"Æüs.h
"

58 
	~"show.h
"

59 
	~"evÆ.h
"

60 #i‚de‡
NO_HISTORY


61 
	~"myhi°edô.h
"

68 
	#EOFMARKLEN
 79

	)

69 
	#PROMPTLEN
 128

	)

72 
	~"tokí.h
"

76 
	shîedoc
 {

77 
hîedoc
 *
	m√xt
;

78 
node
 *
	mhîe
;

79 *
	meofm¨k
;

80 
	m°rùèbs
;

85 
hîedoc
 *
	ghîedo˛i°
;

86 
	g∑r£backquŸe
;

87 
	gd›rom±
;

88 
	g√ed¥om±
;

89 
	gœ°tokí
;

90 
MKINIT
 
	gtokpushback
;

91 *
	gw‹dãxt
;

92 
MKINIT
 
	gcheckkwd
;

93 
nodñi°
 *
	gbackquŸñi°
;

94 
node
 *
	gªdúnode
;

95 
hîedoc
 *
	ghîedoc
;

96 
	gquŸeÊag
;

97 
	g°¨éöno
;

98 
	gfun˛öno
;

101 
	gnﬂlü£s
 = 0;

104 
node
 *
li°
();

105 
node
 *
™d‹
();

106 
node
 *
pùñöe
();

107 
node
 *
comm™d
();

108 
node
 *
sim∂ecmd
(node **, node *);

109 
node
 *
makíame
();

110 
∑r£‚ame
();

111 
∑r£hîedoc
();

112 
≥ektokí
();

113 
ªadtokí
();

114 
xxªadtokí
();

115 
ªadtokí1
(, const *, *, );

116 
n€x∑nd
(*);

117 
sy√x≥˘
();

118 
sy√º‹
(const *);

119 
£çrom±
();

127 
node
 *

128 
	$∑r£cmd
(
öãø˘
)

130 
t
;

132 
tokpushback
 = 0;

133 
d›rom±
 = 
öãø˘
;

134 i‡(
d›rom±
)

135 
	`£çrom±
(1);

137 
	`£çrom±
(0);

138 
√ed¥om±
 = 0;

139 
t
 = 
	`ªadtokí
();

140 i‡(
t
 =
TEOF
)

141  
NEOF
;

142 i‡(
t
 =
TNL
)

143  
NULL
;

144 
tokpushback
++;

145  
	`li°
(1);

146 
	}
}

149 
node
 *

150 
	$li°
(
∆Êag
)

152 
node
 *
n1
, *
n2
, *
n3
;

153 
tok
;

155 
checkkwd
 = 2;

156 i‡(
∆Êag
 =0 && 
tokídli°
[
	`≥ektokí
()])

157  
NULL
;

158 
n1
 = 
NULL
;

160 
n2
 = 
	`™d‹
();

161 
tok
 = 
	`ªadtokí
();

162 i‡(
tok
 =
TBACKGND
) {

163 i‡(
n2
->
ty≥
 =
NCMD
 ||Ç2->ty≥ =
NPIPE
) {

164 
n2
->
ncmd
.
backgnd
 = 1;

165 } i‡(
n2
->
ty≥
 =
NREDIR
) {

166 
n2
->
ty≥
 = 
NBACKGND
;

168 
n3
 = (
node
 *)
	`°Æloc
( (
ƒedú
));

169 
n3
->
ty≥
 = 
NBACKGND
;

170 
n3
->
ƒedú
.
n
 = 
n2
;

171 
n3
->
ƒedú
.
ªdúe˘
 = 
NULL
;

172 
n2
 = 
n3
;

175 i‡(
n1
 =
NULL
) {

176 
n1
 = 
n2
;

179 
n3
 = (
node
 *)
	`°Æloc
( (
nbö¨y
));

180 
n3
->
ty≥
 = 
NSEMI
;

181 
n3
->
nbö¨y
.
ch1
 = 
n1
;

182 
n3
->
nbö¨y
.
ch2
 = 
n2
;

183 
n1
 = 
n3
;

185 
tok
) {

186 
TBACKGND
:

187 
TSEMI
:

188 
tok
 = 
	`ªadtokí
();

190 
TNL
:

191 i‡(
tok
 =
TNL
) {

192 
	`∑r£hîedoc
();

193 i‡(
∆Êag
)

194  
n1
;

196 
tokpushback
++;

198 
checkkwd
 = 2;

199 i‡(
tokídli°
[
	`≥ektokí
()])

200  
n1
;

202 
TEOF
:

203 i‡(
hîedo˛i°
)

204 
	`∑r£hîedoc
();

206 
	`pungëc
();

207  
n1
;

209 i‡(
∆Êag
)

210 
	`sy√x≥˘
(-1);

211 
tokpushback
++;

212  
n1
;

215 
	}
}

219 
node
 *

220 
	$™d‹
()

222 
node
 *
n1
, *
n2
, *
n3
;

223 
t
;

225 
n1
 = 
	`pùñöe
();

227 i‡((
t
 = 
	`ªadtokí
()Ë=
TAND
) {

228 
t
 = 
NAND
;

229 } i‡(
t
 =
TOR
) {

230 
t
 = 
NOR
;

232 
tokpushback
++;

233  
n1
;

235 
n2
 = 
	`pùñöe
();

236 
n3
 = (
node
 *)
	`°Æloc
( (
nbö¨y
));

237 
n3
->
ty≥
 = 
t
;

238 
n3
->
nbö¨y
.
ch1
 = 
n1
;

239 
n3
->
nbö¨y
.
ch2
 = 
n2
;

240 
n1
 = 
n3
;

242 
	}
}

246 
node
 *

247 
	$pùñöe
()

249 
node
 *
n1
, *
n2
, *
pùíode
;

250 
nodñi°
 *
Õ
, *
¥ev
;

251 
√g©e
;

253 
√g©e
 = 0;

254 
checkkwd
 = 2;

255 
	`TRACE
(("pipeline:Éntered\n"));

256 
	`ªadtokí
(Ë=
TNOT
)

257 
√g©e
 = !negate;

258 
tokpushback
++;

259 
n1
 = 
	`comm™d
();

260 i‡(
	`ªadtokí
(Ë=
TPIPE
) {

261 
pùíode
 = (
node
 *)
	`°Æloc
( (
≈ùe
));

262 
pùíode
->
ty≥
 = 
NPIPE
;

263 
pùíode
->
≈ùe
.
backgnd
 = 0;

264 
Õ
 = (
nodñi°
 *)
	`°Æloc
( (nodelist));

265 
pùíode
->
≈ùe
.
cmdli°
 = 
Õ
;

266 
Õ
->
n
 = 
n1
;

268 
¥ev
 = 
Õ
;

269 
Õ
 = (
nodñi°
 *)
	`°Æloc
( (nodelist));

270 
Õ
->
n
 = 
	`comm™d
();

271 
¥ev
->
√xt
 = 
Õ
;

272 } 
	`ªadtokí
(Ë=
TPIPE
);

273 
Õ
->
√xt
 = 
NULL
;

274 
n1
 = 
pùíode
;

276 
tokpushback
++;

277 i‡(
√g©e
) {

278 
n2
 = (
node
 *)
	`°Æloc
( (
¬Ÿ
));

279 
n2
->
ty≥
 = 
NNOT
;

280 
n2
->
¬Ÿ
.
com
 = 
n1
;

281  
n2
;

283  
n1
;

284 
	}
}

288 
node
 *

289 
	$comm™d
()

291 
node
 *
n1
, *
n2
;

292 
node
 *
≠
, **
≠p
;

293 
node
 *
˝
, **
˝p
;

294 
node
 *
ªdú
, **
Ωp
;

295 
t
, 
√g©e
 = 0;

297 
checkkwd
 = 2;

298 
ªdú
 = 
NULL
;

299 
n1
 = 
NULL
;

300 
Ωp
 = &
ªdú
;

303 
	`ªadtokí
(Ë=
TREDIR
) {

304 *
Ωp
 = 
n2
 = 
ªdúnode
;

305 
Ωp
 = &
n2
->
nfûe
.
√xt
;

306 
	`∑r£‚ame
();

308 
tokpushback
++;

310 
	`ªadtokí
(Ë=
TNOT
) {

311 
	`TRACE
(("command: TNOTÑecognized\n"));

312 
√g©e
 = !negate;

314 
tokpushback
++;

316 
	`ªadtokí
()) {

317 
TIF
:

318 
n1
 = (
node
 *)
	`°Æloc
( (
nif
));

319 
n1
->
ty≥
 = 
NIF
;

320 i‡((
n1
->
nif
.
ã°
 = 
	`li°
(0)Ë=
NULL
)

321 
	`sy√x≥˘
(-1);

322 i‡(
	`ªadtokí
(Ë!
TTHEN
)

323 
	`sy√x≥˘
(
TTHEN
);

324 
n1
->
nif
.
iÂ¨t
 = 
	`li°
(0);

325 
n2
 = 
n1
;

326 
	`ªadtokí
(Ë=
TELIF
) {

327 
n2
->
nif
.
ñ£∑π
 = (
node
 *)
	`°Æloc
( (nif));

328 
n2
 =Ç2->
nif
.
ñ£∑π
;

329 
n2
->
ty≥
 = 
NIF
;

330 i‡((
n2
->
nif
.
ã°
 = 
	`li°
(0)Ë=
NULL
)

331 
	`sy√x≥˘
(-1);

332 i‡(
	`ªadtokí
(Ë!
TTHEN
)

333 
	`sy√x≥˘
(
TTHEN
);

334 
n2
->
nif
.
iÂ¨t
 = 
	`li°
(0);

336 i‡(
œ°tokí
 =
TELSE
)

337 
n2
->
nif
.
ñ£∑π
 = 
	`li°
(0);

339 
n2
->
nif
.
ñ£∑π
 = 
NULL
;

340 
tokpushback
++;

342 i‡(
	`ªadtokí
(Ë!
TFI
)

343 
	`sy√x≥˘
(
TFI
);

344 
checkkwd
 = 1;

346 
TWHILE
:

347 
TUNTIL
: {

348 
gŸ
;

349 
n1
 = (
node
 *)
	`°Æloc
( (
nbö¨y
));

350 
n1
->
ty≥
 = (
œ°tokí
 =
TWHILE
)? 
NWHILE
 : 
NUNTIL
;

351 i‡((
n1
->
nbö¨y
.
ch1
 = 
	`li°
(0)Ë=
NULL
)

352 
	`sy√x≥˘
(-1);

353 i‡((
gŸ
=
	`ªadtokí
()Ë!
TDO
) {

354 
	`TRACE
(("ex≥˘ög DO gŸ %†%s\n", 
tok«me
[
gŸ
], gŸ =
TWORD
 ? 
w‹dãxt
 : ""));

355 
	`sy√x≥˘
(
TDO
);

357 
n1
->
nbö¨y
.
ch2
 = 
	`li°
(0);

358 i‡(
	`ªadtokí
(Ë!
TDONE
)

359 
	`sy√x≥˘
(
TDONE
);

360 
checkkwd
 = 1;

363 
TFOR
:

364 i‡(
	`ªadtokí
(Ë!
TWORD
 || 
quŸeÊag
 || ! 
	`good«me
(
w‹dãxt
))

365 
	`sy√º‹
("Bad forÜoop variable");

366 
n1
 = (
node
 *)
	`°Æloc
( (
nf‹
));

367 
n1
->
ty≥
 = 
NFOR
;

368 
n1
->
nf‹
.
v¨
 = 
w‹dãxt
;

369 
	`ªadtokí
(Ë=
TNL
)

371 i‡(
œ°tokí
 =
TWORD
 && ! 
quŸeÊag
 && 
	`equÆ
(
w‹dãxt
, "in")) {

372 
≠p
 = &
≠
;

373 
	`ªadtokí
(Ë=
TWORD
) {

374 
n2
 = (
node
 *)
	`°Æloc
( (
«rg
));

375 
n2
->
ty≥
 = 
NARG
;

376 
n2
->
«rg
.
ãxt
 = 
w‹dãxt
;

377 
n2
->
«rg
.
backquŸe
 = 
backquŸñi°
;

378 *
≠p
 = 
n2
;

379 
≠p
 = &
n2
->
«rg
.
√xt
;

381 *
≠p
 = 
NULL
;

382 
n1
->
nf‹
.
¨gs
 = 
≠
;

383 i‡(
œ°tokí
 !
TNL
 &&Üa°tokí !
TSEMI
)

384 
	`sy√x≥˘
(-1);

386 
¨gv¨s
[5] = {

387 
CTLVAR
, 
VSNORMAL
|
VSQUOTE
, '@', '=', '\0'

389 
n2
 = (
node
 *)
	`°Æloc
( (
«rg
));

390 
n2
->
ty≥
 = 
NARG
;

391 
n2
->
«rg
.
ãxt
 = 
¨gv¨s
;

392 
n2
->
«rg
.
backquŸe
 = 
NULL
;

393 
n2
->
«rg
.
√xt
 = 
NULL
;

394 
n1
->
nf‹
.
¨gs
 = 
n2
;

399 i‡(
œ°tokí
 !
TNL
 &&Üa°tokí !
TSEMI
)

400 
tokpushback
++;

402 
checkkwd
 = 2;

403 i‡((
t
 = 
	`ªadtokí
()Ë=
TDO
)

404 
t
 = 
TDONE
;

405 i‡(
t
 =
TBEGIN
)

406 
t
 = 
TEND
;

408 
	`sy√x≥˘
(-1);

409 
n1
->
nf‹
.
body
 = 
	`li°
(0);

410 i‡(
	`ªadtokí
(Ë!
t
)

411 
	`sy√x≥˘
(
t
);

412 
checkkwd
 = 1;

414 
TCASE
:

415 
n1
 = (
node
 *)
	`°Æloc
( (
nˇ£
));

416 
n1
->
ty≥
 = 
NCASE
;

417 i‡(
	`ªadtokí
(Ë!
TWORD
)

418 
	`sy√x≥˘
(
TWORD
);

419 
n1
->
nˇ£
.
ex¥
 = 
n2
 = (
node
 *)
	`°Æloc
( (
«rg
));

420 
n2
->
ty≥
 = 
NARG
;

421 
n2
->
«rg
.
ãxt
 = 
w‹dãxt
;

422 
n2
->
«rg
.
backquŸe
 = 
backquŸñi°
;

423 
n2
->
«rg
.
√xt
 = 
NULL
;

424 
	`ªadtokí
(Ë=
TNL
);

425 i‡(
œ°tokí
 !
TWORD
 || ! 
	`equÆ
(
w‹dãxt
, "in"))

426 
	`sy√º‹
("expecting \"in\"");

427 
˝p
 = &
n1
->
nˇ£
.
ˇ£s
;

428 
nﬂlü£s
 = 1;

429 
checkkwd
 = 2, 
	`ªadtokí
();

430 
œ°tokí
 !
TESAC
) {

431 *
˝p
 = 
˝
 = (
node
 *)
	`°Æloc
( (
n˛i°
));

432 
˝
->
ty≥
 = 
NCLIST
;

433 
≠p
 = &
˝
->
n˛i°
.
∑âîn
;

434 i‡(
œ°tokí
 =
TLP
)

435 
	`ªadtokí
();

437 *
≠p
 = 
≠
 = (
node
 *)
	`°Æloc
( (
«rg
));

438 
≠
->
ty≥
 = 
NARG
;

439 
≠
->
«rg
.
ãxt
 = 
w‹dãxt
;

440 
≠
->
«rg
.
backquŸe
 = 
backquŸñi°
;

441 i‡(
checkkwd
 = 2, 
	`ªadtokí
(Ë!
TPIPE
)

443 
≠p
 = &
≠
->
«rg
.
√xt
;

444 
	`ªadtokí
();

446 
≠
->
«rg
.
√xt
 = 
NULL
;

447 i‡(
œ°tokí
 !
TRP
)

448 
nﬂlü£s
 = 0, 
	`sy√x≥˘
(
TRP
);

449 
˝
->
n˛i°
.
body
 = 
	`li°
(0);

451 
checkkwd
 = 2;

452 i‡((
t
 = 
	`ªadtokí
()Ë!
TESAC
) {

453 i‡(
t
 !
TENDCASE
)

454 
nﬂlü£s
 = 0, 
	`sy√x≥˘
(
TENDCASE
);

456 
checkkwd
 = 2, 
	`ªadtokí
();

458 
˝p
 = &
˝
->
n˛i°
.
√xt
;

460 
nﬂlü£s
 = 0;

461 *
˝p
 = 
NULL
;

462 
checkkwd
 = 1;

464 
TLP
:

465 
n1
 = (
node
 *)
	`°Æloc
( (
ƒedú
));

466 
n1
->
ty≥
 = 
NSUBSHELL
;

467 
n1
->
ƒedú
.
n
 = 
	`li°
(0);

468 
n1
->
ƒedú
.
ªdúe˘
 = 
NULL
;

469 i‡(
	`ªadtokí
(Ë!
TRP
)

470 
	`sy√x≥˘
(
TRP
);

471 
checkkwd
 = 1;

473 
TBEGIN
:

474 
n1
 = 
	`li°
(0);

475 i‡(
	`ªadtokí
(Ë!
TEND
)

476 
	`sy√x≥˘
(
TEND
);

477 
checkkwd
 = 1;

480 
TBACKGND
:

481 
TSEMI
:

482 
TAND
:

483 
TOR
:

488 i‡(!
ªdú
)

489 
	`sy√x≥˘
(-1);

490 
TNL
:

491 
TEOF
:

492 
TWORD
:

493 
TRP
:

494 
tokpushback
++;

495 
n1
 = 
	`sim∂ecmd
(
Ωp
, 
ªdú
);

496 
check√g
;

498 
	`sy√x≥˘
(-1);

502 
	`ªadtokí
(Ë=
TREDIR
) {

503 *
Ωp
 = 
n2
 = 
ªdúnode
;

504 
Ωp
 = &
n2
->
nfûe
.
√xt
;

505 
	`∑r£‚ame
();

507 
tokpushback
++;

508 *
Ωp
 = 
NULL
;

509 i‡(
ªdú
) {

510 i‡(
n1
->
ty≥
 !
NSUBSHELL
) {

511 
n2
 = (
node
 *)
	`°Æloc
( (
ƒedú
));

512 
n2
->
ty≥
 = 
NREDIR
;

513 
n2
->
ƒedú
.
n
 = 
n1
;

514 
n1
 = 
n2
;

516 
n1
->
ƒedú
.
ªdúe˘
 = 
ªdú
;

519 
check√g
:

520 i‡(
√g©e
) {

521 
n2
 = (
node
 *)
	`°Æloc
( (
¬Ÿ
));

522 
n2
->
ty≥
 = 
NNOT
;

523 
n2
->
¬Ÿ
.
com
 = 
n1
;

524  
n2
;

527  
n1
;

528 
	}
}

531 
node
 *

532 
	$sim∂ecmd
(
node
 **
Ωp
, nodê*
ªdú
)

534 
node
 *
¨gs
, **
≠p
;

535 
node
 **
‹ig_Ωp
 = 
Ωp
;

536 
node
 *
n
 = 
NULL
, *
n2
;

537 
√g©e
 = 0;

541 i‡(
ªdú
 == 0)

542 
Ωp
 = &
ªdú
;

544 
¨gs
 = 
NULL
;

545 
≠p
 = &
¨gs
;

551 
‹ig_Ωp
 = 
Ωp
;

553 
	`ªadtokí
(Ë=
TNOT
) {

554 
	`TRACE
(("command: TNOTÑecognized\n"));

555 
√g©e
 = !negate;

557 
tokpushback
++;

560 i‡(
	`ªadtokí
(Ë=
TWORD
) {

561 
n
 = (
node
 *)
	`°Æloc
( (
«rg
));

562 
n
->
ty≥
 = 
NARG
;

563 
n
->
«rg
.
ãxt
 = 
w‹dãxt
;

564 
n
->
«rg
.
backquŸe
 = 
backquŸñi°
;

565 *
≠p
 = 
n
;

566 
≠p
 = &
n
->
«rg
.
√xt
;

567 } i‡(
œ°tokí
 =
TREDIR
) {

568 *
Ωp
 = 
n
 = 
ªdúnode
;

569 
Ωp
 = &
n
->
nfûe
.
√xt
;

570 
	`∑r£‚ame
();

571 } i‡(
œ°tokí
 =
TLP
 && 
≠p
 =&
¨gs
->
«rg
.
√xt


572 && 
Ωp
 =
‹ig_Ωp
) {

574 i‡(
	`ªadtokí
(Ë!
TRP
)

575 
	`sy√x≥˘
(
TRP
);

576 
fun˛öno
 = 
∂öno
;

577 #ifde‡
nŸdef


578 i‡(! 
	`good«me
(
n
->
«rg
.
ãxt
))

579 
	`sy√º‹
("Bad functionÇame");

581 
n
->
ty≥
 = 
NDEFUN
;

582 
n
->
«rg
.
√xt
 = 
	`comm™d
();

583 
fun˛öno
 = 0;

584 
check√g
;

586 
tokpushback
++;

590 *
≠p
 = 
NULL
;

591 *
Ωp
 = 
NULL
;

592 
n
 = (
node
 *)
	`°Æloc
( (
ncmd
));

593 
n
->
ty≥
 = 
NCMD
;

594 
n
->
ncmd
.
backgnd
 = 0;

595 
n
->
ncmd
.
¨gs
 =árgs;

596 
n
->
ncmd
.
ªdúe˘
 = 
ªdú
;

598 
check√g
:

599 i‡(
√g©e
) {

600 
n2
 = (
node
 *)
	`°Æloc
( (
¬Ÿ
));

601 
n2
->
ty≥
 = 
NNOT
;

602 
n2
->
¬Ÿ
.
com
 = 
n
;

603  
n2
;

606  
n
;

607 
	}
}

609 
node
 *

610 
	$makíame
()

612 
node
 *
n
;

614 
n
 = (
node
 *)
	`°Æloc
( (
«rg
));

615 
n
->
ty≥
 = 
NARG
;

616 
n
->
«rg
.
√xt
 = 
NULL
;

617 
n
->
«rg
.
ãxt
 = 
w‹dãxt
;

618 
n
->
«rg
.
backquŸe
 = 
backquŸñi°
;

619  
n
;

620 
	}
}

623 
	$fixªdú
(
node
 *
n
, c⁄° *
ãxt
, 
îr
)

625 
	`TRACE
(("FixÑedú %†%d\n", 
ãxt
, 
îr
));

626 i‡(!
îr
)

627 
n
->
ndup
.
v«me
 = 
NULL
;

629 i‡(
	`is_digô
(
ãxt
[0]) &&Åext[1] == '\0')

630 
n
->
ndup
.
dupfd
 = 
	`digô_vÆ
(
ãxt
[0]);

631 i‡(
ãxt
[0] == '-' &&Åext[1] == '\0')

632 
n
->
ndup
.
dupfd
 = -1;

635 i‡(
îr
)

636 
	`sy√º‹
("Bad fdÇumber");

638 
n
->
ndup
.
v«me
 = 
	`makíame
();

640 
	}
}

644 
	$∑r£‚ame
()

646 
node
 *
n
 = 
ªdúnode
;

648 i‡(
	`ªadtokí
(Ë!
TWORD
)

649 
	`sy√x≥˘
(-1);

650 i‡(
n
->
ty≥
 =
NHERE
) {

651 
hîedoc
 *
hîe
 = heredoc;

652 
hîedoc
 *
p
;

653 
i
;

655 i‡(
quŸeÊag
 == 0)

656 
n
->
ty≥
 = 
NXHERE
;

657 
	`TRACE
(("Hîêdocumíà%d\n", 
n
->
ty≥
));

658 i‡(
hîe
->
°rùèbs
) {

659 *
w‹dãxt
 == '\t')

660 
w‹dãxt
++;

662 i‡(! 
	`n€x∑nd
(
w‹dãxt
Ë|| (
i
 = 
	`°æí
(w‹dãxt)Ë=0 || i > 
EOFMARKLEN
)

663 
	`sy√º‹
("IllegalÉof marker for <<Ñedirection");

664 
	`rmesˇ≥s
(
w‹dãxt
);

665 
hîe
->
eofm¨k
 = 
w‹dãxt
;

666 
hîe
->
√xt
 = 
NULL
;

667 i‡(
hîedo˛i°
 =
NULL
)

668 
hîedo˛i°
 = 
hîe
;

670 
p
 = 
hîedo˛i°
 ;Ö->
√xt
 ;Ö =Ö->next);

671 
p
->
√xt
 = 
hîe
;

673 } i‡(
n
->
ty≥
 =
NTOFD
 ||Ç->ty≥ =
NFROMFD
) {

674 
	`fixªdú
(
n
, 
w‹dãxt
, 0);

676 
n
->
nfûe
.
‚ame
 = 
	`makíame
();

678 
	}
}

686 
	$∑r£hîedoc
()

688 
hîedoc
 *
hîe
;

689 
node
 *
n
;

691 
hîedo˛i°
) {

692 
hîe
 = 
hîedo˛i°
;

693 
hîedo˛i°
 = 
hîe
->
√xt
;

694 i‡(
√ed¥om±
) {

695 
	`£çrom±
(2);

696 
√ed¥om±
 = 0;

698 
	`ªadtokí1
(
	`pgëc
(), 
hîe
->hîe->
ty≥
 =
NHERE
? 
SQSYNTAX
 : 
DQSYNTAX
,

699 
hîe
->
eofm¨k
, hîe->
°rùèbs
);

700 
n
 = (
node
 *)
	`°Æloc
( (
«rg
));

701 
n
->
«rg
.
ty≥
 = 
NARG
;

702 
n
->
«rg
.
√xt
 = 
NULL
;

703 
n
->
«rg
.
ãxt
 = 
w‹dãxt
;

704 
n
->
«rg
.
backquŸe
 = 
backquŸñi°
;

705 
hîe
->hîe->
nhîe
.
doc
 = 
n
;

707 
	}
}

710 
	$≥ektokí
()

712 
t
;

714 
t
 = 
	`ªadtokí
();

715 
tokpushback
++;

716  (
t
);

717 
	}
}

720 
	$ªadtokí
()

722 
t
;

723 
ßvecheckkwd
 = 
checkkwd
;

724 
Æüs
 *
≠
;

725 #ifde‡
DEBUG


726 
Æªady£í
 = 
tokpushback
;

729 
t›
:

730 
t
 = 
	`xxªadtokí
();

732 i‡(
checkkwd
) {

736 i‡(
checkkwd
 == 2) {

737 
checkkwd
 = 0;

738 
t
 =
TNL
) {

739 
	`∑r£hîedoc
();

740 
t
 = 
	`xxªadtokí
();

743 
checkkwd
 = 0;

747 i‡(
t
 =
TWORD
 && !
quŸeÊag
)

749 c⁄° * c⁄° *
µ
;

751 
µ
 = 
∑r£kwd
; *pp;Öp++) {

752 i‡(**
µ
 =*
w‹dãxt
 && 
	`equÆ
(*pp, wordtext))

754 
œ°tokí
 = 
t
 = 
µ
 - 
∑r£kwd
 + 
KWDOFFSET
;

755 
	`TRACE
(("keyw‹d %†ªcognized\n", 
tok«me
[
t
]));

756 
out
;

759 i‡(
nﬂlü£s
 == 0 &&

760 (
≠
 = 
	`looku∑lüs
(
w‹dãxt
, 1)Ë!
NULL
) {

761 
	`push°rög
(
≠
->
vÆ
, 
	`°æí
(ap->val),áp);

762 
checkkwd
 = 
ßvecheckkwd
;

763 
t›
;

766 
out
:

767 
checkkwd
 = (
t
 =
TNOT
Ë? 
ßvecheckkwd
 : 0;

769 #ifde‡
DEBUG


770 i‡(!
Æªady£í
)

771 
	`TRACE
(("tokí %†%s\n", 
tok«me
[
t
],Å =
TWORD
 ? 
w‹dãxt
 : ""));

773 
	`TRACE
(("ªªadÅokí %†%s\n", 
tok«me
[
t
],Å =
TWORD
 ? 
w‹dãxt
 : ""));

775  (
t
);

776 
	}
}

797 
	#RETURN
(
tokí
Ë 
œ°tokí
 = 
	)
token

800 
	$xxªadtokí
()

802 
c
;

804 i‡(
tokpushback
) {

805 
tokpushback
 = 0;

806  
œ°tokí
;

808 i‡(
√ed¥om±
) {

809 
	`£çrom±
(2);

810 
√ed¥om±
 = 0;

812 
°¨éöno
 = 
∂öno
;

814 
c
 = 
	`pgëc_ma¸o
();

815 i‡(
c
 == ' ' || c == '\t')

817 
c
) {

821 (
c
 = 
	`pgëc
()Ë!'\n' && c !
PEOF
);

822 
	`pungëc
();

825 i‡(
	`pgëc
() == '\n') {

826 
°¨éöno
 = ++
∂öno
;

827 i‡(
d›rom±
)

828 
	`£çrom±
(2);

830 
	`£çrom±
(0);

833 
	`pungëc
();

834 
bªaklo›
;

836 
∂öno
++;

837 
√ed¥om±
 = 
d›rom±
;

838 
	`RETURN
(
TNL
);

839 
PEOF
:

840 
	`RETURN
(
TEOF
);

842 i‡(
	`pgëc
() == '&')

843 
	`RETURN
(
TAND
);

844 
	`pungëc
();

845 
	`RETURN
(
TBACKGND
);

847 i‡(
	`pgëc
() == '|')

848 
	`RETURN
(
TOR
);

849 
	`pungëc
();

850 
	`RETURN
(
TPIPE
);

852 i‡(
	`pgëc
() == ';')

853 
	`RETURN
(
TENDCASE
);

854 
	`pungëc
();

855 
	`RETURN
(
TSEMI
);

857 
	`RETURN
(
TLP
);

859 
	`RETURN
(
TRP
);

861 
bªaklo›
;

864 
bªaklo›
:

865  
	`ªadtokí1
(
c
, 
BASESYNTAX
, (*)
NULL
, 0);

866 #unde‡
RETURN


867 
	}
}

883 
	#CHECKEND
(Ë{
checkíd
; 
checkíd_ªtu∫
:;}

	)

884 
	#PARSEREDIR
(Ë{
∑r£ªdú
; 
∑r£ªdú_ªtu∫
:;}

	)

885 
	#PARSESUB
(Ë{
∑r£sub
; 
∑r£sub_ªtu∫
:;}

	)

886 
	#PARSEBACKQOLD
(Ë{
ﬁd°yÀ
 = 1; 
∑r£backq
; 
∑r£backq_ﬁdªtu∫
:;}

	)

887 
	#PARSEBACKQNEW
(Ë{
ﬁd°yÀ
 = 0; 
∑r£backq
; 
∑r£backq_√wªtu∫
:;}

	)

888 
	#PARSEARITH
(Ë{
∑r£¨ôh
; 
∑r£¨ôh_ªtu∫
:;}

	)

891 
	$ªadtokí1
(
fú°c
, c⁄° *
sy¡ax
, *
eofm¨k
, 
°rùèbs
)

893 
c
 = 
fú°c
;

894 *
out
;

895 
Àn
;

896 
löe
[
EOFMARKLEN
 + 1];

897 
nodñi°
 *
bqli°
;

898 
quŸef
;

899 
dblquŸe
;

900 
v¨√°
;

901 
¨öe°
;

902 
∑ª∆evñ
;

903 
ﬁd°yÀ
;

904 c⁄° *
¥evsy¡ax
;

905 
sy√¡ry
;

907 
°¨éöno
 = 
∂öno
;

908 
dblquŸe
 = 0;

909 i‡(
sy¡ax
 =
DQSYNTAX
)

910 
dblquŸe
 = 1;

911 
quŸef
 = 0;

912 
bqli°
 = 
NULL
;

913 
v¨√°
 = 0;

914 
¨öe°
 = 0;

915 
∑ª∆evñ
 = 0;

917 
	`STARTSTACKSTR
(
out
);

918 
lo›
: {

919 
	`CHECKEND
();

921 
	`CHECKSTRSPACE
(3, 
out
);

923 
sy√¡ry
 = 
sy¡ax
[
c
];

925 
sy√¡ry
) {

926 
CNL
:

927 i‡(
sy¡ax
 =
BASESYNTAX
)

928 
ídw‹d
;

929 
	`USTPUTC
(
c
, 
out
);

930 
∂öno
++;

931 i‡(
d›rom±
)

932 
	`£çrom±
(2);

934 
	`£çrom±
(0);

935 
c
 = 
	`pgëc
();

936 
lo›
;

937 
CWORD
:

938 
	`USTPUTC
(
c
, 
out
);

940 
CCTL
:

941 i‡(
eofm¨k
 =
NULL
 || 
dblquŸe
)

942 
	`USTPUTC
(
CTLESC
, 
out
);

943 
	`USTPUTC
(
c
, 
out
);

945 
CBACK
:

946 
c
 = 
	`pgëc
();

947 i‡(
c
 =
PEOF
) {

948 
	`USTPUTC
('\\', 
out
);

949 
	`pungëc
();

950 } i‡(
c
 == '\n') {

951 
∂öno
++;

952 i‡(
d›rom±
)

953 
	`£çrom±
(2);

955 
	`£çrom±
(0);

957 i‡(
dblquŸe
 && 
c
 != '\\' &&

958 
c
 != '`' && c != '$' &&

959 (
c
 !'"' || 
eofm¨k
 !
NULL
))

960 
	`USTPUTC
('\\', 
out
);

961 i‡(
SQSYNTAX
[
c
] =
CCTL
)

962 
	`USTPUTC
(
CTLESC
, 
out
);

963 i‡(
eofm¨k
 =
NULL
)

964 
	`USTPUTC
(
CTLQUOTEMARK
, 
out
);

965 
	`USTPUTC
(
c
, 
out
);

966 
quŸef
++;

969 
CSQUOTE
:

970 i‡(
eofm¨k
 =
NULL
)

971 
	`USTPUTC
(
CTLQUOTEMARK
, 
out
);

972 
sy¡ax
 = 
SQSYNTAX
;

974 
CDQUOTE
:

975 i‡(
eofm¨k
 =
NULL
)

976 
	`USTPUTC
(
CTLQUOTEMARK
, 
out
);

977 
sy¡ax
 = 
DQSYNTAX
;

978 
dblquŸe
 = 1;

980 
CENDQUOTE
:

981 i‡(
eofm¨k
 !
NULL
 && 
¨öe°
 == 0 &&

982 
v¨√°
 == 0) {

983 
	`USTPUTC
(
c
, 
out
);

985 i‡(
¨öe°
) {

986 
sy¡ax
 = 
ARISYNTAX
;

987 
dblquŸe
 = 0;

988 } i‡(
eofm¨k
 =
NULL
) {

989 
sy¡ax
 = 
BASESYNTAX
;

990 
dblquŸe
 = 0;

992 
quŸef
++;

995 
CVAR
:

996 
	`PARSESUB
();

998 
CENDVAR
:

999 i‡(
v¨√°
 > 0) {

1000 
v¨√°
--;

1001 
	`USTPUTC
(
CTLENDVAR
, 
out
);

1003 
	`USTPUTC
(
c
, 
out
);

1006 
CLP
:

1007 
∑ª∆evñ
++;

1008 
	`USTPUTC
(
c
, 
out
);

1010 
CRP
:

1011 i‡(
∑ª∆evñ
 > 0) {

1012 
	`USTPUTC
(
c
, 
out
);

1013 --
∑ª∆evñ
;

1015 i‡(
	`pgëc
() == ')') {

1016 i‡(--
¨öe°
 == 0) {

1017 
	`USTPUTC
(
CTLENDARI
, 
out
);

1018 
sy¡ax
 = 
¥evsy¡ax
;

1019 i‡(
sy¡ax
 =
DQSYNTAX
)

1020 
dblquŸe
 = 1;

1022 
dblquŸe
 = 0;

1024 
	`USTPUTC
(')', 
out
);

1030 
	`pungëc
();

1031 
	`USTPUTC
(')', 
out
);

1035 
CBQUOTE
:

1036 
	`PARSEBACKQOLD
();

1038 
CEOF
:

1039 
ídw‹d
;

1041 i‡(
v¨√°
 == 0)

1042 
ídw‹d
;

1043 
	`USTPUTC
(
c
, 
out
);

1045 
c
 = 
	`pgëc_ma¸o
();

1048 
ídw‹d
:

1049 i‡(
sy¡ax
 =
ARISYNTAX
)

1050 
	`sy√º‹
("Missing '))'");

1051 i‡(
sy¡ax
 !
BASESYNTAX
 && ! 
∑r£backquŸe
 && 
eofm¨k
 =
NULL
)

1052 
	`sy√º‹
("Unterminated quoted string");

1053 i‡(
v¨√°
 != 0) {

1054 
°¨éöno
 = 
∂öno
;

1055 
	`sy√º‹
("Missing '}'");

1057 
	`USTPUTC
('\0', 
out
);

1058 
Àn
 = 
out
 - 
	`°ackblock
();

1059 
out
 = 
	`°ackblock
();

1060 i‡(
eofm¨k
 =
NULL
) {

1061 i‡((
c
 == '>' || c == '<')

1062 && 
quŸef
 == 0

1063 && 
Àn
 <= 2

1064 && (*
out
 ='\0' || 
	`is_digô
(*out))) {

1065 
	`PARSEREDIR
();

1066  
œ°tokí
 = 
TREDIR
;

1068 
	`pungëc
();

1071 
quŸeÊag
 = 
quŸef
;

1072 
backquŸñi°
 = 
bqli°
;

1073 
	`gøb°ackblock
(
Àn
);

1074 
w‹dãxt
 = 
out
;

1075  
œ°tokí
 = 
TWORD
;

1086 
checkíd
: {

1087 i‡(
eofm¨k
) {

1088 i‡(
°rùèbs
) {

1089 
c
 == '\t')

1090 
c
 = 
	`pgëc
();

1092 i‡(
c
 =*
eofm¨k
) {

1093 i‡(
	`pfgës
(
löe
, ÜöeË!
NULL
) {

1094 *
p
, *
q
;

1096 
p
 = 
löe
;

1097 
q
 = 
eofm¨k
 + 1 ; *q && *
p
 == *q ;Ö++, q++);

1098 i‡(*
p
 ='\n' && *
q
 == '\0') {

1099 
c
 = 
PEOF
;

1100 
∂öno
++;

1101 
√ed¥om±
 = 
d›rom±
;

1103 
	`push°rög
(
löe
, 
	`°æí
÷öe), 
NULL
);

1108 
checkíd_ªtu∫
;

1118 
∑r£ªdú
: {

1119 
fd
 = *
out
;

1120 
node
 *
≈
;

1122 
≈
 = (
node
 *)
	`°Æloc
( (
nfûe
));

1123 i‡(
c
 == '>') {

1124 
≈
->
nfûe
.
fd
 = 1;

1125 
c
 = 
	`pgëc
();

1126 i‡(
c
 == '>')

1127 
≈
->
ty≥
 = 
NAPPEND
;

1128 i‡(
c
 == '&')

1129 
≈
->
ty≥
 = 
NTOFD
;

1130 i‡(
c
 == '|')

1131 
≈
->
ty≥
 = 
NCLOBBER
;

1133 
≈
->
ty≥
 = 
NTO
;

1134 
	`pungëc
();

1137 
≈
->
nfûe
.
fd
 = 0;

1138 
c
 = 
	`pgëc
();

1139 i‡(
c
 == '<') {

1140 i‡( (
nfûe
Ë! (
nhîe
)) {

1141 
≈
 = (
node
 *)
	`°Æloc
( (
nhîe
));

1142 
≈
->
nfûe
.
fd
 = 0;

1144 
≈
->
ty≥
 = 
NHERE
;

1145 
hîedoc
 = (hîedo¯*)
	`°Æloc
( (heredoc));

1146 
hîedoc
->
hîe
 = 
≈
;

1147 i‡((
c
 = 
	`pgëc
()) == '-') {

1148 
hîedoc
->
°rùèbs
 = 1;

1150 
hîedoc
->
°rùèbs
 = 0;

1151 
	`pungëc
();

1153 } i‡(
c
 == '&')

1154 
≈
->
ty≥
 = 
NFROMFD
;

1155 i‡(
c
 == '>')

1156 
≈
->
ty≥
 = 
NFROMTO
;

1158 
≈
->
ty≥
 = 
NFROM
;

1159 
	`pungëc
();

1162 i‡(
fd
 != '\0')

1163 
≈
->
nfûe
.
fd
 = 
	`digô_vÆ
(fd);

1164 
ªdúnode
 = 
≈
;

1165 
∑r£ªdú_ªtu∫
;

1174 
∑r£sub
: {

1175 
buf
[10];

1176 
subty≥
;

1177 
ty≥loc
;

1178 
Êags
;

1179 *
p
;

1180 c⁄° 
ty≥s
[] = "}-+?=";

1181 
bøckëed_«me
 = 0;

1182 
i
;

1183 
löno
;

1184 
Àngth
;

1186 
c
 = 
	`pgëc
();

1187 i‡(
c
 !'(' && c !'{' && (
	`is_eof
(cË|| !
	`is_«me
(c)) &&

1188 !
	`is_•ecül
(
c
)) {

1189 
	`USTPUTC
('$', 
out
);

1190 
	`pungëc
();

1191 } i‡(
c
 == '(') {

1192 i‡(
	`pgëc
() == '(') {

1193 
	`PARSEARITH
();

1195 
	`pungëc
();

1196 
	`PARSEBACKQNEW
();

1199 
	`USTPUTC
(
CTLVAR
, 
out
);

1200 
ty≥loc
 = 
out
 - 
	`°ackblock
();

1201 
	`USTPUTC
(
VSNORMAL
, 
out
);

1202 
subty≥
 = 
VSNORMAL
;

1203 
Êags
 = 0;

1204 i‡(
c
 == '{') {

1205 
bøckëed_«me
 = 1;

1206 
c
 = 
	`pgëc
();

1207 i‡(
c
 == '#') {

1208 i‡((
c
 = 
	`pgëc
()) == '}')

1209 
c
 = '#';

1211 
subty≥
 = 
VSLENGTH
;

1214 
subty≥
 = 0;

1216 i‡(!
	`is_eof
(
c
Ë&& 
	`is_«me
(c)) {

1217 
Àngth
 = 0;

1219 
	`STPUTC
(
c
, 
out
);

1220 
c
 = 
	`pgëc
();

1221 
Àngth
++;

1222 } !
	`is_eof
(
c
Ë&& 
	`is_ö_«me
(c));

1223 i‡(
Àngth
 == 6 &&

1224 
	`°∫cmp
(
out
 - 
Àngth
, "LINENO",Üength) == 0) {

1227 
löno
 = 
∂öno
;

1228 i‡(
fun˛öno
 != 0)

1229 
löno
 -
fun˛öno
 - 1;

1230 
	`¢¥ötf
(
buf
, (buf), "%d", 
löno
);

1231 
	`STADJUST
(-6, 
out
);

1232 
i
 = 0; 
buf
[i] != '\0'; i++)

1233 
	`STPUTC
(
buf
[
i
], 
out
);

1234 
Êags
 |
VSLINENO
;

1236 } i‡(
	`is_digô
(
c
)) {

1237 i‡(
bøckëed_«me
) {

1239 
	`STPUTC
(
c
, 
out
);

1240 
c
 = 
	`pgëc
();

1241 } 
	`is_digô
(
c
));

1243 
	`STPUTC
(
c
, 
out
);

1244 
c
 = 
	`pgëc
();

1247 i‡(! 
	`is_•ecül
(
c
)) {

1248 
subty≥
 = 
VSERROR
;

1249 i‡(
c
 == '}')

1250 
	`pungëc
();

1252 
	`USTPUTC
(
c
, 
out
);

1254 
	`USTPUTC
(
c
, 
out
);

1255 
c
 = 
	`pgëc
();

1258 i‡(
subty≥
 == 0) {

1259 
c
) {

1261 
Êags
 |
VSNUL
;

1262 
c
 = 
	`pgëc
();

1265 
p
 = 
	`°rchr
(
ty≥s
, 
c
);

1266 i‡(
p
 =
NULL
) {

1267 i‡(
Êags
 =
VSNUL
)

1268 
	`STPUTC
(':', 
out
);

1269 
	`STPUTC
(
c
, 
out
);

1270 
subty≥
 = 
VSERROR
;

1272 
subty≥
 = 
p
 - 
ty≥s
 + 
VSNORMAL
;

1277 
cc
 = 
c
;

1278 
subty≥
 = 
c
 ='#' ? 
VSTRIMLEFT
 :

1279 
VSTRIMRIGHT
;

1280 
c
 = 
	`pgëc
();

1281 i‡(
c
 =
cc
)

1282 
subty≥
++;

1284 
	`pungëc
();

1288 } i‡(
subty≥
 !
VSERROR
) {

1289 
	`pungëc
();

1291 
	`STPUTC
('=', 
out
);

1292 i‡(
dblquŸe
 || 
¨öe°
)

1293 
Êags
 |
VSQUOTE
;

1294 *(
	`°ackblock
(Ë+ 
ty≥loc
Ë
subty≥
 | 
Êags
;

1295 i‡(
subty≥
 !
VSNORMAL
)

1296 
v¨√°
++;

1298 
∑r£sub_ªtu∫
;

1309 
∑r£backq
: {

1310 
nodñi°
 **
∆µ
;

1311 
ßvïbq
;

1312 
node
 *
n
;

1313 *vﬁ©ûê
°r
;

1314 
jm∂oc
 jmploc;

1315 
jm∂oc
 *c⁄° 
ßveh™dÀr
 = 
h™dÀr
;

1316 
ßvñí
;

1317 
ßvïrom±
;

1318 c⁄° 
bq_°¨éöno
 = 
∂öno
;

1320 
ßvïbq
 = 
∑r£backquŸe
;

1321 i‡(
	`£tjmp
(
jm∂oc
.
loc
)) {

1322 i‡(
°r
)

1323 
	`ck‰ì
(
°r
);

1324 
∑r£backquŸe
 = 0;

1325 
h™dÀr
 = 
ßveh™dÀr
;

1326 i‡(
ex˚±i⁄
 =
EXERROR
) {

1327 
°¨éöno
 = 
bq_°¨éöno
;

1328 
	`sy√º‹
("Error in command substitution");

1330 
	`l⁄gjmp
(
h™dÀr
->
loc
, 1);

1332 
INTOFF
;

1333 
°r
 = 
NULL
;

1334 
ßvñí
 = 
out
 - 
	`°ackblock
();

1335 i‡(
ßvñí
 > 0) {

1336 
°r
 = 
	`ckmÆloc
(
ßvñí
);

1337 
	`mem˝y
(
°r
, 
	`°ackblock
(), 
ßvñí
);

1339 
h™dÀr
 = &
jm∂oc
;

1340 
INTON
;

1341 i‡(
ﬁd°yÀ
) {

1345 *
out
;

1346 
c
;

1347 
ßvñí
;

1348 *
°r
;

1351 
	`STARTSTACKSTR
(
out
);

1353 i‡(
√ed¥om±
) {

1354 
	`£çrom±
(2);

1355 
√ed¥om±
 = 0;

1357 
c
 = 
	`pgëc
()) {

1359 
d⁄e
;

1362 i‡((
c
 = 
	`pgëc
()) == '\n') {

1363 
∂öno
++;

1364 i‡(
d›rom±
)

1365 
	`£çrom±
(2);

1367 
	`£çrom±
(0);

1376 i‡(
c
 != '\\' && c != '`' && c != '$'

1377 && (!
dblquŸe
 || 
c
 != '"'))

1378 
	`STPUTC
('\\', 
out
);

1382 
∂öno
++;

1383 
√ed¥om±
 = 
d›rom±
;

1386 
PEOF
:

1387 
°¨éöno
 = 
∂öno
;

1388 
	`sy√º‹
("EOF in backquote substitution");

1394 
	`STPUTC
(
c
, 
out
);

1396 
d⁄e
:

1397 
	`STPUTC
('\0', 
out
);

1398 
ßvñí
 = 
out
 - 
	`°ackblock
();

1399 i‡(
ßvñí
 > 0) {

1400 
°r
 = 
	`ckmÆloc
(
ßvñí
);

1401 
	`mem˝y
(
°r
, 
	`°ackblock
(), 
ßvñí
);

1402 
	`£töput°rög
(
°r
, 1);

1405 
∆µ
 = &
bqli°
;

1406 *
∆µ
)

1407 
∆µ
 = &(*∆µ)->
√xt
;

1408 *
∆µ
 = (
nodñi°
 *)
	`°Æloc
( (nodelist));

1409 (*
∆µ
)->
√xt
 = 
NULL
;

1410 
∑r£backquŸe
 = 
ﬁd°yÀ
;

1412 i‡(
ﬁd°yÀ
) {

1413 
ßvïrom±
 = 
d›rom±
;

1414 
d›rom±
 = 0;

1417 
n
 = 
	`li°
(0);

1419 i‡(
ﬁd°yÀ
)

1420 
d›rom±
 = 
ßvïrom±
;

1422 i‡(
	`ªadtokí
(Ë!
TRP
)

1423 
	`sy√x≥˘
(
TRP
);

1426 (*
∆µ
)->
n
 =Ç;

1427 i‡(
ﬁd°yÀ
) {

1432 
	`p›fûe
();

1433 
tokpushback
 = 0;

1435 
	`°ackblocksize
(Ë<
ßvñí
)

1436 
	`grow°ackblock
();

1437 
	`STARTSTACKSTR
(
out
);

1438 i‡(
°r
) {

1439 
	`mem˝y
(
out
, 
°r
, 
ßvñí
);

1440 
	`STADJUST
(
ßvñí
, 
out
);

1441 
INTOFF
;

1442 
	`ck‰ì
(
°r
);

1443 
°r
 = 
NULL
;

1444 
INTON
;

1446 
∑r£backquŸe
 = 
ßvïbq
;

1447 
h™dÀr
 = 
ßveh™dÀr
;

1448 i‡(
¨öe°
 || 
dblquŸe
)

1449 
	`USTPUTC
(
CTLBACKQ
 | 
CTLQUOTE
, 
out
);

1451 
	`USTPUTC
(
CTLBACKQ
, 
out
);

1452 i‡(
ﬁd°yÀ
)

1453 
∑r£backq_ﬁdªtu∫
;

1455 
∑r£backq_√wªtu∫
;

1461 
∑r£¨ôh
: {

1463 i‡(++
¨öe°
 == 1) {

1464 
¥evsy¡ax
 = 
sy¡ax
;

1465 
sy¡ax
 = 
ARISYNTAX
;

1466 
	`USTPUTC
(
CTLARI
, 
out
);

1467 i‡(
dblquŸe
)

1468 
	`USTPUTC
('"',
out
);

1470 
	`USTPUTC
(' ',
out
);

1476 
	`USTPUTC
('(', 
out
);

1478 
∑r£¨ôh_ªtu∫
;

1481 
	}
}

1485 #ifde‡
mköô


1486 
	gRESET
 {

1487 
	gtokpushback
 = 0;

1488 
	gcheckkwd
 = 0;

1498 
	$n€x∑nd
(*
ãxt
)

1500 *
p
;

1501 
c
;

1503 
p
 = 
ãxt
;

1504 (
c
 = *
p
++) != '\0') {

1505 i‡–
c
 =
CTLQUOTEMARK
)

1507 i‡(
c
 =
CTLESC
)

1508 
p
++;

1509 i‡(
BASESYNTAX
[()
c
] =
CCTL
)

1513 
	}
}

1522 
	$good«me
(c⁄° *
«me
)

1524 c⁄° *
p
;

1526 
p
 = 
«me
;

1527 i‡(! 
	`is_«me
(*
p
))

1529 *++
p
) {

1530 i‡(! 
	`is_ö_«me
(*
p
))

1534 
	}
}

1544 
	$sy√x≥˘
(
tokí
)

1546 
msg
[64];

1548 i‡(
tokí
 >= 0) {

1549 
	`fmt°r
(
msg
, 64, "%s unexpected (expecting %s)",

1550 
tok«me
[
œ°tokí
],Åok«me[
tokí
]);

1552 
	`fmt°r
(
msg
, 64, "%†u√x≥˘ed", 
tok«me
[
œ°tokí
]);

1554 
	`sy√º‹
(
msg
);

1555 
	}
}

1559 
	$sy√º‹
(c⁄° *
msg
)

1561 i‡(
comm™d«me
)

1562 
	`outfmt
(&
îrout
, "%s: %d: ", 
comm™d«me
, 
°¨éöno
);

1563 
	`outfmt
(&
îrout
, "Sy¡axÉº‹: %s\n", 
msg
);

1564 
	`îr‹
((*)
NULL
);

1565 
	}
}

1568 
	$£çrom±
(
which
)

1570 
which¥om±
 = 
which
;

1572 #i‚de‡
NO_HISTORY


1573 i‡(!
ñ
)

1575 
	`out2°r
(
	`gë¥om±
(
NULL
));

1576 
	}
}

1583 
	$gë¥om±
(*
unu£d
 
__unu£d
)

1585 
ps
[
PROMPTLEN
];

1586 *
fmt
;

1587 c⁄° *
pwd
;

1588 
i
, 
åim
;

1589 
öã∫Æ_îr‹
[] = "<internalÖromptÉrror>";

1594 
which¥om±
) {

1596 
fmt
 = 
nuŒ°r
;

1599 
fmt
 = 
	`ps1vÆ
();

1602 
fmt
 = 
	`ps2vÆ
();

1605  
öã∫Æ_îr‹
;

1611 
i
 = 0; (ò< 127Ë&& (*
fmt
 != '\0'); i++, fmt++)

1612 i‡(*
fmt
 == '\\')

1613 *++
fmt
) {

1623 
ps
[
i
] = '\0';

1624 
	`gëho°«me
(&
ps
[
i
], 
PROMPTLEN
 - i);

1626 
åim
 = (*
fmt
 == 'h') ? '.' : '\0';

1627 (
ps
[
i
+1] !'\0'Ë&& (ps[i+1] !
åim
))

1628 
i
++;

1639 
pwd
 = 
	`lookupv¨
("PWD");

1640 i‡(
pwd
 =
NULL
)

1641 
pwd
 = "?";

1642 i‡(*
fmt
 == 'W' &&

1643 *
pwd
 == '/' &&Öwd[1] != '\0')

1644 
	`°æ˝y
(&
ps
[
i
], 
	`°ºchr
(
pwd
, '/') + 1,

1645 
PROMPTLEN
 - 
i
);

1647 
	`°æ˝y
(&
ps
[
i
], 
pwd
, 
PROMPTLEN
 - i);

1649 
ps
[
i
 + 1] != '\0')

1650 
i
++;

1659 
ps
[
i
] = (
	`gëeuid
() != 0) ? '$' : '#';

1666 
ps
[
i
] = '\\';

1673 
ps
[
i
++] = '\\';

1674 
ps
[
i
] = *
fmt
;

1678 
ps
[
i
] = *
fmt
;

1679 
ps
[
i
] = '\0';

1680  (
ps
);

1681 
	}
}

	@sh/parser.h

37 
	#CTLESC
 '\201'

	)

38 
	#CTLVAR
 '\202'

	)

39 
	#CTLENDVAR
 '\203'

	)

40 
	#CTLBACKQ
 '\204'

	)

41 
	#CTLQUOTE
 01

	)

43 
	#CTLARI
 '\206'

	)

44 
	#CTLENDARI
 '\207'

	)

45 
	#CTLQUOTEMARK
 '\210'

	)

48 
	#VSTYPE
 0x0‡

	)

49 
	#VSNUL
 0x10

	)

50 
	#VSLINENO
 0x20

	)

52 
	#VSQUOTE
 0x80

	)

55 
	#VSNORMAL
 0x1

	)

56 
	#VSMINUS
 0x2

	)

57 
	#VSPLUS
 0x3

	)

58 
	#VSQUESTION
 0x4

	)

59 
	#VSASSIGN
 0x5

	)

60 
	#VSTRIMLEFT
 0x6

	)

61 
	#VSTRIMLEFTMAX
 0x7

	)

62 
	#VSTRIMRIGHT
 0x8

	)

63 
	#VSTRIMRIGHTMAX
 0x9

	)

64 
	#VSLENGTH
 0x®

	)

65 
	#VSERROR
 0xb

	)

73 
tokpushback
;

74 
	#NEOF
 ((
node
 *)&
tokpushback
)

	)

75 
which¥om±
;

76 c⁄° *c⁄° 
∑r£kwd
[];

79 
node
 *
∑r£cmd
();

80 
fixªdú
(
node
 *, const *, );

81 
good«me
(const *);

82 *
gë¥om±
(*);

	@sh/redir.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)redir.c 8.2 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/redir.c,v 1.27.2.2.4.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sys/ty≥s.h
>

42 
	~<sys/°©.h
>

43 
	~<sig«l.h
>

44 
	~<°rög.h
>

45 
	~<f˙é.h
>

46 
	~<î∫o.h
>

47 
	~<uni°d.h
>

48 
	~<°dlib.h
>

54 
	~"shñl.h
"

55 
	~"nodes.h
"

56 
	~"jobs.h
"

57 
	~"ex∑nd.h
"

58 
	~"ªdú.h
"

59 
	~"ouçut.h
"

60 
	~"memÆloc.h
"

61 
	~"îr‹.h
"

62 
	~"›ti⁄s.h
"

65 
	#EMPTY
 -2

	)

66 
	#PIPESIZE
 4096

	)

69 
MKINIT


70 
	sªdúèb
 {

71 
ªdúèb
 *
	m√xt
;

72 
	mª«med
[10];

76 
MKINIT
 
ªdúèb
 *
	gªdúli°
;

83 
	gfd0_ªdúe˘ed
 = 0;

85 
›íªdúe˘
(
node
 *, [10 ]);

86 
›íhîe
(
node
 *);

98 
	$ªdúe˘
(
node
 *
ªdú
, 
Êags
)

100 
node
 *
n
;

101 
ªdúèb
 *
sv
 = 
NULL
;

102 
i
;

103 
fd
;

104 
åy
;

105 
mem‹y
[10];

107 
i
 = 10 ; --i >= 0 ; )

108 
mem‹y
[
i
] = 0;

109 
mem‹y
[1] = 
Êags
 & 
REDIR_BACKQ
;

110 i‡(
Êags
 & 
REDIR_PUSH
) {

111 
sv
 = 
	`ckmÆloc
( (
ªdúèb
));

112 
i
 = 0 ; i < 10 ; i++)

113 
sv
->
ª«med
[
i
] = 
EMPTY
;

114 
sv
->
√xt
 = 
ªdúli°
;

115 
ªdúli°
 = 
sv
;

117 
n
 = 
ªdú
 ;Ç ;Ç =Ç->
nfûe
.
√xt
) {

118 
fd
 = 
n
->
nfûe
.fd;

119 
åy
 = 0;

120 i‡((
n
->
nfûe
.
ty≥
 =
NTOFD
 ||Ç->nfûe.ty≥ =
NFROMFD
) &&

121 
n
->
ndup
.
dupfd
 =
fd
)

124 i‡((
Êags
 & 
REDIR_PUSH
Ë&& 
sv
->
ª«med
[
fd
] =
EMPTY
) {

125 
INTOFF
;

126 
agaö
:

127 i‡((
i
 = 
	`f˙é
(
fd
, 
F_DUPFD
, 10)) == -1) {

128 
î∫o
) {

129 
EBADF
:

130 i‡(!
åy
) {

131 
	`›íªdúe˘
(
n
, 
mem‹y
);

132 
åy
++;

133 
agaö
;

137 
INTON
;

138 
	`îr‹
("%d: %s", 
fd
, 
	`°ªº‹
(
î∫o
));

142 i‡(!
åy
) {

143 
sv
->
ª«med
[
fd
] = 
i
;

145 
INTON
;

147 i‡(
fd
 == 0)

148 
fd0_ªdúe˘ed
++;

149 i‡(!
åy
)

150 
	`›íªdúe˘
(
n
, 
mem‹y
);

152 i‡(
mem‹y
[1])

153 
out1
 = &
memout
;

154 i‡(
mem‹y
[2])

155 
out2
 = &
memout
;

156 
	}
}

160 
	$›íªdúe˘
(
node
 *
ªdú
, 
mem‹y
[10])

162 
°©
 
sb
;

163 
fd
 = 
ªdú
->
nfûe
.fd;

164 *
‚ame
;

165 
f
;

172 
INTOFF
;

173 
mem‹y
[
fd
] = 0;

174 
ªdú
->
nfûe
.
ty≥
) {

175 
NFROM
:

176 
‚ame
 = 
ªdú
->
nfûe
.
exp‚ame
;

177 i‡((
f
 = 
	`›í
(
‚ame
, 
O_RDONLY
)) < 0)

178 
	`îr‹
("ˇ¬Ÿ o≥¿%s: %s", 
‚ame
, 
	`°ªº‹
(
î∫o
));

179 
movefd
:

180 i‡(
f
 !
fd
) {

181 
	`dup2
(
f
, 
fd
);

182 
	`˛o£
(
f
);

185 
NFROMTO
:

186 
‚ame
 = 
ªdú
->
nfûe
.
exp‚ame
;

187 i‡((
f
 = 
	`›í
(
‚ame
, 
O_RDWR
|
O_CREAT
, 0666)) < 0)

188 
	`îr‹
("ˇ¬Ÿ cª©ê%s: %s", 
‚ame
, 
	`°ªº‹
(
î∫o
));

189 
movefd
;

190 
NTO
:

191 i‡(
CÊag
) {

192 
‚ame
 = 
ªdú
->
nfûe
.
exp‚ame
;

193 i‡(
	`°©
(
‚ame
, &
sb
) == -1) {

194 i‡((
f
 = 
	`›í
(
‚ame
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 0666)) < 0)

195 
	`îr‹
("ˇ¬Ÿ cª©ê%s: %s", 
‚ame
, 
	`°ªº‹
(
î∫o
));

196 } i‡(!
	`S_ISREG
(
sb
.
°_mode
)) {

197 i‡((
f
 = 
	`›í
(
‚ame
, 
O_WRONLY
, 0666)) < 0)

198 
	`îr‹
("ˇ¬Ÿ cª©ê%s: %s", 
‚ame
, 
	`°ªº‹
(
î∫o
));

199 i‡(
	`f°©
(
f
, &
sb
Ë!-1 && 
	`S_ISREG
(sb.
°_mode
)) {

200 
	`˛o£
(
f
);

201 
	`îr‹
("ˇ¬Ÿ cª©ê%s: %s", 
‚ame
,

202 
	`°ªº‹
(
EEXIST
));

205 
	`îr‹
("ˇ¬Ÿ cª©ê%s: %s", 
‚ame
,

206 
	`°ªº‹
(
EEXIST
));

207 
movefd
;

210 
NCLOBBER
:

211 
‚ame
 = 
ªdú
->
nfûe
.
exp‚ame
;

212 i‡((
f
 = 
	`›í
(
‚ame
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0666)) < 0)

213 
	`îr‹
("ˇ¬Ÿ cª©ê%s: %s", 
‚ame
, 
	`°ªº‹
(
î∫o
));

214 
movefd
;

215 
NAPPEND
:

216 
‚ame
 = 
ªdú
->
nfûe
.
exp‚ame
;

217 i‡((
f
 = 
	`›í
(
‚ame
, 
O_WRONLY
|
O_CREAT
|
O_APPEND
, 0666)) < 0)

218 
	`îr‹
("ˇ¬Ÿ cª©ê%s: %s", 
‚ame
, 
	`°ªº‹
(
î∫o
));

219 
movefd
;

220 
NTOFD
:

221 
NFROMFD
:

222 i‡(
ªdú
->
ndup
.
dupfd
 >= 0) {

223 i‡(
mem‹y
[
ªdú
->
ndup
.
dupfd
])

224 
mem‹y
[
fd
] = 1;

226 
	`dup2
(
ªdú
->
ndup
.
dupfd
, 
fd
);

228 
	`˛o£
(
fd
);

231 
NHERE
:

232 
NXHERE
:

233 
f
 = 
	`›íhîe
(
ªdú
);

234 
movefd
;

236 
	`ab‹t
();

238 
INTON
;

239 
	}
}

249 
	$›íhîe
(
node
 *
ªdú
)

251 
pù
[2];

252 
Àn
 = 0;

254 i‡(
	`pùe
(
pù
) < 0)

255 
	`îr‹
("PùêˇŒ faûed: %s", 
	`°ªº‹
(
î∫o
));

256 i‡(
ªdú
->
ty≥
 =
NHERE
) {

257 
Àn
 = 
	`°æí
(
ªdú
->
nhîe
.
doc
->
«rg
.
ãxt
);

258 i‡(
Àn
 <
PIPESIZE
) {

259 
	`xwrôe
(
pù
[1], 
ªdú
->
nhîe
.
doc
->
«rg
.
ãxt
, 
Àn
);

260 
out
;

263 i‡(
	`f‹kshñl
((
job
 *)
NULL
, (
node
 *)NULL, 
FORK_NOJOB
) == 0) {

264 
	`˛o£
(
pù
[0]);

265 
	`sig«l
(
SIGINT
, 
SIG_IGN
);

266 
	`sig«l
(
SIGQUIT
, 
SIG_IGN
);

267 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

268 
	`sig«l
(
SIGTSTP
, 
SIG_IGN
);

269 
	`sig«l
(
SIGPIPE
, 
SIG_DFL
);

270 i‡(
ªdú
->
ty≥
 =
NHERE
)

271 
	`xwrôe
(
pù
[1], 
ªdú
->
nhîe
.
doc
->
«rg
.
ãxt
, 
Àn
);

273 
	`ex∑ndhîe
(
ªdú
->
nhîe
.
doc
, 
pù
[1]);

274 
	`_exô
(0);

276 
out
:

277 
	`˛o£
(
pù
[1]);

278  
pù
[0];

279 
	}
}

288 
	$p›ªdú
()

290 
ªdúèb
 *
Ω
 = 
ªdúli°
;

291 
i
;

293 
i
 = 0 ; i < 10 ; i++) {

294 i‡(
Ω
->
ª«med
[
i
] !
EMPTY
) {

295 i‡(
i
 == 0)

296 
fd0_ªdúe˘ed
--;

297 i‡(
Ω
->
ª«med
[
i
] >= 0) {

298 
	`dup2
(
Ω
->
ª«med
[
i
], i);

299 
	`˛o£
(
Ω
->
ª«med
[
i
]);

301 
	`˛o£
(
i
);

305 
INTOFF
;

306 
ªdúli°
 = 
Ω
->
√xt
;

307 
	`ck‰ì
(
Ω
);

308 
INTON
;

309 
	}
}

315 #ifde‡
mköô


317 
	gINCLUDE
 "redir.h"

319 
	gRESET
 {

320 
	gªdúli°
)

321 
p›ªdú
();

324 
	gSHELLPROC
 {

325 
˛óºedú
();

332 
	$fd0_ªdúe˘ed_p
()

334  
fd0_ªdúe˘ed
 != 0;

335 
	}
}

342 
	$˛óºedú
()

344 
ªdúèb
 *
Ω
;

345 
i
;

347 
Ω
 = 
ªdúli°
 ;Ñ∞;Ñ∞Ω->
√xt
) {

348 
i
 = 0 ; i < 10 ; i++) {

349 i‡(
Ω
->
ª«med
[
i
] >= 0) {

350 
	`˛o£
(
Ω
->
ª«med
[
i
]);

352 
Ω
->
ª«med
[
i
] = 
EMPTY
;

355 
	}
}

	@sh/redir.h

37 
	#REDIR_PUSH
 01

	)

38 
	#REDIR_BACKQ
 02

	)

40 
	gnode
;

41 
ªdúe˘
(
node
 *, );

42 
p›ªdú
();

43 
fd0_ªdúe˘ed_p
();

44 
˛óºedú
();

	@sh/shell.h

36 #i‚de‡
SHELL_H_


37 
	#SHELL_H_


	)

39 
	~<öây≥s.h
>

52 
	#JOBS
 1

	)

58 
ötmax_t
 
	t¨ôh_t
;

59 
	#ARITH_FORMAT_STR
 "%" 
PRIdMAX


	)

60 
	#©ﬂrôh_t
(
¨g
Ë
	`°πoimax
◊rg, 
NULL
, 0)

	)

61 
	#°πﬂrôh_t
(
≈å
, 
íd±r
, 
ba£
Ë
	`°πoimax
“±r,Énd±r, ba£)

	)

63 *
	tpoöãr
;

64 
	#MKINIT


	)

66 
	~<sys/cdefs.h
>

68 
nuŒ°r
[1];

70 #ifde‡
DEBUG


71 
	#TRACE
(
∑øm
Ë
sh_åa˚
 
	)
param

73 
	#TRACE
(
∑øm
)

	)

	@sh/show.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)show.c 8.3 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/show.c,v 1.23.10.3.4.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<f˙é.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°d¨g.h
>

45 
	~<î∫o.h
>

47 
	~"shñl.h
"

48 
	~"∑r£r.h
"

49 
	~"nodes.h
"

50 
	~"my°rög.h
"

51 
	~"show.h
"

54 #ifde‡
DEBUG


55 
shåì
(
node
 *, , *, 
FILE
*);

56 
shcmd
(
node
 *, 
FILE
 *);

57 
sh¨g
(
node
 *, 
FILE
 *);

58 
ödít
(, *, 
FILE
 *);

59 
å°rög
(*);

63 
	$showåì
(
node
 *
n
)

65 
	`åputs
("showtree called\n");

66 
	`shåì
(
n
, 1, 
NULL
, 
°dout
);

67 
	}
}

71 
	$shåì
(
node
 *
n
, 
öd
, *
pfx
, 
FILE
 *
Â
)

73 
nodñi°
 *
Õ
;

74 *
s
;

76 i‡(
n
 =
NULL
)

79 
	`ödít
(
öd
, 
pfx
, 
Â
);

80 
n
->
ty≥
) {

81 
NSEMI
:

82 
s
 = "; ";

83 
bö›
;

84 
NAND
:

85 
s
 = " && ";

86 
bö›
;

87 
NOR
:

88 
s
 = " || ";

89 
bö›
:

90 
	`shåì
(
n
->
nbö¨y
.
ch1
, 
öd
, 
NULL
, 
Â
);

92 
	`Âuts
(
s
, 
Â
);

93 
	`shåì
(
n
->
nbö¨y
.
ch2
, 
öd
, 
NULL
, 
Â
);

95 
NCMD
:

96 
	`shcmd
(
n
, 
Â
);

97 i‡(
öd
 >= 0)

98 
	`putc
('\n', 
Â
);

100 
NPIPE
:

101 
Õ
 = 
n
->
≈ùe
.
cmdli°
 ;Ü∞;Ü∞Õ->
√xt
) {

102 
	`shcmd
(
Õ
->
n
, 
Â
);

103 i‡(
Õ
->
√xt
)

104 
	`Âuts
(" | ", 
Â
);

106 i‡(
n
->
≈ùe
.
backgnd
)

107 
	`Âuts
(" &", 
Â
);

108 i‡(
öd
 >= 0)

109 
	`putc
('\n', 
Â
);

112 
	`Ârötf
(
Â
, "<nodêty≥ %d>", 
n
->
ty≥
);

113 i‡(
öd
 >= 0)

114 
	`putc
('\n', 
Â
);

117 
	}
}

122 
	$shcmd
(
node
 *
cmd
, 
FILE
 *
Â
)

124 
node
 *
≈
;

125 
fú°
;

126 *
s
;

127 
d·fd
;

129 
fú°
 = 1;

130 
≈
 = 
cmd
->
ncmd
.
¨gs
 ;Ç∞;Ç∞≈->
«rg
.
√xt
) {

131 i‡(! 
fú°
)

132 
	`putch¨
(' ');

133 
	`sh¨g
(
≈
, 
Â
);

134 
fú°
 = 0;

136 
≈
 = 
cmd
->
ncmd
.
ªdúe˘
 ;Ç∞;Ç∞≈->
nfûe
.
√xt
) {

137 i‡(! 
fú°
)

138 
	`putch¨
(' ');

139 
≈
->
nfûe
.
ty≥
) {

140 
NTO
: 
s
 = ">"; 
d·fd
 = 1; ;

141 
NAPPEND
: 
s
 = ">>"; 
d·fd
 = 1; ;

142 
NTOFD
: 
s
 = ">&"; 
d·fd
 = 1; ;

143 
NCLOBBER
: 
s
 = ">|"; 
d·fd
 = 1; ;

144 
NFROM
: 
s
 = "<"; 
d·fd
 = 0; ;

145 
NFROMTO
: 
s
 = "<>"; 
d·fd
 = 0; ;

146 
NFROMFD
: 
s
 = "<&"; 
d·fd
 = 0; ;

147 
NHERE
: 
s
 = "<<"; 
d·fd
 = 0; ;

148 
NXHERE
: 
s
 = "<<"; 
d·fd
 = 0; ;

149 : 
s
 = "*îr‹*"; 
d·fd
 = 0; ;

151 i‡(
≈
->
nfûe
.
fd
 !
d·fd
)

152 
	`Ârötf
(
Â
, "%d", 
≈
->
nfûe
.
fd
);

153 
	`Âuts
(
s
, 
Â
);

154 i‡(
≈
->
nfûe
.
ty≥
 =
NTOFD
 ||Çp->nfûe.ty≥ =
NFROMFD
) {

155 i‡(
≈
->
ndup
.
dupfd
 >= 0)

156 
	`Ârötf
(
Â
, "%d", 
≈
->
ndup
.
dupfd
);

158 
	`Ârötf
(
Â
, "-");

159 } i‡(
≈
->
nfûe
.
ty≥
 =
NHERE
) {

160 
	`Ârötf
(
Â
, "HERE");

161 } i‡(
≈
->
nfûe
.
ty≥
 =
NXHERE
) {

162 
	`Ârötf
(
Â
, "XHERE");

164 
	`sh¨g
(
≈
->
nfûe
.
‚ame
, 
Â
);

166 
fú°
 = 0;

168 
	}
}

173 
	$sh¨g
(
node
 *
¨g
, 
FILE
 *
Â
)

175 *
p
;

176 
nodñi°
 *
bqli°
;

177 
subty≥
;

179 i‡(
¨g
->
ty≥
 !
NARG
) {

180 
	`¥ötf
("<nodêty≥ %d>\n", 
¨g
->
ty≥
);

181 
	`fÊush
(
°dout
);

182 
	`ab‹t
();

184 
bqli°
 = 
¨g
->
«rg
.
backquŸe
;

185 
p
 = 
¨g
->
«rg
.
ãxt
 ; *p ;Ö++) {

186 *
p
) {

187 
CTLESC
:

188 
	`putc
(*++
p
, 
Â
);

190 
CTLVAR
:

191 
	`putc
('$', 
Â
);

192 
	`putc
('{', 
Â
);

193 
subty≥
 = *++
p
;

194 i‡(
subty≥
 =
VSLENGTH
)

195 
	`putc
('#', 
Â
);

197 *
p
 != '=')

198 
	`putc
(*
p
++, 
Â
);

200 i‡(
subty≥
 & 
VSNUL
)

201 
	`putc
(':', 
Â
);

203 
subty≥
 & 
VSTYPE
) {

204 
VSNORMAL
:

205 
	`putc
('}', 
Â
);

207 
VSMINUS
:

208 
	`putc
('-', 
Â
);

210 
VSPLUS
:

211 
	`putc
('+', 
Â
);

213 
VSQUESTION
:

214 
	`putc
('?', 
Â
);

216 
VSASSIGN
:

217 
	`putc
('=', 
Â
);

219 
VSTRIMLEFT
:

220 
	`putc
('#', 
Â
);

222 
VSTRIMLEFTMAX
:

223 
	`putc
('#', 
Â
);

224 
	`putc
('#', 
Â
);

226 
VSTRIMRIGHT
:

227 
	`putc
('%', 
Â
);

229 
VSTRIMRIGHTMAX
:

230 
	`putc
('%', 
Â
);

231 
	`putc
('%', 
Â
);

233 
VSLENGTH
:

236 
	`¥ötf
("<subty≥ %d>", 
subty≥
);

239 
CTLENDVAR
:

240 
	`putc
('}', 
Â
);

242 
CTLBACKQ
:

243 
CTLBACKQ
|
CTLQUOTE
:

244 
	`putc
('$', 
Â
);

245 
	`putc
('(', 
Â
);

246 
	`shåì
(
bqli°
->
n
, -1, 
NULL
, 
Â
);

247 
	`putc
(')', 
Â
);

250 
	`putc
(*
p
, 
Â
);

254 
	}
}

258 
	$ödít
(
amou¡
, *
pfx
, 
FILE
 *
Â
)

260 
i
;

262 
i
 = 0 ; i < 
amou¡
 ; i++) {

263 i‡(
pfx
 && 
i
 =
amou¡
 - 1)

264 
	`Âuts
(
pfx
, 
Â
);

265 
	`putc
('\t', 
Â
);

267 
	}
}

275 
FILE
 *
	gåa˚fûe
;

277 #i‡
DEBUG
 >= 2

278 
	gdebug
 = 1;

280 
	gdebug
 = 0;

285 
	$åputc
(
c
)

287 i‡(
åa˚fûe
 =
NULL
)

289 
	`putc
(
c
, 
åa˚fûe
);

290 i‡(
c
 == '\n')

291 
	`fÊush
(
åa˚fûe
);

292 
	}
}

296 
	$sh_åa˚
(c⁄° *
fmt
, ...)

298 
va_li°
 
va
;

299 
	`va_°¨t
(
va
, 
fmt
);

300 i‡(
åa˚fûe
 !
NULL
) {

301 (Ë
	`vÂrötf
(
åa˚fûe
, 
fmt
, 
va
);

302 i‡(
	`°rchr
(
fmt
, '\n'))

303 (Ë
	`fÊush
(
åa˚fûe
);

305 
	`va_íd
(
va
);

306 
	}
}

310 
	$åputs
(c⁄° *
s
)

312 i‡(
åa˚fûe
 =
NULL
)

314 
	`Âuts
(
s
, 
åa˚fûe
);

315 i‡(
	`°rchr
(
s
, '\n'))

316 
	`fÊush
(
åa˚fûe
);

317 
	}
}

321 
	$å°rög
(*
s
)

323 *
p
;

324 
c
;

326 i‡(
åa˚fûe
 =
NULL
)

328 
	`putc
('"', 
åa˚fûe
);

329 
p
 = 
s
 ; *p ;Ö++) {

330 *
p
) {

331 '\n': 
c
 = 'n'; 
back¶ash
;

332 '\t': 
c
 = 't'; 
back¶ash
;

333 '\r': 
c
 = 'r'; 
back¶ash
;

334 '"': 
c
 = '"'; 
back¶ash
;

335 '\\': 
c
 = '\\'; 
back¶ash
;

336 
CTLESC
: 
c
 = 'e'; 
back¶ash
;

337 
CTLVAR
: 
c
 = 'v'; 
back¶ash
;

338 
CTLVAR
+
CTLQUOTE
: 
c
 = 'V'; 
back¶ash
;

339 
CTLBACKQ
: 
c
 = 'q'; 
back¶ash
;

340 
CTLBACKQ
+
CTLQUOTE
: 
c
 = 'Q'; 
back¶ash
;

341 
back¶ash
: 
	`putc
('\\', 
åa˚fûe
);

342 
	`putc
(
c
, 
åa˚fûe
);

345 i‡(*
p
 >= ' ' && *p <= '~')

346 
	`putc
(*
p
, 
åa˚fûe
);

348 
	`putc
('\\', 
åa˚fûe
);

349 
	`putc
(*
p
 >> 6 & 03, 
åa˚fûe
);

350 
	`putc
(*
p
 >> 3 & 07, 
åa˚fûe
);

351 
	`putc
(*
p
 & 07, 
åa˚fûe
);

356 
	`putc
('"', 
åa˚fûe
);

357 
	}
}

361 
	$å¨gs
(**
≠
)

363 i‡(
åa˚fûe
 =
NULL
)

365 *
≠
) {

366 
	`å°rög
(*
≠
++);

367 i‡(*
≠
)

368 
	`putc
(' ', 
åa˚fûe
);

370 
	`putc
('\n', 
åa˚fûe
);

372 
	`fÊush
(
åa˚fûe
);

373 
	}
}

377 
	$›íåa˚
()

379 
s
[100];

380 
Êags
;

382 i‡(!
debug
)

384 #ifde‡
nŸ_this_way


386 *
p
;

387 i‡((
p
 = 
	`gëív
("HOME")Ë=
NULL
) {

388 i‡(
	`gëeuid
() == 0)

389 
p
 = "/";

391 
p
 = "/tmp";

393 
	`sc›y
(
p
, 
s
);

394 
	`°rˇt
(
s
, "/trace");

397 
	`sc›y
("./åa˚", 
s
);

399 i‡((
åa˚fûe
 = 
	`f›í
(
s
, "a")Ë=
NULL
) {

400 
	`Ârötf
(
°dîr
, "C™'à›í %s: %s\n", 
s
, 
	`°ªº‹
(
î∫o
));

403 i‡((
Êags
 = 
	`f˙é
(
	`fûío
(
åa˚fûe
), 
F_GETFL
, 0)) >= 0)

404 
	`f˙é
(
	`fûío
(
åa˚fûe
), 
F_SETFL
, 
Êags
 | 
O_APPEND
);

405 
	`Âuts
("\nTøcög sèπed.\n", 
åa˚fûe
);

406 
	`fÊush
(
åa˚fûe
);

407 
	}
}

	@sh/show.h

33 
showåì
(
node
 *);

34 #ifde‡
DEBUG


35 
	$sh_åa˚
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

36 
	`å¨gs
(**);

37 
	`åputc
();

38 
	`åputs
(const *);

39 
	`›íåa˚
();

	@sh/trap.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)trap.c 8.5 (Berkeley) 6/5/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/trap.c,v 1.34.2.2.2.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<sig«l.h
>

42 
	~<uni°d.h
>

43 
	~<°dlib.h
>

45 
	~"shñl.h
"

46 
	~"maö.h
"

47 
	~"nodes.h
"

48 
	~"evÆ.h
"

49 
	~"jobs.h
"

50 
	~"show.h
"

51 
	~"›ti⁄s.h
"

52 
	~"sy¡ax.h
"

53 
	~"ouçut.h
"

54 
	~"memÆloc.h
"

55 
	~"îr‹.h
"

56 
	~"å≠.h
"

57 
	~"my°rög.h
"

58 
	~"myhi°edô.h
"

67 
	#S_DFL
 1

	)

68 
	#S_CATCH
 2

	)

69 
	#S_IGN
 3

	)

70 
	#S_HARD_IGN
 4

	)

71 
	#S_RESET
 5

	)

74 
MKINIT
 
	gsigmode
[
NSIG
];

75 
	g≥ndögsigs
;

76 
	gö_dŸøp
;

77 *vﬁ©ûê
	gå≠
[
NSIG
];

78 vﬁ©ûê
sig_©omic_t
 
	ggŸsig
[
NSIG
];

80 
	gign‹e_sigchld
;

81 vﬁ©ûê
sig_©omic_t
 
	ggŸwöch
;

83 
gësiga˘i⁄
(, 
sig_t
 *);

92 
	$sig°rög_to_signum
(*
sig
)

95 i‡(
	`is_numbî
(
sig
)) {

96 
signo
;

98 
signo
 = 
	`©oi
(
sig
);

99  ((
signo
 >0 && signÿ< 
NSIG
) ? signo : (-1));

100 } i‡(
	`°rˇ£cmp
(
sig
, "exit") == 0) {

103 
n
;

105 i‡(
	`°∫ˇ£cmp
(
sig
, "sig", 3) == 0)

106 
sig
 += 3;

107 
n
 = 1;Ç < 
sys_nsig
;Ç++)

108 i‡(
sys_sig«me
[
n
] &&

109 
	`°rˇ£cmp
(
sys_sig«me
[
n
], 
sig
) == 0)

110  (
n
);

113 
	}
}

120 
	$¥ötsig«ls
()

122 
n
, 
ouéí
;

124 
ouéí
 = 0;

125 
n
 = 1;Ç < 
sys_nsig
;Ç++) {

126 i‡(
sys_sig«me
[
n
]) {

127 
	`out1fmt
("%s", 
sys_sig«me
[
n
]);

128 
ouéí
 +
	`°æí
(
sys_sig«me
[
n
]);

130 
	`out1fmt
("%d", 
n
);

131 
ouéí
 += 3;

133 ++
ouéí
;

134 i‡(
ouéí
 > 70 || 
n
 =
sys_nsig
 - 1) {

135 
	`out1°r
("\n");

136 
ouéí
 = 0;

138 
	`out1c
(' ');

141 
	}
}

148 
	$å≠cmd
(
¨gc
, **
¨gv
)

150 *
a˘i⁄
;

151 
signo
;

153 i‡(
¨gc
 <= 1) {

154 
signo
 = 0 ; signÿ< 
sys_nsig
 ; signo++) {

155 i‡(
signo
 < 
NSIG
 && 
å≠
[signo] !
NULL
) {

156 
	`out1°r
("trap -- ");

157 
	`out1q°r
(
å≠
[
signo
]);

158 i‡(
signo
 == 0) {

159 
	`out1°r
("Éxit\n");

160 } i‡(
sys_sig«me
[
signo
]) {

161 
	`out1fmt
(" %s\n", 
sys_sig«me
[
signo
]);

163 
	`out1fmt
(" %d\n", 
signo
);

169 
a˘i⁄
 = 
NULL
;

170 i‡(*++
¨gv
 && 
	`°rcmp
(*argv, "--") == 0)

171 
¨gv
++;

172 i‡(*
¨gv
 && 
	`sig°rög_to_signum
(*argv) == -1) {

173 i‡((*
¨gv
)[0] != '-') {

174 
a˘i⁄
 = *
¨gv
;

175 
¨gv
++;

176 } i‡((*
¨gv
)[1] == '\0') {

177 
¨gv
++;

178 } i‡((*
¨gv
)[1] == 'l' && (*argv)[2] == '\0') {

179 
	`¥ötsig«ls
();

182 
	`îr‹
("bad o±i⁄ %s", *
¨gv
);

185 *
¨gv
) {

186 i‡((
signo
 = 
	`sig°rög_to_signum
(*
¨gv
)) == -1)

187 
	`îr‹
("bad sig«»%s", *
¨gv
);

188 
INTOFF
;

189 i‡(
a˘i⁄
)

190 
a˘i⁄
 = 
	`ßve°r
(action);

191 i‡(
å≠
[
signo
])

192 
	`ck‰ì
(
å≠
[
signo
]);

193 
å≠
[
signo
] = 
a˘i⁄
;

194 i‡(
signo
 != 0)

195 
	`£tsig«l
(
signo
);

196 
INTON
;

197 
¨gv
++;

200 
	}
}

207 
	$˛ór_å≠s
()

209 *vﬁ©ûê*
ç
;

211 
ç
 = 
å≠
 ;Å∞<&å≠[
NSIG
 - 1] ;Åp++) {

212 i‡(*
ç
 && **tp) {

213 
INTOFF
;

214 
	`ck‰ì
(*
ç
);

215 *
ç
 = 
NULL
;

216 i‡(
ç
 !&
å≠
[0])

217 
	`£tsig«l
(
ç
 - 
å≠
);

218 
INTON
;

221 
	}
}

228 
	$have_å≠s
()

230 *vﬁ©ûê*
ç
;

232 
ç
 = 
å≠
 ;Å∞<&å≠[
NSIG
 - 1] ;Åp++) {

233 i‡(*
ç
 && **tp)

237 
	}
}

244 
	$£tsig«l
(
signo
)

246 
a˘i⁄
;

247 
sig_t
 
sig
, 
siga˘
 = 
SIG_DFL
;

248 *
t
;

250 i‡((
t
 = 
å≠
[
signo
]Ë=
NULL
)

251 
a˘i⁄
 = 
S_DFL
;

252 i‡(*
t
 != '\0')

253 
a˘i⁄
 = 
S_CATCH
;

255 
a˘i⁄
 = 
S_IGN
;

256 i‡(
a˘i⁄
 =
S_DFL
) {

257 
signo
) {

258 
SIGINT
:

259 
a˘i⁄
 = 
S_CATCH
;

261 
SIGQUIT
:

262 #ifde‡
DEBUG


264 
debug
;

266 i‡(
debug
)

270 
a˘i⁄
 = 
S_CATCH
;

272 
SIGTERM
:

273 i‡(
roŸshñl
 && 
iÊag
)

274 
a˘i⁄
 = 
S_IGN
;

276 #i‡
JOBS


277 
SIGTSTP
:

278 
SIGTTOU
:

279 i‡(
roŸshñl
 && 
mÊag
)

280 
a˘i⁄
 = 
S_IGN
;

283 #i‚de‡
NO_HISTORY


284 
SIGWINCH
:

285 i‡(
roŸshñl
 && 
iÊag
)

286 
a˘i⁄
 = 
S_CATCH
;

292 
t
 = &
sigmode
[
signo
];

293 i‡(*
t
 == 0) {

297 i‡(!
	`gësiga˘i⁄
(
signo
, &
siga˘
)) {

305 i‡(
siga˘
 =
SIG_IGN
) {

306 i‡(
mÊag
 && (
signo
 =
SIGTSTP
 ||

307 
signo
 =
SIGTTIN
 || signÿ=
SIGTTOU
)) {

308 *
t
 = 
S_IGN
;

310 *
t
 = 
S_HARD_IGN
;

312 *
t
 = 
S_RESET
;

315 i‡(*
t
 =
S_HARD_IGN
 || *à=
a˘i⁄
)

317 
a˘i⁄
) {

318 
S_DFL
: 
siga˘
 = 
SIG_DFL
; ;

319 
S_CATCH
: 
siga˘
 = 
⁄sig
; ;

320 
S_IGN
: 
siga˘
 = 
SIG_IGN
; ;

322 *
t
 = 
a˘i⁄
;

323 
sig
 = 
	`sig«l
(
signo
, 
siga˘
);

324 i‡(
sig
 !
SIG_ERR
 && 
a˘i⁄
 =
S_CATCH
)

325 
	`sigöãºu±
(
signo
, 1);

326 
	}
}

333 
	$gësiga˘i⁄
(
signo
, 
sig_t
 *
siga˘
)

335 
siga˘i⁄
 
ß
;

337 i‡(
	`siga˘i⁄
(
signo
, (
siga˘i⁄
 *)0, &
ß
) == -1)

339 *
siga˘
 = (
sig_t
Ë
ß
.
ß_h™dÀr
;

341 
	}
}

348 
	$ign‹esig
(
signo
)

351 i‡(
sigmode
[
signo
] !
S_IGN
 && sigmode[signo] !
S_HARD_IGN
) {

352 
	`sig«l
(
signo
, 
SIG_IGN
);

354 
sigmode
[
signo
] = 
S_HARD_IGN
;

355 
	}
}

358 #ifde‡
mköô


359 
	gINCLUDE
 <
	gsig«l
.
	gh
>

360 
	gINCLUDE
 "trap.h"

362 
	gSHELLPROC
 {

363 *
	gsm
;

365 
˛ór_å≠s
();

366 
	gsm
 = 
sigmode
 ; sm < 
	gsigmode
 + 
	gNSIG
 ; sm++) {

367 i‡(*
	gsm
 =
S_IGN
)

368 *
sm
 = 
S_HARD_IGN
;

378 
	$⁄sig
(
signo
)

381 i‡(
signo
 =
SIGINT
 && 
å≠
[SIGINT] =
NULL
) {

382 
	`⁄öt
();

386 i‡(
signo
 !
SIGCHLD
 || !
ign‹e_sigchld
)

387 
gŸsig
[
signo
] = 1;

388 
≥ndögsigs
++;

391 i‡((
signo
 =
SIGINT
 || signÿ=
SIGQUIT
Ë&& 
ö_waôcmd
 != 0)

392 
bªakwaôcmd
 = 1;

397 i‡(
TÊag
 &&

398 
å≠
[
signo
] !
NULL
 &&

399 ! (
å≠
[
signo
][0] == '\0') &&

400 ! (
å≠
[
signo
][0] == ':' &&Årap[signo][1] == '\0'))

401 
bªakwaôcmd
 = 1;

403 #i‚de‡
NO_HISTORY


404 i‡(
signo
 =
SIGWINCH
)

405 
gŸwöch
 = 1;

407 
	}
}

415 
	$dŸøp
()

417 
i
;

418 
ßve°©us
, 
¥ev_evÆskù
, 
¥ev_skùcou¡
;

420 
ö_dŸøp
++;

422 
i
 = 1; i < 
NSIG
; i++) {

423 i‡(
gŸsig
[
i
]) {

424 
gŸsig
[
i
] = 0;

425 i‡(
å≠
[
i
]) {

431 i‡(
i
 =
SIGCHLD
)

432 
ign‹e_sigchld
++;

442 
¥ev_evÆskù
 = 
evÆskù
;

443 
¥ev_skùcou¡
 = 
skùcou¡
;

444 
evÆskù
 = 0;

446 
ßve°©us
 = 
exô°©us
;

447 
	`evÆ°rög
(
å≠
[
i
], 0);

448 
exô°©us
 = 
ßve°©us
;

457 i‡(
¥ev_evÆskù
 != 0) {

458 
evÆskù
 = 
¥ev_evÆskù
;

459 
skùcou¡
 = 
¥ev_skùcou¡
;

462 i‡(
i
 =
SIGCHLD
)

463 
ign‹e_sigchld
--;

468 i‡(
i
 >
NSIG
)

471 
ö_dŸøp
--;

472 
≥ndögsigs
 = 0;

473 
	}
}

480 
	$£töãø˘ive
(
⁄
)

482 
is_öãø˘ive
 = -1;

484 i‡(
⁄
 =
is_öãø˘ive
)

486 
	`£tsig«l
(
SIGINT
);

487 
	`£tsig«l
(
SIGQUIT
);

488 
	`£tsig«l
(
SIGTERM
);

489 #i‚de‡
NO_HISTORY


490 
	`£tsig«l
(
SIGWINCH
);

492 
is_öãø˘ive
 = 
⁄
;

493 
	}
}

500 
	$exôshñl
(
°©us
)

502 
jm∂oc
 
loc1
, 
loc2
;

503 *
p
;

505 
	`TRACE
(("exôshñl(%dËpid=%d\n", 
°©us
, 
	`gëpid
()));

506 i‡(
	`£tjmp
(
loc1
.
loc
)) {

507 
l1
;

509 i‡(
	`£tjmp
(
loc2
.
loc
)) {

510 
l2
;

512 
h™dÀr
 = &
loc1
;

513 i‡((
p
 = 
å≠
[0]Ë!
NULL
 && *p != '\0') {

518 
evÆskù
 = 0;

519 
å≠
[0] = 
NULL
;

520 
	`evÆ°rög
(
p
, 0);

522 
l1
: 
h™dÀr
 = &
loc2
;

523 
	`ÊushÆl
();

524 #i‡
JOBS


525 
	`£tjob˘l
(0);

527 
l2
: 
	`_exô
(
°©us
);

528 
	}
}

	@sh/trap.h

36 
≥ndögsigs
;

37 
ö_dŸøp
;

38 vﬁ©ûê
sig_©omic_t
 
gŸwöch
;

40 
å≠cmd
(, **);

41 
˛ór_å≠s
();

42 
have_å≠s
();

43 
£tsig«l
();

44 
ign‹esig
();

45 
⁄sig
();

46 
dŸøp
();

47 
£töãø˘ive
();

48 
	$exôshñl
(Ë
__dód2
;

	@sh/var.c

33 #i‚de‡
löt


35 
	gsccsid
[] = "@(#)var.c 8.3 (Berkeley) 5/4/95";

38 
	~<sys/cdefs.h
>

39 
__FBSDID
("$FreeBSD: src/bin/sh/var.c,v 1.39.2.8.2.1 2012/03/03 06:15:13 kensmith Exp $");

41 
	~<uni°d.h
>

42 
	~<°dlib.h
>

43 
	~<∑ths.h
>

49 
	~<loˇÀ.h
>

51 
	~"shñl.h
"

52 
	~"ouçut.h
"

53 
	~"ex∑nd.h
"

54 
	~"nodes.h
"

55 
	~"evÆ.h
"

56 
	~"exec.h
"

57 
	~"sy¡ax.h
"

58 
	~"›ti⁄s.h
"

59 
	~"maû.h
"

60 
	~"v¨.h
"

61 
	~"memÆloc.h
"

62 
	~"îr‹.h
"

63 
	~"my°rög.h
"

64 
	~"∑r£r.h
"

65 #i‚de‡
NO_HISTORY


66 
	~"myhi°edô.h
"

70 
	#VTABSIZE
 39

	)

73 
	sv¨öô
 {

74 
v¨
 *
	mv¨
;

75 
	mÊags
;

76 *
	mãxt
;

77 (*
	mfunc
)(const *);

81 #i‚de‡
NO_HISTORY


82 
v¨
 
	gvhi°size
;

84 
v¨
 
	gvifs
;

85 
v¨
 
	gvmaû
;

86 
v¨
 
	gvm∑th
;

87 
v¨
 
	gv∑th
;

88 
v¨
 
	gvµid
;

89 
v¨
 
	gvps1
;

90 
v¨
 
	gvps2
;

91 
v¨
 
	gvps4
;

92 
v¨
 
	gvvîs
;

93 
v¨
 
	gv›töd
;

95 c⁄° 
v¨öô
 
	gv¨öô
[] = {

96 #i‚de‡
NO_HISTORY


97 { &
vhi°size
, 
VSTRFIXED
|
VTEXTFIXED
|
VUNSET
, "HISTSIZE=",

98 
£thi°size
 },

100 { &
vifs
, 
VSTRFIXED
|
VTEXTFIXED
, "IFS= \t\n",

101 
NULL
 },

102 { &
vmaû
, 
VSTRFIXED
|
VTEXTFIXED
|
VUNSET
, "MAIL=",

103 
NULL
 },

104 { &
vm∑th
, 
VSTRFIXED
|
VTEXTFIXED
|
VUNSET
, "MAILPATH=",

105 
NULL
 },

106 { &
v∑th
, 
VSTRFIXED
|
VTEXTFIXED
, "PATH=" 
_PATH_DEFPATH
,

107 
ch™gï©h
 },

108 { &
vµid
, 
VSTRFIXED
|
VTEXTFIXED
|
VUNSET
, "PPID=",

109 
NULL
 },

113 { &
vps2
, 
VSTRFIXED
|
VTEXTFIXED
, "PS2=> ",

114 
NULL
 },

115 { &
vps4
, 
VSTRFIXED
|
VTEXTFIXED
, "PS4=+ ",

116 
NULL
 },

117 { &
v›töd
, 
VSTRFIXED
|
VTEXTFIXED
, "OPTIND=1",

118 
gë›t§e£t
 },

119 { 
NULL
, 0, NULL,

120 
NULL
 }

123 
v¨
 *
	gv¨èb
[
VTABSIZE
];

125 
v¨
 **
hashv¨
(const *);

126 
v¨equÆ
(const *, const *);

127 
loˇÀv¨
(const *);

133 #ifde‡
mköô


134 
	gINCLUDE
 "var.h"

135 
MKINIT
 **
	gívú⁄
;

136 
	gINIT
 {

137 **
	gívp
;

139 
öôv¨
();

140 
	gívp
 = 
ívú⁄
 ; *envp ;Énvp++) {

141 i‡(
°rchr
(*
ívp
, '=')) {

142 
£tv¨eq
(*
ívp
, 
VEXPORT
|
VTEXTFIXED
);

155 
	$öôv¨
()

157 
µid
[20];

158 c⁄° 
v¨öô
 *
ù
;

159 
v¨
 *
vp
;

160 
v¨
 **
vµ
;

162 
ù
 = 
v¨öô
 ; (
vp
 = ip->
v¨
Ë!
NULL
 ; ip++) {

163 i‡((
vp
->
Êags
 & 
VEXPORT
) == 0) {

164 
vµ
 = 
	`hashv¨
(
ù
->
ãxt
);

165 
vp
->
√xt
 = *
vµ
;

166 *
vµ
 = 
vp
;

167 
vp
->
ãxt
 = 
ù
->text;

168 
vp
->
Êags
 = 
ù
->flags;

169 
vp
->
func
 = 
ù
->func;

175 i‡((
vps1
.
Êags
 & 
VEXPORT
) == 0) {

176 
vµ
 = 
	`hashv¨
("PS1=");

177 
vps1
.
√xt
 = *
vµ
;

178 *
vµ
 = &
vps1
;

179 
vps1
.
ãxt
 = 
	`gëeuid
() ? "PS1=$ " : "PS1=# ";

180 
vps1
.
Êags
 = 
VSTRFIXED
|
VTEXTFIXED
;

182 i‡((
vµid
.
Êags
 & 
VEXPORT
) == 0) {

183 
	`fmt°r
(
µid
, ’pid), "%d", ()
	`gëµid
());

184 
	`£tv¨ß„
("PPID", 
µid
, 0);

186 
	}
}

193 
	$£tv¨ß„
(c⁄° *
«me
, c⁄° *
vÆ
, 
Êags
)

195 
jm∂oc
 jmploc;

196 
jm∂oc
 *c⁄° 
ßveh™dÀr
 = 
h™dÀr
;

197 
îr
 = 0;

199 i‡(
	`£tjmp
(
jm∂oc
.
loc
))

200 
îr
 = 1;

202 
h™dÀr
 = &
jm∂oc
;

203 
	`£tv¨
(
«me
, 
vÆ
, 
Êags
);

205 
h™dÀr
 = 
ßveh™dÀr
;

206  
îr
;

207 
	}
}

215 
	$£tv¨
(c⁄° *
«me
, c⁄° *
vÆ
, 
Êags
)

217 c⁄° *
p
;

218 
Àn
;

219 
«mñí
;

220 *
«mìq
;

221 
isbad
;

223 
isbad
 = 0;

224 
p
 = 
«me
;

225 i‡(! 
	`is_«me
(*
p
))

226 
isbad
 = 1;

227 
p
++;

229 i‡(! 
	`is_ö_«me
(*
p
)) {

230 i‡(*
p
 == '\0' || *p == '=')

232 
isbad
 = 1;

234 
p
++;

236 
«mñí
 = 
p
 - 
«me
;

237 i‡(
isbad
)

238 
	`îr‹
("%.*s: bad v¨übÀÇame", 
«mñí
, 
«me
);

239 
Àn
 = 
«mñí
 + 2;

240 i‡(
vÆ
 =
NULL
) {

241 
Êags
 |
VUNSET
;

243 
Àn
 +
	`°æí
(
vÆ
);

245 
«mìq
 = 
	`ckmÆloc
(
Àn
);

246 
	`mem˝y
(
«mìq
, 
«me
, 
«mñí
);

247 
«mìq
[
«mñí
] = '=';

248 i‡(
vÆ
)

249 
	`sc›y
(
vÆ
, 
«mìq
 + 
«mñí
 + 1);

251 
«mìq
[
«mñí
 + 1] = '\0';

252 
	`£tv¨eq
(
«mìq
, 
Êags
);

253 
	}
}

256 
	$loˇÀv¨
(c⁄° *
s
)

258 c⁄° *
 ames
[7] = {

260 "NUMERIC", "TIME", 
NULL


262 c⁄° **
ss
;

264 i‡(*
s
 != 'L')

266 i‡(
	`v¨equÆ
(
s
 + 1, "ANG"))

268 i‡(
	`°∫cmp
(
s
 + 1, "C_", 2) != 0)

270 
ss
 = 
 ames
; *ss ; ss++)

271 i‡(
	`v¨equÆ
(
s
 + 3, *
ss
))

274 
	}
}

282 
	$ch™ge_ív
(c⁄° *
s
, 
£t
)

284 *
eqp
;

285 *
ss
;

287 
ss
 = 
	`ßve°r
(
s
);

288 i‡((
eqp
 = 
	`°rchr
(
ss
, '=')Ë!
NULL
)

289 *
eqp
 = '\0';

290 i‡(
£t
 && 
eqp
 !
NULL
)

291 (Ë
	`£ãnv
(
ss
, 
eqp
 + 1, 1);

293 (Ë
	`un£ãnv
(
ss
);

294 
	`ck‰ì
(
ss
);

297 
	}
}

308 
	$£tv¨eq
(*
s
, 
Êags
)

310 
v¨
 *
vp
, **
vµ
;

311 
Àn
;

313 i‡(
aÊag
)

314 
Êags
 |
VEXPORT
;

315 
vµ
 = 
	`hashv¨
(
s
);

316 
vp
 = *
vµ
 ; v∞; v∞vp->
√xt
) {

317 i‡(
	`v¨equÆ
(
s
, 
vp
->
ãxt
)) {

318 i‡(
vp
->
Êags
 & 
VREADONLY
) {

319 
Àn
 = 
	`°rchr
(
s
, '=') - s;

320 
	`îr‹
("%.*s: i†ªad o∆y", 
Àn
, 
s
);

322 
INTOFF
;

324 i‡(
vp
->
func
 && (
Êags
 & 
VNOFUNC
) == 0)

325 (*
vp
->
func
)(
	`°rchr
(
s
, '=') + 1);

327 i‡((
vp
->
Êags
 & (
VTEXTFIXED
|
VSTACK
)) == 0)

328 
	`ck‰ì
(
vp
->
ãxt
);

330 
vp
->
Êags
 &~(
VTEXTFIXED
|
VSTACK
|
VUNSET
);

331 
vp
->
Êags
 |= flags;

332 
vp
->
ãxt
 = 
s
;

342 i‡((
vp
 =&
vm∑th
 || (v∞=&
vmaû
 && ! 
	`m∑th£t
())) &&

343 
iÊag
 == 1)

344 
	`chkmaû
(1);

345 i‡((
vp
->
Êags
 & 
VEXPORT
Ë&& 
	`loˇÀv¨
(
s
)) {

346 
	`ch™ge_ív
(
s
, 1);

347 (Ë
	`£éoˇÀ
(
LC_ALL
, "");

349 
INTON
;

354 
vp
 = 
	`ckmÆloc
( (*vp));

355 
vp
->
Êags
 = flags;

356 
vp
->
ãxt
 = 
s
;

357 
vp
->
√xt
 = *
vµ
;

358 
vp
->
func
 = 
NULL
;

359 
INTOFF
;

360 *
vµ
 = 
vp
;

361 i‡((
vp
->
Êags
 & 
VEXPORT
Ë&& 
	`loˇÀv¨
(
s
)) {

362 
	`ch™ge_ív
(
s
, 1);

363 (Ë
	`£éoˇÀ
(
LC_ALL
, "");

365 
INTON
;

366 
	}
}

375 
	$li°£tv¨
(
°æi°
 *
li°
)

377 
°æi°
 *
Õ
;

379 
INTOFF
;

380 
Õ
 = 
li°
 ;Ü∞;Ü∞Õ->
√xt
) {

381 
	`£tv¨eq
(
	`ßve°r
(
Õ
->
ãxt
), 0);

383 
INTON
;

384 
	}
}

393 
	$lookupv¨
(c⁄° *
«me
)

395 
v¨
 *
v
;

397 
v
 = *
	`hashv¨
(
«me
Ë; v ; v = v->
√xt
) {

398 i‡(
	`v¨equÆ
(
v
->
ãxt
, 
«me
)) {

399 i‡(
v
->
Êags
 & 
VUNSET
)

400  
NULL
;

401  
	`°rchr
(
v
->
ãxt
, '=') + 1;

404  
NULL
;

405 
	}
}

416 
	$b…ölookup
(c⁄° *
«me
, 
dﬂŒ
)

418 
°æi°
 *
•
;

419 
v¨
 *
v
;

421 
•
 = 
cmdívú⁄
 ; s∞; s∞•->
√xt
) {

422 i‡(
	`v¨equÆ
(
•
->
ãxt
, 
«me
))

423  
	`°rchr
(
•
->
ãxt
, '=') + 1;

425 
v
 = *
	`hashv¨
(
«me
Ë; v ; v = v->
√xt
) {

426 i‡(
	`v¨equÆ
(
v
->
ãxt
, 
«me
)) {

427 i‡((
v
->
Êags
 & 
VUNSET
)

428 || (!
dﬂŒ
 && (
v
->
Êags
 & 
VEXPORT
) == 0))

429  
NULL
;

430  
	`°rchr
(
v
->
ãxt
, '=') + 1;

433  
NULL
;

434 
	}
}

444 
	$ívú⁄mít
()

446 
√nv
;

447 
v¨
 **
vµ
;

448 
v¨
 *
vp
;

449 **
ív
, **
ï
;

451 
√nv
 = 0;

452 
vµ
 = 
v¨èb
 ; vµ < v¨èb + 
VTABSIZE
 ; vpp++) {

453 
vp
 = *
vµ
 ; v∞; v∞vp->
√xt
)

454 i‡(
vp
->
Êags
 & 
VEXPORT
)

455 
√nv
++;

457 
ï
 = 
ív
 = 
	`°Æloc
((
√nv
 + 1) *  *env);

458 
vµ
 = 
v¨èb
 ; vµ < v¨èb + 
VTABSIZE
 ; vpp++) {

459 
vp
 = *
vµ
 ; v∞; v∞vp->
√xt
)

460 i‡(
vp
->
Êags
 & 
VEXPORT
)

461 *
ï
++ = 
vp
->
ãxt
;

463 *
ï
 = 
NULL
;

464  
ív
;

465 
	}
}

474 
MKINIT
 
sh¥ocv¨
();

476 #ifde‡
mköô


477 
	gSHELLPROC
 {

478 
sh¥ocv¨
();

483 
	$sh¥ocv¨
()

485 
v¨
 **
vµ
;

486 
v¨
 *
vp
, **
¥ev
;

488 
vµ
 = 
v¨èb
 ; vµ < v¨èb + 
VTABSIZE
 ; vpp++) {

489 
¥ev
 = 
vµ
 ; (
vp
 = *¥evË!
NULL
 ; ) {

490 i‡((
vp
->
Êags
 & 
VEXPORT
) == 0) {

491 *
¥ev
 = 
vp
->
√xt
;

492 i‡((
vp
->
Êags
 & 
VTEXTFIXED
) == 0)

493 
	`ck‰ì
(
vp
->
ãxt
);

494 i‡((
vp
->
Êags
 & 
VSTRFIXED
) == 0)

495 
	`ck‰ì
(
vp
);

497 i‡(
vp
->
Êags
 & 
VSTACK
) {

498 
vp
->
ãxt
 = 
	`ßve°r
(vp->text);

499 
vp
->
Êags
 &=~ 
VSTACK
;

501 
¥ev
 = &
vp
->
√xt
;

505 
	`öôv¨
();

506 
	}
}

510 
	$v¨_com∑ª
(c⁄° *
a
, c⁄° *
b
)

512 c⁄° *c⁄° *
ß
, *c⁄° *
sb
;

514 
ß
 = 
a
;

515 
sb
 = 
b
;

521  
	`°rcﬁl
(*
ß
, *
sb
);

522 
	}
}

531 
	$showv¨scmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

533 
v¨
 **
vµ
;

534 
v¨
 *
vp
;

535 c⁄° *
s
;

536 c⁄° **
v¨s
;

537 
i
, 
n
;

542 
n
 = 0;

543 
vµ
 = 
v¨èb
; vµ < v¨èb + 
VTABSIZE
; vpp++) {

544 
vp
 = *
vµ
; vp; v∞vp->
√xt
) {

545 i‡(!(
vp
->
Êags
 & 
VUNSET
))

546 
n
++;

550 
INTOFF
;

551 
v¨s
 = 
	`ckmÆloc
(
n
 * (*vars));

552 
i
 = 0;

553 
vµ
 = 
v¨èb
; vµ < v¨èb + 
VTABSIZE
; vpp++) {

554 
vp
 = *
vµ
; vp; v∞vp->
√xt
) {

555 i‡(!(
vp
->
Êags
 & 
VUNSET
))

556 
v¨s
[
i
++] = 
vp
->
ãxt
;

560 
	`qs‹t
(
v¨s
, 
n
, (*v¨s), 
v¨_com∑ª
);

561 
i
 = 0; i < 
n
; i++) {

562 
s
 = 
v¨s
[
i
]; *s != '='; s++)

563 
	`out1c
(*
s
);

564 
	`out1c
('=');

565 
	`out1q°r
(
s
 + 1);

566 
	`out1c
('\n');

568 
	`ck‰ì
(
v¨s
);

569 
INTON
;

572 
	}
}

581 
	$exp‹tcmd
(
¨gc
, **
¨gv
)

583 
v¨
 **
vµ
;

584 
v¨
 *
vp
;

585 *
«me
;

586 *
p
;

587 *
cmd«me
;

588 
ch
, 
vÆues
;

589 
Êag
 = 
¨gv
[0][0] ='r'? 
VREADONLY
 : 
VEXPORT
;

591 
cmd«me
 = 
¨gv
[0];

592 
›åe£t
 = 
›töd
 = 1;

593 
›ãº
 = 0;

594 
vÆues
 = 0;

595 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "p")) != -1) {

596 
ch
) {

598 
vÆues
 = 1;

602 
	`îr‹
("unknow¿›ti⁄: -%c", 
›t›t
);

605 
¨gc
 -
›töd
;

606 
¨gv
 +
›töd
;

608 i‡(
vÆues
 && 
¨gc
 != 0)

609 
	`îr‹
("-pÑequiresÇoárguments");

610 i‡(
¨gc
 != 0) {

611 (
«me
 = *
¨gv
++Ë!
NULL
) {

612 i‡((
p
 = 
	`°rchr
(
«me
, '=')Ë!
NULL
) {

613 
p
++;

615 
vµ
 = 
	`hashv¨
(
«me
);

616 
vp
 = *
vµ
 ; v∞; v∞vp->
√xt
) {

617 i‡(
	`v¨equÆ
(
vp
->
ãxt
, 
«me
)) {

619 
vp
->
Êags
 |
Êag
;

620 i‡((
vp
->
Êags
 & 
VEXPORT
Ë&& 
	`loˇÀv¨
(vp->
ãxt
)) {

621 
	`ch™ge_ív
(
vp
->
ãxt
, 1);

622 (Ë
	`£éoˇÀ
(
LC_ALL
, "");

624 
found
;

628 
	`£tv¨
(
«me
, 
p
, 
Êag
);

629 
found
:;

632 
vµ
 = 
v¨èb
 ; vµ < v¨èb + 
VTABSIZE
 ; vpp++) {

633 
vp
 = *
vµ
 ; v∞; v∞vp->
√xt
) {

634 i‡(
vp
->
Êags
 & 
Êag
) {

635 i‡(
vÆues
) {

636 
	`out1°r
(
cmd«me
);

637 
	`out1c
(' ');

639 
p
 = 
vp
->
ãxt
 ; *p != '=' ;Ö++)

640 
	`out1c
(*
p
);

641 i‡(
vÆues
 && !(
vp
->
Êags
 & 
VUNSET
)) {

642 
	`out1c
('=');

643 
	`out1q°r
(
p
 + 1);

645 
	`out1c
('\n');

651 
	}
}

659 
	$loˇlcmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

661 *
«me
;

663 i‡(! 
	`ö_fun˘i⁄
())

664 
	`îr‹
("Not iná function");

665 (
«me
 = *
¨g±r
++Ë!
NULL
) {

666 
	`mkloˇl
(
«me
);

669 
	}
}

680 
	$mkloˇl
(*
«me
)

682 
loˇlv¨
 *
lvp
;

683 
v¨
 **
vµ
;

684 
v¨
 *
vp
;

686 
INTOFF
;

687 
lvp
 = 
	`ckmÆloc
( (
loˇlv¨
));

688 i‡(
«me
[0] == '-' &&Çame[1] == '\0') {

689 
lvp
->
ãxt
 = 
	`ckmÆloc
( 
›éi°
);

690 
	`mem˝y
(
lvp
->
ãxt
, 
›éi°
,  optlist);

691 
vp
 = 
NULL
;

693 
vµ
 = 
	`hashv¨
(
«me
);

694 
vp
 = *
vµ
 ; v∞&& ! 
	`v¨equÆ
(vp->
ãxt
, 
«me
Ë; v∞vp->
√xt
);

695 i‡(
vp
 =
NULL
) {

696 i‡(
	`°rchr
(
«me
, '='))

697 
	`£tv¨eq
(
	`ßve°r
(
«me
), 
VSTRFIXED
);

699 
	`£tv¨
(
«me
, 
NULL
, 
VSTRFIXED
);

700 
vp
 = *
vµ
;

701 
lvp
->
ãxt
 = 
NULL
;

702 
lvp
->
Êags
 = 
VUNSET
;

704 
lvp
->
ãxt
 = 
vp
->text;

705 
lvp
->
Êags
 = 
vp
->flags;

706 
vp
->
Êags
 |
VSTRFIXED
|
VTEXTFIXED
;

707 i‡(
	`°rchr
(
«me
, '='))

708 
	`£tv¨eq
(
	`ßve°r
(
«me
), 0);

711 
lvp
->
vp
 = vp;

712 
lvp
->
√xt
 = 
loˇlv¨s
;

713 
loˇlv¨s
 = 
lvp
;

714 
INTON
;

715 
	}
}

723 
	$p›loˇlv¨s
()

725 
loˇlv¨
 *
lvp
;

726 
v¨
 *
vp
;

728 (
lvp
 = 
loˇlv¨s
Ë!
NULL
) {

729 
loˇlv¨s
 = 
lvp
->
√xt
;

730 
vp
 = 
lvp
->vp;

731 i‡(
vp
 =
NULL
) {

732 
	`mem˝y
(
›éi°
, 
lvp
->
ãxt
,  optlist);

733 
	`ck‰ì
(
lvp
->
ãxt
);

734 } i‡((
lvp
->
Êags
 & (
VUNSET
|
VSTRFIXED
)) == VUNSET) {

735 ()
	`un£tv¨
(
vp
->
ãxt
);

737 i‡((
vp
->
Êags
 & 
VTEXTFIXED
) == 0)

738 
	`ck‰ì
(
vp
->
ãxt
);

739 
vp
->
Êags
 = 
lvp
->flags;

740 
vp
->
ãxt
 = 
lvp
->text;

742 
	`ck‰ì
(
lvp
);

744 
	}
}

748 
	$£tv¨cmd
(
¨gc
, **
¨gv
)

750 i‡(
¨gc
 <= 2)

751  
	`un£tcmd
(
¨gc
, 
¨gv
);

752 i‡(
¨gc
 == 3)

753 
	`£tv¨
(
¨gv
[1],árgv[2], 0);

755 
	`îr‹
("ListássignmentÇot implemented");

757 
	}
}

765 
	$un£tcmd
(
¨gc
 
__unu£d
, **
¨gv
 __unused)

767 **
≠
;

768 
i
;

769 
Êg_func
 = 0;

770 
Êg_v¨
 = 0;

771 
ªt
 = 0;

773 (
i
 = 
	`√xt›t
("vf")) != '\0') {

774 i‡(
i
 == 'f')

775 
Êg_func
 = 1;

777 
Êg_v¨
 = 1;

779 i‡(
Êg_func
 =0 && 
Êg_v¨
 == 0)

780 
Êg_v¨
 = 1;

782 
≠
 = 
¨g±r
; *ap ;áp++) {

783 i‡(
Êg_func
)

784 
ªt
 |
	`un£tfunc
(*
≠
);

785 i‡(
Êg_v¨
)

786 
ªt
 |
	`un£tv¨
(*
≠
);

788  
ªt
;

789 
	}
}

797 
	$un£tv¨
(c⁄° *
s
)

799 
v¨
 **
vµ
;

800 
v¨
 *
vp
;

802 
vµ
 = 
	`hashv¨
(
s
);

803 
vp
 = *
vµ
 ; v∞; vµ = &vp->
√xt
, vp = *vpp) {

804 i‡(
	`v¨equÆ
(
vp
->
ãxt
, 
s
)) {

805 i‡(
vp
->
Êags
 & 
VREADONLY
)

807 
INTOFF
;

808 i‡(*(
	`°rchr
(
vp
->
ãxt
, '=') + 1) != '\0')

809 
	`£tv¨
(
s
, 
nuŒ°r
, 0);

810 i‡((
vp
->
Êags
 & 
VEXPORT
Ë&& 
	`loˇÀv¨
(vp->
ãxt
)) {

811 
	`ch™ge_ív
(
s
, 0);

812 
	`£éoˇÀ
(
LC_ALL
, "");

814 
vp
->
Êags
 &~
VEXPORT
;

815 
vp
->
Êags
 |
VUNSET
;

816 i‡((
vp
->
Êags
 & 
VSTRFIXED
) == 0) {

817 i‡((
vp
->
Êags
 & 
VTEXTFIXED
) == 0)

818 
	`ck‰ì
(
vp
->
ãxt
);

819 *
vµ
 = 
vp
->
√xt
;

820 
	`ck‰ì
(
vp
);

822 
INTON
;

828 
	}
}

836 
v¨
 **

837 
	$hashv¨
(c⁄° *
p
)

839 
hashvÆ
;

841 
hashvÆ
 = ((Ë*
p
) << 4;

842 *
p
 && *p != '=')

843 
hashvÆ
 +(Ë*
p
++;

844  &
v¨èb
[
hashvÆ
 % 
VTABSIZE
];

845 
	}
}

856 
	$v¨equÆ
(c⁄° *
p
, c⁄° *
q
)

858 *
p
 =*
q
++) {

859 i‡(*
p
++ == '=')

862 i‡(*
p
 ='=' && *(
q
 - 1) == '\0')

865 
	}
}

	@sh/var.h

41 
	#VEXPORT
 0x01

	)

42 
	#VREADONLY
 0x02

	)

43 
	#VSTRFIXED
 0x04

	)

44 
	#VTEXTFIXED
 0x08

	)

45 
	#VSTACK
 0x10

	)

46 
	#VUNSET
 0x20

	)

47 
	#VNOFUNC
 0x40

	)

50 
	sv¨
 {

51 
v¨
 *
	m√xt
;

52 
	mÊags
;

53 *
	mãxt
;

54 (*
	mfunc
)(const *);

60 
	sloˇlv¨
 {

61 
loˇlv¨
 *
	m√xt
;

62 
v¨
 *
	mvp
;

63 
	mÊags
;

64 *
	mãxt
;

68 
loˇlv¨
 *
	gloˇlv¨s
;

70 
v¨
 
vifs
;

71 
v¨
 
vmaû
;

72 
v¨
 
vm∑th
;

73 
v¨
 
v∑th
;

74 
v¨
 
vµid
;

75 
v¨
 
vps1
;

76 
v¨
 
vps2
;

77 
v¨
 
vps4
;

78 #i‚de‡
NO_HISTORY


79 
v¨
 
vhi°size
;

88 
	#ifsvÆ
(Ë(
vifs
.
ãxt
 + 4)

	)

89 
	#ifs£t
(Ë((
vifs
.
Êags
 & 
VUNSET
Ë=0)

	)

90 
	#maûvÆ
(Ë(
vmaû
.
ãxt
 + 5)

	)

91 
	#m∑thvÆ
(Ë(
vm∑th
.
ãxt
 + 9)

	)

92 
	#∑thvÆ
(Ë(
v∑th
.
ãxt
 + 5)

	)

93 
	#ps1vÆ
(Ë(
vps1
.
ãxt
 + 4)

	)

94 
	#ps2vÆ
(Ë(
vps2
.
ãxt
 + 4)

	)

95 
	#ps4vÆ
(Ë(
vps4
.
ãxt
 + 4)

	)

96 
	#›tödvÆ
(Ë(
v›töd
.
ãxt
 + 7)

	)

97 #i‚de‡
NO_HISTORY


98 
	#hi°sizevÆ
(Ë(
vhi°size
.
ãxt
 + 9)

	)

101 
	#m∑th£t
(Ë((
vm∑th
.
Êags
 & 
VUNSET
Ë=0)

	)

103 
öôv¨
();

104 
£tv¨
(const *, const *, );

105 
£tv¨eq
(*, );

106 
	g°æi°
;

107 
li°£tv¨
(
°æi°
 *);

108 *
lookupv¨
(const *);

109 *
b…ölookup
(const *, );

110 **
ívú⁄mít
();

111 
showv¨scmd
(, **);

112 
exp‹tcmd
(, **);

113 
loˇlcmd
(, **);

114 
mkloˇl
(*);

115 
p›loˇlv¨s
();

116 
£tv¨cmd
(, **);

117 
un£tcmd
(, **);

118 
un£tv¨
(const *);

119 
£tv¨ß„
(const *, const *, );

	@sleep/sleep.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)sleep.c 8.3 (Berkeley) 4/2/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/sleep/sleep.c,v 1.20.10.2.4.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<˘y≥.h
>

45 
	~<îr.h
>

46 
	~<limôs.h
>

47 
	~<sig«l.h
>

48 
	~<°döt.h
>

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<time.h
>

53 
ußge
();

55 vﬁ©ûê
sig_©omic_t
 
	gªp‹t_ªque°ed
;

57 
	$ªp‹t_ªque°
(
signo
 
__unu£d
)

60 
ªp‹t_ªque°ed
 = 1;

61 
	}
}

64 
	$maö
(
¨gc
, *
¨gv
[])

66 
time•ec
 
time_to_¶ìp
;

67 
d
;

68 
time_t
 
‹igöÆ
;

69 
buf
[2];

71 i‡(
¨gc
 != 2)

72 
	`ußge
();

74 i‡(
	`ssˇnf
(
¨gv
[1], "%lf%1s", &
d
, 
buf
) != 1)

75 
	`ußge
();

76 i‡(
d
 > 
INT_MAX
)

77 
	`ußge
();

78 i‡(
d
 <= 0)

80 
‹igöÆ
 = 
time_to_¶ìp
.
tv_£c
 = (
time_t
)
d
;

81 
time_to_¶ìp
.
tv_n£c
 = 1e9 * (
d
 -Åime_to_¶ìp.
tv_£c
);

83 
	`sig«l
(
SIGINFO
, 
ªp‹t_ªque°
);

84 
	`«no¶ìp
(&
time_to_¶ìp
, &time_to_sleep) != 0) {

85 i‡(
ªp‹t_ªque°ed
) {

87 
	`w¨nx
("about %d second(s)Üeft out ofÅhe original %d",

88 ()
time_to_¶ìp
.
tv_£c
, ()
‹igöÆ
);

89 
ªp‹t_ªque°ed
 = 0;

94 
	}
}

97 
	$ußge
()

100 
	`Ârötf
(
°dîr
, "usage: sleep seconds\n");

101 
	`exô
(1);

102 
	}
}

	@stty/cchar.c

30 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)cchar.c 8.5 (Berkeley) 4/2/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/stty/cchar.c,v 1.14.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/ty≥s.h
>

40 
	~<îr.h
>

41 
	~<limôs.h
>

42 
	~<°ddef.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

46 
	~"°ty.h
"

47 
	~"exã∫.h
"

49 
c_cch¨
(const *, const *);

58 
cch¨
 
	gcch¨s1
[] = {

59 { "disˇrd", 
VDISCARD
, 
CDISCARD
 },

60 { "dsu•", 
VDSUSP
, 
CDSUSP
 },

61 { "eof", 
VEOF
, 
CEOF
 },

62 { "eﬁ", 
VEOL
, 
CEOL
 },

63 { "eﬁ2", 
VEOL2
, 
CEOL
 },

64 { "îa£", 
VERASE
, 
CERASE
 },

65 { "îa£2", 
VERASE2
, 
CERASE2
 },

66 { "öå", 
VINTR
, 
CINTR
 },

67 { "kûl", 
VKILL
, 
CKILL
 },

68 { " ext", 
VLNEXT
, 
CLNEXT
 },

69 { "mö", 
VMIN
, 
CMIN
 },

70 { "quô", 
VQUIT
, 
CQUIT
 },

71 { "ª¥öt", 
VREPRINT
, 
CREPRINT
 },

72 { "°¨t", 
VSTART
, 
CSTART
 },

73 { "°©us", 
VSTATUS
, 
CSTATUS
 },

74 { "°›", 
VSTOP
, 
CSTOP
 },

75 { "su•", 
VSUSP
, 
CSUSP
 },

76 { "time", 
VTIME
, 
CTIME
 },

77 { "wîa£", 
VWERASE
, 
CWERASE
 },

78 { 
NULL
, 0, 0},

81 
cch¨
 
	gcch¨s2
[] = {

82 { "brk", 
VEOL
, 
CEOL
 },

83 { "Êush", 
VDISCARD
, 
CDISCARD
 },

84 { "Ω∫t", 
VREPRINT
, 
CREPRINT
 },

85 { 
NULL
, 0, 0 },

89 
	$c_cch¨
(c⁄° *
a
, c⁄° *
b
)

92  (
	`°rcmp
(((c⁄° 
cch¨
 *)
a
)->
«me
, ((c⁄° cch¨ *)
b
)->name));

93 
	}
}

96 
	$c£¨ch
(***
¨gvp
, 
öfo
 *
ù
)

98 
cch¨
 *
˝
, 
tmp
;

99 
vÆ
;

100 *
¨g
, *
ï
, *
«me
;

102 
«me
 = **
¨gvp
;

104 
tmp
.
«me
 =Çame;

105 i‡(!(
˝
 = (
cch¨
 *)
	`b£¨ch
(&
tmp
, 
cch¨s1
,

106 (
cch¨s1
)/(
cch¨
) - 1, (cchar),

107 
c_cch¨
)Ë&& !(
˝
 = (
cch¨
 *)
	`b£¨ch
(&
tmp
, 
cch¨s2
,

108 (
cch¨s2
)/(
cch¨
) - 1, (cchar),

109 
c_cch¨
)))

112 
¨g
 = *++*
¨gvp
;

113 i‡(!
¨g
) {

114 
	`w¨nx
("›ti⁄Ñequúe†™árgumíà-- %s", 
«me
);

115 
	`ußge
();

118 
	#CHK
(
s
Ë(*
¨g
 =s[0] && !
	`°rcmp
◊rg, s))

	)

119 i‡(
	`CHK
("undef") || CHK("<undef>"))

120 
ù
->
t
.
c_cc
[
˝
->
sub
] = 
_POSIX_VDISABLE
;

121 i‡(
˝
->
sub
 =
VMIN
 || cp->sub =
VTIME
) {

122 
vÆ
 = 
	`°πﬁ
(
¨g
, &
ï
, 10);

123 i‡(
vÆ
 > 
UCHAR_MAX
) {

124 
	`w¨nx
("maximum option value is %d -- %s",

125 
UCHAR_MAX
, 
«me
);

126 
	`ußge
();

128 i‡(*
ï
 != '\0') {

129 
	`w¨nx
("›ti⁄Ñequúe†®numîi¯¨gumíà-- %s", 
«me
);

130 
	`ußge
();

132 
ù
->
t
.
c_cc
[
˝
->
sub
] = 
vÆ
;

133 } i‡(
¨g
[0] == '^')

134 
ù
->
t
.
c_cc
[
˝
->
sub
] = (
¨g
[1] == '?') ? 0177 :

135 (
¨g
[1] ='-'Ë? 
_POSIX_VDISABLE
 :árg[1] & 037;

137 
ù
->
t
.
c_cc
[
˝
->
sub
] = 
¨g
[0];

138 
ù
->
£t
 = 1;

140 
	}
}

	@stty/extern.h

33 
c_cch¨s
(const *, const *);

34 
c_modes
(const *, const *);

35 
c£¨ch
(***, 
öfo
 *);

36 
checkªdúe˘
();

37 
g¥öt
(
ãrmios
 *, 
wösize
 *, );

38 
gªad
(
ãrmios
 *, *);

39 
k£¨ch
(***, 
öfo
 *);

40 
m£¨ch
(***, 
öfo
 *);

41 
›éi°
();

42 
¥öt
(
ãrmios
 *, 
wösize
 *, , 
FMT
);

43 
ußge
();

45 
cch¨
 
cch¨s1
[], 
cch¨s2
[];

	@stty/gfmt.c

30 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)gfmt.c 8.6 (Berkeley) 4/2/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/stty/gfmt.c,v 1.21.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/ty≥s.h
>

40 
	~<îr.h
>

41 
	~<°dio.h
>

42 
	~<°rög.h
>

44 
	~"°ty.h
"

45 
	~"exã∫.h
"

47 
	$gîr
(c⁄° *
s
Ë
__dód2
;

50 
	$gîr
(c⁄° *
s
)

52 i‡(
s
)

53 
	`îrx
(1, "ûÀgÆ gfmt1 o±i⁄ -- %s", 
s
);

55 
	`îrx
(1, "illegal gfmt1 option");

56 
	}
}

59 
	$g¥öt
(
ãrmios
 *
ç
, 
wösize
 *
wp
 
__unu£d
, 
ldisc
 __unused)

61 
cch¨
 *
˝
;

63 ()
	`¥ötf
("gfmt1:cflag=%lx:iflag=%lx:lflag=%lx:oflag=%lx:",

64 (
u_l⁄g
)
ç
->
c_cÊag
, (u_l⁄gÈp->
c_iÊag
, (u_l⁄gÈp->
c_lÊag
,

65 (
u_l⁄g
)
ç
->
c_oÊag
);

66 
˝
 = 
cch¨s1
; cp->
«me
; ++cp)

67 ()
	`¥ötf
("%s=%x:", 
˝
->
«me
, 
ç
->
c_cc
[˝->
sub
]);

68 ()
	`¥ötf
("ispeed=%lu:ospeed=%lu\n",

69 (
u_l⁄g
)
	`cfgëi•ìd
(
ç
), (u_l⁄g)
	`cfgëo•ìd
(tp));

70 
	}
}

73 
	$gªad
(
ãrmios
 *
ç
, *
s
)

75 
cch¨
 *
˝
;

76 *
ï
, *
p
;

77 
tmp
;

79 i‡((
s
 = 
	`°rchr
(s, ':')Ë=
NULL
)

80 
	`gîr
(
NULL
);

81 ++
s
; s !
NULL
;) {

82 
p
 = 
	`°r£p
(&
s
, ":\0");

83 i‡(!
p
 || !*p)

85 i‡(!(
ï
 = 
	`°rchr
(
p
, '=')))

86 
	`gîr
(
p
);

87 *
ï
++ = '\0';

88 ()
	`ssˇnf
(
ï
, "%lx", (
u_l⁄g
 *)&
tmp
);

90 
	#CHK
(
s
Ë(*
p
 =s[0] && !
	`°rcmp
’, s))

	)

91 i‡(
	`CHK
("cflag")) {

92 
ç
->
c_cÊag
 = 
tmp
;

95 i‡(
	`CHK
("iflag")) {

96 
ç
->
c_iÊag
 = 
tmp
;

99 i‡(
	`CHK
("ispeed")) {

100 ()
	`ssˇnf
(
ï
, "%ld", &
tmp
);

101 
ç
->
c_i•ìd
 = 
tmp
;

104 i‡(
	`CHK
("lflag")) {

105 
ç
->
c_lÊag
 = 
tmp
;

108 i‡(
	`CHK
("oflag")) {

109 
ç
->
c_oÊag
 = 
tmp
;

112 i‡(
	`CHK
("ospeed")) {

113 ()
	`ssˇnf
(
ï
, "%ld", &
tmp
);

114 
ç
->
c_o•ìd
 = 
tmp
;

117 
˝
 = 
cch¨s1
; cp->
«me
 !
NULL
; ++cp)

118 i‡(
	`CHK
(
˝
->
«me
)) {

119 i‡(
˝
->
sub
 =
VMIN
 || cp->sub =
VTIME
)

120 ()
	`ssˇnf
(
ï
, "%ld", &
tmp
);

121 
ç
->
c_cc
[
˝
->
sub
] = 
tmp
;

124 i‡(
˝
->
«me
 =
NULL
)

125 
	`gîr
(
p
);

127 
	}
}

	@stty/key.c

30 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)key.c 8.3 (Berkeley) 4/2/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/stty/key.c,v 1.20.22.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/ty≥s.h
>

40 
	~<îr.h
>

41 
	~<î∫o.h
>

42 
	~<°dlib.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

46 
	~"°ty.h
"

47 
	~"exã∫.h
"

49 
__BEGIN_DECLS


50 
c_key
(const *, const *);

51 
f_Æl
(
öfo
 *);

52 
f_cbªak
(
öfo
 *);

53 
f_cﬁumns
(
öfo
 *);

54 
f_dec
(
öfo
 *);

55 
f_ek
(
öfo
 *);

56 
f_evîythög
(
öfo
 *);

57 
f_exçroc
(
öfo
 *);

58 
f_i•ìd
(
öfo
 *);

59 
f_∆
(
öfo
 *);

60 
f_o•ìd
(
öfo
 *);

61 
f_øw
(
öfo
 *);

62 
f_rows
(
öfo
 *);

63 
f_ß√
(
öfo
 *);

64 
f_size
(
öfo
 *);

65 
f_•ìd
(
öfo
 *);

66 
f_ây
(
öfo
 *);

67 
__END_DECLS


69 
	skey
 {

70 c⁄° *
	m«me
;

71 (*
	mf
)(
	möfo
 *);

72 
	#F_NEEDARG
 0x01

	)

73 
	#F_OFFOK
 0x02

	)

74 
	mÊags
;

75 } 
	gkeys
[] = {

76 { "Æl", 
f_Æl
, 0 },

77 { "cbªak", 
f_cbªak
, 
F_OFFOK
 },

78 { "cﬁs", 
f_cﬁumns
, 
F_NEEDARG
 },

79 { "cﬁumns", 
f_cﬁumns
, 
F_NEEDARG
 },

80 { "cooked", 
f_ß√
, 0 },

81 { "dec", 
f_dec
, 0 },

82 { "ek", 
f_ek
, 0 },

83 { "evîythög", 
f_evîythög
, 0 },

84 { "exçroc", 
f_exçroc
, 
F_OFFOK
 },

85 { "i•ìd", 
f_i•ìd
, 
F_NEEDARG
 },

86 { "√w", 
f_ây
, 0 },

87 { "∆", 
f_∆
, 
F_OFFOK
 },

88 { "ﬁd", 
f_ây
, 0 },

89 { "o•ìd", 
f_o•ìd
, 
F_NEEDARG
 },

90 { "øw", 
f_øw
, 
F_OFFOK
 },

91 { "rows", 
f_rows
, 
F_NEEDARG
 },

92 { "ß√", 
f_ß√
, 0 },

93 { "size", 
f_size
, 0 },

94 { "•ìd", 
f_•ìd
, 0 },

95 { "ây", 
f_ây
, 0 },

99 
	$c_key
(c⁄° *
a
, c⁄° *
b
)

102  (
	`°rcmp
(((c⁄° 
key
 *)
a
)->
«me
, ((c⁄° key *)
b
)->name));

103 
	}
}

106 
	$k£¨ch
(***
¨gvp
, 
öfo
 *
ù
)

108 *
«me
;

109 
key
 *
kp
, 
tmp
;

111 
«me
 = **
¨gvp
;

112 i‡(*
«me
 == '-') {

113 
ù
->
off
 = 1;

114 ++
«me
;

116 
ù
->
off
 = 0;

118 
tmp
.
«me
 =Çame;

119 i‡(!(
kp
 = (
key
 *)
	`b£¨ch
(&
tmp
, 
keys
,

120 (
keys
)/(
key
), (key), 
c_key
)))

122 i‡(!(
kp
->
Êags
 & 
F_OFFOK
Ë&& 
ù
->
off
) {

123 
	`w¨nx
("ûÀgÆ o±i⁄ -- -%s", 
«me
);

124 
	`ußge
();

126 i‡(
kp
->
Êags
 & 
F_NEEDARG
 && !(
ù
->
¨g
 = *++*
¨gvp
)) {

127 
	`w¨nx
("›ti⁄Ñequúe†™árgumíà-- %s", 
«me
);

128 
	`ußge
();

130 
kp
->
	`f
(
ù
);

132 
	}
}

135 
	$f_Æl
(
öfo
 *
ù
)

137 
	`¥öt
(&
ù
->
t
, &ù->
wö
, ip->
ldisc
, 
BSD
);

138 
	}
}

141 
	$f_cbªak
(
öfo
 *
ù
)

144 i‡(
ù
->
off
)

145 
	`f_ß√
(
ù
);

147 
ù
->
t
.
c_iÊag
 |
BRKINT
|
IXON
|
IMAXBEL
;

148 
ù
->
t
.
c_oÊag
 |
OPOST
;

149 
ù
->
t
.
c_lÊag
 |
ISIG
|
IEXTEN
;

150 
ù
->
t
.
c_lÊag
 &~
ICANON
;

151 
ù
->
£t
 = 1;

153 
	}
}

156 
	$f_cﬁumns
(
öfo
 *
ù
)

159 
ù
->
wö
.
ws_cﬁ
 = 
	`©oi
(ù->
¨g
);

160 
ù
->
w£t
 = 1;

161 
	}
}

164 
	$f_dec
(
öfo
 *
ù
)

167 
ù
->
t
.
c_cc
[
VERASE
] = (
u_ch¨
)0177;

168 
ù
->
t
.
c_cc
[
VKILL
] = 
	`CTRL
('u');

169 
ù
->
t
.
c_cc
[
VINTR
] = 
	`CTRL
('c');

170 
ù
->
t
.
c_lÊag
 &~
ECHOPRT
;

171 
ù
->
t
.
c_lÊag
 |
ECHOE
|
ECHOKE
|
ECHOCTL
;

172 
ù
->
t
.
c_iÊag
 &~
IXANY
;

173 
ù
->
£t
 = 1;

174 
	}
}

177 
	$f_ek
(
öfo
 *
ù
)

180 
ù
->
t
.
c_cc
[
VERASE
] = 
CERASE
;

181 
ù
->
t
.
c_cc
[
VKILL
] = 
CKILL
;

182 
ù
->
£t
 = 1;

183 
	}
}

186 
	$f_evîythög
(
öfo
 *
ù
)

189 
	`¥öt
(&
ù
->
t
, &ù->
wö
, ip->
ldisc
, 
BSD
);

190 
	}
}

193 
	$f_exçroc
(
öfo
 *
ù
)

196 i‡(
ù
->
off
) {

197 
tmp
 = 0;

198 ()
	`io˘l
(
ù
->
fd
, 
TIOCEXT
, &
tmp
);

200 
tmp
 = 1;

201 ()
	`io˘l
(
ù
->
fd
, 
TIOCEXT
, &
tmp
);

203 
	}
}

206 
	$f_i•ìd
(
öfo
 *
ù
)

209 
	`cf£ti•ìd
(&
ù
->
t
, (
•ìd_t
)
	`©oi
(ù->
¨g
));

210 
ù
->
£t
 = 1;

211 
	}
}

214 
	$f_∆
(
öfo
 *
ù
)

217 i‡(
ù
->
off
) {

218 
ù
->
t
.
c_iÊag
 |
ICRNL
;

219 
ù
->
t
.
c_oÊag
 |
ONLCR
;

221 
ù
->
t
.
c_iÊag
 &~
ICRNL
;

222 
ù
->
t
.
c_oÊag
 &~
ONLCR
;

224 
ù
->
£t
 = 1;

225 
	}
}

228 
	$f_o•ìd
(
öfo
 *
ù
)

231 
	`cf£to•ìd
(&
ù
->
t
, (
•ìd_t
)
	`©oi
(ù->
¨g
));

232 
ù
->
£t
 = 1;

233 
	}
}

236 
	$f_øw
(
öfo
 *
ù
)

239 i‡(
ù
->
off
)

240 
	`f_ß√
(
ù
);

242 
	`cfmakîaw
(&
ù
->
t
);

243 
ù
->
t
.
c_cÊag
 &~(
CSIZE
|
PARENB
);

244 
ù
->
t
.
c_cÊag
 |
CS8
;

245 
ù
->
£t
 = 1;

247 
	}
}

250 
	$f_rows
(
öfo
 *
ù
)

253 
ù
->
wö
.
ws_row
 = 
	`©oi
(ù->
¨g
);

254 
ù
->
w£t
 = 1;

255 
	}
}

258 
	$f_ß√
(
öfo
 *
ù
)

261 
ù
->
t
.
c_cÊag
 = 
TTYDEF_CFLAG
 | (ù->t.c_cÊag & 
CLOCAL
);

262 
ù
->
t
.
c_iÊag
 = 
TTYDEF_IFLAG
;

263 
ù
->
t
.
c_iÊag
 |
ICRNL
;

265 
	#LKEEP
 (
ECHOKE
|
ECHOE
|
ECHOK
|
ECHOPRT
|
ECHOCTL
|
ALTWERASE
|
TOSTOP
|
NOFLSH
)

	)

266 
ù
->
t
.
c_lÊag
 = 
TTYDEF_LFLAG
 | (ù->t.c_lÊag & 
LKEEP
);

267 
ù
->
t
.
c_oÊag
 = 
TTYDEF_OFLAG
;

268 
ù
->
£t
 = 1;

269 
	}
}

272 
	$f_size
(
öfo
 *
ù
)

275 ()
	`¥ötf
("%d %d\n", 
ù
->
wö
.
ws_row
, ip->wö.
ws_cﬁ
);

276 
	}
}

279 
	$f_•ìd
(
öfo
 *
ù
)

282 ()
	`¥ötf
("%lu\n", (
u_l⁄g
)
	`cfgëo•ìd
(&
ù
->
t
));

283 
	}
}

286 
	$f_ây
(
öfo
 *
ù
)

288 
tmp
;

290 
tmp
 = 
TTYDISC
;

291 i‡(
	`io˘l
(
ù
->
fd
, 
TIOCSETD
, &
tmp
) < 0)

292 
	`îr
(1, "TIOCSETD");

293 
	}
}

	@stty/modes.c

30 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)modes.c 8.3 (Berkeley) 4/2/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/stty/modes.c,v 1.14.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/ty≥s.h
>

39 
	~<°ddef.h
>

40 
	~<°rög.h
>

41 
	~"°ty.h
"

43 
m£¨ch
(***, 
öfo
 *);

45 
	smodes
 {

46 c⁄° *
	m«me
;

47 
	m£t
;

48 
	mun£t
;

55 
modes
 
	gcmodes
[] = {

56 { "cs5", 
CS5
, 
CSIZE
 },

57 { "cs6", 
CS6
, 
CSIZE
 },

58 { "cs7", 
CS7
, 
CSIZE
 },

59 { "cs8", 
CS8
, 
CSIZE
 },

60 { "c°›b", 
CSTOPB
, 0 },

61 { "-c°›b", 0, 
CSTOPB
 },

62 { "¸ód", 
CREAD
, 0 },

63 { "-¸ód", 0, 
CREAD
 },

64 { "∑ªnb", 
PARENB
, 0 },

65 { "-∑ªnb", 0, 
PARENB
 },

66 { "∑rodd", 
PARODD
, 0 },

67 { "-∑rodd", 0, 
PARODD
 },

68 { "∑rôy", 
PARENB
 | 
CS7
, 
PARODD
 | 
CSIZE
 },

69 { "-∑rôy", 
CS8
, 
PARODD
 | 
PARENB
 | 
CSIZE
 },

70 { "evíp", 
PARENB
 | 
CS7
, 
PARODD
 | 
CSIZE
 },

71 { "-evíp", 
CS8
, 
PARODD
 | 
PARENB
 | 
CSIZE
 },

72 { "oddp", 
PARENB
 | 
CS7
 | 
PARODD
, 
CSIZE
 },

73 { "-oddp", 
CS8
, 
PARODD
 | 
PARENB
 | 
CSIZE
 },

74 { "∑ss8", 
CS8
, 
PARODD
 | 
PARENB
 | 
CSIZE
 },

75 { "-∑ss8", 
PARENB
 | 
CS7
, 
PARODD
 | 
CSIZE
 },

76 { "hup˛", 
HUPCL
, 0 },

77 { "-hup˛", 0, 
HUPCL
 },

78 { "hup", 
HUPCL
, 0 },

79 { "-hup", 0, 
HUPCL
 },

80 { "˛oˇl", 
CLOCAL
, 0 },

81 { "-˛oˇl", 0, 
CLOCAL
 },

82 { "¸ts˘s", 
CRTSCTS
, 0 },

83 { "-¸ts˘s", 0, 
CRTSCTS
 },

84 { "˘sÊow", 
CCTS_OFLOW
, 0 },

85 { "-˘sÊow", 0, 
CCTS_OFLOW
 },

86 { "d§Êow", 
CDSR_OFLOW
, 0 },

87 { "-d§Êow", 0, 
CDSR_OFLOW
 },

88 { "dåÊow", 
CDTR_IFLOW
, 0 },

89 { "-dåÊow", 0, 
CDTR_IFLOW
 },

90 { "πsÊow", 
CRTS_IFLOW
, 0 },

91 { "-πsÊow", 0, 
CRTS_IFLOW
 },

92 { "mdmbuf", 
MDMBUF
, 0 },

93 { "-mdmbuf", 0, 
MDMBUF
 },

94 { 
NULL
, 0, 0 },

97 
modes
 
	gimodes
[] = {

98 { "ignbrk", 
IGNBRK
, 0 },

99 { "-ignbrk", 0, 
IGNBRK
 },

100 { "brköt", 
BRKINT
, 0 },

101 { "-brköt", 0, 
BRKINT
 },

102 { "ig≈¨", 
IGNPAR
, 0 },

103 { "-ig≈¨", 0, 
IGNPAR
 },

104 { "∑rmrk", 
PARMRK
, 0 },

105 { "-∑rmrk", 0, 
PARMRK
 },

106 { "öpck", 
INPCK
, 0 },

107 { "-öpck", 0, 
INPCK
 },

108 { "i°rù", 
ISTRIP
, 0 },

109 { "-i°rù", 0, 
ISTRIP
 },

110 { "öl¸", 
INLCR
, 0 },

111 { "-öl¸", 0, 
INLCR
 },

112 { "ign¸", 
IGNCR
, 0 },

113 { "-ign¸", 0, 
IGNCR
 },

114 { "i¸∆", 
ICRNL
, 0 },

115 { "-i¸∆", 0, 
ICRNL
 },

116 { "ix⁄", 
IXON
, 0 },

117 { "-ix⁄", 0, 
IXON
 },

118 { "Êow", 
IXON
, 0 },

119 { "-Êow", 0, 
IXON
 },

120 { "ixoff", 
IXOFF
, 0 },

121 { "-ixoff", 0, 
IXOFF
 },

122 { "èndem", 
IXOFF
, 0 },

123 { "-èndem", 0, 
IXOFF
 },

124 { "ix™y", 
IXANY
, 0 },

125 { "-ix™y", 0, 
IXANY
 },

126 { "dec˘lq", 0, 
IXANY
 },

127 { "-dec˘lq", 
IXANY
, 0 },

128 { "imaxbñ", 
IMAXBEL
, 0 },

129 { "-imaxbñ", 0, 
IMAXBEL
 },

130 { 
NULL
, 0, 0 },

133 
modes
 
	glmodes
[] = {

134 { "echo", 
ECHO
, 0 },

135 { "-echo", 0, 
ECHO
 },

136 { "ech€", 
ECHOE
, 0 },

137 { "-ech€", 0, 
ECHOE
 },

138 { "¸ãø£", 
ECHOE
, 0 },

139 { "-¸ãø£", 0, 
ECHOE
 },

140 { "¸tbs", 
ECHOE
, 0 },

141 { "-¸tbs", 0, 
ECHOE
 },

142 { "echok", 
ECHOK
, 0 },

143 { "-echok", 0, 
ECHOK
 },

144 { "echoke", 
ECHOKE
, 0 },

145 { "-echoke", 0, 
ECHOKE
 },

146 { "¸tkûl", 
ECHOKE
, 0 },

147 { "-¸tkûl", 0, 
ECHOKE
 },

148 { "Ætwîa£", 
ALTWERASE
, 0 },

149 { "-Ætwîa£", 0, 
ALTWERASE
 },

150 { "õxãn", 
IEXTEN
, 0 },

151 { "-õxãn", 0, 
IEXTEN
 },

152 { "ech⁄l", 
ECHONL
, 0 },

153 { "-ech⁄l", 0, 
ECHONL
 },

154 { "echo˘l", 
ECHOCTL
, 0 },

155 { "-echo˘l", 0, 
ECHOCTL
 },

156 { "˘Àcho", 
ECHOCTL
, 0 },

157 { "-˘Àcho", 0, 
ECHOCTL
 },

158 { "ech›π", 
ECHOPRT
, 0 },

159 { "-ech›π", 0, 
ECHOPRT
 },

160 { "¥ãø£", 
ECHOPRT
, 0 },

161 { "-¥ãø£", 0, 
ECHOPRT
 },

162 { "isig", 
ISIG
, 0 },

163 { "-isig", 0, 
ISIG
 },

164 { "iˇn⁄", 
ICANON
, 0 },

165 { "-iˇn⁄", 0, 
ICANON
 },

166 { "noÊsh", 
NOFLSH
, 0 },

167 { "-noÊsh", 0, 
NOFLSH
 },

168 { "to°›", 
TOSTOP
, 0 },

169 { "-to°›", 0, 
TOSTOP
 },

170 { "Êusho", 
FLUSHO
, 0 },

171 { "-Êusho", 0, 
FLUSHO
 },

172 { "≥ndö", 
PENDIN
, 0 },

173 { "-≥ndö", 0, 
PENDIN
 },

174 { "¸t", 
ECHOE
|
ECHOKE
|
ECHOCTL
, 
ECHOK
|
ECHOPRT
 },

175 { "-¸t", 
ECHOK
, 
ECHOE
|
ECHOKE
|
ECHOCTL
 },

176 { "√w¸t", 
ECHOE
|
ECHOKE
|
ECHOCTL
, 
ECHOK
|
ECHOPRT
 },

177 { "-√w¸t", 
ECHOK
, 
ECHOE
|
ECHOKE
|
ECHOCTL
 },

178 { "nokînöfo", 
NOKERNINFO
, 0 },

179 { "-nokînöfo",0, 
NOKERNINFO
 },

180 { "kînöfo", 0, 
NOKERNINFO
 },

181 { "-kînöfo", 
NOKERNINFO
, 0 },

182 { 
NULL
, 0, 0 },

185 
modes
 
	gomodes
[] = {

186 { "›o°", 
OPOST
, 0 },

187 { "-›o°", 0, 
OPOST
 },

188 { "lôout", 0, 
OPOST
 },

189 { "-lôout", 
OPOST
, 0 },

190 { "⁄l¸", 
ONLCR
, 0 },

191 { "-⁄l¸", 0, 
ONLCR
 },

192 { "o¸∆", 
OCRNL
, 0 },

193 { "-o¸∆", 0, 
OCRNL
 },

194 { "èbs", 
TAB0
, 
TABDLY
 },

195 { "-èbs", 
TAB3
, 
TABDLY
 },

196 { "oxèbs", 
TAB3
, 
TABDLY
 },

197 { "-oxèbs", 
TAB0
, 
TABDLY
 },

198 { "èb0", 
TAB0
, 
TABDLY
 },

199 { "èb3", 
TAB3
, 
TABDLY
 },

200 { "⁄o¸", 
ONOCR
, 0 },

201 { "-⁄o¸", 0, 
ONOCR
 },

202 { "⁄Ãë", 
ONLRET
, 0 },

203 { "-⁄Ãë", 0, 
ONLRET
 },

204 { 
NULL
, 0, 0 },

207 
	#CHK
(
s
Ë(*
«me
 =s[0] && !
	`°rcmp
“ame, s))

	)

210 
	$m£¨ch
(***
¨gvp
, 
öfo
 *
ù
)

212 
modes
 *
mp
;

213 *
«me
;

215 
«me
 = **
¨gvp
;

217 
mp
 = 
cmodes
; mp->
«me
; ++mp)

218 i‡(
	`CHK
(
mp
->
«me
)) {

219 
ù
->
t
.
c_cÊag
 &~
mp
->
un£t
;

220 
ù
->
t
.
c_cÊag
 |
mp
->
£t
;

221 
ù
->
£t
 = 1;

224 
mp
 = 
imodes
; mp->
«me
; ++mp)

225 i‡(
	`CHK
(
mp
->
«me
)) {

226 
ù
->
t
.
c_iÊag
 &~
mp
->
un£t
;

227 
ù
->
t
.
c_iÊag
 |
mp
->
£t
;

228 
ù
->
£t
 = 1;

231 
mp
 = 
lmodes
; mp->
«me
; ++mp)

232 i‡(
	`CHK
(
mp
->
«me
)) {

233 
ù
->
t
.
c_lÊag
 &~
mp
->
un£t
;

234 
ù
->
t
.
c_lÊag
 |
mp
->
£t
;

235 
ù
->
£t
 = 1;

238 
mp
 = 
omodes
; mp->
«me
; ++mp)

239 i‡(
	`CHK
(
mp
->
«me
)) {

240 
ù
->
t
.
c_oÊag
 &~
mp
->
un£t
;

241 
ù
->
t
.
c_oÊag
 |
mp
->
£t
;

242 
ù
->
£t
 = 1;

246 
	}
}

	@stty/print.c

30 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)print.c 8.6 (Berkeley) 4/16/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/stty/print.c,v 1.22.2.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/ty≥s.h
>

40 
	~<°ddef.h
>

41 
	~<°dio.h
>

42 
	~<°rög.h
>

44 
	~"°ty.h
"

45 
	~"exã∫.h
"

47 
böô
(const *);

48 
bput
(const *);

49 c⁄° *
ccvÆ
(
cch¨
 *, );

52 
	$¥öt
(
ãrmios
 *
ç
, 
wösize
 *
wp
, 
ldisc
, 
FMT
 
fmt
)

54 
cch¨
 *
p
;

55 
tmp
;

56 
u_ch¨
 *
cc
;

57 
˙t
, 
i•ìd
, 
o•ìd
;

58 
buf1
[100], 
buf2
[100];

60 
˙t
 = 0;

63 i‡(
ldisc
 !
TTYDISC
) {

64 
ldisc
) {

65 
SLIPDISC
:

66 
˙t
 +
	`¥ötf
("slip disc; ");

68 
PPPDISC
:

69 
˙t
 +
	`¥ötf
("ppp disc; ");

72 
˙t
 +
	`¥ötf
("#%d disc; ", 
ldisc
);

78 
i•ìd
 = 
	`cfgëi•ìd
(
ç
);

79 
o•ìd
 = 
	`cfgëo•ìd
(
ç
);

80 i‡(
i•ìd
 !
o•ìd
)

81 
˙t
 +=

82 
	`¥ötf
("i•ìd %d baud; o•ìd %d baud;", 
i•ìd
, 
o•ìd
);

84 
˙t
 +
	`¥ötf
("•ìd %d baud;", 
i•ìd
);

85 i‡(
fmt
 >
BSD
)

86 
˙t
 +
	`¥ötf
(" %dÑows; %d cﬁumns;", 
wp
->
ws_row
, wp->
ws_cﬁ
);

87 i‡(
˙t
)

88 ()
	`¥ötf
("\n");

90 
	#⁄
(
f
Ë((
tmp
 & (f)Ë!0)

	)

91 
	#put
(
n
, 
f
, 
d
) \

92 i‡(
fmt
 >
BSD
 || 
	`⁄
(
f
Ë!(
d
)) \

93 
	`bput
((
n
Ë+ 
	`⁄
(
f
));

	)

96 
tmp
 = 
ç
->
c_lÊag
;

97 
	`böô
("lflags");

98 
	`put
("-iˇn⁄", 
ICANON
, 1);

99 
	`put
("-isig", 
ISIG
, 1);

100 
	`put
("-õxãn", 
IEXTEN
, 1);

101 
	`put
("-echo", 
ECHO
, 1);

102 
	`put
("-ech€", 
ECHOE
, 0);

103 
	`put
("-echok", 
ECHOK
, 0);

104 
	`put
("-echoke", 
ECHOKE
, 0);

105 
	`put
("-ech⁄l", 
ECHONL
, 0);

106 
	`put
("-echo˘l", 
ECHOCTL
, 0);

107 
	`put
("-ech›π", 
ECHOPRT
, 0);

108 
	`put
("-Ætwîa£", 
ALTWERASE
, 0);

109 
	`put
("-noÊsh", 
NOFLSH
, 0);

110 
	`put
("-to°›", 
TOSTOP
, 0);

111 
	`put
("-Êusho", 
FLUSHO
, 0);

112 
	`put
("-≥ndö", 
PENDIN
, 0);

113 
	`put
("-nokînöfo", 
NOKERNINFO
, 0);

114 
	`put
("-exçroc", 
EXTPROC
, 0);

117 
tmp
 = 
ç
->
c_iÊag
;

118 
	`böô
("iflags");

119 
	`put
("-i°rù", 
ISTRIP
, 0);

120 
	`put
("-i¸∆", 
ICRNL
, 1);

121 
	`put
("-öl¸", 
INLCR
, 0);

122 
	`put
("-ign¸", 
IGNCR
, 0);

123 
	`put
("-ix⁄", 
IXON
, 1);

124 
	`put
("-ixoff", 
IXOFF
, 0);

125 
	`put
("-ix™y", 
IXANY
, 1);

126 
	`put
("-imaxbñ", 
IMAXBEL
, 1);

127 
	`put
("-ignbrk", 
IGNBRK
, 0);

128 
	`put
("-brköt", 
BRKINT
, 1);

129 
	`put
("-öpck", 
INPCK
, 0);

130 
	`put
("-ig≈¨", 
IGNPAR
, 0);

131 
	`put
("-∑rmrk", 
PARMRK
, 0);

134 
tmp
 = 
ç
->
c_oÊag
;

135 
	`böô
("oflags");

136 
	`put
("-›o°", 
OPOST
, 1);

137 
	`put
("-⁄l¸", 
ONLCR
, 1);

138 
	`put
("-o¸∆", 
OCRNL
, 0);

139 
tmp
&
TABDLY
) {

140 
TAB0
:

141 
	`bput
("tab0");

143 
TAB3
:

144 
	`bput
("tab3");

147 
	`put
("-⁄o¸", 
ONOCR
, 0);

148 
	`put
("-⁄Ãë", 
ONLRET
, 0);

151 
tmp
 = 
ç
->
c_cÊag
;

152 
	`böô
("cflags");

153 
	`put
("-¸ód", 
CREAD
, 1);

154 
tmp
&
CSIZE
) {

155 
CS5
:

156 
	`bput
("cs5");

158 
CS6
:

159 
	`bput
("cs6");

161 
CS7
:

162 
	`bput
("cs7");

164 
CS8
:

165 
	`bput
("cs8");

168 
	`bput
("-∑ªnb" + 
	`⁄
(
PARENB
));

169 
	`put
("-∑rodd", 
PARODD
, 0);

170 
	`put
("-hup˛", 
HUPCL
, 1);

171 
	`put
("-˛oˇl", 
CLOCAL
, 0);

172 
	`put
("-c°›b", 
CSTOPB
, 0);

173 
tmp
 & (
CCTS_OFLOW
 | 
CRTS_IFLOW
)) {

174 
CCTS_OFLOW
:

175 
	`bput
("ctsflow");

177 
CRTS_IFLOW
:

178 
	`bput
("rtsflow");

181 
	`put
("-¸ts˘s", 
CCTS_OFLOW
 | 
CRTS_IFLOW
, 0);

184 
	`put
("-d§Êow", 
CDSR_OFLOW
, 0);

185 
	`put
("-dåÊow", 
CDTR_IFLOW
, 0);

186 
	`put
("-mdmbuf", 
MDMBUF
, 0);

189 
cc
 = 
ç
->
c_cc
;

190 i‡(
fmt
 =
POSIX
) {

191 
	`böô
("cchars");

192 
p
 = 
cch¨s1
;Ö->
«me
; ++p) {

193 ()
	`¢¥ötf
(
buf1
, (buf1), "%s = %s;",

194 
p
->
«me
, 
	`ccvÆ
’, 
cc
[p->
sub
]));

195 
	`bput
(
buf1
);

197 
	`böô
(
NULL
);

199 
	`böô
(
NULL
);

200 
p
 = 
cch¨s1
, 
˙t
 = 0;Ö->
«me
; ++p) {

201 i‡(
fmt
 !
BSD
 && 
cc
[
p
->
sub
] =p->
def
)

203 
	#WD
 "%-8s"

	)

204 ()
	`¢¥ötf
(
buf1
 + 
˙t
 * 8, (buf1) - cnt * 8,

205 
WD
, 
p
->
«me
);

206 ()
	`¢¥ötf
(
buf2
 + 
˙t
 * 8, (buf2) - cnt * 8,

207 
WD
, 
	`ccvÆ
(
p
, 
cc
[p->
sub
]));

208 i‡(++
˙t
 =
LINELENGTH
 / 8) {

209 
˙t
 = 0;

210 ()
	`¥ötf
("%s\n", 
buf1
);

211 ()
	`¥ötf
("%s\n", 
buf2
);

214 i‡(
˙t
) {

215 ()
	`¥ötf
("%s\n", 
buf1
);

216 ()
	`¥ötf
("%s\n", 
buf2
);

219 
	}
}

221 
	gcﬁ
;

222 c⁄° *
	gœbñ
;

225 
	$böô
(c⁄° *
lb
)

228 i‡(
cﬁ
) {

229 ()
	`¥ötf
("\n");

230 
cﬁ
 = 0;

232 
œbñ
 = 
lb
;

233 
	}
}

236 
	$bput
(c⁄° *
s
)

239 i‡(
cﬁ
 == 0) {

240 
cﬁ
 = 
	`¥ötf
("%s: %s", 
œbñ
, 
s
);

243 i‡((
cﬁ
 + 
	`°æí
(
s
)Ë> 
LINELENGTH
) {

244 ()
	`¥ötf
("\n\t");

245 
cﬁ
 = 
	`¥ötf
("%s", 
s
) + 8;

248 
cﬁ
 +
	`¥ötf
(" %s", 
s
);

249 
	}
}

252 
	$ccvÆ
(
cch¨
 *
p
, 
c
)

254 
buf
[5];

255 *
bp
;

257 i‡(
p
->
sub
 =
VMIN
 ||Ö->sub =
VTIME
) {

258 ()
	`¢¥ötf
(
buf
, (buf), "%d", 
c
);

259  (
buf
);

261 i‡(
c
 =
_POSIX_VDISABLE
)

263 
bp
 = 
buf
;

264 i‡(
c
 & 0200) {

265 *
bp
++ = 'M';

266 *
bp
++ = '-';

267 
c
 &= 0177;

269 i‡(
c
 == 0177) {

270 *
bp
++ = '^';

271 *
bp
++ = '?';

273 i‡(
c
 < 040) {

274 *
bp
++ = '^';

275 *
bp
++ = 
c
 + '@';

278 *
bp
++ = 
c
;

279 *
bp
 = '\0';

280  (
buf
);

281 
	}
}

	@stty/stty.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)stty.c 8.3 (Berkeley) 4/2/94";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/stty/stty.c,v 1.23.22.2.2.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<sys/ty≥s.h
>

46 
	~<˘y≥.h
>

47 
	~<îr.h
>

48 
	~<î∫o.h
>

49 
	~<f˙é.h
>

50 
	~<°dio.h
>

51 
	~<°dlib.h
>

52 
	~<°rög.h
>

53 
	~<uni°d.h
>

55 
	~"°ty.h
"

56 
	~"exã∫.h
"

59 
	$maö
(
¨gc
, *
¨gv
[])

61 
öfo
 
i
;

62 
FMT
 
fmt
;

63 
ch
;

64 c⁄° *
fûe
;

66 
fmt
 = 
NOTSET
;

67 
i
.
fd
 = 
STDIN_FILENO
;

68 
fûe
 = "stdin";

70 
›ãº
 = 0;

71 
›töd
 < 
¨gc
 &&

72 
	`°r•n
(
¨gv
[
›töd
], "-´fg"Ë=
	`°æí
(argv[optind]) &&

73 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "aef:g")) != -1)

74 
ch
) {

76 
fmt
 = 
POSIX
;

79 
fmt
 = 
BSD
;

82 i‡((
i
.
fd
 = 
	`›í
(
›èrg
, 
O_RDONLY
 | 
O_NONBLOCK
)) < 0)

83 
	`îr
(1, "%s", 
›èrg
);

84 
fûe
 = 
›èrg
;

87 
fmt
 = 
GFLAG
;

91 
¨gs
;

94 
¨gs
: 
¨gc
 -
›töd
;

95 
¨gv
 +
›töd
;

97 i‡(
	`tcgë©å
(
i
.
fd
, &i.
t
) < 0)

98 
	`îrx
(1, "%†i¢'à®ãrmöÆ", 
fûe
);

99 i‡(
	`io˘l
(
i
.
fd
, 
TIOCGETD
, &i.
ldisc
) < 0)

100 
	`îr
(1, "TIOCGETD");

101 i‡(
	`io˘l
(
i
.
fd
, 
TIOCGWINSZ
, &i.
wö
) < 0)

102 
	`w¨n
("TIOCGWINSZ");

104 
	`checkªdúe˘
();

106 
fmt
) {

107 
NOTSET
:

108 i‡(*
¨gv
)

111 
BSD
:

112 
POSIX
:

113 
	`¥öt
(&
i
.
t
, &i.
wö
, i.
ldisc
, 
fmt
);

115 
GFLAG
:

116 
	`g¥öt
(&
i
.
t
, &i.
wö
, i.
ldisc
);

120 
i
.
£t
 = i.
w£t
 = 0; *
¨gv
; ++argv) {

121 i‡(
	`k£¨ch
(&
¨gv
, &
i
))

124 i‡(
	`c£¨ch
(&
¨gv
, &
i
))

127 i‡(
	`m£¨ch
(&
¨gv
, &
i
))

130 i‡(
	`isdigô
(**
¨gv
)) {

131 
•ìd_t
 
•ìd
;

133 
•ìd
 = 
	`©oi
(*
¨gv
);

134 
	`cf£to•ìd
(&
i
.
t
, 
•ìd
);

135 
	`cf£ti•ìd
(&
i
.
t
, 
•ìd
);

136 
i
.
£t
 = 1;

140 i‡(!
	`°∫cmp
(*
¨gv
, "gfmt1", ("gfmt1") - 1)) {

141 
	`gªad
(&
i
.
t
, *
¨gv
 + ("gfmt1") - 1);

142 
i
.
£t
 = 1;

146 
	`w¨nx
("ûÀgÆ o±i⁄ -- %s", *
¨gv
);

147 
	`ußge
();

150 i‡(
i
.
£t
 && 
	`tc£èâr
(i.
fd
, 0, &i.
t
) < 0)

151 
	`îr
(1, "tcsetattr");

152 i‡(
i
.
w£t
 && 
	`io˘l
(i.
fd
, 
TIOCSWINSZ
, &i.
wö
) < 0)

153 
	`w¨n
("TIOCSWINSZ");

154 
	`exô
(0);

155 
	}
}

158 
	$ußge
()

161 ()
	`Ârötf
(
°dîr
,

163 
	`exô
 (1);

164 
	}
}

	@stty/stty.h

33 
	~<sys/io˘l.h
>

34 
	~<ãrmios.h
>

36 
	söfo
 {

37 
	mfd
;

38 
	mldisc
;

39 
	moff
;

40 
	m£t
;

41 
	mw£t
;

42 c⁄° *
	m¨g
;

43 
ãrmios
 
	mt
;

44 
wösize
 
	mwö
;

47 
	scch¨
 {

48 c⁄° *
	m«me
;

49 
	msub
;

50 
u_ch¨
 
	mdef
;

53 
	eFMT
 { 
	mNOTSET
, 
	mGFLAG
, 
	mBSD
, 
	mPOSIX
 };

55 
	#LINELENGTH
 72

	)

	@stty/util.c

30 #i‚de‡
löt


32 
	gsccsid
[] = "@(#)util.c 8.3 (Berkeley) 4/2/94";

35 
	~<sys/cdefs.h
>

36 
__FBSDID
("$FreeBSD: src/bin/stty/util.c,v 1.11.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

38 
	~<sys/ty≥s.h
>

39 
	~<sys/°©.h
>

41 
	~<îr.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<uni°d.h
>

46 
	~"°ty.h
"

47 
	~"exã∫.h
"

56 
	$checkªdúe˘
()

58 
°©
 
sb1
, 
sb2
;

60 i‡(
	`ißây
(
STDOUT_FILENO
Ë&& ißây(
STDERR_FILENO
) &&

61 !
	`f°©
(
STDOUT_FILENO
, &
sb1
Ë&& !f°©(
STDERR_FILENO
, &
sb2
) &&

62 (
sb1
.
°_rdev
 !
sb2
.st_rdev))

63 
	`w¨nx
("stdoutáppearsÑedirected, but stdin isÅhe control descriptor");

64 
	}
}

	@sync/sync.c

31 #i‚de‡
löt


32 c⁄° 
	gc›yright
[] =

37 #i‚de‡
löt


38 
	gsccsid
[] = "@(#)sync.c 8.1 (Berkeley) 5/31/93";

41 
	~<sys/cdefs.h
>

42 
__FBSDID
("$FreeBSD: src/bin/sync/sync.c,v 1.16.22.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

44 
	~<°dlib.h
>

45 
	~<uni°d.h
>

48 
	$maö
(
¨gc
 
__unu£d
, *
¨gv
[] __unused)

50 
	`sync
();

51 
	`exô
(0);

52 
	}
}

	@test/test.c

17 
	~<sys/cdefs.h
>

18 
__FBSDID
("$FreeBSD: src/bin/test/test.c,v 1.54.2.3.2.1 2012/03/03 06:15:13 kensmith Exp $");

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

23 
	~<˘y≥.h
>

24 
	~<îr.h
>

25 
	~<î∫o.h
>

26 
	~<öây≥s.h
>

27 
	~<limôs.h
>

28 
	~<°d¨g.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<uni°d.h
>

34 #ifde‡
SHELL


35 
	#maö
 
ã°cmd


	)

36 
	~"b…ö/b…ö.h
"

38 
	~<loˇÀ.h
>

40 
	$îr‹
(c⁄° *, ...Ë
__dód2
 
	`__¥ötf0like
(1, 2);

43 
	$îr‹
(c⁄° *
msg
, ...)

45 
va_li°
 
≠
;

46 
	`va_°¨t
(
≠
, 
msg
);

47 
	`vîrx
(2, 
msg
, 
≠
);

49 
	`va_íd
(
≠
);

50 
	}
}

70 
	etokí
 {

71 
	mEOI
,

72 
	mFILRD
,

73 
	mFILWR
,

74 
	mFILEX
,

75 
	mFILEXIST
,

76 
	mFILREG
,

77 
	mFILDIR
,

78 
	mFILCDEV
,

79 
	mFILBDEV
,

80 
	mFILFIFO
,

81 
	mFILSOCK
,

82 
	mFILSYM
,

83 
	mFILGZ
,

84 
	mFILTT
,

85 
	mFILSUID
,

86 
	mFILSGID
,

87 
	mFILSTCK
,

88 
	mFILNT
,

89 
	mFILOT
,

90 
	mFILEQ
,

91 
	mFILUID
,

92 
	mFILGID
,

93 
	mSTREZ
,

94 
	mSTRNZ
,

95 
	mSTREQ
,

96 
	mSTRNE
,

97 
	mSTRLT
,

98 
	mSTRGT
,

99 
	mINTEQ
,

100 
	mINTNE
,

101 
	mINTGE
,

102 
	mINTGT
,

103 
	mINTLE
,

104 
	mINTLT
,

105 
	mUNOT
,

106 
	mBAND
,

107 
	mBOR
,

108 
	mLPAREN
,

109 
	mRPAREN
,

110 
	mOPERAND


113 
	etokí_ty≥s
 {

114 
	mUNOP
,

115 
	mBINOP
,

116 
	mBUNOP
,

117 
	mBBINOP
,

118 
	mPAREN


121 
	st_›
 {

122 c⁄° *
	m›_ãxt
;

123 
	m›_num
, 
	m›_ty≥
;

124 } c⁄° 
	g›s
 [] = {

125 {"-r", 
FILRD
, 
UNOP
},

126 {"-w", 
FILWR
, 
UNOP
},

127 {"-x", 
FILEX
, 
UNOP
},

128 {"-e", 
FILEXIST
,
UNOP
},

129 {"-f", 
FILREG
, 
UNOP
},

130 {"-d", 
FILDIR
, 
UNOP
},

131 {"-c", 
FILCDEV
,
UNOP
},

132 {"-b", 
FILBDEV
,
UNOP
},

133 {"-p", 
FILFIFO
,
UNOP
},

134 {"-u", 
FILSUID
,
UNOP
},

135 {"-g", 
FILSGID
,
UNOP
},

136 {"-k", 
FILSTCK
,
UNOP
},

137 {"-s", 
FILGZ
, 
UNOP
},

138 {"-t", 
FILTT
, 
UNOP
},

139 {"-z", 
STREZ
, 
UNOP
},

140 {"-n", 
STRNZ
, 
UNOP
},

141 {"-h", 
FILSYM
, 
UNOP
},

142 {"-O", 
FILUID
, 
UNOP
},

143 {"-G", 
FILGID
, 
UNOP
},

144 {"-L", 
FILSYM
, 
UNOP
},

145 {"-S", 
FILSOCK
,
UNOP
},

146 {"=", 
STREQ
, 
BINOP
},

147 {"==", 
STREQ
, 
BINOP
},

148 {"!=", 
STRNE
, 
BINOP
},

149 {"<", 
STRLT
, 
BINOP
},

150 {">", 
STRGT
, 
BINOP
},

151 {"-eq", 
INTEQ
, 
BINOP
},

152 {"-√", 
INTNE
, 
BINOP
},

153 {"-ge", 
INTGE
, 
BINOP
},

154 {"-gt", 
INTGT
, 
BINOP
},

155 {"-À", 
INTLE
, 
BINOP
},

156 {"-…", 
INTLT
, 
BINOP
},

157 {"-¡", 
FILNT
, 
BINOP
},

158 {"-Ÿ", 
FILOT
, 
BINOP
},

159 {"-ef", 
FILEQ
, 
BINOP
},

160 {"!", 
UNOT
, 
BUNOP
},

161 {"-a", 
BAND
, 
BBINOP
},

162 {"-o", 
BOR
, 
BBINOP
},

163 {"(", 
LPAREN
, 
PAREN
},

164 {")", 
RPAREN
, 
PAREN
},

168 
t_›
 c⁄° *
	gt_wp_›
;

169 
	g«rgc
;

170 **
	gt_wp
;

171 
	g∑ª∆evñ
;

173 
´x¥
(
tokí
);

174 
bö›
();

175 
equÆf
(const *, const *);

176 
fû°©
(*, 
tokí
);

177 
gën
(const *);

178 
ötmax_t
 
gëq
(const *);

179 
ötcmp
(const *, const *);

180 
isun››î™d
();

181 
i¶∑ªn›î™d
();

182 
i§∑ªn›î™d
();

183 
√wîf
(const *, const *);

184 
√x¥
(
tokí
);

185 
€x¥
(
tokí
);

186 
ﬁdîf
(const *, const *);

187 
¥im¨y
(
tokí
);

188 
sy¡ax
(const *, const *);

189 
tokí
 
t_Àx
(*);

192 
	$maö
(
¨gc
, **
¨gv
)

194 
ªs
;

195 *
p
;

197 i‡((
p
 = 
	`rödex
(
¨gv
[0], '/')Ë=
NULL
)

198 
p
 = 
¨gv
[0];

200 
p
++;

201 i‡(
	`°rcmp
(
p
, "[") == 0) {

202 i‡(
	`°rcmp
(
¨gv
[--
¨gc
], "]") != 0)

203 
	`îr‹
("missing ]");

204 
¨gv
[
¨gc
] = 
NULL
;

208 i‡(--
¨gc
 <= 0)

211 #i‚de‡
SHELL


212 ()
	`£éoˇÀ
(
LC_CTYPE
, "");

214 
«rgc
 = 
¨gc
;

215 
t_wp
 = &
¨gv
[1];

216 
∑ª∆evñ
 = 0;

217 i‡(
«rgc
 =4 && 
	`°rcmp
(*
t_wp
, "!") == 0) {

219 --
«rgc
;

220 ++
t_wp
;

221 
ªs
 = 
	`€x¥
(
	`t_Àx
(*
t_wp
));

223 
ªs
 = !
	`€x¥
(
	`t_Àx
(*
t_wp
));

225 i‡(--
«rgc
 > 0)

226 
	`sy¡ax
(*
t_wp
, "unexpected operator");

228  
ªs
;

229 
	}
}

232 
	$sy¡ax
(c⁄° *
›
, c⁄° *
msg
)

235 i‡(
›
 && *op)

236 
	`îr‹
("%s: %s", 
›
, 
msg
);

238 
	`îr‹
("%s", 
msg
);

239 
	}
}

242 
	$€x¥
(
tokí
 
n
)

244 
ªs
;

246 
ªs
 = 
	`´x¥
(
n
);

247 i‡(
	`t_Àx
(
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
Ë=
BOR
)

248  
	`€x¥
(
	`t_Àx
(
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
)) ||

249 
ªs
;

250 
t_wp
--;

251 
«rgc
++;

252  
ªs
;

253 
	}
}

256 
	$´x¥
(
tokí
 
n
)

258 
ªs
;

260 
ªs
 = 
	`√x¥
(
n
);

261 i‡(
	`t_Àx
(
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
Ë=
BAND
)

262  
	`´x¥
(
	`t_Àx
(
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
)) &&

263 
ªs
;

264 
t_wp
--;

265 
«rgc
++;

266  
ªs
;

267 
	}
}

270 
	$√x¥
(
tokí
 
n
)

272 i‡(
n
 =
UNOT
)

273  !
	`√x¥
(
	`t_Àx
(
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
));

274  
	`¥im¨y
(
n
);

275 
	}
}

278 
	$¥im¨y
(
tokí
 
n
)

280 
tokí
 
¬
;

281 
ªs
;

283 i‡(
n
 =
EOI
)

285 i‡(
n
 =
LPAREN
) {

286 
∑ª∆evñ
++;

287 i‡((
¬
 = 
	`t_Àx
(
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
)) ==

288 
RPAREN
) {

289 
∑ª∆evñ
--;

292 
ªs
 = 
	`€x¥
(
¬
);

293 i‡(
	`t_Àx
(
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
Ë!
RPAREN
)

294 
	`sy¡ax
(
NULL
, "closingÖarenÉxpected");

295 
∑ª∆evñ
--;

296  
ªs
;

298 i‡(
t_wp_›
 &&Å_wp_›->
›_ty≥
 =
UNOP
) {

300 i‡(--
«rgc
 == 0)

301 
	`sy¡ax
(
t_wp_›
->
›_ãxt
, "argumentÉxpected");

302 
n
) {

303 
STREZ
:

304  
	`°æí
(*++
t_wp
) == 0;

305 
STRNZ
:

306  
	`°æí
(*++
t_wp
) != 0;

307 
FILTT
:

308  
	`ißây
(
	`gën
(*++
t_wp
));

310  
	`fû°©
(*++
t_wp
, 
n
);

314 i‡(
	`t_Àx
(
«rgc
 > 0 ? 
t_wp
[1] : 
NULL
), 
t_wp_›
 &&Å_wp_›->
›_ty≥
 ==

315 
BINOP
) {

316  
	`bö›
();

319  
	`°æí
(*
t_wp
) > 0;

320 
	}
}

323 
	$bö›
()

325 c⁄° *
›nd1
, *
›nd2
;

326 
t_›
 c⁄° *
›
;

328 
›nd1
 = *
t_wp
;

329 (Ë
	`t_Àx
(
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
);

330 
›
 = 
t_wp_›
;

332 i‡((
›nd2
 = 
«rgc
 > 0 ? (--«rgc, *++
t_wp
Ë: 
NULL
) == NULL)

333 
	`sy¡ax
(
›
->
›_ãxt
, "argumentÉxpected");

335 
›
->
›_num
) {

336 
STREQ
:

337  
	`°rcmp
(
›nd1
, 
›nd2
) == 0;

338 
STRNE
:

339  
	`°rcmp
(
›nd1
, 
›nd2
) != 0;

340 
STRLT
:

341  
	`°rcmp
(
›nd1
, 
›nd2
) < 0;

342 
STRGT
:

343  
	`°rcmp
(
›nd1
, 
›nd2
) > 0;

344 
INTEQ
:

345  
	`ötcmp
(
›nd1
, 
›nd2
) == 0;

346 
INTNE
:

347  
	`ötcmp
(
›nd1
, 
›nd2
) != 0;

348 
INTGE
:

349  
	`ötcmp
(
›nd1
, 
›nd2
) >= 0;

350 
INTGT
:

351  
	`ötcmp
(
›nd1
, 
›nd2
) > 0;

352 
INTLE
:

353  
	`ötcmp
(
›nd1
, 
›nd2
) <= 0;

354 
INTLT
:

355  
	`ötcmp
(
›nd1
, 
›nd2
) < 0;

356 
FILNT
:

357  
	`√wîf
 (
›nd1
, 
›nd2
);

358 
FILOT
:

359  
	`ﬁdîf
 (
›nd1
, 
›nd2
);

360 
FILEQ
:

361  
	`equÆf
 (
›nd1
, 
›nd2
);

363 
	`ab‹t
();

366 
	}
}

369 
	$fû°©
(*
nm
, 
tokí
 
mode
)

371 
°©
 
s
;

373 i‡(
mode
 =
FILSYM
 ? 
	`l°©
(
nm
, &
s
Ë: 
	`°©
(nm, &s))

376 
mode
) {

377 
FILRD
:

378  (
	`óc˚ss
(
nm
, 
R_OK
) == 0);

379 
FILWR
:

380  (
	`óc˚ss
(
nm
, 
W_OK
) == 0);

381 
FILEX
:

383 i‡(
	`óc˚ss
(
nm
, 
X_OK
) != 0)

385 i‡(
	`S_ISDIR
(
s
.
°_mode
Ë|| 
	`gëeuid
() != 0)

387  (
s
.
°_mode
 & (
S_IXUSR
 | 
S_IXGRP
 | 
S_IXOTH
)) != 0;

388 
FILEXIST
:

389  (
	`óc˚ss
(
nm
, 
F_OK
) == 0);

390 
FILREG
:

391  
	`S_ISREG
(
s
.
°_mode
);

392 
FILDIR
:

393  
	`S_ISDIR
(
s
.
°_mode
);

394 
FILCDEV
:

395  
	`S_ISCHR
(
s
.
°_mode
);

396 
FILBDEV
:

397  
	`S_ISBLK
(
s
.
°_mode
);

398 
FILFIFO
:

399  
	`S_ISFIFO
(
s
.
°_mode
);

400 
FILSOCK
:

401  
	`S_ISSOCK
(
s
.
°_mode
);

402 
FILSYM
:

403  
	`S_ISLNK
(
s
.
°_mode
);

404 
FILSUID
:

405  (
s
.
°_mode
 & 
S_ISUID
) != 0;

406 
FILSGID
:

407  (
s
.
°_mode
 & 
S_ISGID
) != 0;

408 
FILSTCK
:

409  (
s
.
°_mode
 & 
S_ISVTX
) != 0;

410 
FILGZ
:

411  
s
.
°_size
 > (
off_t
)0;

412 
FILUID
:

413  
s
.
°_uid
 =
	`gëeuid
();

414 
FILGID
:

415  
s
.
°_gid
 =
	`gëegid
();

419 
	}
}

421 
tokí


422 
	$t_Àx
(*
s
)

424 
t_›
 c⁄° *
›
 = 
›s
;

426 i‡(
s
 == 0) {

427 
t_wp_›
 = 
NULL
;

428  
EOI
;

430 
›
->
›_ãxt
) {

431 i‡(
	`°rcmp
(
s
, 
›
->
›_ãxt
) == 0) {

432 i‡(((
›
->
›_ty≥
 =
UNOP
 || op->›_ty≥ =
BUNOP
)

433 && 
	`isun››î™d
()) ||

434 (
›
->
›_num
 =
LPAREN
 && 
	`i¶∑ªn›î™d
()) ||

435 (
›
->
›_num
 =
RPAREN
 && 
	`i§∑ªn›î™d
()))

437 
t_wp_›
 = 
›
;

438  
›
->
›_num
;

440 
›
++;

442 
t_wp_›
 = 
NULL
;

443  
OPERAND
;

444 
	}
}

447 
	$isun››î™d
()

449 
t_›
 c⁄° *
›
 = 
›s
;

450 *
s
;

451 *
t
;

453 i‡(
«rgc
 == 1)

455 
s
 = *(
t_wp
 + 1);

456 i‡(
«rgc
 == 2)

457  
∑ª∆evñ
 =1 && 
	`°rcmp
(
s
, ")") == 0;

458 
t
 = *(
t_wp
 + 2);

459 
›
->
›_ãxt
) {

460 i‡(
	`°rcmp
(
s
, 
›
->
›_ãxt
) == 0)

461  
›
->
›_ty≥
 =
BINOP
 &&

462 (
∑ª∆evñ
 =0 || 
t
[0] != ')' ||Å[1] != '\0');

463 
›
++;

466 
	}
}

469 
	$i¶∑ªn›î™d
()

471 
t_›
 c⁄° *
›
 = 
›s
;

472 *
s
;

474 i‡(
«rgc
 == 1)

476 
s
 = *(
t_wp
 + 1);

477 i‡(
«rgc
 == 2)

478  
∑ª∆evñ
 =1 && 
	`°rcmp
(
s
, ")") == 0;

479 i‡(
«rgc
 != 3)

481 
›
->
›_ãxt
) {

482 i‡(
	`°rcmp
(
s
, 
›
->
›_ãxt
) == 0)

483  
›
->
›_ty≥
 =
BINOP
;

484 
›
++;

487 
	}
}

490 
	$i§∑ªn›î™d
()

492 *
s
;

494 i‡(
«rgc
 == 1)

496 
s
 = *(
t_wp
 + 1);

497 i‡(
«rgc
 == 2)

498  
∑ª∆evñ
 =1 && 
	`°rcmp
(
s
, ")") == 0;

500 
	}
}

504 
	$gën
(c⁄° *
s
)

506 *
p
;

507 
r
;

509 
î∫o
 = 0;

510 
r
 = 
	`°πﬁ
(
s
, &
p
, 10);

512 i‡(
s
 =
p
)

513 
	`îr‹
("%s: badÇumbî", 
s
);

515 i‡(
î∫o
 != 0)

516 
	`îr‹
((
î∫o
 =
EINVAL
) ? "%s: badÇumber" :

517 "%s: ouào‡ønge", 
s
);

519 
	`is•a˚
(()*
p
))

520 
p
++;

522 i‡(*
p
)

523 
	`îr‹
("%s: badÇumbî", 
s
);

525  (Ë
r
;

526 
	}
}

529 
ötmax_t


530 
	$gëq
(c⁄° *
s
)

532 *
p
;

533 
ötmax_t
 
r
;

535 
î∫o
 = 0;

536 
r
 = 
	`°πoimax
(
s
, &
p
, 10);

538 i‡(
s
 =
p
)

539 
	`îr‹
("%s: badÇumbî", 
s
);

541 i‡(
î∫o
 != 0)

542 
	`îr‹
((
î∫o
 =
EINVAL
) ? "%s: badÇumber" :

543 "%s: ouào‡ønge", 
s
);

545 
	`is•a˚
(()*
p
))

546 
p
++;

548 i‡(*
p
)

549 
	`îr‹
("%s: badÇumbî", 
s
);

551  
r
;

552 
	}
}

555 
	$ötcmp
 (c⁄° *
s1
, c⁄° *
s2
)

557 
ötmax_t
 
q1
, 
q2
;

560 
q1
 = 
	`gëq
(
s1
);

561 
q2
 = 
	`gëq
(
s2
);

563 i‡(
q1
 > 
q2
)

566 i‡(
q1
 < 
q2
)

570 
	}
}

573 
	$√wîf
 (c⁄° *
f1
, c⁄° *
f2
)

575 
°©
 
b1
, 
b2
;

577 i‡(
	`°©
(
f1
, &
b1
Ë!0 || sèt(
f2
, &
b2
) != 0)

580 i‡(
b1
.
°_mtime•ec
.
tv_£c
 > 
b2
.st_mtimespec.tv_sec)

582 i‡(
b1
.
°_mtime•ec
.
tv_£c
 < 
b2
.st_mtimespec.tv_sec)

585  (
b1
.
°_mtime•ec
.
tv_n£c
 > 
b2
.st_mtimespec.tv_nsec);

586 
	}
}

589 
	$ﬁdîf
 (c⁄° *
f1
, c⁄° *
f2
)

591  (
	`√wîf
(
f2
, 
f1
));

592 
	}
}

595 
	$equÆf
 (c⁄° *
f1
, c⁄° *
f2
)

597 
°©
 
b1
, 
b2
;

599  (
	`°©
 (
f1
, &
b1
) == 0 &&

600 
	`°©
 (
f2
, &
b2
) == 0 &&

601 
b1
.
°_dev
 =
b2
.st_dev &&

602 
b1
.
°_öo
 =
b2
.st_ino);

603 
	}
}

	@uuidgen/uuidgen.c

28 
	~<sys/cdefs.h
>

29 
__FBSDID
("$FreeBSD: src/bin/uuidgen/uuidgen.c,v 1.3.30.1.8.1 2012/03/03 06:15:13 kensmith Exp $");

31 
	~<îr.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<uni°d.h
>

35 
	~<uuid.h
>

38 
	$ußge
()

40 ()
	`Ârötf
(
°dîr
, "usage: uuidgen [-1] [-n count] [-o filename]\n");

41 
	`exô
(1);

42 
	}
}

45 
	$maö
(
¨gc
, *
¨gv
[])

47 
FILE
 *
Â
;

48 
uuid_t
 *
°‹e
, *
uuid
;

49 *
p
;

50 
ch
, 
cou¡
, 
i
, 
ôî©e
;

52 
cou¡
 = -1;

53 
Â
 = 
°dout
;

54 
ôî©e
 = 0;

55 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "1n:o:")) != -1)

56 
ch
) {

58 
ôî©e
 = 1;

61 i‡(
cou¡
 > 0)

62 
	`ußge
();

63 
cou¡
 = 
	`°πﬁ
(
›èrg
, &
p
, 10);

64 i‡(*
p
 !0 || 
cou¡
 < 1)

65 
	`ußge
();

68 i‡(
Â
 !
°dout
)

69 
	`îrx
(1, "multiple output filesÇotállowed");

70 
Â
 = 
	`f›í
(
›èrg
, "w");

71 i‡(
Â
 =
NULL
)

72 
	`îr
(1, "fopen");

75 
	`ußge
();

77 
¨gv
 +
›töd
;

78 
¨gc
 -
›töd
;

80 i‡(
¨gc
)

81 
	`ußge
();

83 i‡(
cou¡
 == -1)

84 
cou¡
 = 1;

86 
°‹e
 = (
uuid_t
*)
	`mÆloc
((uuid_tË* 
cou¡
);

87 i‡(
°‹e
 =
NULL
)

88 
	`îr
(1, "malloc()");

90 i‡(!
ôî©e
) {

92 i‡(
	`uuidgí
(
°‹e
, 
cou¡
) != 0)

93 
	`îr
(1, "uuidgen()");

95 
uuid
 = 
°‹e
;

96 
i
 = 0; i < 
cou¡
; i++) {

97 i‡(
	`uuidgí
(
uuid
++, 1) != 0)

98 
	`îr
(1, "uuidgen()");

102 
uuid
 = 
°‹e
;

103 
cou¡
--) {

104 
	`uuid_to_°rög
(
uuid
++, &
p
, 
NULL
);

105 
	`Ârötf
(
Â
, "%s\n", 
p
);

106 
	`‰ì
(
p
);

109 
	`‰ì
(
°‹e
);

110 i‡(
Â
 !
°dout
)

111 
	`f˛o£
(
Â
);

113 
	}
}

	@/usr/include/alias.h

39 #i‚de‡
_ALIAS_H_


40 
	#_ALIAS_H_


	)

42 
	~<√töë/ö_sy°m.h
>

43 
	~<√töë/ö.h
>

44 
	~<√töë/ù.h
>

46 
	#LIBALIAS_BUF_SIZE
 128

	)

47 #ifdef 
_KERNEL


51 
	#NO_FW_PUNCH


	)

52 
	#NO_USE_SOCKETS


	)

74 
	glibÆüs
;

82 
	gÆüs_lök
;

85 
libÆüs
 *
LibAlüsInô
(libalias *);

86 
LibAlüsSëAddªss
(
libÆüs
 *, 
ö_addr
 
_addr
);

87 
LibAlüsSëFWBa£
(
libÆüs
 *, 
_ba£
, 
_num
);

88 
LibAlüsSëSkönyP‹t
(
libÆüs
 *, 
_p‹t
);

90 
LibAlüsSëMode
(
libÆüs
 *, 
_Êags
, 
_mask
);

91 
LibAlüsUnöô
(
libÆüs
 *);

94 
LibAlüsIn
 (
libÆüs
 *, *
_±r
, 
_max∑ckësize
);

95 
LibAlüsOut
(
libÆüs
 *, *
_±r
, 
_max∑ckësize
);

96 
LibAlüsOutTry
(
libÆüs
 *, *
_±r
, 
_max∑ckësize
, 
_¸óã
);

97 
LibAlüsU«lüsOut
(
libÆüs
 *, *
_±r
, 
_max∑ckësize
);

102 
LibAlüsAddSîvî
(
libÆüs
 *, 
Æüs_lök
 *
_ k
,

103 
ö_addr
 
_addr
, 
_p‹t
);

104 
Æüs_lök
 *

105 
LibAlüsRedúe˘Addr
(
libÆüs
 *, 
ö_addr
 
_§c_addr
,

106 
ö_addr
 
_Æüs_addr
);

107 
LibAlüsRedúe˘Dy«mic
(
libÆüs
 *, 
Æüs_lök
 *
_ k
);

108 
LibAlüsRedúe˘Dñëe
(
libÆüs
 *, 
Æüs_lök
 *
_ k
);

109 
Æüs_lök
 *

110 
LibAlüsRedúe˘P‹t
(
libÆüs
 *, 
ö_addr
 
_§c_addr
,

111 
_§c_p‹t
, 
ö_addr
 
_d°_addr
,

112 
_d°_p‹t
, 
ö_addr
 
_Æüs_addr
,

113 
_Æüs_p‹t
, 
_¥Ÿo
);

114 
Æüs_lök
 *

115 
LibAlüsRedúe˘PrŸo
(
libÆüs
 *, 
ö_addr
 
_§c_addr
,

116 
ö_addr
 
_d°_addr
, ö_add∏
_Æüs_addr
,

117 
_¥Ÿo
);

120 
LibAlüsFøgmítIn
(
libÆüs
 *, *
_±r
, *
_±r_‰agmít
);

121 *
LibAlüsGëFøgmít
(
libÆüs
 *, *
_±r
);

122 
LibAlüsSaveFøgmít
(
libÆüs
 *, *
_±r
);

125 
LibAlüsCheckNewLök
(
libÆüs
 *);

127 
LibAlüsI¡î√tChecksum
(
libÆüs
 *, *
_±r
, 
_nbyãs
);

128 
LibAlüsSëT¨gë
(
libÆüs
 *, 
ö_addr
 
_èrgë_addr
);

131 
LibAlüsProxyRuÀ
(
libÆüs
 *, c⁄° *
_cmd
);

134 
LibAlüsLﬂdModuÀ
(*);

135 
LibAlüsUnLﬂdAŒModuÀ
();

136 
LibAlüsRe‰eshModuÀs
();

139 
mbuf
 *
m_meg≠uŒup
(mbuf *, );

152 
	#PKT_ALIAS_LOG
 0x01

	)

158 
	#PKT_ALIAS_DENY_INCOMING
 0x02

	)

167 
	#PKT_ALIAS_SAME_PORTS
 0x04

	)

177 #i‚def 
NO_USE_SOCKETS


178 
	#PKT_ALIAS_USE_SOCKETS
 0x08

	)

189 
	#PKT_ALIAS_UNREGISTERED_ONLY
 0x10

	)

198 
	#PKT_ALIAS_RESET_ON_ADDR_CHANGE
 0x20

	)

200 #i‚de‡
NO_FW_PUNCH


208 
	#PKT_ALIAS_PUNCH_FW
 0x100

	)

215 
	#PKT_ALIAS_PROXY_ONLY
 0x40

	)

221 
	#PKT_ALIAS_REVERSE
 0x80

	)

227 
	#PKT_ALIAS_SKIP_GLOBAL
 0x200

	)

230 
	#PKT_ALIAS_ERROR
 -1

	)

231 
	#PKT_ALIAS_OK
 1

	)

232 
	#PKT_ALIAS_IGNORED
 2

	)

233 
	#PKT_ALIAS_UNRESOLVED_FRAGMENT
 3

	)

234 
	#PKT_ALIAS_FOUND_HEADER_FRAGMENT
 4

	)

	@/usr/include/assert.h

42 
	~<sys/cdefs.h
>

49 #unde‡
as£π


50 #unde‡
_as£π


52 #ifde‡
NDEBUG


53 
	#as£π
(
e
Ë(()0)

	)

54 
	#_as£π
(
e
Ë(()0)

	)

56 
	#_as£π
(
e
Ë
	`as£π
”)

	)

58 
	#as£π
(
e
Ë(”Ë? ()0 : 
	`__as£π
(
__func__
, 
__FILE__
, \

59 
__LINE__
, #e))

	)

62 #i‚de‡
_ASSERT_H_


63 
	#_ASSERT_H_


	)

64 
__BEGIN_DECLS


65 
	$__as£π
(c⁄° *, c⁄° *, , c⁄° *Ë
__dód2
;

66 
__END_DECLS


	@/usr/include/cpio.h

29 #i‚de‡
_CPIO_H_


30 
	#_CPIO_H_


	)

32 
	#C_ISSOCK
 0140000

	)

33 
	#C_ISLNK
 0120000

	)

34 
	#C_ISCTG
 0110000

	)

35 
	#C_ISREG
 0100000

	)

36 
	#C_ISBLK
 0060000

	)

37 
	#C_ISDIR
 0040000

	)

38 
	#C_ISCHR
 0020000

	)

39 
	#C_ISFIFO
 0010000

	)

40 
	#C_ISUID
 0004000

	)

41 
	#C_ISGID
 0002000

	)

42 
	#C_ISVTX
 0001000

	)

43 
	#C_IRUSR
 0000400

	)

44 
	#C_IWUSR
 0000200

	)

45 
	#C_IXUSR
 0000100

	)

46 
	#C_IRGRP
 0000040

	)

47 
	#C_IWGRP
 0000020

	)

48 
	#C_IXGRP
 0000010

	)

49 
	#C_IROTH
 0000004

	)

50 
	#C_IWOTH
 0000002

	)

51 
	#C_IXOTH
 0000001

	)

53 
	#MAGIC
 "070707"

	)

	@/usr/include/ctype.h

45 #i‚de‡
_CTYPE_H_


46 
	#_CTYPE_H_


	)

48 
	~<sys/cdefs.h
>

49 
	~<sys/_ty≥s.h
>

50 
	~<_˘y≥.h
>

52 
__BEGIN_DECLS


53 
iß um
();

54 
ißÕha
();

55 
is˙ål
();

56 
isdigô
();

57 
isgøph
();

58 
i¶owî
();

59 
i•röt
();

60 
i•un˘
();

61 
is•a˚
();

62 
isuµî
();

63 
isxdigô
();

64 
tﬁowî
();

65 
touµî
();

67 #i‡
__XSI_VISIBLE


68 
ißscii
();

69 
tﬂscii
();

72 #i‡
__ISO_C_VISIBLE
 >= 1999

73 
isbœnk
();

76 #i‡
__BSD_VISIBLE


77 
digôtoöt
();

78 
ishexnumbî
();

79 
isideogøm
();

80 
i¢umbî
();

81 
i•h⁄ogøm
();

82 
i§u√
();

83 
is•ecül
();

85 
	g__END_DECLS


87 
	#iß um
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_A
|
_CTYPE_D
)

	)

88 
	#ißÕha
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_A
)

	)

89 
	#is˙ål
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_C
)

	)

90 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_D
Ë

	)

91 
	#isgøph
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_G
)

	)

92 
	#i¶owî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_L
)

	)

93 
	#i•röt
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_R
)

	)

94 
	#i•un˘
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_P
)

	)

95 
	#is•a˚
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_S
)

	)

96 
	#isuµî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_U
)

	)

97 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_X
Ë

	)

98 
	#tﬁowî
(
c
Ë
	`__sbtﬁowî
(c)

	)

99 
	#touµî
(
c
Ë
	`__sbtouµî
(c)

	)

101 #i‡
__XSI_VISIBLE


113 
	#_tﬁowî
(
c
Ë
	`__sbtﬁowî
(c)

	)

114 
	#_touµî
(
c
Ë
	`__sbtouµî
(c)

	)

115 
	#ißscii
(
c
Ë(((cË& ~0x7FË=0)

	)

116 
	#tﬂscii
(
c
Ë((cË& 0x7F)

	)

119 #i‡
__ISO_C_VISIBLE
 >= 1999

120 
	#isbœnk
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_B
)

	)

123 #i‡
__BSD_VISIBLE


124 
	#digôtoöt
(
c
Ë
	`__sbmaskru√
((c), 0xFF)

	)

125 
	#ishexnumbî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_X
)

	)

126 
	#isideogøm
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_I
)

	)

127 
	#i¢umbî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_D
)

	)

128 
	#i•h⁄ogøm
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_Q
)

	)

129 
	#i§u√
(
c
Ë
	`__sbi°y≥
((c), 0xFFFFFF00L)

	)

130 
	#is•ecül
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_T
)

	)

	@/usr/include/dirent.h

37 #i‚de‡
_DIRENT_H_


38 
	#_DIRENT_H_


	)

44 
	~<sys/cdefs.h
>

45 
	~<sys/dúít.h
>

47 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE


52 
	#d_öo
 
d_fûío


	)

55 #i‡
__BSD_VISIBLE


57 
	~<sys/_nuŒ.h
>

60 
	#DIRBLKSIZ
 1024

	)

62 
	g_ãŒdú
;

63 
	g±hªad_muãx
;

66 
	s_dúdesc
 {

67 
	mdd_fd
;

68 
	mdd_loc
;

69 
	mdd_size
;

70 *
	mdd_buf
;

71 
	mdd_Àn
;

72 
	mdd_£ek
;

73 
	mdd_ªwöd
;

74 
	mdd_Êags
;

75 
±hªad_muãx
 *
	mdd_lock
;

76 
_ãŒdú
 *
	mdd_td
;

77 } 
	tDIR
;

79 
	#dúfd
(
dúp
Ë((dúp)->
dd_fd
)

	)

82 
	#DTF_HIDEW
 0x0001

	)

83 
	#DTF_NODUP
 0x0002

	)

84 
	#DTF_REWIND
 0x0004

	)

85 
	#__DTF_READALL
 0x0008

	)

89 * 
	tDIR
;

93 #i‚de‡
_KERNEL


95 
	g__BEGIN_DECLS


96 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE
 >= 700

97 
Æphas‹t
(c⁄° 
dúít
 **, const dirent **);

99 #i‡
__BSD_VISIBLE


100 
DIR
 *
__›ídú2
(const *, );

101 
gëdíts
(, *, );

102 
gëdúíåõs
(, *, , *);

104 
DIR
 *
›ídú
(const *);

105 
DIR
 *
fd›ídú
();

106 
dúít
 *

107 
ªaddú
(
DIR
 *);

108 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 500

109 
ªaddú_r
(
DIR
 *, 
dúít
 *, dirent **);

111 
ªwöddú
(
DIR
 *);

112 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE
 >= 700

113 
sˇndú
(c⁄° *, 
dúít
 ***,

114 (*)(c⁄° 
dúít
 *), (*)(const dirent **,

115 c⁄° 
dúít
 **));

117 #i‡
__XSI_VISIBLE


118 
	`£ekdú
(
DIR
 *, );

119 
	`ãŒdú
(
DIR
 *);

121 
	`˛o£dú
(
DIR
 *);

122 
__END_DECLS


	@/usr/include/dlfcn.h

36 #i‚de‡
_DLFCN_H_


37 
	#_DLFCN_H_


	)

39 
	~<sys/_ty≥s.h
>

44 
	#RTLD_LAZY
 1

	)

45 
	#RTLD_NOW
 2

	)

46 
	#RTLD_MODEMASK
 0x3

	)

47 
	#RTLD_GLOBAL
 0x100

	)

48 
	#RTLD_LOCAL
 0

	)

49 
	#RTLD_TRACE
 0x200

	)

50 
	#RTLD_NODELETE
 0x01000

	)

51 
	#RTLD_NOLOAD
 0x02000

	)

56 
	#RTLD_DI_LINKMAP
 2

	)

57 
	#RTLD_DI_SERINFO
 4

	)

58 
	#RTLD_DI_SERINFOSIZE
 5

	)

59 
	#RTLD_DI_ORIGIN
 6

	)

60 
	#RTLD_DI_MAX
 
RTLD_DI_ORIGIN


	)

65 
	#RTLD_NEXT
 ((*Ë-1Ë

	)

66 
	#RTLD_DEFAULT
 ((*Ë-2Ë

	)

67 
	#RTLD_SELF
 ((*Ë-3Ë

	)

69 #i‡
__BSD_VISIBLE


71 #i‚def 
_SIZE_T_DECLARED


72 
__size_t
 
	tsize_t
;

73 
	#_SIZE_T_DECLARED


	)

79 
	sdl_öfo
 {

80 c⁄° *
	mdli_‚ame
;

81 *
	mdli_fba£
;

82 c⁄° *
	mdli_¢ame
;

83 *
	mdli_ßddr
;

84 } 
	tDl_öfo
;

95 
	s__dlfunc_¨g
 {

96 
	m__dlfunc_dummy
;

99 (*
	tdlfunc_t
)(
	t__dlfunc_¨g
);

104 
	sdl_£Ω©h
 {

105 * 
dls_«me
;

106 
dls_Êags
;

107 } 
	tDl_£Ω©h
;

109 
	sdl_£röfo
 {

110 
size_t
 
dls_size
;

111 
dls_˙t
;

112 
Dl_£Ω©h
 
dls_£Ω©h
[1];

113 } 
	tDl_£röfo
;

117 
__BEGIN_DECLS


119 
	`dl˛o£
(*);

120 *
	`dÀº‹
();

121 *
	`dl›í
(const *, );

122 *
	`dlsym
(* 
__ª°ri˘
, const * __restrict);

124 #i‡
__BSD_VISIBLE


125 
	`dœddr
(c⁄° * 
__ª°ri˘
, 
Dl_öfo
 * __restrict);

126 
dlfunc_t
 
	`dlfunc
(* 
__ª°ri˘
, const * __restrict);

127 
	`dlöfo
(* 
__ª°ri˘
, , * __restrict);

128 
	`dŒocköô
(*
_c⁄ãxt
,

129 *(*
_lock_¸óã
)(*
_c⁄ãxt
),

130 (*
_æock_acquúe
)(*
_lock
),

131 (*
_wlock_acquúe
)(*
_lock
),

132 (*
_lock_ªÀa£
)(*
_lock
),

133 (*
_lock_de°roy
)(*
_lock
),

134 (*
_c⁄ãxt_de°roy
)(*
_c⁄ãxt
));

135 *
	`dlvsym
(* 
__ª°ri˘
, const * __restrict,

136 c⁄° * 
__ª°ri˘
);

138 
__END_DECLS


	@/usr/include/err.h

37 #i‚de‡
_ERR_H_


38 
	#_ERR_H_


	)

47 
	~<sys/cdefs.h
>

48 
	~<sys/_ty≥s.h
>

50 
__BEGIN_DECLS


51 
	$îr
(, c⁄° *, ...Ë
__dód2
 
	`__¥ötf0like
(2, 3);

52 
	$vîr
(, c⁄° *, 
__va_li°
Ë
__dód2
 
	`__¥ötf0like
(2, 0);

53 
	$îrc
(, , c⁄° *, ...Ë
__dód2
 
	`__¥ötf0like
(3, 4);

54 
	$vîrc
(, , c⁄° *, 
__va_li°
Ë
__dód2


55 
	`__¥ötf0like
(3, 0);

56 
	$îrx
(, c⁄° *, ...Ë
__dód2
 
	`__¥ötf0like
(2, 3);

57 
	$vîrx
(, c⁄° *, 
__va_li°
Ë
__dód2
 
	`__¥ötf0like
(2, 0);

58 
	$w¨n
(c⁄° *, ...Ë
	`__¥ötf0like
(1, 2);

59 
	$vw¨n
(c⁄° *, 
__va_li°
Ë
	`__¥ötf0like
(1, 0);

60 
	$w¨nc
(, c⁄° *, ...Ë
	`__¥ötf0like
(2, 3);

61 
	$vw¨nc
(, c⁄° *, 
__va_li°
Ë
	`__¥ötf0like
(2, 0);

62 
	$w¨nx
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

63 
	$vw¨nx
(c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

64 
	`îr_£t_fûe
(*);

65 
	`îr_£t_exô
((*)());

66 
__END_DECLS


	@/usr/include/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

171 
	#EBADMSG
 89

	)

172 
	#EMULTIHOP
 90

	)

173 
	#ENOLINK
 91

	)

174 
	#EPROTO
 92

	)

176 #i‚de‡
_POSIX_SOURCE


177 
	#ENOTCAPABLE
 93

	)

180 #i‚de‡
_POSIX_SOURCE


181 
	#ELAST
 93

	)

184 #ifde‡
_KERNEL


186 
	#ERESTART
 (-1Ë

	)

187 
	#EJUSTRETURN
 (-2Ë

	)

188 
	#ENOIOCTL
 (-3Ë

	)

189 
	#EDIRIOCTL
 (-4Ë

	)

	@/usr/include/fcntl.h

38 #i‚de‡
_SYS_FCNTL_H_


39 
	#_SYS_FCNTL_H_


	)

47 
	~<sys/cdefs.h
>

48 
	~<sys/_ty≥s.h
>

50 #i‚de‡
_MODE_T_DECLARED


51 
__mode_t
 
	tmode_t
;

52 
	#_MODE_T_DECLARED


	)

55 #i‚de‡
_OFF_T_DECLARED


56 
__off_t
 
	toff_t
;

57 
	#_OFF_T_DECLARED


	)

60 #i‚de‡
_PID_T_DECLARED


61 
__pid_t
 
	tpid_t
;

62 
	#_PID_T_DECLARED


	)

73 
	#O_RDONLY
 0x0000

	)

74 
	#O_WRONLY
 0x0001

	)

75 
	#O_RDWR
 0x0002

	)

76 
	#O_ACCMODE
 0x0003

	)

86 #i‡
__BSD_VISIBLE


87 
	#FREAD
 0x0001

	)

88 
	#FWRITE
 0x0002

	)

90 
	#O_NONBLOCK
 0x0004

	)

91 
	#O_APPEND
 0x0008

	)

92 #i‡
__BSD_VISIBLE


93 
	#O_SHLOCK
 0x0010

	)

94 
	#O_EXLOCK
 0x0020

	)

95 
	#O_ASYNC
 0x0040

	)

96 
	#O_FSYNC
 0x0080

	)

98 
	#O_SYNC
 0x0080

	)

99 #i‡
__BSD_VISIBLE


100 
	#O_NOFOLLOW
 0x0100

	)

102 
	#O_CREAT
 0x0200

	)

103 
	#O_TRUNC
 0x0400

	)

104 
	#O_EXCL
 0x0800

	)

105 #ifde‡
_KERNEL


106 
	#FHASLOCK
 0x4000

	)

110 
	#O_NOCTTY
 0x8000

	)

112 #i‡
__BSD_VISIBLE


114 
	#O_DIRECT
 0x00010000

	)

118 #i‡
__BSD_VISIBLE


119 
	#O_DIRECTORY
 0x00020000

	)

120 
	#O_EXEC
 0x00040000

	)

122 #ifdef 
_KERNEL


123 
	#FEXEC
 
O_EXEC


	)

126 #i‡
__POSIX_VISIBLE
 >= 200809

128 
	#O_TTY_INIT
 0x00080000

	)

130 
	#O_CLOEXEC
 0x00100000

	)

137 #ifde‡
_KERNEL


139 
	#FFLAGS
(
oÊags
Ë((oÊagsË+ 1)

	)

140 
	#OFLAGS
(
fÊags
Ë((fÊagsË- 1)

	)

143 
	#FMASK
 (
FREAD
|
FWRITE
|
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
O_DIRECT
|
FEXEC
)

	)

145 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FRDAHEAD
|
O_DIRECT
)

	)

147 #i‡
deföed
(
COMPAT_FREEBSD7
Ë|| deföed(
COMPAT_FREEBSD6
) || \

148 
deföed
(
COMPAT_FREEBSD5
Ë|| 
	$deföed
(
COMPAT_FREEBSD4
)

154 
	#FPOSIXSHM
 
O_NOFOLLOW


	)

155 #unde‡
FCNTLFLAGS


156 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FPOSIXSHM
|
FRDAHEAD
| \

157 
O_DIRECT
)

	)

166 #i‡
__BSD_VISIBLE


167 
	#FAPPEND
 
O_APPEND


	)

168 
	#FASYNC
 
O_ASYNC


	)

169 
	#FFSYNC
 
O_FSYNC


	)

170 
	#FNONBLOCK
 
O_NONBLOCK


	)

171 
	#FNDELAY
 
O_NONBLOCK


	)

172 
	#O_NDELAY
 
O_NONBLOCK


	)

181 #i‡
__BSD_VISIBLE


183 
	#FRDAHEAD
 
O_CREAT


	)

187 #i‡
__BSD_VISIBLE


193 
	#AT_FDCWD
 -100

	)

198 
	#AT_EACCESS
 0x100

	)

199 
	#AT_SYMLINK_NOFOLLOW
 0x200

	)

200 
	#AT_SYMLINK_FOLLOW
 0x400

	)

201 
	#AT_REMOVEDIR
 0x800

	)

209 
	#F_DUPFD
 0

	)

210 
	#F_GETFD
 1

	)

211 
	#F_SETFD
 2

	)

212 
	#F_GETFL
 3

	)

213 
	#F_SETFL
 4

	)

214 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

215 
	#F_GETOWN
 5

	)

216 
	#F_SETOWN
 6

	)

218 
	#F_OGETLK
 7

	)

219 
	#F_OSETLK
 8

	)

220 
	#F_OSETLKW
 9

	)

221 
	#F_DUP2FD
 10

	)

222 
	#F_GETLK
 11

	)

223 
	#F_SETLK
 12

	)

224 
	#F_SETLKW
 13

	)

225 
	#F_SETLK_REMOTE
 14

	)

226 
	#F_READAHEAD
 15

	)

227 
	#F_RDAHEAD
 16

	)

230 
	#FD_CLOEXEC
 1

	)

233 
	#F_RDLCK
 1

	)

234 
	#F_UNLCK
 2

	)

235 
	#F_WRLCK
 3

	)

236 
	#F_UNLCKSYS
 4

	)

237 
	#F_CANCEL
 5

	)

238 #ifde‡
_KERNEL


239 
	#F_WAIT
 0x010

	)

240 
	#F_FLOCK
 0x020

	)

241 
	#F_POSIX
 0x040

	)

242 
	#F_REMOTE
 0x080

	)

243 
	#F_NOINTR
 0x100

	)

250 
	sÊock
 {

251 
off_t
 
l_°¨t
;

252 
off_t
 
l_Àn
;

253 
pid_t
 
l_pid
;

254 
l_ty≥
;

255 
l_whí˚
;

256 
l_sysid
;

263 
	soÊock
 {

264 
off_t
 
l_°¨t
;

265 
off_t
 
l_Àn
;

266 
pid_t
 
l_pid
;

267 
l_ty≥
;

268 
l_whí˚
;

272 #i‡
__BSD_VISIBLE


274 
	#LOCK_SH
 0x01

	)

275 
	#LOCK_EX
 0x02

	)

276 
	#LOCK_NB
 0x04

	)

277 
	#LOCK_UN
 0x08

	)

280 #i‡
__POSIX_VISIBLE
 >= 200112

284 
	#POSIX_FADV_NORMAL
 0

	)

285 
	#POSIX_FADV_RANDOM
 1

	)

286 
	#POSIX_FADV_SEQUENTIAL
 2

	)

287 
	#POSIX_FADV_WILLNEED
 3

	)

288 
	#POSIX_FADV_DONTNEED
 4

	)

289 
	#POSIX_FADV_NOREUSE
 5

	)

292 #i‚de‡
_KERNEL


293 
__BEGIN_DECLS


294 
	`›í
(const *, , ...);

295 
	`¸ót
(c⁄° *, 
mode_t
);

296 
	`f˙é
(, , ...);

297 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

298 
	`›í©
(, const *, , ...);

300 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

301 
	`posix_Ádvi£
(, 
off_t
, off_t, );

302 
	`posix_ÁŒoˇã
(, 
off_t
, off_t);

304 #i‡
__BSD_VISIBLE


305 
	`Êock
(, );

307 
__END_DECLS


	@/usr/include/fts.h

37 #i‚def 
_FTS_H_


38 
	#_FTS_H_


	)

41 
_·£¡
 *
	m·s_cur
;

42 
_·£¡
 *
	m·s_chûd
;

43 
_·£¡
 **
	m·s_¨øy
;

44 
dev_t
 
	m·s_dev
;

45 *
	m·s_∑th
;

46 
	m·s_rfd
;

47 
size_t
 
	m·s_∑thÀn
;

48 
size_t
 
	m·s_nôems
;

49 (*
	m·s_com∑r
)

50 (c⁄° 
_·£¡
 * const *, const _ftsent * const *);

52 
	#FTS_COMFOLLOW
 0x001

	)

53 
	#FTS_LOGICAL
 0x002

	)

54 
	#FTS_NOCHDIR
 0x004

	)

55 
	#FTS_NOSTAT
 0x008

	)

56 
	#FTS_PHYSICAL
 0x010

	)

57 
	#FTS_SEEDOT
 0x020

	)

58 
	#FTS_XDEV
 0x040

	)

59 
	#FTS_WHITEOUT
 0x080

	)

60 
	#FTS_OPTIONMASK
 0x0f‡

	)

62 
	#FTS_NAMEONLY
 0x100

	)

63 
	#FTS_STOP
 0x200

	)

64 
	m·s_›ti⁄s
;

65 *
	m·s_˛õ¡±r
;

66 } 
	tFTS
;

68 
	s_·£¡
 {

69 
_·£¡
 *
	m·s_cy˛e
;

70 
_·£¡
 *
	m·s_∑ª¡
;

71 
_·£¡
 *
	m·s_lök
;

72 
	m·s_numbî
;

73 
	#·s_bignum
 
·s_numbî


	)

74 *
	m·s_poöãr
;

75 *
	m·s_ac˝©h
;

76 *
	m·s_∑th
;

77 
	m·s_î∫o
;

78 
	m·s_symfd
;

79 
size_t
 
	m·s_∑thÀn
;

80 
size_t
 
	m·s_«mñí
;

82 
öo_t
 
	m·s_öo
;

83 
dev_t
 
	m·s_dev
;

84 
∆ök_t
 
	m·s_∆ök
;

86 
	#FTS_ROOTPARENTLEVEL
 -1

	)

87 
	#FTS_ROOTLEVEL
 0

	)

88 
	m·s_Àvñ
;

90 
	#FTS_D
 1

	)

91 
	#FTS_DC
 2

	)

92 
	#FTS_DEFAULT
 3

	)

93 
	#FTS_DNR
 4

	)

94 
	#FTS_DOT
 5

	)

95 
	#FTS_DP
 6

	)

96 
	#FTS_ERR
 7

	)

97 
	#FTS_F
 8

	)

98 
	#FTS_INIT
 9

	)

99 
	#FTS_NS
 10

	)

100 
	#FTS_NSOK
 11

	)

101 
	#FTS_SL
 12

	)

102 
	#FTS_SLNONE
 13

	)

103 
	#FTS_W
 14

	)

104 
	m·s_öfo
;

106 
	#FTS_DONTCHDIR
 0x01

	)

107 
	#FTS_SYMFOLLOW
 0x02

	)

108 
	#FTS_ISW
 0x04

	)

109 
	m·s_Êags
;

111 
	#FTS_AGAIN
 1

	)

112 
	#FTS_FOLLOW
 2

	)

113 
	#FTS_NOINSTR
 3

	)

114 
	#FTS_SKIP
 4

	)

115 
	m·s_ö°r
;

117 
°©
 *
	m·s_°©p
;

118 *
	m·s_«me
;

119 
FTS
 *
	m·s_·s
;

120 } 
	tFTSENT
;

122 
	~<sys/cdefs.h
>

124 
__BEGIN_DECLS


125 
FTSENT
 *
·s_chûdªn
(
FTS
 *, );

126 
·s_˛o£
(
FTS
 *);

127 *
·s_gë_˛õ¡±r
(
FTS
 *);

128 
	#·s_gë_˛õ¡±r
(
·s
Ë((·s)->
·s_˛õ¡±r
)

	)

129 
FTS
 *
·s_gë_°ªam
(
FTSENT
 *);

130 
	#·s_gë_°ªam
(
·£¡
Ë((·£¡)->
·s_·s
)

	)

131 
FTS
 *
·s_›í
(* const *, ,

132 (*)(c⁄° 
FTSENT
 * const *, const FTSENT * const *));

133 
FTSENT
 *
	`·s_ªad
(
FTS
 *);

134 
	`·s_£t
(
FTS
 *, 
FTSENT
 *, );

135 
	`·s_£t_˛õ¡±r
(
FTS
 *, *);

136 
__END_DECLS


	@/usr/include/grp.h

42 #i‚de‡
_GRP_H_


43 
	#_GRP_H_


	)

45 
	~<sys/cdefs.h
>

46 
	~<sys/_ty≥s.h
>

48 
	#_PATH_GROUP
 "/ëc/group"

	)

50 #i‚de‡
_GID_T_DECLARED


51 
__gid_t
 
	tgid_t
;

52 
	#_GID_T_DECLARED


	)

55 #i‚de‡
_SIZE_T_DECLARED


56 
__size_t
 
	tsize_t
;

57 
	#_SIZE_T_DECLARED


	)

60 
	sgroup
 {

61 *
	mgr_«me
;

62 *
	mgr_∑sswd
;

63 
gid_t
 
	mgr_gid
;

64 **
	mgr_mem
;

67 
	g__BEGIN_DECLS


68 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


69 
ídgª¡
();

70 
group
 *
gëgª¡
();

72 
group
 *
gëgrgid
(
gid_t
);

73 
group
 *
gëg∫am
(const *);

74 #i‡
__BSD_VISIBLE


75 c⁄° *
group_‰om_gid
(
gid_t
, );

77 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE


79 
£tgª¡
();

81 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


82 
gëgrgid_r
(
gid_t
, 
group
 *, *, 
size_t
,

83 
group
 **);

84 
gëg∫am_r
(c⁄° *, 
group
 *, *, 
size_t
,

85 
group
 **);

87 #i‡
__BSD_VISIBLE


88 
gëgª¡_r
(
group
 *, *, 
size_t
, group **);

89 
£tgrou≥¡
();

91 
	g__END_DECLS


	@/usr/include/histedit.h

40 #i‚de‡
_HISTEDIT_H_


41 
	#_HISTEDIT_H_


	)

43 
	~<sys/ty≥s.h
>

44 
	~<°dio.h
>

46 
	g__BEGIN_DECLS


47 #ifde‡
__˝lu•lus


55 
edôlöe
 
	tEdôLöe
;

60 
	slöeöfo
 {

61 c⁄° *
buf„r
;

62 c⁄° *
curs‹
;

63 c⁄° *
œ°ch¨
;

64 } 
	tLöeInfo
;

70 
	#CC_NORM
 0

	)

71 
	#CC_NEWLINE
 1

	)

72 
	#CC_EOF
 2

	)

73 
	#CC_ARGHACK
 3

	)

74 
	#CC_REFRESH
 4

	)

75 
	#CC_CURSOR
 5

	)

76 
	#CC_ERROR
 6

	)

77 
	#CC_FATAL
 7

	)

78 
	#CC_REDISPLAY
 8

	)

79 
	#CC_REFRESH_BEEP
 9

	)

84 
EdôLöe
 *
ñ_öô
(c⁄° *, 
FILE
 *, FILE *, FILE *);

85 
ñ_íd
(
EdôLöe
 *);

86 
ñ_ª£t
(
EdôLöe
 *);

91 c⁄° *
ñ_gës
(
EdôLöe
 *, *);

92 
ñ_gëc
(
EdôLöe
 *, *);

93 
ñ_push
(
EdôLöe
 *, const *);

98 
ñ_bìp
(
EdôLöe
 *);

104 
ñ_∑r£
(
EdôLöe
 *, , const **);

109 
ñ_£t
(
EdôLöe
 *, , ...);

110 
ñ_gë
(
EdôLöe
 *, , ...);

111 
_ñ_‚_com∂ëe
(
EdôLöe
 *, );

112 
_ñ_‚_sh_com∂ëe
(
EdôLöe
 *, );

117 
	#EL_PROMPT
 0

	)

118 
	#EL_TERMINAL
 1

	)

119 
	#EL_EDITOR
 2

	)

120 
	#EL_SIGNAL
 3

	)

121 
	#EL_BIND
 4

	)

122 
	#EL_TELLTC
 5

	)

123 
	#EL_SETTC
 6

	)

124 
	#EL_ECHOTC
 7

	)

125 
	#EL_SETTY
 8

	)

126 
	#EL_ADDFN
 9

	)

128 
	#EL_HIST
 10

	)

129 
	#EL_EDITMODE
 11

	)

130 
	#EL_RPROMPT
 12

	)

131 
	#EL_GETCFN
 13

	)

132 
	#EL_CLIENTDATA
 14

	)

133 
	#EL_UNBUFFERED
 15

	)

134 
	#EL_PREP_TERM
 16

	)

135 
	#EL_GETTC
 17

	)

136 
	#EL_GETFP
 18

	)

137 
	#EL_SETFP
 19

	)

138 
	#EL_REFRESH
 20

	)

139 
	#EL_PROMPT_ESC
 21

	)

140 
	#EL_RPROMPT_ESC
 22

	)

141 
	#EL_RESIZE
 23

	)

143 
	#EL_BUILTIN_GETCFN
 (
NULL
)

	)

148 
ñ_sour˚
(
EdôLöe
 *, const *);

155 
ñ_ªsize
(
EdôLöe
 *);

161 
ñ_d©a_£t
 
__P
((
EdôLöe
 *, *));

162 * 
ñ_d©a_gë
 
__P
((
EdôLöe
 *));

167 c⁄° 
LöeInfo
 *
ñ_löe
(
EdôLöe
 *);

168 
ñ_ö£π°r
(
EdôLöe
 *, const *);

169 
ñ_dñëe°r
(
EdôLöe
 *, );

176 
hi°‹y
 
	tHi°‹y
;

178 
	sHi°Evít
 {

179 
num
;

180 c⁄° *
°r
;

181 } 
	tHi°Evít
;

186 
Hi°‹y
 * 
hi°‹y_öô
();

187 
hi°‹y_íd
(
Hi°‹y
 *);

189 
hi°‹y
(
Hi°‹y
 *, 
Hi°Evít
 *, , ...);

191 
	#H_FUNC
 0

	)

192 
	#H_SETSIZE
 1

	)

193 
	#H_EVENT
 1

	)

194 
	#H_GETSIZE
 2

	)

195 
	#H_FIRST
 3

	)

196 
	#H_LAST
 4

	)

197 
	#H_PREV
 5

	)

198 
	#H_NEXT
 6

	)

199 
	#H_CURR
 8

	)

200 
	#H_SET
 7

	)

201 
	#H_ADD
 9

	)

202 
	#H_ENTER
 10

	)

203 
	#H_APPEND
 11

	)

204 
	#H_END
 12

	)

205 
	#H_NEXT_STR
 13

	)

206 
	#H_PREV_STR
 14

	)

207 
	#H_NEXT_EVENT
 15

	)

208 
	#H_PREV_EVENT
 16

	)

209 
	#H_LOAD
 17

	)

210 
	#H_SAVE
 18

	)

211 
	#H_CLEAR
 19

	)

212 
	#H_SETUNIQUE
 20

	)

213 
	#H_GETUNIQUE
 21

	)

214 
	#H_DEL
 22

	)

215 
	#H_NEXT_EVDATA
 23

	)

216 
	#H_DELDATA
 24

	)

217 
	#H_REPLACE
 25

	)

224 
tokíizî
 
	tTokíizî
;

229 
Tokíizî
 *
tok_öô
(const *);

230 
tok_íd
(
Tokíizî
 *);

231 
tok_ª£t
(
Tokíizî
 *);

232 
tok_löe
(
Tokíizî
 *, c⁄° 
LöeInfo
 *,

234 
tok_°r
(
Tokíizî
 *, const *,

237 
__END_DECLS


238 #ifde‡
__˝lu•lus


	@/usr/include/inttypes.h

29 #i‚de‡
_INTTYPES_H_


30 
	#_INTTYPES_H_


	)

32 
	~<machöe/_öây≥s.h
>

33 
	~<sys/°döt.h
>

36 
ötmax_t
 
	mquŸ
;

37 
ötmax_t
 
	mªm
;

38 } 
	timaxdiv_t
;

40 
__BEGIN_DECLS


41 
ötmax_t
 
	$imaxabs
(
ötmax_t
Ë
__puª2
;

42 
imaxdiv_t
 
	$imaxdiv
(
ötmax_t
, i¡max_tË
__puª2
;

44 
ötmax_t
 
	`°πoimax
(c⁄° * 
__ª°ri˘
, ** __restrict, );

45 
uötmax_t
 
	`°πoumax
(c⁄° * 
__ª°ri˘
, ** __restrict, );

46 
ötmax_t
 
	`wc°oimax
(c⁄° 
__wch¨_t
 * 
__ª°ri˘
,

47 
__wch¨_t
 ** 
__ª°ri˘
, );

48 
uötmax_t
 
	`wc°oumax
(c⁄° 
__wch¨_t
 * 
__ª°ri˘
,

49 
__wch¨_t
 ** 
__ª°ri˘
, );

50 
__END_DECLS


	@/usr/include/kenv.h

29 #i‚de‡
_KENV_H_


30 
	#_KENV_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/kív.h
>

35 
__BEGIN_DECLS


36 
kív
(, const *, *, );

37 
	g__END_DECLS


	@/usr/include/kvm.h

33 #i‚de‡
_KVM_H_


34 
	#_KVM_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<∆i°.h
>

41 
	#VRS_SYM
 "_vîsi⁄"

	)

42 
	#VRS_KEY
 "VERSION"

	)

44 #i‚de‡
_SIZE_T_DECLARED


45 
__size_t
 
	tsize_t
;

46 
	#_SIZE_T_DECLARED


	)

49 #i‚de‡
_SSIZE_T_DECLARED


50 
__ssize_t
 
	tssize_t
;

51 
	#_SSIZE_T_DECLARED


	)

54 
__kvm
 
	tkvm_t
;

56 
	gköfo_¥oc
;

57 
	g¥oc
;

59 
	skvm_sw≠
 {

60 
	mksw_dev«me
[32];

61 
	mksw_u£d
;

62 
	mksw_tŸÆ
;

63 
	mksw_Êags
;

64 
	mksw_ª£rved1
;

65 
	mksw_ª£rved2
;

68 
	#SWIF_DEV_PREFIX
 0x0002

	)

70 
__BEGIN_DECLS


71 
kvm_˛o£
(
kvm_t
 *);

72 
kvm_dp˝u_£t˝u
(
kvm_t
 *, );

73 **
kvm_gë¨gv
(
kvm_t
 *, c⁄° 
köfo_¥oc
 *, );

74 
kvm_gë˝time
(
kvm_t
 *, *);

75 **
kvm_gëívv
(
kvm_t
 *, c⁄° 
köfo_¥oc
 *, );

76 *
kvm_gëîr
(
kvm_t
 *);

77 *
kvm_gëfûes
(
kvm_t
 *, , , *);

78 
kvm_gëlﬂdavg
(
kvm_t
 *, [], );

79 
kvm_gëmax˝u
(
kvm_t
 *);

80 *
kvm_gëp˝u
(
kvm_t
 *, );

81 
köfo_¥oc
 *

82 
kvm_gë¥ocs
(
kvm_t
 *, , , *);

83 
kvm_gësw≠öfo
(
kvm_t
 *, 
kvm_sw≠
 *, , );

84 
kvm_∆i°
(
kvm_t
 *, 
∆i°
 *);

85 
kvm_t
 *
	gkvm_›í


87 
kvm_t
 *
	gkvm_›ífûes


89 
ssize_t
 
kvm_ªad
(
kvm_t
 *, , *, 
size_t
);

90 
ssize_t
 
	gkvm_uªad


91 (
	gkvm_t
 *, 
	gköfo_¥oc
 *, , *, 
	gsize_t
);

92 
ssize_t
 
kvm_wrôe
(
kvm_t
 *, , c⁄° *, 
size_t
);

93 
	g__END_DECLS


	@/usr/include/langinfo.h

29 #i‚de‡
_LANGINFO_H_


30 
	#_LANGINFO_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 #i‚de‡
_NL_ITEM_DECLARED


36 
__∆_ôem
 
	t∆_ôem
;

37 
	#_NL_ITEM_DECLARED


	)

40 
	#CODESET
 0

	)

41 
	#D_T_FMT
 1

	)

42 
	#D_FMT
 2

	)

43 
	#T_FMT
 3

	)

44 
	#T_FMT_AMPM
 4

	)

45 
	#AM_STR
 5

	)

46 
	#PM_STR
 6

	)

49 
	#DAY_1
 7

	)

50 
	#DAY_2
 8

	)

51 
	#DAY_3
 9

	)

52 
	#DAY_4
 10

	)

53 
	#DAY_5
 11

	)

54 
	#DAY_6
 12

	)

55 
	#DAY_7
 13

	)

58 
	#ABDAY_1
 14

	)

59 
	#ABDAY_2
 15

	)

60 
	#ABDAY_3
 16

	)

61 
	#ABDAY_4
 17

	)

62 
	#ABDAY_5
 18

	)

63 
	#ABDAY_6
 19

	)

64 
	#ABDAY_7
 20

	)

67 
	#MON_1
 21

	)

68 
	#MON_2
 22

	)

69 
	#MON_3
 23

	)

70 
	#MON_4
 24

	)

71 
	#MON_5
 25

	)

72 
	#MON_6
 26

	)

73 
	#MON_7
 27

	)

74 
	#MON_8
 28

	)

75 
	#MON_9
 29

	)

76 
	#MON_10
 30

	)

77 
	#MON_11
 31

	)

78 
	#MON_12
 32

	)

81 
	#ABMON_1
 33

	)

82 
	#ABMON_2
 34

	)

83 
	#ABMON_3
 35

	)

84 
	#ABMON_4
 36

	)

85 
	#ABMON_5
 37

	)

86 
	#ABMON_6
 38

	)

87 
	#ABMON_7
 39

	)

88 
	#ABMON_8
 40

	)

89 
	#ABMON_9
 41

	)

90 
	#ABMON_10
 42

	)

91 
	#ABMON_11
 43

	)

92 
	#ABMON_12
 44

	)

94 
	#ERA
 45

	)

95 
	#ERA_D_FMT
 46

	)

96 
	#ERA_D_T_FMT
 47

	)

97 
	#ERA_T_FMT
 48

	)

98 
	#ALT_DIGITS
 49

	)

100 
	#RADIXCHAR
 50

	)

101 
	#THOUSEP
 51

	)

103 
	#YESEXPR
 52

	)

104 
	#NOEXPR
 53

	)

106 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 <= 500

107 
	#YESSTR
 54

	)

108 
	#NOSTR
 55

	)

111 
	#CRNCYSTR
 56

	)

113 #i‡
__BSD_VISIBLE


114 
	#D_MD_ORDER
 57

	)

118 
	#ALTMON_1
 58

	)

119 
	#ALTMON_2
 59

	)

120 
	#ALTMON_3
 60

	)

121 
	#ALTMON_4
 61

	)

122 
	#ALTMON_5
 62

	)

123 
	#ALTMON_6
 63

	)

124 
	#ALTMON_7
 64

	)

125 
	#ALTMON_8
 65

	)

126 
	#ALTMON_9
 66

	)

127 
	#ALTMON_10
 67

	)

128 
	#ALTMON_11
 68

	)

129 
	#ALTMON_12
 69

	)

131 
__BEGIN_DECLS


132 *
∆_œngöfo
(
∆_ôem
);

133 
	g__END_DECLS


	@/usr/include/libgen.h

31 #i‚de‡
_LIBGEN_H_


32 
	#_LIBGEN_H_


	)

34 
	~<sys/cdefs.h
>

36 
__BEGIN_DECLS


38 *
ba£«me
(const *);

39 *
dú«me
(const *);

41 *
ªgcmp
(const *, ...);

42 *
ªgex
(const *, const *, ...);

44 *
__loc1
;

47 
	g__END_DECLS


	@/usr/include/libutil.h

39 #i‚de‡
_LIBUTIL_H_


40 
	#_LIBUTIL_H_


	)

42 
	~<sys/cdefs.h
>

43 
	~<sys/_ty≥s.h
>

45 #i‚de‡
_GID_T_DECLARED


46 
__gid_t
 
	tgid_t
;

47 
	#_GID_T_DECLARED


	)

50 #i‚de‡
_INT64_T_DECLARED


51 
__öt64_t
 
	töt64_t
;

52 
	#_INT64_T_DECLARED


	)

55 #i‚de‡
_UINT64_T_DECLARED


56 
__uöt64_t
 
	tuöt64_t
;

57 
	#_UINT64_T_DECLARED


	)

60 #i‚de‡
_PID_T_DECLARED


61 
__pid_t
 
	tpid_t
;

62 
	#_PID_T_DECLARED


	)

65 #i‚de‡
_SIZE_T_DECLARED


66 
__size_t
 
	tsize_t
;

67 
	#_SIZE_T_DECLARED


	)

70 #i‚de‡
_UID_T_DECLARED


71 
__uid_t
 
	tuid_t
;

72 
	#_UID_T_DECLARED


	)

75 
	#PROPERTY_MAX_NAME
 64

	)

76 
	#PROPERTY_MAX_VALUE
 512

	)

79 
	s_¥›îty
 {

80 
_¥›îty
 *
	m√xt
;

81 *
	m«me
;

82 *
	mvÆue
;

83 } *
	t¥›îtõs
;

85 #ifde‡
_SYS_PARAM_H_


87 
	spidfh
 {

88 
	mpf_fd
;

89 
	mpf_∑th
[
MAXPATHLEN
 + 1];

90 
__dev_t
 
	mpf_dev
;

91 
öo_t
 
	mpf_öo
;

96 
	gãrmios
;

97 
	gwösize
;

98 
	gutmp
;

99 
	gö_addr
;

100 
	gköfo_fûe
;

101 
	gköfo_vmíåy
;

103 
__BEGIN_DECLS


104 
˛ón_ívú⁄mít
(c⁄° * c⁄° *
_whôe
,

105 c⁄° * c⁄° *
_m‹e_whôe
);

106 
exèâr_«me•a˚_to_°rög
(
_©å«me•a˚
, **
_°rög
);

107 
exèâr_°rög_to_«me•a˚
(c⁄° *
_°rög
, *
_©å«me•a˚
);

108 
Ê›í
(c⁄° *
_∑th
, 
_Êags
, ...);

109 
hexdump
(c⁄° *
±r
, 
Àngth
, c⁄° *
hdr
, 
Êags
);

110 
logö
(
utmp
 *
_ut
);

111 
logö_ây
(
_fd
);

112 
logout
(c⁄° *
_löe
);

113 
logwtmp
(c⁄° *
_löe
, c⁄° *
_«me
, c⁄° *
_ho°
);

114 
åimdomaö
(*
_fuŒho°
, 
_ho°size
);

115 
›í±y
(*
_ama°î
, *
_a¶ave
, *
_«me
,

116 
ãrmios
 *
_ãrmp
, 
wösize
 *
_wöp
);

117 
f‹k±y
(*
_ama°î
, *
_«me
,

118 
ãrmios
 *
_ãrmp
, 
wösize
 *
_wöp
);

119 
hum™ize_numbî
(*
_buf
, 
size_t
 
_Àn
, 
öt64_t
 
_numbî
,

120 c⁄° *
_suffix
, 
_sˇÀ
, 
_Êags
);

121 
ex∑nd_numbî
(c⁄° *
_buf
, 
öt64_t
 *
_num
);

122 c⁄° *
uu_lockîr
(
_uu_lockªsu…
);

123 
uu_lock
(c⁄° *
_ây«me
);

124 
uu_u∆ock
(c⁄° *
_ây«me
);

125 
uu_lock_tx‰
(c⁄° *
_ây«me
, 
pid_t
 
_pid
);

126 
_£cuª_∑th
(c⁄° *
_∑th
, 
uid_t
 
_uid
, 
gid_t
 
_gid
);

127 
¥›îtõs
 
¥›îtõs_ªad
(
fd
);

128 
¥›îtõs_‰ì
(
¥›îtõs
 
li°
);

129 *
¥›îty_föd
(
¥›îtõs
 
li°
, c⁄° *
«me
);

130 *
auth_gëvÆ
(c⁄° *
«me
);

131 
ªÆho°«me
(*
ho°
, 
size_t
 
hsize
, c⁄° 
ö_addr
 *
ù
);

132 
	gsockaddr
;

133 
ªÆho°«me_ß
(*
ho°
, 
size_t
 
hsize
, 
sockaddr
 *
addr
,

134 
addæí
);

136 
kld_i¶ﬂded
(c⁄° *
«me
);

137 
kld_lﬂd
(c⁄° *
«me
);

138 
köfo_fûe
 *

139 
köfo_gëfûe
(
pid_t
 
_pid
, *
_˙ç
);

140 
köfo_vmíåy
 *

141 
köfo_gëvmm≠
(
pid_t
 
_pid
, *
_˙ç
);

143 #ifde‡
_STDIO_H_


144 *
Â¨£ 
(
FILE
 *, 
size_t
 *, size_t *, const [3], );

147 #ifde‡
_PWD_H_


148 
pw_c›y
(
_ffd
, 
_tfd
, c⁄° 
∑sswd
 *
_pw
, ∑sswd *
_ﬁd_pw
);

149 
∑sswd
 *
pw_dup
(c⁄° ∑sswd *
_pw
);

150 
pw_edô
(
_nŸ£tuid
);

151 
pw_equÆ
(c⁄° 
∑sswd
 *
_pw1
, c⁄° ∑sswd *
_pw2
);

152 
pw_föi
();

153 
pw_öô
(c⁄° *
_dú
, c⁄° *
_ma°î
);

154 *
pw_make
(c⁄° 
∑sswd
 *
_pw
);

155 
pw_mkdb
(c⁄° *
_u£r
);

156 
pw_lock
();

157 
∑sswd
 *
pw_sˇn
(c⁄° *
_löe
, 
_Êags
);

158 c⁄° *
pw_ãm≤ame
();

159 
pw_tmp
(
_mfd
);

162 #ifde‡
_GRP_H_


163 
gr_equÆ
(c⁄° 
group
 *
gr1
, c⁄° grou∞*
gr2
);

164 *
gr_make
(c⁄° 
group
 *
gr
);

165 
group
 *
gr_dup
(c⁄° grou∞*
gr
);

166 
group
 *
gr_sˇn
(c⁄° *
löe
);

169 #ifde‡
_SYS_PARAM_H_


170 
pidfh
 *
pidfûe_›í
(c⁄° *
∑th
, 
mode_t
 
mode
, 
pid_t
 *
pid±r
);

171 
pidfûe_wrôe
(
pidfh
 *
pfh
);

172 
pidfûe_˛o£
(
pidfh
 *
pfh
);

173 
pidfûe_ªmove
(
pidfh
 *
pfh
);

176 
	g__END_DECLS


178 
	#UU_LOCK_INUSE
 (1)

	)

179 
	#UU_LOCK_OK
 (0)

	)

180 
	#UU_LOCK_OPEN_ERR
 (-1)

	)

181 
	#UU_LOCK_READ_ERR
 (-2)

	)

182 
	#UU_LOCK_CREAT_ERR
 (-3)

	)

183 
	#UU_LOCK_WRITE_ERR
 (-4)

	)

184 
	#UU_LOCK_LINK_ERR
 (-5)

	)

185 
	#UU_LOCK_TRY_ERR
 (-6)

	)

186 
	#UU_LOCK_OWNER_ERR
 (-7)

	)

189 
	#HOSTNAME_FOUND
 (0)

	)

190 
	#HOSTNAME_INCORRECTNAME
 (1)

	)

191 
	#HOSTNAME_INVALIDADDR
 (2)

	)

192 
	#HOSTNAME_INVALIDNAME
 (3)

	)

195 
	#FPARSELN_UNESCESC
 0x01

	)

196 
	#FPARSELN_UNESCCONT
 0x02

	)

197 
	#FPARSELN_UNESCCOMM
 0x04

	)

198 
	#FPARSELN_UNESCREST
 0x08

	)

199 
	#FPARSELN_UNESCALL
 0x0f

	)

202 
	#PWSCAN_MASTER
 0x01

	)

203 
	#PWSCAN_WARN
 0x02

	)

206 
	#HN_DECIMAL
 0x01

	)

207 
	#HN_NOSPACE
 0x02

	)

208 
	#HN_B
 0x04

	)

209 
	#HN_DIVISOR_1000
 0x08

	)

210 
	#HN_IEC_PREFIXES
 0x10

	)

213 
	#HN_GETSCALE
 0x10

	)

214 
	#HN_AUTOSCALE
 0x20

	)

217 
	#HD_COLUMN_MASK
 0xff

	)

218 
	#HD_DELIM_MASK
 0xff00

	)

219 
	#HD_OMIT_COUNT
 (1 << 16)

	)

220 
	#HD_OMIT_HEX
 (1 << 17)

	)

221 
	#HD_OMIT_CHARS
 (1 << 18)

	)

	@/usr/include/limits.h

37 #i‚de‡
_LIMITS_H_


38 
	#_LIMITS_H_


	)

40 
	~<sys/cdefs.h
>

42 #i‡
__POSIX_VISIBLE


43 
	#_POSIX_ARG_MAX
 4096

	)

44 
	#_POSIX_LINK_MAX
 8

	)

45 
	#_POSIX_MAX_CANON
 255

	)

46 
	#_POSIX_MAX_INPUT
 255

	)

47 
	#_POSIX_NAME_MAX
 14

	)

48 
	#_POSIX_PIPE_BUF
 512

	)

49 
	#_POSIX_SSIZE_MAX
 32767

	)

50 
	#_POSIX_STREAM_MAX
 8

	)

52 #i‡
__POSIX_VISIBLE
 >= 200112

53 
	#_POSIX_CHILD_MAX
 25

	)

54 
	#_POSIX_NGROUPS_MAX
 8

	)

55 
	#_POSIX_OPEN_MAX
 20

	)

56 
	#_POSIX_PATH_MAX
 256

	)

57 
	#_POSIX_TZNAME_MAX
 6

	)

59 
	#_POSIX_CHILD_MAX
 6

	)

60 
	#_POSIX_NGROUPS_MAX
 0

	)

61 
	#_POSIX_OPEN_MAX
 16

	)

62 
	#_POSIX_PATH_MAX
 255

	)

63 
	#_POSIX_TZNAME_MAX
 3

	)

66 
	#BC_BASE_MAX
 99

	)

67 
	#BC_DIM_MAX
 2048

	)

68 
	#BC_SCALE_MAX
 99

	)

69 
	#BC_STRING_MAX
 1000

	)

70 
	#COLL_WEIGHTS_MAX
 0

	)

71 
	#EXPR_NEST_MAX
 32

	)

72 
	#LINE_MAX
 2048

	)

73 
	#RE_DUP_MAX
 255

	)

75 
	#_POSIX2_BC_BASE_MAX
 99

	)

76 
	#_POSIX2_BC_DIM_MAX
 2048

	)

77 
	#_POSIX2_BC_SCALE_MAX
 99

	)

78 
	#_POSIX2_BC_STRING_MAX
 1000

	)

79 
	#_POSIX2_EQUIV_CLASS_MAX
 2

	)

80 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

81 
	#_POSIX2_LINE_MAX
 2048

	)

82 
	#_POSIX2_RE_DUP_MAX
 255

	)

85 #i‡
__POSIX_VISIBLE
 >= 199309

86 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

87 
	#_POSIX_AIO_MAX
 1

	)

88 
	#_POSIX_DELAYTIMER_MAX
 32

	)

89 
	#_POSIX_MQ_OPEN_MAX
 8

	)

90 
	#_POSIX_MQ_PRIO_MAX
 32

	)

91 
	#_POSIX_RTSIG_MAX
 8

	)

92 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

93 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

94 
	#_POSIX_SIGQUEUE_MAX
 32

	)

95 
	#_POSIX_TIMER_MAX
 32

	)

97 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

100 #i‡
__POSIX_VISIBLE
 >= 199506

101 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

102 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

103 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

106 #i‡
__POSIX_VISIBLE
 >= 200112

107 
	#_POSIX_HOST_NAME_MAX
 255

	)

108 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

109 
	#_POSIX_SS_REPL_MAX
 4

	)

110 
	#_POSIX_SYMLINK_MAX
 255

	)

111 
	#_POSIX_SYMLOOP_MAX
 8

	)

112 
	#_POSIX_TRACE_EVENT_NAME_MAX
 30

	)

113 
	#_POSIX_TRACE_NAME_MAX
 8

	)

114 
	#_POSIX_TRACE_SYS_MAX
 8

	)

115 
	#_POSIX_TRACE_USER_EVENT_MAX
 32

	)

116 
	#_POSIX_TTY_NAME_MAX
 9

	)

117 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

118 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

120 
	#_POSIX_RE_DUP_MAX
 
_POSIX2_RE_DUP_MAX


	)

123 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

124 
	#NL_ARGMAX
 99

	)

125 
	#NL_MSGMAX
 32767

	)

126 
	#NL_SETMAX
 255

	)

127 
	#NL_TEXTMAX
 2048

	)

130 #i‡
__XSI_VISIBLE


131 
	#_XOPEN_IOV_MAX
 16

	)

132 
	#_XOPEN_NAME_MAX
 255

	)

133 
	#_XOPEN_PATH_MAX
 1024

	)

134 
	#PASS_MAX
 128

	)

136 
	#NL_LANGMAX
 31

	)

137 
	#NL_NMAX
 1

	)

140 
	#MB_LEN_MAX
 6

	)

142 
	~<sys/limôs.h
>

144 #i‡
__POSIX_VISIBLE


145 
	~<sys/sy¶imôs.h
>

	@/usr/include/locale.h

37 #i‚de‡
_LOCALE_H_


38 
	#_LOCALE_H_


	)

40 
	~<sys/_nuŒ.h
>

42 
	slc⁄v
 {

43 *
	mdecimÆ_poöt
;

44 *
	mthoußnds_£p
;

45 *
	mgroupög
;

46 *
	möt_cuº_symbﬁ
;

47 *
	mcuºícy_symbﬁ
;

48 *
	mm⁄_decimÆ_poöt
;

49 *
	mm⁄_thoußnds_£p
;

50 *
	mm⁄_groupög
;

51 *
	mposôive_sign
;

52 *
	m√g©ive_sign
;

53 
	möt_‰ac_digôs
;

54 
	m‰ac_digôs
;

55 
	mp_cs_¥e˚des
;

56 
	mp_£p_by_•a˚
;

57 
	mn_cs_¥e˚des
;

58 
	mn_£p_by_•a˚
;

59 
	mp_sign_po¢
;

60 
	mn_sign_po¢
;

61 
	möt_p_cs_¥e˚des
;

62 
	möt_n_cs_¥e˚des
;

63 
	möt_p_£p_by_•a˚
;

64 
	möt_n_£p_by_•a˚
;

65 
	möt_p_sign_po¢
;

66 
	möt_n_sign_po¢
;

69 
	#LC_ALL
 0

	)

70 
	#LC_COLLATE
 1

	)

71 
	#LC_CTYPE
 2

	)

72 
	#LC_MONETARY
 3

	)

73 
	#LC_NUMERIC
 4

	)

74 
	#LC_TIME
 5

	)

75 
	#LC_MESSAGES
 6

	)

77 
	#_LC_LAST
 7

	)

79 
	~<sys/cdefs.h
>

81 
__BEGIN_DECLS


82 
lc⁄v
 *
loˇÀc⁄v
();

83 *
£éoˇÀ
(, const *);

84 
	g__END_DECLS


	@/usr/include/math.h

17 #i‚de‡
_MATH_H_


18 
	#_MATH_H_


	)

20 
	~<sys/cdefs.h
>

21 
	~<sys/_ty≥s.h
>

22 
	~<machöe/_limôs.h
>

27 c⁄° 
	u__öföôy_un
 {

28 
__uc
[8];

29 
__ud
;

30 } 
__öföôy
;

32 c⁄° 
	u__«n_un
 {

33 
__uc
[()];

34 
__uf
;

35 } 
__«n
;

37 #i‡
__GNUC_PREREQ__
(3, 3Ë|| (
deföed
(
__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

38 
	#__MATH_BUILTIN_CONSTANTS


	)

41 #i‡
__GNUC_PREREQ__
(3, 0Ë&& !
deföed
(
__INTEL_COMPILER
)

42 
	#__MATH_BUILTIN_RELOPS


	)

45 #ifde‡
__MATH_BUILTIN_CONSTANTS


46 
	#HUGE_VAL
 
	`__buûtö_huge_vÆ
()

	)

48 
	#HUGE_VAL
 (
__öföôy
.
__ud
)

	)

51 #i‡
__ISO_C_VISIBLE
 >= 1999

52 
	#FP_ILOGB0
 (-
__INT_MAX
)

	)

53 
	#FP_ILOGBNAN
 
__INT_MAX


	)

55 #ifde‡
__MATH_BUILTIN_CONSTANTS


56 
	#HUGE_VALF
 
	`__buûtö_huge_vÆf
()

	)

57 
	#HUGE_VALL
 
	`__buûtö_huge_vÆl
()

	)

58 
	#INFINITY
 
	`__buûtö_öff
()

	)

59 
	#NAN
 
	`__buûtö_«nf
("")

	)

61 
	#HUGE_VALF
 ()
HUGE_VAL


	)

62 
	#HUGE_VALL
 ()
HUGE_VAL


	)

63 
	#INFINITY
 
HUGE_VALF


	)

64 
	#NAN
 (
__«n
.
__uf
)

	)

67 
	#MATH_ERRNO
 1

	)

68 
	#MATH_ERREXCEPT
 2

	)

69 
	#m©h_îrh™dlög
 
MATH_ERREXCEPT


	)

72 #i‡
deföed
(
__ü64__
Ë|| deföed(
__•¨c64__
)

73 
	#FP_FAST_FMA
 1

	)

75 #ifde‡
__ü64__


76 
	#FP_FAST_FMAL
 1

	)

78 
	#FP_FAST_FMAF
 1

	)

81 
	#FP_INFINITE
 0x01

	)

82 
	#FP_NAN
 0x02

	)

83 
	#FP_NORMAL
 0x04

	)

84 
	#FP_SUBNORMAL
 0x08

	)

85 
	#FP_ZERO
 0x10

	)

86 
	#Â˛assify
(
x
) \

87 (( (
x
Ë= ()Ë? 
	`__Â˛assifyf
(x) \

88 : ( (
x
Ë= ()Ë? 
	`__Â˛assifyd
(x) \

89 : 
	`__Â˛assifyl
(
x
))

	)

91 
	#isföôe
(
x
) \

92 (( (
x
Ë= ()Ë? 
	`__isföôef
(x) \

93 : ( (
x
Ë= ()Ë? 
	`__isföôe
(x) \

94 : 
	`__isföôñ
(
x
))

	)

95 
	#isöf
(
x
) \

96 (( (
x
Ë= ()Ë? 
	`__isöff
(x) \

97 : ( (
x
Ë= ()Ë? 
	`isöf
(x) \

98 : 
	`__isöÊ
(
x
))

	)

99 
	#i¢™
(
x
) \

100 (( (
x
Ë= ()Ë? 
	`i¢™f
(x) \

101 : ( (
x
Ë= ()Ë? 
	`i¢™
(x) \

102 : 
	`__i¢™l
(
x
))

	)

103 
	#i¢‹mÆ
(
x
) \

104 (( (
x
Ë= ()Ë? 
	`__i¢‹mÆf
(x) \

105 : ( (
x
Ë= ()Ë? 
	`__i¢‹mÆ
(x) \

106 : 
	`__i¢‹mÆl
(
x
))

	)

108 #ifde‡
__MATH_BUILTIN_RELOPS


109 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
((x), (y))

	)

110 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
((x), (y))

	)

111 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
((x), (y))

	)

112 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
((x), (y))

	)

113 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
((x), (y))

	)

114 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
((x), (y))

	)

116 
	#isgª©î
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË> (y))

	)

117 
	#isgª©îequÆ
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË>(y))

	)

118 
	#i¶ess
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË< (y))

	)

119 
	#i¶es£quÆ
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)Ë&& (xË<(y))

	)

120 
	#i¶essgª©î
(
x
, 
y
Ë(!
	`isun‹dîed
((x), (y)) && \

121 ((
x
Ë> (
y
Ë|| (yË> (x)))

	)

122 
	#isun‹dîed
(
x
, 
y
Ë(
	`i¢™
(xË|| i¢™(y))

	)

125 
	#signbô
(
x
) \

126 (( (
x
Ë= ()Ë? 
	`__signbôf
(x) \

127 : ( (
x
Ë= ()Ë? 
	`__signbô
(x) \

128 : 
	`__signbôl
(
x
))

	)

130 
__doubÀ_t
 
	tdoubÀ_t
;

131 
__Êﬂt_t
 
	tÊﬂt_t
;

137 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE


138 
	#M_E
 2.7182818284590452354

	)

139 
	#M_LOG2E
 1.4426950408889634074

	)

140 
	#M_LOG10E
 0.43429448190325182765

	)

141 
	#M_LN2
 0.69314718055994530942

	)

142 
	#M_LN10
 2.30258509299404568402

	)

143 
	#M_PI
 3.14159265358979323846

	)

144 
	#M_PI_2
 1.57079632679489661923

	)

145 
	#M_PI_4
 0.78539816339744830962

	)

146 
	#M_1_PI
 0.31830988618379067154

	)

147 
	#M_2_PI
 0.63661977236758134308

	)

148 
	#M_2_SQRTPI
 1.12837916709551257390

	)

149 
	#M_SQRT2
 1.41421356237309504880

	)

150 
	#M_SQRT1_2
 0.70710678118654752440

	)

152 
	#MAXFLOAT
 (()3.40282346638528860e+38)

	)

153 
signgam
;

156 #i‡
__BSD_VISIBLE


159 
	#HUGE
 
HUGE_VAL


	)

161 
	#HUGE
 
MAXFLOAT


	)

170 
__BEGIN_DECLS


174 
	$__Â˛assifyd
(Ë
__puª2
;

175 
	$__Â˛assifyf
(Ë
__puª2
;

176 
	$__Â˛assifyl
(Ë
__puª2
;

177 
	$__isföôef
(Ë
__puª2
;

178 
	$__isföôe
(Ë
__puª2
;

179 
	$__isföôñ
(Ë
__puª2
;

180 
	$__isöff
(Ë
__puª2
;

181 
	$__isöÊ
(Ë
__puª2
;

182 
	$__i¢™l
(Ë
__puª2
;

183 
	$__i¢‹mÆf
(Ë
__puª2
;

184 
	$__i¢‹mÆ
(Ë
__puª2
;

185 
	$__i¢‹mÆl
(Ë
__puª2
;

186 
	$__signbô
(Ë
__puª2
;

187 
	$__signbôf
(Ë
__puª2
;

188 
	$__signbôl
(Ë
__puª2
;

190 
	`acos
();

191 
	`asö
();

192 
	`©™
();

193 
	`©™2
(, );

194 
	`cos
();

195 
	`sö
();

196 
	`èn
();

198 
	`cosh
();

199 
	`söh
();

200 
	`ènh
();

202 
	`exp
();

203 
	`‰exp
(, *);

204 
	`ldexp
(, );

205 
	`log
();

206 
	`log10
();

207 
	`modf
(, *);

209 
	`pow
(, );

210 
	`sqπ
();

212 
	`˚û
();

213 
	$Ábs
(Ë
__puª2
;

214 
	`Êo‹
();

215 
	`fmod
(, );

220 #i‡
__BSD_VISIBLE
 || 
__ISO_C_VISIBLE
 >1999 || 
__XSI_VISIBLE


221 
	`acosh
();

222 
	`asöh
();

223 
	`©™h
();

224 
	`cbπ
();

225 
	`îf
();

226 
	`îfc
();

227 
	`exp2
();

228 
	`expm1
();

229 
	`fma
(, , );

230 
	`hypŸ
(, );

231 
	$ûogb
(Ë
__puª2
;

232 (
isöf
)(Ë
__puª2
;

233 (
i¢™
)(Ë
__puª2
;

234 
	`lgamma
();

235 
	`Œröt
();

236 
	`Œround
();

237 
	`log1p
();

238 
	`log2
();

239 
	`logb
();

240 
	`Ãöt
();

241 
	`Ãound
();

242 
	$«n
(c⁄° *Ë
__puª2
;

243 
	`√xè·î
(, );

244 
	`ªmaödî
(, );

245 
	`ªmquo
(, , *);

246 
	`röt
();

249 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE


250 
	`j0
();

251 
	`j1
();

252 
	`jn
(, );

253 
	`y0
();

254 
	`y1
();

255 
	`yn
(, );

257 #i‡
__XSI_VISIBLE
 <500 || 
__BSD_VISIBLE


258 
	`gamma
();

261 #i‡
__XSI_VISIBLE
 <600 || 
__BSD_VISIBLE


262 
	`sˇlb
(, );

266 #i‡
__BSD_VISIBLE
 || 
__ISO_C_VISIBLE
 >= 1999

267 
	$c›ysign
(, Ë
__puª2
;

268 
	`fdim
(, );

269 
	$fmax
(, Ë
__puª2
;

270 
	$fmö
(, Ë
__puª2
;

271 
	`√¨byöt
();

272 
	`round
();

273 
	`sˇlb 
(, );

274 
	`sˇlbn
(, );

275 
	`tgamma
();

276 
	`åunc
();

282 #i‡
__BSD_VISIBLE


283 
	`dªm
(, );

284 
	$föôe
(Ë
__puª2
;

285 
	$i¢™f
(Ë
__puª2
;

291 
	`gamma_r
(, *);

292 
	`lgamma_r
(, *);

297 
	`signifiˇnd
();

301 #i‡
__ISO_C_VISIBLE
 >= 1999

302 
	`acosf
();

303 
	`asöf
();

304 
	`©™f
();

305 
	`©™2f
(, );

306 
	`cosf
();

307 
	`söf
();

308 
	`ènf
();

310 
	`coshf
();

311 
	`söhf
();

312 
	`ènhf
();

314 
	`exp2f
();

315 
	`expf
();

316 
	`expm1f
();

317 
	`‰expf
(, *);

318 
	$ûogbf
(Ë
__puª2
;

319 
	`ldexpf
(, );

320 
	`log10f
();

321 
	`log1pf
();

322 
	`log2f
();

323 
	`logf
();

324 
	`modff
(, *);

326 
	`powf
(, );

327 
	`sqπf
();

329 
	`˚ûf
();

330 
	$Ábsf
(Ë
__puª2
;

331 
	`Êo‹f
();

332 
	`fmodf
(, );

333 
	`roundf
();

335 
	`îff
();

336 
	`îfcf
();

337 
	`hypŸf
(, );

338 
	`lgammaf
();

339 
	`tgammaf
();

341 
	`acoshf
();

342 
	`asöhf
();

343 
	`©™hf
();

344 
	`cbπf
();

345 
	`logbf
();

346 
	$c›ysignf
(, Ë
__puª2
;

347 
	`Œrötf
();

348 
	`Œroundf
();

349 
	`Ãötf
();

350 
	`Ãoundf
();

351 
	$«nf
(c⁄° *Ë
__puª2
;

352 
	`√¨byötf
();

353 
	`√xè·îf
(, );

354 
	`ªmaödîf
(, );

355 
	`ªmquof
(, , *);

356 
	`rötf
();

357 
	`sˇlb f
(, );

358 
	`sˇlbnf
(, );

359 
	`åuncf
();

361 
	`fdimf
(, );

362 
	`fmaf
(, , );

363 
	$fmaxf
(, Ë
__puª2
;

364 
	$fmöf
(, Ë
__puª2
;

370 #i‡
__BSD_VISIBLE


371 
	`dªmf
(, );

372 
	$föôef
(Ë
__puª2
;

373 
	`gammaf
();

374 
	`j0f
();

375 
	`j1f
();

376 
	`jnf
(, );

377 
	`sˇlbf
(, );

378 
	`y0f
();

379 
	`y1f
();

380 
	`ynf
(, );

387 
	`gammaf_r
(, *);

388 
	`lgammaf_r
(, *);

393 
	`signifiˇndf
();

399 #i‡
__ISO_C_VISIBLE
 >= 1999

401 
	`acoshl
();

403 
	`aco¶
();

405 
	`asöhl
();

407 
	`asöl
();

408 
	`©™2l
(, );

410 
	`©™hl
();

412 
	`©™l
();

414 
	`cbπl
();

416 
	`˚ûl
();

417 
	$c›ysig∆
(, Ë
__puª2
;

419 
	`coshl
();

421 
	`co¶
();

423 
	`îf˛
();

424 
	`îÊ
();

426 
	`exp2l
();

428 
	`ex∂
();

429 
	`expm1l
();

431 
	$Áb¶
(Ë
__puª2
;

432 
	`fdiml
(, );

433 
	`Êo‹l
();

434 
	`fmÆ
(, , );

435 
	$fmaxl
(, Ë
__puª2
;

436 
	$fmöl
(, Ë
__puª2
;

437 
	`fmodl
(, );

438 
	`‰ex∂
(
vÆue
, *);

439 
	`hypŸl
(, );

440 
	$ûogbl
(Ë
__puª2
;

441 
	`ldex∂
(, );

443 
	`lgammÆ
();

445 
	`Œröé
();

446 
	`Œroundl
();

448 
	`log10l
();

449 
	`log1∂
();

450 
	`log2l
();

452 
	`logbl
();

454 
	`logl
();

456 
	`Ãöé
();

457 
	`Ãoundl
();

458 
	`modÊ
(, *);

459 
	$«∆
(c⁄° *Ë
__puª2
;

460 
	`√¨byöé
();

461 
	`√xè·îl
(, );

462 
	`√xâow¨d
(, );

463 
	`√xâow¨df
(, );

464 
	`√xâow¨dl
(, );

466 
	`powl
(, );

468 
	`ªmaödîl
(, );

469 
	`ªmquﬁ
(, , *);

470 
	`röé
();

471 
	`roundl
();

472 
	`sˇlb l
(, );

473 
	`sˇlb∆
(, );

475 
	`söhl
();

477 
	`söl
();

478 
	`sqπl
();

480 
	`ènhl
();

482 
	`è∆
();

484 
	`tgammÆ
();

486 
	`åun˛
();

489 
__END_DECLS


	@/usr/include/netdb.h

61 #i‚de‡
_NETDB_H_


62 
	#_NETDB_H_


	)

64 
	~<sys/cdefs.h
>

65 
	~<sys/_ty≥s.h
>

67 #i‚de‡
_SIZE_T_DECLARED


68 
__size_t
 
	tsize_t
;

69 
	#_SIZE_T_DECLARED


	)

72 #i‚de‡
_SOCKLEN_T_DECLARED


73 
__sockÀn_t
 
	tsockÀn_t
;

74 
	#_SOCKLEN_T_DECLARED


	)

77 #i‚de‡
_UINT32_T_DECLARED


78 
__uöt32_t
 
	tuöt32_t
;

79 
	#_UINT32_T_DECLARED


	)

82 #i‚de‡
_PATH_HEQUIV


83 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

85 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

86 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

87 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

88 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

89 
	#_PATH_SERVICES_DB
 "/v¨/db/£rvi˚s.db"

	)

91 
	#h_î∫o
 (*
	`__h_î∫o
())

	)

98 
	sho°ít
 {

99 *
	mh_«me
;

100 **
	mh_Æü£s
;

101 
	mh_addπy≥
;

102 
	mh_Àngth
;

103 **
	mh_addr_li°
;

104 
	#h_addr
 
h_addr_li°
[0]

	)

107 
	s√ã¡
 {

108 *
	mn_«me
;

109 **
	mn_Æü£s
;

110 
	mn_addπy≥
;

111 
uöt32_t
 
	mn_√t
;

114 
	s£rvít
 {

115 *
	ms_«me
;

116 **
	ms_Æü£s
;

117 
	ms_p‹t
;

118 *
	ms_¥Ÿo
;

121 
	s¥Ÿ€¡
 {

122 *
	mp_«me
;

123 **
	mp_Æü£s
;

124 
	mp_¥Ÿo
;

127 
	saddröfo
 {

128 
	mai_Êags
;

129 
	mai_Ámûy
;

130 
	mai_sockty≥
;

131 
	mai_¥Ÿocﬁ
;

132 
sockÀn_t
 
	mai_addæí
;

133 *
	mai_ˇn⁄«me
;

134 
sockaddr
 *
	mai_addr
;

135 
addröfo
 *
	mai_√xt
;

143 
	#NETDB_INTERNAL
 -1

	)

144 
	#NETDB_SUCCESS
 0

	)

145 
	#HOST_NOT_FOUND
 1

	)

146 
	#TRY_AGAIN
 2

	)

147 
	#NO_RECOVERY
 3

	)

148 
	#NO_DATA
 4

	)

149 
	#NO_ADDRESS
 
NO_DATA


	)

156 
	#EAI_ADDRFAMILY
 1

	)

158 
	#EAI_AGAIN
 2

	)

159 
	#EAI_BADFLAGS
 3

	)

160 
	#EAI_FAIL
 4

	)

161 
	#EAI_FAMILY
 5

	)

162 
	#EAI_MEMORY
 6

	)

165 
	#EAI_NODATA
 7

	)

167 
	#EAI_NONAME
 8

	)

168 
	#EAI_SERVICE
 9

	)

169 
	#EAI_SOCKTYPE
 10

	)

170 
	#EAI_SYSTEM
 11

	)

171 
	#EAI_BADHINTS
 12

	)

172 
	#EAI_PROTOCOL
 13

	)

173 
	#EAI_OVERFLOW
 14

	)

174 
	#EAI_MAX
 15

	)

179 
	#AI_PASSIVE
 0x00000001

	)

180 
	#AI_CANONNAME
 0x00000002

	)

181 
	#AI_NUMERICHOST
 0x00000004

	)

182 
	#AI_NUMERICSERV
 0x00000008

	)

184 
	#AI_MASK
 \

185 (
AI_PASSIVE
 | 
AI_CANONNAME
 | 
AI_NUMERICHOST
 | 
AI_NUMERICSERV
 | \

186 
AI_ADDRCONFIG
)

	)

188 
	#AI_ALL
 0x00000100

	)

189 
	#AI_V4MAPPED_CFG
 0x00000200

	)

190 
	#AI_ADDRCONFIG
 0x00000400

	)

191 
	#AI_V4MAPPED
 0x00000800

	)

193 
	#AI_DEFAULT
 (
AI_V4MAPPED_CFG
 | 
AI_ADDRCONFIG
)

	)

198 
	#NI_MAXHOST
 1025

	)

199 
	#NI_MAXSERV
 32

	)

204 
	#NI_NOFQDN
 0x00000001

	)

205 
	#NI_NUMERICHOST
 0x00000002

	)

206 
	#NI_NAMEREQD
 0x00000004

	)

207 
	#NI_NUMERICSERV
 0x00000008

	)

208 
	#NI_DGRAM
 0x00000010

	)

210 
	#NI_WITHSCOPEID
 0x00000020

	)

216 
	#SCOPE_DELIMITER
 '%'

	)

218 
__BEGIN_DECLS


219 
ídho°ít
();

220 
íd√ã¡
();

221 
íd¥Ÿ€¡
();

222 
íd£rvít
();

223 #i‡
__BSD_VISIBLE
 || (
__POSIX_VISIBLE
 && __POSIX_VISIBLE <= 200112)

224 
ho°ít
 *
gëho°byaddr
(c⁄° *, 
sockÀn_t
, );

225 
ho°ít
 *
gëho°by«me
(const *);

227 
ho°ít
 *
gëho°ít
();

228 
√ã¡
 *
gë√tbyaddr
(
uöt32_t
, );

229 
√ã¡
 *
gë√tby«me
(const *);

230 
√ã¡
 *
gë√ã¡
();

231 
¥Ÿ€¡
 *
gë¥Ÿoby«me
(const *);

232 
¥Ÿ€¡
 *
gë¥Ÿobynumbî
();

233 
¥Ÿ€¡
 *
gë¥Ÿ€¡
();

234 
£rvít
 *
gë£rvby«me
(const *, const *);

235 
£rvít
 *
gë£rvbyp‹t
(, const *);

236 
£rvít
 *
gë£rvít
();

237 
£tho°ít
();

239 
£äëít
();

240 
£çrŸ€¡
();

241 
gëaddröfo
(const *, const *,

242 c⁄° 
addröfo
 *, addrinfo **);

243 
gë«meöfo
(c⁄° 
sockaddr
 *, 
sockÀn_t
, *,

244 
size_t
, *, size_t, );

245 
‰ìaddröfo
(
addröfo
 *);

246 c⁄° *
gai_°ªº‹
();

247 
£t£rvít
();

249 #i‡
__BSD_VISIBLE


250 
íd√tgª¡
();

251 
‰ìho°ít
(
ho°ít
 *);

252 
gëho°byaddr_r
(c⁄° *, 
sockÀn_t
, , 
ho°ít
 *,

253 *, 
size_t
, 
ho°ít
 **, *);

254 
gëho°by«me_r
(c⁄° *, 
ho°ít
 *, *, 
size_t
,

255 
ho°ít
 **, *);

256 
ho°ít
 *
gëho°by«me2
(const *, );

257 
gëho°by«me2_r
(c⁄° *, , 
ho°ít
 *, *,

258 
size_t
, 
ho°ít
 **, *);

259 
gëho°ít_r
(
ho°ít
 *, *, 
size_t
,

260 
ho°ít
 **, *);

261 
ho°ít
 *
gëùnodebyaddr
(c⁄° *, 
size_t
, , *);

262 
ho°ít
 *
gëùnodeby«me
(const *, , , *);

263 
gë√tbyaddr_r
(
uöt32_t
, , 
√ã¡
 *, *, 
size_t
,

264 
√ã¡
**, *);

265 
gë√tby«me_r
(c⁄° *, 
√ã¡
 *, *, 
size_t
,

266 
√ã¡
 **, *);

267 
gë√ã¡_r
(
√ã¡
 *, *, 
size_t
, netent **,

269 
gë√tgª¡
(**, **, **);

270 
gë¥Ÿoby«me_r
(c⁄° *, 
¥Ÿ€¡
 *, *,

271 
size_t
, 
¥Ÿ€¡
 **);

272 
gë¥Ÿobynumbî_r
(, 
¥Ÿ€¡
 *, *, 
size_t
,

273 
¥Ÿ€¡
 **);

274 
gë¥Ÿ€¡_r
(
¥Ÿ€¡
 *, *, 
size_t
,

275 
¥Ÿ€¡
 **);

276 
gë£rvby«me_r
(c⁄° *, c⁄° *, 
£rvít
 *,

277 *, 
size_t
, 
£rvít
 **);

278 
gë£rvbyp‹t_r
(, c⁄° *, 
£rvít
 *, *,

279 
size_t
, 
£rvít
 **);

280 
gë£rvít_r
(
£rvít
 *, *, 
size_t
,

281 
£rvít
 **);

282 
hîr‹
(const *);

283 
__c⁄°
 *
h°ªº‹
();

284 
ö√tgr
(const *, const *, const *, const *);

285 
£äëgª¡
(const *);

294 * 
__h_î∫o
();

295 
	g__END_DECLS


	@/usr/include/netinet/in.h

33 #i‚de‡
_NETINET_IN_H_


34 
	#_NETINET_IN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<machöe/ídün.h
>

41 
	#IPPROTO_IP
 0

	)

42 
	#IPPROTO_ICMP
 1

	)

43 
	#IPPROTO_TCP
 6

	)

44 
	#IPPROTO_UDP
 17

	)

46 
	#INADDR_ANY
 (
u_öt32_t
)0x00000000

	)

47 
	#INADDR_BROADCAST
 (
u_öt32_t
)0xfffffff‡

	)

49 #i‚de‡
_UINT8_T_DECLARED


50 
__uöt8_t
 
	tuöt8_t
;

51 
	#_UINT8_T_DECLARED


	)

54 #i‚de‡
_UINT16_T_DECLARED


55 
__uöt16_t
 
	tuöt16_t
;

56 
	#_UINT16_T_DECLARED


	)

59 #i‚de‡
_UINT32_T_DECLARED


60 
__uöt32_t
 
	tuöt32_t
;

61 
	#_UINT32_T_DECLARED


	)

64 #i‚de‡
_IN_ADDR_T_DECLARED


65 
uöt32_t
 
	tö_addr_t
;

66 
	#_IN_ADDR_T_DECLARED


	)

69 #i‚de‡
_IN_PORT_T_DECLARED


70 
uöt16_t
 
	tö_p‹t_t
;

71 
	#_IN_PORT_T_DECLARED


	)

74 #i‚de‡
_SA_FAMILY_T_DECLARED


75 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

76 
	#_SA_FAMILY_T_DECLARED


	)

80 #i‚def 
_STRUCT_IN_ADDR_DECLARED


81 
	sö_addr
 {

82 
ö_addr_t
 
	ms_addr
;

84 
	#_STRUCT_IN_ADDR_DECLARED


	)

87 #i‚def 
_SOCKLEN_T_DECLARED


88 
__sockÀn_t
 
	tsockÀn_t
;

89 
	#_SOCKLEN_T_DECLARED


	)

93 #i‚def 
_STRUCT_SOCKADDR_STORAGE_DECLARED


97 
	#_SS_MAXSIZE
 128U

	)

98 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

99 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - () - \

100 (
ß_Ámûy_t
))

	)

101 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () - \

102 (
ß_Ámûy_t
Ë- 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

104 
	ssockaddr_°‹age
 {

105 
	mss_Àn
;

106 
ß_Ámûy_t
 
	mss_Ámûy
;

107 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

108 
__öt64_t
 
	m__ss_Æign
;

109 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

111 
	#_STRUCT_SOCKADDR_STORAGE_DECLARED


	)

115 
	ssockaddr_ö
 {

116 
uöt8_t
 
	msö_Àn
;

117 
ß_Ámûy_t
 
	msö_Ámûy
;

118 
ö_p‹t_t
 
	msö_p‹t
;

119 
ö_addr
 
	msö_addr
;

120 
	msö_zîo
[8];

123 #i‡!
deföed
(
_KERNEL
Ë&& 
__BSD_VISIBLE


125 #i‚de‡
_BYTEORDER_PROTOTYPED


126 
	#_BYTEORDER_PROTOTYPED


	)

127 
__BEGIN_DECLS


128 
uöt32_t
 
ht⁄l
(uint32_t);

129 
uöt16_t
 
ht⁄s
(uint16_t);

130 
uöt32_t
 
¡ohl
(uint32_t);

131 
uöt16_t
 
¡ohs
(uint16_t);

132 
	g__END_DECLS


135 #i‚de‡
_BYTEORDER_FUNC_DEFINED


136 
	#_BYTEORDER_FUNC_DEFINED


	)

137 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

138 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

139 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

140 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

145 #i‡
__POSIX_VISIBLE
 >= 200112

146 
	#IPPROTO_RAW
 255

	)

147 
	#INET_ADDRSTRLEN
 16

	)

150 #i‡
__BSD_VISIBLE


159 
	#IPPROTO_HOPOPTS
 0

	)

160 
	#IPPROTO_IGMP
 2

	)

161 
	#IPPROTO_GGP
 3

	)

162 
	#IPPROTO_IPV4
 4

	)

163 
	#IPPROTO_IPIP
 
IPPROTO_IPV4


	)

164 
	#IPPROTO_ST
 7

	)

165 
	#IPPROTO_EGP
 8

	)

166 
	#IPPROTO_PIGP
 9

	)

167 
	#IPPROTO_RCCMON
 10

	)

168 
	#IPPROTO_NVPII
 11

	)

169 
	#IPPROTO_PUP
 12

	)

170 
	#IPPROTO_ARGUS
 13

	)

171 
	#IPPROTO_EMCON
 14

	)

172 
	#IPPROTO_XNET
 15

	)

173 
	#IPPROTO_CHAOS
 16

	)

174 
	#IPPROTO_MUX
 18

	)

175 
	#IPPROTO_MEAS
 19

	)

176 
	#IPPROTO_HMP
 20

	)

177 
	#IPPROTO_PRM
 21

	)

178 
	#IPPROTO_IDP
 22

	)

179 
	#IPPROTO_TRUNK1
 23

	)

180 
	#IPPROTO_TRUNK2
 24

	)

181 
	#IPPROTO_LEAF1
 25

	)

182 
	#IPPROTO_LEAF2
 26

	)

183 
	#IPPROTO_RDP
 27

	)

184 
	#IPPROTO_IRTP
 28

	)

185 
	#IPPROTO_TP
 29

	)

186 
	#IPPROTO_BLT
 30

	)

187 
	#IPPROTO_NSP
 31

	)

188 
	#IPPROTO_INP
 32

	)

189 
	#IPPROTO_SEP
 33

	)

190 
	#IPPROTO_3PC
 34

	)

191 
	#IPPROTO_IDPR
 35

	)

192 
	#IPPROTO_XTP
 36

	)

193 
	#IPPROTO_DDP
 37

	)

194 
	#IPPROTO_CMTP
 38

	)

195 
	#IPPROTO_TPXX
 39

	)

196 
	#IPPROTO_IL
 40

	)

197 
	#IPPROTO_IPV6
 41

	)

198 
	#IPPROTO_SDRP
 42

	)

199 
	#IPPROTO_ROUTING
 43

	)

200 
	#IPPROTO_FRAGMENT
 44

	)

201 
	#IPPROTO_IDRP
 45

	)

202 
	#IPPROTO_RSVP
 46

	)

203 
	#IPPROTO_GRE
 47

	)

204 
	#IPPROTO_MHRP
 48

	)

205 
	#IPPROTO_BHA
 49

	)

206 
	#IPPROTO_ESP
 50

	)

207 
	#IPPROTO_AH
 51

	)

208 
	#IPPROTO_INLSP
 52

	)

209 
	#IPPROTO_SWIPE
 53

	)

210 
	#IPPROTO_NHRP
 54

	)

211 
	#IPPROTO_MOBILE
 55

	)

212 
	#IPPROTO_TLSP
 56

	)

213 
	#IPPROTO_SKIP
 57

	)

214 
	#IPPROTO_ICMPV6
 58

	)

215 
	#IPPROTO_NONE
 59

	)

216 
	#IPPROTO_DSTOPTS
 60

	)

217 
	#IPPROTO_AHIP
 61

	)

218 
	#IPPROTO_CFTP
 62

	)

219 
	#IPPROTO_HELLO
 63

	)

220 
	#IPPROTO_SATEXPAK
 64

	)

221 
	#IPPROTO_KRYPTOLAN
 65

	)

222 
	#IPPROTO_RVD
 66

	)

223 
	#IPPROTO_IPPC
 67

	)

224 
	#IPPROTO_ADFS
 68

	)

225 
	#IPPROTO_SATMON
 69

	)

226 
	#IPPROTO_VISA
 70

	)

227 
	#IPPROTO_IPCV
 71

	)

228 
	#IPPROTO_CPNX
 72

	)

229 
	#IPPROTO_CPHB
 73

	)

230 
	#IPPROTO_WSN
 74

	)

231 
	#IPPROTO_PVP
 75

	)

232 
	#IPPROTO_BRSATMON
 76

	)

233 
	#IPPROTO_ND
 77

	)

234 
	#IPPROTO_WBMON
 78

	)

235 
	#IPPROTO_WBEXPAK
 79

	)

236 
	#IPPROTO_EON
 80

	)

237 
	#IPPROTO_VMTP
 81

	)

238 
	#IPPROTO_SVMTP
 82

	)

239 
	#IPPROTO_VINES
 83

	)

240 
	#IPPROTO_TTP
 84

	)

241 
	#IPPROTO_IGP
 85

	)

242 
	#IPPROTO_DGP
 86

	)

243 
	#IPPROTO_TCF
 87

	)

244 
	#IPPROTO_IGRP
 88

	)

245 
	#IPPROTO_OSPFIGP
 89

	)

246 
	#IPPROTO_SRPC
 90

	)

247 
	#IPPROTO_LARP
 91

	)

248 
	#IPPROTO_MTP
 92

	)

249 
	#IPPROTO_AX25
 93

	)

250 
	#IPPROTO_IPEIP
 94

	)

251 
	#IPPROTO_MICP
 95

	)

252 
	#IPPROTO_SCCSP
 96

	)

253 
	#IPPROTO_ETHERIP
 97

	)

254 
	#IPPROTO_ENCAP
 98

	)

255 
	#IPPROTO_APES
 99

	)

256 
	#IPPROTO_GMTP
 100

	)

257 
	#IPPROTO_IPCOMP
 108

	)

258 
	#IPPROTO_SCTP
 132

	)

260 
	#IPPROTO_PIM
 103

	)

261 
	#IPPROTO_CARP
 112

	)

262 
	#IPPROTO_PGM
 113

	)

263 
	#IPPROTO_PFSYNC
 240

	)

266 
	#IPPROTO_OLD_DIVERT
 254

	)

267 
	#IPPROTO_MAX
 256

	)

270 
	#IPPROTO_DONE
 257

	)

273 
	#IPPROTO_DIVERT
 258

	)

279 
	#IPPROTO_SPACER
 32767

	)

330 
	#IPPORT_RESERVED
 1024

	)

335 
	#IPPORT_EPHEMERALFIRST
 10000

	)

336 
	#IPPORT_EPHEMERALLAST
 65535

	)

341 
	#IPPORT_HIFIRSTAUTO
 49152

	)

342 
	#IPPORT_HILASTAUTO
 65535

	)

350 
	#IPPORT_RESERVEDSTART
 600

	)

352 
	#IPPORT_MAX
 65535

	)

359 
	#IN_CLASSA
(
i
Ë(((
u_öt32_t
)(iË& 0x80000000Ë=0)

	)

360 
	#IN_CLASSA_NET
 0xff000000

	)

361 
	#IN_CLASSA_NSHIFT
 24

	)

362 
	#IN_CLASSA_HOST
 0x00ffffff

	)

363 
	#IN_CLASSA_MAX
 128

	)

365 
	#IN_CLASSB
(
i
Ë(((
u_öt32_t
)(iË& 0xc0000000Ë=0x80000000)

	)

366 
	#IN_CLASSB_NET
 0xffff0000

	)

367 
	#IN_CLASSB_NSHIFT
 16

	)

368 
	#IN_CLASSB_HOST
 0x0000ffff

	)

369 
	#IN_CLASSB_MAX
 65536

	)

371 
	#IN_CLASSC
(
i
Ë(((
u_öt32_t
)(iË& 0xe0000000Ë=0xc0000000)

	)

372 
	#IN_CLASSC_NET
 0xffffff00

	)

373 
	#IN_CLASSC_NSHIFT
 8

	)

374 
	#IN_CLASSC_HOST
 0x000000ff

	)

376 
	#IN_CLASSD
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

377 
	#IN_CLASSD_NET
 0xf0000000

	)

378 
	#IN_CLASSD_NSHIFT
 28

	)

379 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

380 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

382 
	#IN_EXPERIMENTAL
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

383 
	#IN_BADCLASS
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

385 
	#IN_LINKLOCAL
(
i
Ë(((
u_öt32_t
)(iË& 0xffff0000Ë=0xa9„0000)

	)

386 
	#IN_LOOPBACK
(
i
Ë(((
u_öt32_t
)(iË& 0xff000000Ë=0x7f000000)

	)

387 
	#IN_ZERONET
(
i
Ë(((
u_öt32_t
)(iË& 0xff000000Ë=0)

	)

389 
	#IN_PRIVATE
(
i
Ë((((
u_öt32_t
)(i) & 0xff000000) == 0x0a000000) || \

390 (((
u_öt32_t
)(
i
) & 0xfff00000) == 0xac100000) || \

391 (((
u_öt32_t
)(
i
Ë& 0xffff0000Ë=0xc0a80000))

	)

393 
	#IN_LOCAL_GROUP
(
i
Ë(((
u_öt32_t
)(iË& 0xffffff00Ë=0xe0000000)

	)

395 
	#IN_ANY_LOCAL
(
i
Ë(
	`IN_LINKLOCAL
(iË|| 
	`IN_LOCAL_GROUP
(i))

	)

397 
	#INADDR_LOOPBACK
 (
u_öt32_t
)0x7f000001

	)

398 #i‚de‡
_KERNEL


399 
	#INADDR_NONE
 0xfffffff‡

	)

402 
	#INADDR_UNSPEC_GROUP
 (
u_öt32_t
)0xe0000000

	)

403 
	#INADDR_ALLHOSTS_GROUP
 (
u_öt32_t
)0xe0000001

	)

404 
	#INADDR_ALLRTRS_GROUP
 (
u_öt32_t
)0xe0000002

	)

405 
	#INADDR_ALLRPTS_GROUP
 (
u_öt32_t
)0xe0000016

	)

406 
	#INADDR_CARP_GROUP
 (
u_öt32_t
)0xe0000012

	)

407 
	#INADDR_PFSYNC_GROUP
 (
u_öt32_t
)0xe00000f0

	)

408 
	#INADDR_ALLMDNS_GROUP
 (
u_öt32_t
)0xe00000fb

	)

409 
	#INADDR_MAX_LOCAL_GROUP
 (
u_öt32_t
)0xe00000f‡

	)

411 
	#IN_LOOPBACKNET
 127

	)

417 
	#IP_OPTIONS
 1

	)

418 
	#IP_HDRINCL
 2

	)

419 
	#IP_TOS
 3

	)

420 
	#IP_TTL
 4

	)

421 
	#IP_RECVOPTS
 5

	)

422 
	#IP_RECVRETOPTS
 6

	)

423 
	#IP_RECVDSTADDR
 7

	)

424 
	#IP_SENDSRCADDR
 
IP_RECVDSTADDR


	)

425 
	#IP_RETOPTS
 8

	)

426 
	#IP_MULTICAST_IF
 9

	)

428 
	#IP_MULTICAST_TTL
 10

	)

429 
	#IP_MULTICAST_LOOP
 11

	)

430 
	#IP_ADD_MEMBERSHIP
 12

	)

431 
	#IP_DROP_MEMBERSHIP
 13

	)

432 
	#IP_MULTICAST_VIF
 14

	)

433 
	#IP_RSVP_ON
 15

	)

434 
	#IP_RSVP_OFF
 16

	)

435 
	#IP_RSVP_VIF_ON
 17

	)

436 
	#IP_RSVP_VIF_OFF
 18

	)

437 
	#IP_PORTRANGE
 19

	)

438 
	#IP_RECVIF
 20

	)

440 
	#IP_IPSEC_POLICY
 21

	)

441 
	#IP_FAITH
 22

	)

443 
	#IP_ONESBCAST
 23

	)

444 
	#IP_BINDANY
 24

	)

451 
	#IP_FW_TABLE_ADD
 40

	)

452 
	#IP_FW_TABLE_DEL
 41

	)

453 
	#IP_FW_TABLE_FLUSH
 42

	)

454 
	#IP_FW_TABLE_GETSIZE
 43

	)

455 
	#IP_FW_TABLE_LIST
 44

	)

457 
	#IP_FW3
 48

	)

458 
	#IP_DUMMYNET3
 49

	)

460 
	#IP_FW_ADD
 50

	)

461 
	#IP_FW_DEL
 51

	)

462 
	#IP_FW_FLUSH
 52

	)

463 
	#IP_FW_ZERO
 53

	)

464 
	#IP_FW_GET
 54

	)

465 
	#IP_FW_RESETLOG
 55

	)

467 
	#IP_FW_NAT_CFG
 56

	)

468 
	#IP_FW_NAT_DEL
 57

	)

469 
	#IP_FW_NAT_GET_CONFIG
 58

	)

470 
	#IP_FW_NAT_GET_LOG
 59

	)

472 
	#IP_DUMMYNET_CONFIGURE
 60

	)

473 
	#IP_DUMMYNET_DEL
 61

	)

474 
	#IP_DUMMYNET_FLUSH
 62

	)

475 
	#IP_DUMMYNET_GET
 64

	)

477 
	#IP_RECVTTL
 65

	)

478 
	#IP_MINTTL
 66

	)

479 
	#IP_DONTFRAG
 67

	)

482 
	#IP_ADD_SOURCE_MEMBERSHIP
 70

	)

483 
	#IP_DROP_SOURCE_MEMBERSHIP
 71

	)

484 
	#IP_BLOCK_SOURCE
 72

	)

485 
	#IP_UNBLOCK_SOURCE
 73

	)

488 
	#IP_MSFILTER
 74

	)

491 
	#MCAST_JOIN_GROUP
 80

	)

492 
	#MCAST_LEAVE_GROUP
 81

	)

493 
	#MCAST_JOIN_SOURCE_GROUP
 82

	)

494 
	#MCAST_LEAVE_SOURCE_GROUP
 83

	)

495 
	#MCAST_BLOCK_SOURCE
 84

	)

496 
	#MCAST_UNBLOCK_SOURCE
 85

	)

501 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

502 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

509 
	#IP_MIN_MEMBERSHIPS
 31

	)

510 
	#IP_MAX_MEMBERSHIPS
 4095

	)

511 
	#IP_MAX_SOURCE_FILTER
 1024

	)

517 
	#IP_MAX_GROUP_SRC_FILTER
 512

	)

518 
	#IP_MAX_SOCK_SRC_FILTER
 128

	)

519 
	#IP_MAX_SOCK_MUTE_FILTER
 128

	)

524 
	sù_mªq
 {

525 
ö_addr
 
	mimr_mu…üddr
;

526 
ö_addr
 
	mimr_öãrÁ˚
;

534 
	sù_mªqn
 {

535 
ö_addr
 
	mimr_mu…üddr
;

536 
ö_addr
 
	mimr_addªss
;

537 
	mimr_ifödex
;

543 
	sù_mªq_sour˚
 {

544 
ö_addr
 
	mimr_mu…üddr
;

545 
ö_addr
 
	mimr_sour˚addr
;

546 
ö_addr
 
	mimr_öãrÁ˚
;

553 
	sgroup_ªq
 {

554 
uöt32_t
 
	mgr_öãrÁ˚
;

555 
sockaddr_°‹age
 
	mgr_group
;

558 
	sgroup_sour˚_ªq
 {

559 
uöt32_t
 
	mg§_öãrÁ˚
;

560 
sockaddr_°‹age
 
	mg§_group
;

561 
sockaddr_°‹age
 
	mg§_sour˚
;

564 #i‚de‡
__MSFILTERREQ_DEFINED


565 
	#__MSFILTERREQ_DEFINED


	)

571 
	s__msfûãºeq
 {

572 
uöt32_t
 
	mms‰_ifödex
;

573 
uöt32_t
 
	mms‰_fmode
;

574 
uöt32_t
 
	mms‰_n§cs
;

575 
sockaddr_°‹age
 
	mms‰_group
;

576 
sockaddr_°‹age
 *
	mms‰_§cs
;

583 
	gsockaddr
;

590 
£tùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
,

591 
uöt32_t
, 
ö_addr
 *);

592 
gëùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
 *,

593 
uöt32_t
 *, 
ö_addr
 *);

594 
£tsour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

595 
uöt32_t
, uöt32_t, 
sockaddr_°‹age
 *);

596 
gësour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

597 
uöt32_t
 *, uöt32_à*, 
sockaddr_°‹age
 *);

602 
	#MCAST_UNDEFINED
 0

	)

603 
	#MCAST_INCLUDE
 1

	)

604 
	#MCAST_EXCLUDE
 2

	)

610 
	#IP_PORTRANGE_DEFAULT
 0

	)

611 
	#IP_PORTRANGE_HIGH
 1

	)

612 
	#IP_PORTRANGE_LOW
 2

	)

620 
	#IPPROTO_MAXID
 (
IPPROTO_AH
 + 1Ë

	)

622 
	#CTL_IPPROTO_NAMES
 { \

623 { "ù", 
CTLTYPE_NODE
 }, \

624 { "icmp", 
CTLTYPE_NODE
 }, \

625 { "igmp", 
CTLTYPE_NODE
 }, \

626 { "ggp", 
CTLTYPE_NODE
 }, \

629 { "t˝", 
CTLTYPE_NODE
 }, \

631 { "egp", 
CTLTYPE_NODE
 }, \

635 { "pup", 
CTLTYPE_NODE
 }, \

640 { "udp", 
CTLTYPE_NODE
 }, \

645 { "idp", 
CTLTYPE_NODE
 }, \

674 { "ù£c", 
CTLTYPE_NODE
 }, \

690 { "pim", 
CTLTYPE_NODE
 }, \

691 }

	)

696 
	#IPCTL_FORWARDING
 1

	)

697 
	#IPCTL_SENDREDIRECTS
 2

	)

698 
	#IPCTL_DEFTTL
 3

	)

699 #ifde‡
nŸyë


700 
	#IPCTL_DEFMTU
 4

	)

702 
	#IPCTL_RTEXPIRE
 5

	)

703 
	#IPCTL_RTMINEXPIRE
 6

	)

704 
	#IPCTL_RTMAXCACHE
 7

	)

705 
	#IPCTL_SOURCEROUTE
 8

	)

706 
	#IPCTL_DIRECTEDBROADCAST
 9

	)

707 
	#IPCTL_INTRQMAXLEN
 10

	)

708 
	#IPCTL_INTRQDROPS
 11

	)

709 
	#IPCTL_STATS
 12

	)

710 
	#IPCTL_ACCEPTSOURCEROUTE
 13

	)

711 
	#IPCTL_FASTFORWARDING
 14

	)

712 
	#IPCTL_KEEPFAITH
 15

	)

713 
	#IPCTL_GIF_TTL
 16

	)

714 
	#IPCTL_MAXID
 17

	)

716 
	#IPCTL_NAMES
 { \

718 { "f‹w¨dög", 
CTLTYPE_INT
 }, \

719 { "ªdúe˘", 
CTLTYPE_INT
 }, \

720 { "âl", 
CTLTYPE_INT
 }, \

721 { "mtu", 
CTLTYPE_INT
 }, \

722 { "πexpúe", 
CTLTYPE_INT
 }, \

723 { "πmöexpúe", 
CTLTYPE_INT
 }, \

724 { "πmaxˇche", 
CTLTYPE_INT
 }, \

725 { "sour˚rouã", 
CTLTYPE_INT
 }, \

726 { "dúe˘ed-brﬂdˇ°", 
CTLTYPE_INT
 }, \

727 { "öå-queue-maxÀn", 
CTLTYPE_INT
 }, \

728 { "öå-queue-dr›s", 
CTLTYPE_INT
 }, \

729 { "°©s", 
CTLTYPE_STRUCT
 }, \

730 { "ac˚±_sour˚rouã", 
CTLTYPE_INT
 }, \

731 { "Á°f‹w¨dög", 
CTLTYPE_INT
 }, \

732 }

	)

736 #ifde‡
_KERNEL


738 
	gi‚ë
; 
	gmbuf
;

740 
ö_brﬂdˇ°
(
ö_addr
, 
i‚ë
 *);

741 
ö_ˇnf‹w¨d
(
ö_addr
);

742 
ö_loˇœddr
(
ö_addr
);

743 
ö_loˇlù
(
ö_addr
);

744 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

745 *
öë_¡ﬂ
(
ö_addr
);

746 *
öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
);

747 *
öë_¡›
(, c⁄° *, *, 
sockÀn_t
);

748 
öë_±⁄
(
af
, const *, *);

749 
ö_ifdëach
(
i‚ë
 *);

751 
	#ö_ho°eq
(
s
, 
t
Ë((s).
s_addr
 =—).s_addr)

	)

752 
	#ö_nuŒho°
(
x
Ë((x).
s_addr
 =
INADDR_ANY
)

	)

753 
	#ö_Ælho°s
(
x
Ë((x).
s_addr
 =
	`ht⁄l
(
INADDR_ALLHOSTS_GROUP
))

	)

755 
	#ßtosö
(
ß
Ë((
sockaddr_ö
 *)(ß))

	)

756 
	#sötoß
(
sö
Ë((
sockaddr
 *)(sö))

	)

757 
	#iÁtoü
(
iÁ
Ë((
ö_iÁddr
 *)(iÁ))

	)

768 #i‡(
BYTE_ORDER
 =
BIG_ENDIAN
Ë|| 
deföed
(
HAVE_NET_IPLEN
)

769 
	#SET_NET_IPLEN
(
p
Ëdÿ{} 0)

	)

770 
	#SET_HOST_IPLEN
(
p
Ëdÿ{} 0)

	)

772 
	#SET_NET_IPLEN
(
p
) do { \

773 
ù
 *
h_ù
 = (
p
); \

774 
h_ù
->
ù_Àn
 = 
	`ht⁄s
(h_ip->ip_len); \

775 
h_ù
->
ù_off
 = 
	`ht⁄s
(h_ip->ip_off); \

776 } 0)

	)

778 
	#SET_HOST_IPLEN
(
p
) do { \

779 
ù
 *
h_ù
 = (
p
); \

780 
h_ù
->
ù_Àn
 = 
	`¡ohs
(h_ip->ip_len); \

781 
h_ù
->
ù_off
 = 
	`¡ohs
(h_ip->ip_off); \

782 } 0)

	)

788 #i‡
__POSIX_VISIBLE
 >= 200112

789 
	#__KAME_NETINET_IN_H_INCLUDED_


	)

790 
	~<√töë6/ö6.h
>

791 #unde‡
__KAME_NETINET_IN_H_INCLUDED_


	@/usr/include/netinet/in_systm.h

33 #i‚de‡
_NETINET_IN_SYSTM_H_


34 
	#_NETINET_IN_SYSTM_H_


	)

49 
u_öt16_t
 
	tn_sh‹t
;

50 
u_öt32_t
 
	tn_l⁄g
;

52 
u_öt32_t
 
	tn_time
;

54 #ifde‡
_KERNEL


55 
uöt32_t
 
ùtime
();

	@/usr/include/netinet/ip.h

34 #i‚de‡
_NETINET_IP_H_


35 
	#_NETINET_IP_H_


	)

37 
	~<sys/cdefs.h
>

44 
	#IPVERSION
 4

	)

49 
	sù
 {

50 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


51 
u_öt
 
	mù_hl
:4,

52 
	mù_v
:4;

54 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


55 
u_öt
 
	mù_v
:4,

56 
	mù_hl
:4;

58 
u_ch¨
 
	mù_tos
;

59 
u_sh‹t
 
	mù_Àn
;

60 
u_sh‹t
 
	mù_id
;

61 
u_sh‹t
 
	mù_off
;

62 
	#IP_RF
 0x8000

	)

63 
	#IP_DF
 0x4000

	)

64 
	#IP_MF
 0x2000

	)

65 
	#IP_OFFMASK
 0x1ff‡

	)

66 
u_ch¨
 
	mù_âl
;

67 
u_ch¨
 
	mù_p
;

68 
u_sh‹t
 
	mù_sum
;

69 
ö_addr
 
	mù_§c
,
	mù_d°
;

70 } 
__∑cked
 
__Æig√d
(4);

72 
	#IP_MAXPACKET
 65535

	)

77 
	#IPTOS_LOWDELAY
 0x10

	)

78 
	#IPTOS_THROUGHPUT
 0x08

	)

79 
	#IPTOS_RELIABILITY
 0x04

	)

80 
	#IPTOS_MINCOST
 0x02

	)

85 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

86 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

87 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

88 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

89 
	#IPTOS_PREC_FLASH
 0x60

	)

90 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

91 
	#IPTOS_PREC_PRIORITY
 0x20

	)

92 
	#IPTOS_PREC_ROUTINE
 0x00

	)

98 
	#IPTOS_ECN_NOTECT
 0x00

	)

99 
	#IPTOS_ECN_ECT1
 0x01

	)

100 
	#IPTOS_ECN_ECT0
 0x02

	)

101 
	#IPTOS_ECN_CE
 0x03

	)

102 
	#IPTOS_ECN_MASK
 0x03

	)

107 
	#IPOPT_COPIED
(
o
Ë((o)&0x80)

	)

108 
	#IPOPT_CLASS
(
o
Ë((o)&0x60)

	)

109 
	#IPOPT_NUMBER
(
o
Ë((o)&0x1f)

	)

111 
	#IPOPT_CONTROL
 0x00

	)

112 
	#IPOPT_RESERVED1
 0x20

	)

113 
	#IPOPT_DEBMEAS
 0x40

	)

114 
	#IPOPT_RESERVED2
 0x60

	)

116 
	#IPOPT_EOL
 0

	)

117 
	#IPOPT_NOP
 1

	)

119 
	#IPOPT_RR
 7

	)

120 
	#IPOPT_TS
 68

	)

121 
	#IPOPT_SECURITY
 130

	)

122 
	#IPOPT_LSRR
 131

	)

123 
	#IPOPT_ESO
 133

	)

124 
	#IPOPT_CIPSO
 134

	)

125 
	#IPOPT_SATID
 136

	)

126 
	#IPOPT_SSRR
 137

	)

127 
	#IPOPT_RA
 148

	)

132 
	#IPOPT_OPTVAL
 0

	)

133 
	#IPOPT_OLEN
 1

	)

134 
	#IPOPT_OFFSET
 2

	)

135 
	#IPOPT_MINOFF
 4

	)

140 
	sù_time°amp
 {

141 
u_ch¨
 
	mùt_code
;

142 
u_ch¨
 
	mùt_Àn
;

143 
u_ch¨
 
	mùt_±r
;

144 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


145 
u_öt
 
	mùt_Êg
:4,

146 
	mùt_oÊw
:4;

148 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


149 
u_öt
 
	mùt_oÊw
:4,

150 
	mùt_Êg
:4;

152 
	uùt_time°amp
 {

153 
uöt32_t
 
	mùt_time
[1];

154 
	sùt_è
 {

155 
ö_addr
 
	mùt_addr
;

156 
uöt32_t
 
	mùt_time
;

157 } 
	mùt_è
[1];

158 } 
	mùt_time°amp
;

162 
	#IPOPT_TS_TSONLY
 0

	)

163 
	#IPOPT_TS_TSANDADDR
 1

	)

164 
	#IPOPT_TS_PRESPEC
 3

	)

167 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

168 
	#IPOPT_SECUR_CONFID
 0xf135

	)

169 
	#IPOPT_SECUR_EFTO
 0x789a

	)

170 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

171 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

172 
	#IPOPT_SECUR_SECRET
 0xd788

	)

173 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

178 
	#MAXTTL
 255

	)

179 
	#IPDEFTTL
 64

	)

180 
	#IPFRAGTTL
 60

	)

181 
	#IPTTLDEC
 1

	)

182 
	#IP_MSS
 576

	)

189 
	sùp£udo
 {

190 
ö_addr
 
	mùp£udo_§c
;

191 
ö_addr
 
	mùp£udo_d°
;

192 
u_ch¨
 
	mùp£udo_∑d
;

193 
u_ch¨
 
	mùp£udo_p
;

194 
u_sh‹t
 
	mùp£udo_Àn
;

	@/usr/include/nlist.h

43 #i‚de‡
_NLIST_H_


44 
	#_NLIST_H_


	)

46 
	~<sys/∆i°_aout.h
>

47 
	~<sys/cdefs.h
>

49 
__BEGIN_DECLS


50 
∆i°
(const *, nlist *);

51 
	g__END_DECLS


	@/usr/include/openssl/des.h

59 #i‚de‡
HEADER_NEW_DES_H


60 
	#HEADER_NEW_DES_H


	)

62 
	~<›ís¶/e_os2.h
>

65 #ifde‡
OPENSSL_NO_DES


66 #îr‹ 
DES
 
is
 
dißbÀd
.

69 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


70 #unde‡
OPENSSL_EXTERN


71 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

74 #ifde‡ 
__˝lu•lus


78 
	tDES_cblock
[8];

79 
	tc⁄°_DES_cblock
[8];

83 
	sDES_ks


87 
DES_cblock
 
cblock
;

90 
DES_LONG
 
de¶⁄g
[2];

91 } 
ks
[16];

92 } 
	tDES_key_scheduÀ
;

94 #i‚de‡
OPENSSL_DISABLE_OLD_DES_SUPPORT


95 #i‚de‡
OPENSSL_ENABLE_OLD_DES_SUPPORT


96 
	#OPENSSL_ENABLE_OLD_DES_SUPPORT


	)

100 #ifde‡
OPENSSL_ENABLE_OLD_DES_SUPPORT


101 
	~<›ís¶/des_ﬁd.h
>

104 
	#DES_KEY_SZ
 ((
DES_cblock
))

	)

105 
	#DES_SCHEDULE_SZ
 ((
DES_key_scheduÀ
))

	)

107 
	#DES_ENCRYPT
 1

	)

108 
	#DES_DECRYPT
 0

	)

110 
	#DES_CBC_MODE
 0

	)

111 
	#DES_PCBC_MODE
 1

	)

113 
	#DES_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

114 
	`DES_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

116 
	#DES_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

117 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

119 
	#DES_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

120 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

122 
	#DES_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

123 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

125 
OPENSSL_DECLARE_GLOBAL
(,
DES_check_key
);

126 
	#DES_check_key
 
	`OPENSSL_GLOBAL_REF
(
DES_check_key
)

	)

127 
OPENSSL_DECLARE_GLOBAL
(,
DES_rw_mode
);

128 
	#DES_rw_mode
 
	`OPENSSL_GLOBAL_REF
(
DES_rw_mode
)

	)

130 c⁄° *
DES_›ti⁄s
();

131 
DES_ecb3_í¸y±
(
c⁄°_DES_cblock
 *
öput
, 
DES_cblock
 *
ouçut
,

132 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

133 
DES_key_scheduÀ
 *
ks3
, 
íc
);

134 
DES_LONG
 
DES_cbc_cksum
(c⁄° *
öput
,
DES_cblock
 *
ouçut
,

135 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,

136 
c⁄°_DES_cblock
 *
ivec
);

138 
DES_cbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

139 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

140 
íc
);

141 
DES_ncbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

142 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

143 
íc
);

144 
DES_xcbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

145 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

146 
c⁄°_DES_cblock
 *
öw
,c⁄°_DES_cblock *
outw
,
íc
);

147 
DES_cfb_í¸y±
(c⁄° *
ö
,*
out
,
numbôs
,

148 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

149 
íc
);

150 
DES_ecb_í¸y±
(
c⁄°_DES_cblock
 *
öput
,
DES_cblock
 *
ouçut
,

151 
DES_key_scheduÀ
 *
ks
,
íc
);

162 
DES_í¸y±1
(
DES_LONG
 *
d©a
,
DES_key_scheduÀ
 *
ks
, 
íc
);

170 
DES_í¸y±2
(
DES_LONG
 *
d©a
,
DES_key_scheduÀ
 *
ks
, 
íc
);

172 
DES_í¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

173 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

174 
DES_de¸y±3
(
DES_LONG
 *
d©a
, 
DES_key_scheduÀ
 *
ks1
,

175 
DES_key_scheduÀ
 *
ks2
, DES_key_scheduÀ *
ks3
);

176 
DES_ede3_cbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

177 
Àngth
,

178 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

179 
DES_key_scheduÀ
 *
ks3
,
DES_cblock
 *
ivec
,
íc
);

180 
DES_ede3_cbcm_í¸y±
(c⁄° *
ö
,*
out
,

181 
Àngth
,

182 
DES_key_scheduÀ
 *
ks1
,DES_key_scheduÀ *
ks2
,

183 
DES_key_scheduÀ
 *
ks3
,

184 
DES_cblock
 *
ivec1
,DES_cblock *
ivec2
,

185 
íc
);

186 
DES_ede3_cfb64_í¸y±
(c⁄° *
ö
,*
out
,

187 
Àngth
,
DES_key_scheduÀ
 *
ks1
,

188 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

189 
DES_cblock
 *
ivec
,*
num
,
íc
);

190 
DES_ede3_cfb_í¸y±
(c⁄° *
ö
,*
out
,

191 
numbôs
,
Àngth
,
DES_key_scheduÀ
 *
ks1
,

192 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

193 
DES_cblock
 *
ivec
,
íc
);

194 
DES_ede3_ofb64_í¸y±
(c⁄° *
ö
,*
out
,

195 
Àngth
,
DES_key_scheduÀ
 *
ks1
,

196 
DES_key_scheduÀ
 *
ks2
,DES_key_scheduÀ *
ks3
,

197 
DES_cblock
 *
ivec
,*
num
);

199 
DES_xwhôe_ö2out
(
c⁄°_DES_cblock
 *
DES_key
,c⁄°_DES_cblock *
ö_whôe
,

200 
DES_cblock
 *
out_whôe
);

203 
DES_íc_ªad
(
fd
,*
buf
,
Àn
,
DES_key_scheduÀ
 *
sched
,

204 
DES_cblock
 *
iv
);

205 
DES_íc_wrôe
(
fd
,c⁄° *
buf
,
Àn
,
DES_key_scheduÀ
 *
sched
,

206 
DES_cblock
 *
iv
);

207 *
DES_f¸y±
(c⁄° *
buf
,c⁄° *
ß…
, *
ªt
);

208 *
DES_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

209 
DES_ofb_í¸y±
(c⁄° *
ö
,*
out
,
numbôs
,

210 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
);

211 
DES_pcbc_í¸y±
(c⁄° *
öput
,*
ouçut
,

212 
Àngth
,
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,

213 
íc
);

214 
DES_LONG
 
DES_quad_cksum
(c⁄° *
öput
,
DES_cblock
 
ouçut
[],

215 
Àngth
,
out_cou¡
,
DES_cblock
 *
£ed
);

216 
DES_øndom_key
(
DES_cblock
 *
ªt
);

217 
DES_£t_odd_∑rôy
(
DES_cblock
 *
key
);

218 
DES_check_key_∑rôy
(
c⁄°_DES_cblock
 *
key
);

219 
DES_is_wók_key
(
c⁄°_DES_cblock
 *
key
);

223 
DES_£t_key
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

224 
DES_key_sched
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

225 
DES_£t_key_checked
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

226 
DES_£t_key_unchecked
(
c⁄°_DES_cblock
 *
key
,
DES_key_scheduÀ
 *
scheduÀ
);

227 
DES_°rög_to_key
(c⁄° *
°r
,
DES_cblock
 *
key
);

228 
DES_°rög_to_2keys
(c⁄° *
°r
,
DES_cblock
 *
key1
,DES_cblock *
key2
);

229 
DES_cfb64_í¸y±
(c⁄° *
ö
,*
out
,
Àngth
,

230 
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,*
num
,

231 
íc
);

232 
DES_ofb64_í¸y±
(c⁄° *
ö
,*
out
,
Àngth
,

233 
DES_key_scheduÀ
 *
scheduÀ
,
DES_cblock
 *
ivec
,*
num
);

235 
DES_ªad_∑ssw‹d
(
DES_cblock
 *
key
, c⁄° *
¥om±
, 
vîify
);

236 
DES_ªad_2∑ssw‹ds
(
DES_cblock
 *
key1
, DES_cblock *
key2
, c⁄° *
¥om±
,

237 
vîify
);

239 
	#DES_fixup_key_∑rôy
 
DES_£t_odd_∑rôy


	)

241 #ifde‡ 
__˝lu•lus


	@/usr/include/paths.h

37 #i‚de‡
_PATHS_H_


38 
	#_PATHS_H_


	)

40 
	~<sys/cdefs.h
>

43 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

45 
	#_PATH_STDPATH
 "/u§/bö:/bö:/u§/sbö:/sbö:"

	)

47 
	#_PATH_SYSPATH
 "/sbö:/u§/sbö"

	)

49 
	#_PATH_AUTHCONF
 "/ëc/auth.c⁄f"

	)

50 
	#_PATH_BSHELL
 "/bö/sh"

	)

51 
	#_PATH_CAPABILITY
 "/ëc/ˇ∑bûôy"

	)

52 
	#_PATH_CAPABILITY_DB
 "/ëc/ˇ∑bûôy.db"

	)

53 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

54 
	#_PATH_CP
 "/bö/˝"

	)

55 
	#_PATH_CSHELL
 "/bö/csh"

	)

56 
	#_PATH_DEFTAPE
 "/dev/ß0"

	)

57 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

58 
	#_PATH_DEVZERO
 "/dev/zîo"

	)

59 
	#_PATH_DRUM
 "/dev/drum"

	)

60 
	#_PATH_ETC
 "/ëc"

	)

61 
	#_PATH_FTPUSERS
 "/ëc/·pu£rs"

	)

62 
	#_PATH_FWMEM
 "/dev/fwmem"

	)

63 
	#_PATH_HALT
 "/sbö/hÆt"

	)

64 
	#_PATH_IFCONFIG
 "/sbö/ifc⁄fig"

	)

65 
	#_PATH_KMEM
 "/dev/kmem"

	)

66 
	#_PATH_LIBMAP_CONF
 "/ëc/libm≠.c⁄f"

	)

67 
	#_PATH_LOCALE
 "/u§/sh¨e/loˇÀ"

	)

68 
	#_PATH_LOGIN
 "/u§/bö/logö"

	)

69 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

70 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

71 
	#_PATH_MDCONFIG
 "/sbö/mdc⁄fig"

	)

72 
	#_PATH_MEM
 "/dev/mem"

	)

73 
	#_PATH_MKSNAP_FFS
 "/sbö/mk¢≠_ffs"

	)

74 
	#_PATH_MOUNT
 "/sbö/mou¡"

	)

75 
	#_PATH_NEWFS
 "/sbö/√wfs"

	)

76 
	#_PATH_NOLOGIN
 "/v¨/run/nﬁogö"

	)

77 
	#_PATH_RCP
 "/bö/r˝"

	)

78 
	#_PATH_REBOOT
 "/sbö/ªboŸ"

	)

79 
	#_PATH_RLOGIN
 "/u§/bö/æogö"

	)

80 
	#_PATH_RM
 "/bö/rm"

	)

81 
	#_PATH_RSH
 "/u§/bö/rsh"

	)

82 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

83 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

84 
	#_PATH_TTY
 "/dev/ây"

	)

85 
	#_PATH_UNIX
 "d⁄'àu£ _PATH_UNIX"

	)

86 
	#_PATH_VI
 "/u§/bö/vi"

	)

87 
	#_PATH_WALL
 "/u§/bö/wÆl"

	)

90 
	#_PATH_DEV
 "/dev/"

	)

91 
	#_PATH_TMP
 "/tmp/"

	)

92 
	#_PATH_VARDB
 "/v¨/db/"

	)

93 
	#_PATH_VARRUN
 "/v¨/run/"

	)

94 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

95 
	#_PATH_YP
 "/v¨/yp/"

	)

96 
	#_PATH_UUCPLOCK
 "/v¨/•oﬁ/lock/"

	)

99 
__BEGIN_DECLS


100 c⁄° *
gëboŸfûe
();

101 
	g__END_DECLS


103 #ifde‡
RESCUE


104 #unde‡
_PATH_DEFPATH


105 
	#_PATH_DEFPATH
 "/ªscue:/u§/bö:/bö"

	)

106 #unde‡
_PATH_STDPATH


107 
	#_PATH_STDPATH
 "/ªscue:/u§/bö:/bö:/u§/sbö:/sbö"

	)

108 #unde‡
_PATH_SYSPATH


109 
	#_PATH_SYSPATH
 "/ªscue:/sbö:/u§/sbö"

	)

110 #unde‡
_PATH_BSHELL


111 
	#_PATH_BSHELL
 "/ªscue/sh"

	)

112 #unde‡
_PATH_CP


113 
	#_PATH_CP
 "/ªscue/˝"

	)

114 #unde‡
_PATH_CSHELL


115 
	#_PATH_CSHELL
 "/ªscue/csh"

	)

116 #unde‡
_PATH_HALT


117 
	#_PATH_HALT
 "/ªscue/hÆt"

	)

118 #unde‡
_PATH_IFCONFIG


119 
	#_PATH_IFCONFIG
 "/ªscue/ifc⁄fig"

	)

120 #unde‡
_PATH_MDCONFIG


121 
	#_PATH_MDCONFIG
 "/ªscue/mdc⁄fig"

	)

122 #unde‡
_PATH_MOUNT


123 
	#_PATH_MOUNT
 "/ªscue/mou¡"

	)

124 #unde‡
_PATH_NEWFS


125 
	#_PATH_NEWFS
 "/ªscue/√wfs"

	)

126 #unde‡
_PATH_RCP


127 
	#_PATH_RCP
 "/ªscue/r˝"

	)

128 #unde‡
_PATH_REBOOT


129 
	#_PATH_REBOOT
 "/ªscue/ªboŸ"

	)

130 #unde‡
_PATH_RM


131 
	#_PATH_RM
 "/ªscue/rm"

	)

132 #unde‡
_PATH_VI


133 
	#_PATH_VI
 "/ªscue/vi"

	)

134 #unde‡
_PATH_WALL


135 
	#_PATH_WALL
 "/ªscue/wÆl"

	)

	@/usr/include/protocols/timed.h

38 #i‚def 
_PROTOCOLS_TIMED_H_


39 
	#_PROTOCOLS_TIMED_H_


	)

45 
	#TSPVERSION
 1

	)

46 
	#ANYADDR
 
NULL


	)

48 
	st•
 {

49 
u_öt8_t
 
	mt•_ty≥
;

50 
u_öt8_t
 
	mt•_vîs
;

51 
u_öt16_t
 
	mt•_£q
;

54 
öt32_t
 
	mtv_£c
;

55 
öt32_t
 
	mtv_u£c
;

56 } 
	mt•u_time
;

57 
	mt•u_h›˙t
;

58 } 
	mt•_u
;

59 
	mt•_«me
[
MAXHOSTNAMELEN
];

62 
	#t•_time
 
t•_u
.
t•u_time


	)

63 
	#t•_h›˙t
 
t•_u
.
t•u_h›˙t


	)

68 
	#TSP_ANY
 0

	)

69 
	#TSP_ADJTIME
 1

	)

70 
	#TSP_ACK
 2

	)

71 
	#TSP_MASTERREQ
 3

	)

72 
	#TSP_MASTERACK
 4

	)

73 
	#TSP_SETTIME
 5

	)

74 
	#TSP_MASTERUP
 6

	)

75 
	#TSP_SLAVEUP
 7

	)

76 
	#TSP_ELECTION
 8

	)

77 
	#TSP_ACCEPT
 9

	)

78 
	#TSP_REFUSE
 10

	)

79 
	#TSP_CONFLICT
 11

	)

80 
	#TSP_RESOLVE
 12

	)

81 
	#TSP_QUIT
 13

	)

82 
	#TSP_DATE
 14

	)

83 
	#TSP_DATEREQ
 15

	)

84 
	#TSP_DATEACK
 16

	)

85 
	#TSP_TRACEON
 17

	)

86 
	#TSP_TRACEOFF
 18

	)

87 
	#TSP_MSITE
 19

	)

88 
	#TSP_MSITEREQ
 20

	)

89 
	#TSP_TEST
 21

	)

90 
	#TSP_SETDATE
 22

	)

91 
	#TSP_SETDATEREQ
 23

	)

92 
	#TSP_LOOP
 24

	)

94 
	#TSPTYPENUMBER
 25

	)

96 #ifde‡
TSPTYPES


97 c⁄° *
	gt•ty≥
[
TSPTYPENUMBER
] =

	@/usr/include/pwd.h

42 #i‚de‡
_PWD_H_


43 
	#_PWD_H_


	)

45 
	~<sys/cdefs.h
>

46 
	~<sys/_ty≥s.h
>

48 #i‚de‡
_GID_T_DECLARED


49 
__gid_t
 
	tgid_t
;

50 
	#_GID_T_DECLARED


	)

53 #i‚de‡
_TIME_T_DECLARED


54 
__time_t
 
	ttime_t
;

55 
	#_TIME_T_DECLARED


	)

58 #i‚de‡
_UID_T_DECLARED


59 
__uid_t
 
	tuid_t
;

60 
	#_UID_T_DECLARED


	)

63 #i‚de‡
_SIZE_T_DECLARED


64 
__size_t
 
	tsize_t
;

65 
	#_SIZE_T_DECLARED


	)

68 
	#_PATH_PWD
 "/ëc"

	)

69 
	#_PATH_PASSWD
 "/ëc/∑sswd"

	)

70 
	#_PASSWD
 "∑sswd"

	)

71 
	#_PATH_MASTERPASSWD
 "/ëc/ma°î.∑sswd"

	)

72 
	#_MASTERPASSWD
 "ma°î.∑sswd"

	)

74 
	#_PATH_MP_DB
 "/ëc/pwd.db"

	)

75 
	#_MP_DB
 "pwd.db"

	)

76 
	#_PATH_SMP_DB
 "/ëc/•wd.db"

	)

77 
	#_SMP_DB
 "•wd.db"

	)

79 
	#_PATH_PWD_MKDB
 "/u§/sbö/pwd_mkdb"

	)

96 
	#_PW_VERSION_MASK
 '\xF0'

	)

97 
	#_PW_VERSIONED
(
x
, 
v
Ë(()(((xË& 0xCFË| ((v)<<4)))

	)

99 
	#_PW_KEYBYNAME
 '\x31'

	)

100 
	#_PW_KEYBYNUM
 '\x32'

	)

101 
	#_PW_KEYBYUID
 '\x33'

	)

102 
	#_PW_KEYYPENABLED
 '\x34'

	)

103 
	#_PW_KEYYPBYNUM
 '\x35'

	)

109 
	#_PWD_VERSION_KEY
 "\xFF" "VERSION"

	)

110 
	#_PWD_CURRENT_VERSION
 '\x04'

	)

112 
	#_PASSWORD_EFMT1
 '_'

	)

114 
	#_PASSWORD_LEN
 128

	)

116 
	s∑sswd
 {

117 *
	mpw_«me
;

118 *
	mpw_∑sswd
;

119 
uid_t
 
	mpw_uid
;

120 
gid_t
 
	mpw_gid
;

121 
time_t
 
	mpw_ch™ge
;

122 *
	mpw_˛ass
;

123 *
	mpw_gecos
;

124 *
	mpw_dú
;

125 *
	mpw_shñl
;

126 
time_t
 
	mpw_expúe
;

127 
	mpw_fõlds
;

131 
	#_PWF
(
x
Ë(1 << x)

	)

132 
	#_PWF_NAME
 
	`_PWF
(0)

	)

133 
	#_PWF_PASSWD
 
	`_PWF
(1)

	)

134 
	#_PWF_UID
 
	`_PWF
(2)

	)

135 
	#_PWF_GID
 
	`_PWF
(3)

	)

136 
	#_PWF_CHANGE
 
	`_PWF
(4)

	)

137 
	#_PWF_CLASS
 
	`_PWF
(5)

	)

138 
	#_PWF_GECOS
 
	`_PWF
(6)

	)

139 
	#_PWF_DIR
 
	`_PWF
(7)

	)

140 
	#_PWF_SHELL
 
	`_PWF
(8)

	)

141 
	#_PWF_EXPIRE
 
	`_PWF
(9)

	)

146 
	#_PWF_SOURCE
 0x3000

	)

147 
	#_PWF_FILES
 0x1000

	)

148 
	#_PWF_NIS
 0x2000

	)

149 
	#_PWF_HESIOD
 0x3000

	)

151 
__BEGIN_DECLS


152 
∑sswd
 *
gëpw«m
(const *);

153 
∑sswd
 *
gëpwuid
(
uid_t
);

155 #i‡
__XSI_VISIBLE
 >= 500

156 
ídpwít
();

157 
∑sswd
 *
gëpwít
();

158 
£çwít
();

161 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE
 >= 500

162 
gëpw«m_r
(c⁄° *, 
∑sswd
 *, *, 
size_t
,

163 
∑sswd
 **);

164 
gëpwuid_r
(
uid_t
, 
∑sswd
 *, *, 
size_t
,

165 
∑sswd
 **);

168 #i‡
__BSD_VISIBLE


169 
gëpwít_r
(
∑sswd
 *, *, 
size_t
, passwd **);

170 
£ças£¡
();

171 c⁄° *
u£r_‰om_uid
(
uid_t
, );

173 
	g__END_DECLS


	@/usr/include/regex.h

41 #i‚de‡
_REGEX_H_


42 
	#_REGEX_H_


	)

44 
	~<sys/cdefs.h
>

45 
	~<sys/_ty≥s.h
>

48 
__off_t
 
	tªgoff_t
;

50 #i‚de‡
_SIZE_T_DECLARED


51 
__size_t
 
	tsize_t
;

52 
	#_SIZE_T_DECLARED


	)

56 
	mª_magic
;

57 
size_t
 
	mª_nsub
;

58 
__c⁄°
 *
	mª_ídp
;

59 
ª_guts
 *
	mª_g
;

60 } 
	tªgex_t
;

63 
ªgoff_t
 
	mrm_so
;

64 
ªgoff_t
 
	mrm_eo
;

65 } 
	tªgm©ch_t
;

68 
	#REG_BASIC
 0000

	)

69 
	#REG_EXTENDED
 0001

	)

70 
	#REG_ICASE
 0002

	)

71 
	#REG_NOSUB
 0004

	)

72 
	#REG_NEWLINE
 0010

	)

73 
	#REG_NOSPEC
 0020

	)

74 
	#REG_PEND
 0040

	)

75 
	#REG_DUMP
 0200

	)

78 
	#REG_ENOSYS
 (-1)

	)

79 
	#REG_NOMATCH
 1

	)

80 
	#REG_BADPAT
 2

	)

81 
	#REG_ECOLLATE
 3

	)

82 
	#REG_ECTYPE
 4

	)

83 
	#REG_EESCAPE
 5

	)

84 
	#REG_ESUBREG
 6

	)

85 
	#REG_EBRACK
 7

	)

86 
	#REG_EPAREN
 8

	)

87 
	#REG_EBRACE
 9

	)

88 
	#REG_BADBR
 10

	)

89 
	#REG_ERANGE
 11

	)

90 
	#REG_ESPACE
 12

	)

91 
	#REG_BADRPT
 13

	)

92 
	#REG_EMPTY
 14

	)

93 
	#REG_ASSERT
 15

	)

94 
	#REG_INVARG
 16

	)

95 
	#REG_ILLSEQ
 17

	)

96 
	#REG_ATOI
 255

	)

97 
	#REG_ITOA
 0400

	)

100 
	#REG_NOTBOL
 00001

	)

101 
	#REG_NOTEOL
 00002

	)

102 
	#REG_STARTEND
 00004

	)

103 
	#REG_TRACE
 00400

	)

104 
	#REG_LARGE
 01000

	)

105 
	#REG_BACKR
 02000

	)

107 
__BEGIN_DECLS


108 
ªgcomp
(
ªgex_t
 * 
__ª°ri˘
, const * __restrict, );

109 
size_t
 
ªgîr‹
(, c⁄° 
ªgex_t
 * 
__ª°ri˘
, * __restrict, size_t);

115 
ªgexec
(c⁄° 
ªgex_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
,

116 
ªgm©ch_t
 * 
__ª°ri˘
, );

117 
ªg‰ì
(
ªgex_t
 *);

118 
	g__END_DECLS


	@/usr/include/regexp.h

41 #i‚def 
_REGEXP_H_


42 
	#_REGEXP_H_


	)

50 
	#NSUBEXP
 10

	)

51 
	sªgexp
 {

52 *
	m°¨ç
[
NSUBEXP
];

53 *
	mídp
[
NSUBEXP
];

54 
	mªg°¨t
;

55 
	mªg™ch
;

56 *
	mªgmu°
;

57 
	mªgmÀn
;

58 
	m¥ogøm
[1];

59 } 
	tªgexp
;

61 
	~<sys/cdefs.h
>

63 
__BEGIN_DECLS


64 
ªgexp
 *
ªgcomp
(const *);

65 
ªgexec
(c⁄° 
ªgexp
 *, const *);

66 
ªgsub
(c⁄° 
ªgexp
 *, const *, *);

67 
ªgîr‹
(const *);

68 
	g__END_DECLS


	@/usr/include/setjmp.h

42 #i‚de‡
_SETJMP_H_


43 
	#_SETJMP_H_


	)

45 
	~<sys/cdefs.h
>

48 
	~<machöe/£tjmp.h
>

50 
	g__BEGIN_DECLS


51 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 >= 600

52 
	$_l⁄gjmp
(
jmp_buf
, Ë
__dód2
;

53 
	`_£tjmp
(
jmp_buf
);

55 
	$l⁄gjmp
(
jmp_buf
, Ë
__dód2
;

56 #i‡
__BSD_VISIBLE


57 
	`l⁄gjm≥º‹
();

59 
	`£tjmp
(
jmp_buf
);

60 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


61 
	$sigl⁄gjmp
(
sigjmp_buf
, Ë
__dód2
;

62 
	`sig£tjmp
(
sigjmp_buf
, );

64 
__END_DECLS


	@/usr/include/signal.h

37 #i‚de‡
_SIGNAL_H_


38 
	#_SIGNAL_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_ty≥s.h
>

42 
	~<sys/sig«l.h
>

44 #i‡
__BSD_VISIBLE


49 
__c⁄°
 *__c⁄° 
sys_sig«me
[
NSIG
];

50 
__c⁄°
 *__c⁄° 
sys_sigli°
[
NSIG
];

51 
__c⁄°
 
sys_nsig
;

54 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


55 #i‚de‡
_PID_T_DECLARED


56 
__pid_t
 
	tpid_t
;

57 
	#_PID_T_DECLARED


	)

61 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


62 
	g±hªad
;

63 
±hªad
 *
	t__±hªad_t
;

64 #i‡!
deföed
(
_PTHREAD_T_DECLARED
Ë&& 
__POSIX_VISIBLE
 >= 200809

65 
__±hªad_t
 
	t±hªad_t
;

66 
	#_PTHREAD_T_DECLARED


	)

70 
__BEGIN_DECLS


71 
øi£
();

73 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


74 
kûl
(
__pid_t
, );

75 
±hªad_kûl
(
__±hªad_t
, );

76 
±hªad_sigmask
(, c⁄° 
__sig£t_t
 * 
__ª°ri˘
,

77 
__sig£t_t
 * 
__ª°ri˘
);

78 
siga˘i⁄
(, c⁄° siga˘i⁄ * 
__ª°ri˘
,

79 
siga˘i⁄
 * 
__ª°ri˘
);

80 
sigadd£t
(
sig£t_t
 *, );

81 
sigdñ£t
(
sig£t_t
 *, );

82 
sigem±y£t
(
sig£t_t
 *);

83 
sigfûl£t
(
sig£t_t
 *);

84 
sigismembî
(c⁄° 
sig£t_t
 *, );

85 
sig≥ndög
(
sig£t_t
 *);

86 
sig¥ocmask
(, c⁄° 
sig£t_t
 * 
__ª°ri˘
, sigset_t * __restrict);

87 
sigsu•íd
(c⁄° 
sig£t_t
 *);

88 
sigwaô
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, * __restrict);

91 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 600

92 
sigqueue
(
__pid_t
, , c⁄° 
sigvÆ
);

94 
	gtime•ec
;

95 
sigtimedwaô
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, 
sigöfo_t
 * __restrict,

96 c⁄° 
time•ec
 * 
__ª°ri˘
);

97 
sigwaôöfo
(c⁄° 
sig£t_t
 * 
__ª°ri˘
, 
sigöfo_t
 * __restrict);

100 #i‡
__XSI_VISIBLE


101 
kûÕg
(
__pid_t
, );

102 
sigÆt°ack
(c⁄° 
°ack_t
 * 
__ª°ri˘
, stack_t * __restrict);

103 
sighﬁd
();

104 
sigign‹e
();

105 
sig∑u£
();

106 
sigªl£
();

107 (*
sig£t
(, (*)()))();

108 
	`xsi_sig∑u£
();

111 #i‡
__XSI_VISIBLE
 >= 600

112 
	`sigöãºu±
(, );

115 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


116 
	`psig«l
(, const *);

119 #i‡
__BSD_VISIBLE


120 
	`sigblock
();

121 
__uc⁄ãxt
;

122 
	`sigªtu∫
(c⁄° 
__uc⁄ãxt
 *);

123 
	`sig£tmask
();

124 
	`sig°ack
(c⁄° 
sig°ack
 *, sigstack *);

125 
	`sigvec
(, 
sigvec
 *, sigvec *);

127 
__END_DECLS


	@/usr/include/stdarg.h

31 #i‚de‡
_MACHINE_STDARG_H_


32 
	#_MACHINE_STDARG_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<sys/_ty≥s.h
>

37 #i‚de‡
_VA_LIST_DECLARED


38 
	#_VA_LIST_DECLARED


	)

39 
__va_li°
 
	tva_li°
;

42 #ifde‡
__GNUCLIKE_BUILTIN_STDARG


44 
	#va_°¨t
(
≠
, 
œ°
) \

45 
	`__buûtö_va_°¨t
((
≠
), (
œ°
))

	)

47 
	#va_¨g
(
≠
, 
ty≥
) \

48 
	`__buûtö_va_¨g
((
≠
), 
ty≥
)

	)

50 
	#__va_c›y
(
de°
, 
§c
) \

51 
	`__buûtö_va_c›y
((
de°
), (
§c
))

	)

53 #i‡
__ISO_C_VISIBLE
 >= 1999

54 
	#va_c›y
(
de°
, 
§c
) \

55 
	`__va_c›y
(
de°
, 
§c
)

	)

58 
	#va_íd
(
≠
) \

59 
	`__buûtö_va_íd
(
≠
)

	)

61 #ñi‡
deföed
(
löt
)

63 
	#__va_size
(
ty≥
) \

64 ((((
ty≥
Ë+ (Ë- 1Ë/ ()Ë* ())

	)

65 
	#va_°¨t
(
≠
, 
œ°
) \

66 ((
≠
Ë(
va_li°
)&(
œ°
Ë+ 
	`__va_size
÷a°))

	)

67 
	#va_¨g
(
≠
, 
ty≥
) \

68 (*(
ty≥
 *)((
≠
Ë+
	`__va_size
—y≥), (≠Ë- __va_size—y≥)))

	)

69 
	#va_íd
(
≠
)

	)

72 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


	@/usr/include/stddef.h

38 #i‚de‡
_STDDEF_H_


39 
	#_STDDEF_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_nuŒ.h
>

43 
	~<sys/_ty≥s.h
>

45 
__±rdiff_t
 
	t±rdiff_t
;

47 #i‡
__BSD_VISIBLE


48 #i‚de‡
_RUNE_T_DECLARED


49 
__ru√_t
 
	tru√_t
;

50 
	#_RUNE_T_DECLARED


	)

54 #i‚de‡
_SIZE_T_DECLARED


55 
__size_t
 
	tsize_t
;

56 
	#_SIZE_T_DECLARED


	)

59 #i‚def 
__˝lu•lus


60 #i‚de‡
_WCHAR_T_DECLARED


61 
__wch¨_t
 
	twch¨_t
;

62 
	#_WCHAR_T_DECLARED


	)

66 
	#off£tof
(
ty≥
, 
membî
Ë
	`__off£tof
—y≥, membî)

	)

	@/usr/include/stdint.h

29 #i‚de‡
_SYS_STDINT_H_


30 
	#_SYS_STDINT_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 
	~<machöe/_°döt.h
>

37 #i‚de‡
_INT8_T_DECLARED


38 
__öt8_t
 
	töt8_t
;

39 
	#_INT8_T_DECLARED


	)

42 #i‚de‡
_INT16_T_DECLARED


43 
__öt16_t
 
	töt16_t
;

44 
	#_INT16_T_DECLARED


	)

47 #i‚de‡
_INT32_T_DECLARED


48 
__öt32_t
 
	töt32_t
;

49 
	#_INT32_T_DECLARED


	)

52 #i‚de‡
_INT64_T_DECLARED


53 
__öt64_t
 
	töt64_t
;

54 
	#_INT64_T_DECLARED


	)

57 #i‚de‡
_UINT8_T_DECLARED


58 
__uöt8_t
 
	tuöt8_t
;

59 
	#_UINT8_T_DECLARED


	)

62 #i‚de‡
_UINT16_T_DECLARED


63 
__uöt16_t
 
	tuöt16_t
;

64 
	#_UINT16_T_DECLARED


	)

67 #i‚de‡
_UINT32_T_DECLARED


68 
__uöt32_t
 
	tuöt32_t
;

69 
	#_UINT32_T_DECLARED


	)

72 #i‚de‡
_UINT64_T_DECLARED


73 
__uöt64_t
 
	tuöt64_t
;

74 
	#_UINT64_T_DECLARED


	)

77 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

78 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

79 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

80 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

82 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

83 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

84 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

85 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

87 
__öt_Á°8_t
 
	töt_Á°8_t
;

88 
__öt_Á°16_t
 
	töt_Á°16_t
;

89 
__öt_Á°32_t
 
	töt_Á°32_t
;

90 
__öt_Á°64_t
 
	töt_Á°64_t
;

92 
__uöt_Á°8_t
 
	tuöt_Á°8_t
;

93 
__uöt_Á°16_t
 
	tuöt_Á°16_t
;

94 
__uöt_Á°32_t
 
	tuöt_Á°32_t
;

95 
__uöt_Á°64_t
 
	tuöt_Á°64_t
;

97 
__ötmax_t
 
	tötmax_t
;

98 
__uötmax_t
 
	tuötmax_t
;

100 #i‚de‡
_INTPTR_T_DECLARED


101 
__öçå_t
 
	töçå_t
;

102 
__uöçå_t
 
	tuöçå_t
;

103 
	#_INTPTR_T_DECLARED


	)

	@/usr/include/stdio.h

40 #i‚def 
_STDIO_H_


41 
	#_STDIO_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_nuŒ.h
>

45 
	~<sys/_ty≥s.h
>

47 
__off_t
 
	tÂos_t
;

49 #i‚de‡
_SIZE_T_DECLARED


50 
__size_t
 
	tsize_t
;

51 
	#_SIZE_T_DECLARED


	)

54 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

55 #i‚de‡
_OFF_T_DECLARED


56 
	#_OFF_T_DECLARED


	)

57 
__off_t
 
	toff_t
;

59 #i‚de‡
_SSIZE_T_DECLARED


60 
	#_SSIZE_T_DECLARED


	)

61 
__ssize_t
 
	tssize_t
;

65 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


66 #i‚de‡
_VA_LIST_DECLARED


67 
__va_li°
 
	tva_li°
;

68 
	#_VA_LIST_DECLARED


	)

72 
	#_FSTDIO


	)

81 
	s__sbuf
 {

82 *
	m_ba£
;

83 
	m_size
;

114 
	s__sFILE
 {

115 *
	m_p
;

116 
	m_r
;

117 
	m_w
;

118 
	m_Êags
;

119 
	m_fûe
;

120 
__sbuf
 
	m_bf
;

121 
	m_lbfsize
;

124 *
	m_cookõ
;

125 (*
	m_˛o£
)(*);

126 (*
	m_ªad
)(*, *, );

127 
Âos_t
 (*
_£ek
)(*, 
	mÂos_t
, );

128 (*
	m_wrôe
)(*, const *, );

131 
__sbuf
 
	m_ub
;

132 *
	m_up
;

133 
	m_ur
;

136 
	m_ubuf
[3];

137 
	m_nbuf
[1];

140 
__sbuf
 
	m_lb
;

143 
	m_blksize
;

144 
Âos_t
 
	m_off£t
;

146 
±hªad_muãx
 *
	m_Ê_muãx
;

147 
±hªad
 *
	m_Ê_ow√r
;

148 
	m_Ê_cou¡
;

149 
	m_‹õ¡©i⁄
;

150 
__mb°©e_t
 
	m_mb°©e
;

151 } 
	tFILE
;

153 #i‚de‡
_STDSTREAM_DECLARED


154 
__BEGIN_DECLS


155 
FILE
 *
__°döp
;

156 
FILE
 *
__°douç
;

157 
FILE
 *
__°dîΩ
;

158 
	g__END_DECLS


159 
	#_STDSTREAM_DECLARED


	)

162 
	#__SLBF
 0x0001

	)

163 
	#__SNBF
 0x0002

	)

164 
	#__SRD
 0x0004

	)

165 
	#__SWR
 0x0008

	)

167 
	#__SRW
 0x0010

	)

168 
	#__SEOF
 0x0020

	)

169 
	#__SERR
 0x0040

	)

170 
	#__SMBF
 0x0080

	)

171 
	#__SAPP
 0x0100

	)

172 
	#__SSTR
 0x0200

	)

173 
	#__SOPT
 0x0400

	)

174 
	#__SNPT
 0x0800

	)

175 
	#__SOFF
 0x1000

	)

176 
	#__SMOD
 0x2000

	)

177 
	#__SALC
 0x4000

	)

178 
	#__SIGN
 0x8000

	)

189 
	#_IOFBF
 0

	)

190 
	#_IOLBF
 1

	)

191 
	#_IONBF
 2

	)

193 
	#BUFSIZ
 1024

	)

194 
	#EOF
 (-1)

	)

202 #i‚de‡
FOPEN_MAX


203 
	#FOPEN_MAX
 20

	)

205 
	#FILENAME_MAX
 1024

	)

208 #i‡
__XSI_VISIBLE


209 
	#P_tmpdú
 "/v¨/tmp/"

	)

211 
	#L_tm≤am
 1024

	)

212 
	#TMP_MAX
 308915776

	)

214 #i‚de‡
SEEK_SET


215 
	#SEEK_SET
 0

	)

217 #i‚de‡
SEEK_CUR


218 
	#SEEK_CUR
 1

	)

220 #i‚de‡
SEEK_END


221 
	#SEEK_END
 2

	)

224 
	#°dö
 
__°döp


	)

225 
	#°dout
 
__°douç


	)

226 
	#°dîr
 
__°dîΩ


	)

228 
__BEGIN_DECLS


232 
˛óªº
(
FILE
 *);

233 
f˛o£
(
FILE
 *);

234 
„of
(
FILE
 *);

235 
„º‹
(
FILE
 *);

236 
fÊush
(
FILE
 *);

237 
fgëc
(
FILE
 *);

238 
fgëpos
(
FILE
 * 
__ª°ri˘
, 
Âos_t
 * __restrict);

239 *
fgës
(* 
__ª°ri˘
, , 
FILE
 * __restrict);

240 
FILE
 *
f›í
(c⁄° * 
__ª°ri˘
, const * __restrict);

241 
Ârötf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

242 
Âutc
(, 
FILE
 *);

243 
Âuts
(c⁄° * 
__ª°ri˘
, 
FILE
 * __restrict);

244 
size_t
 
‰ód
(* 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

245 
FILE
 *
‰e›í
(c⁄° * 
__ª°ri˘
, const * __restrict, FILE * __restrict);

246 
fsˇnf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

247 
f£ek
(
FILE
 *, , );

248 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

249 
·ñl
(
FILE
 *);

250 
size_t
 
fwrôe
(c⁄° * 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

251 
gëc
(
FILE
 *);

252 
gëch¨
();

253 *
gës
(*);

254 
≥º‹
(const *);

255 
¥ötf
(c⁄° * 
__ª°ri˘
, ...);

256 
putc
(, 
FILE
 *);

257 
putch¨
();

258 
puts
(const *);

259 
ªmove
(const *);

260 
ª«me
(const *, const *);

261 
ªwöd
(
FILE
 *);

262 
sˇnf
(c⁄° * 
__ª°ri˘
, ...);

263 
£tbuf
(
FILE
 * 
__ª°ri˘
, * __restrict);

264 
£tvbuf
(
FILE
 * 
__ª°ri˘
, * __ª°ri˘, , 
size_t
);

265 
•rötf
(* 
__ª°ri˘
, const * __restrict, ...);

266 
ssˇnf
(c⁄° * 
__ª°ri˘
, const * __restrict, ...);

267 
FILE
 *
tmpfûe
();

268 *
tm≤am
(*);

269 
ungëc
(, 
FILE
 *);

270 
vÂrötf
(
FILE
 * 
__ª°ri˘
, const * __restrict,

271 
__va_li°
);

272 
v¥ötf
(c⁄° * 
__ª°ri˘
, 
__va_li°
);

273 
v•rötf
(* 
__ª°ri˘
, const * __restrict,

274 
__va_li°
);

276 #i‡
__ISO_C_VISIBLE
 >= 1999

277 
	$¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

278 ...Ë
	`__¥ötÊike
(3, 4);

279 
	$vfsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

280 
	`__sˇnÊike
(2, 0);

281 
	$vsˇnf
(c⁄° * 
__ª°ri˘
, 
__va_li°
Ë
	`__sˇnÊike
(1, 0);

282 
	$v¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

283 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

284 
	$vssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

285 
	`__sˇnÊike
(2, 0);

291 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 199506

293 
	#L_cu£rid
 17

	)

296 #i‡
__POSIX_VISIBLE


297 
	#L_˘îmid
 1024

	)

299 *
	`˘îmid
(*);

300 
FILE
 *
	`fd›í
(, const *);

301 
	`fûío
(
FILE
 *);

304 #i‡
__POSIX_VISIBLE
 >= 199209

305 
	`p˛o£
(
FILE
 *);

306 
FILE
 *
	`p›í
(const *, const *);

309 #i‡
__POSIX_VISIBLE
 >= 199506

310 
	`·rylockfûe
(
FILE
 *);

311 
	`Êockfûe
(
FILE
 *);

312 
	`fu∆ockfûe
(
FILE
 *);

318 
	`gëc_u∆ocked
(
FILE
 *);

319 
	`gëch¨_u∆ocked
();

320 
	`putc_u∆ocked
(, 
FILE
 *);

321 
	`putch¨_u∆ocked
();

323 #i‡
__BSD_VISIBLE


324 
	`˛óªº_u∆ocked
(
FILE
 *);

325 
	`„of_u∆ocked
(
FILE
 *);

326 
	`„º‹_u∆ocked
(
FILE
 *);

327 
	`fûío_u∆ocked
(
FILE
 *);

330 #i‡
__POSIX_VISIBLE
 >= 200112

331 
	`f£eko
(
FILE
 *, 
__off_t
, );

332 
__off_t
 
	`·ñlo
(
FILE
 *);

335 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 > 0 && __XSI_VISIBLE < 600

336 
	`gëw
(
FILE
 *);

337 
	`putw
(, 
FILE
 *);

340 #i‡
__XSI_VISIBLE


341 *
	`ãm≤am
(const *, const *);

344 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

345 
ssize_t
 
	`gëdñim
(** 
__ª°ri˘
, 
size_t
 * __restrict, ,

346 
FILE
 * 
__ª°ri˘
);

347 
	`ª«mót
(, const *, , const *);

348 
	`vd¥ötf
(, c⁄° * 
__ª°ri˘
, 
__va_li°
);

359 #i‚de‡
_WITH_GETLINE


360 #i‡
	`deföed
(
_BSD_SOURCE
Ë|| deföed(
_GNU_SOURCE
)

361 
	#_WITH_GETLINE


	)

362 #ñi‡
	`deföed
(
_POSIX_C_SOURCE
)

363 #i‡
_POSIX_C_SOURCE
 >= 200809

364 
	#_WITH_GETLINE


	)

369 #ifde‡
_WITH_GETLINE


370 
ssize_t
 
	`gëlöe
(** 
__ª°ri˘
, 
size_t
 * __ª°ri˘, 
FILE
 * __restrict);

373 #i‚de‡
_WITH_DPRINTF


374 #i‡
	`deföed
(
_BSD_SOURCE
Ë|| deföed(
_GNU_SOURCE
)

375 
	#_WITH_DPRINTF


	)

376 #ñi‡
	`deföed
(
_POSIX_C_SOURCE
)

377 #i‡
_POSIX_C_SOURCE
 >= 200809

378 
	#_WITH_DPRINTF


	)

383 #ifde‡
_WITH_DPRINTF


384 (
d¥ötf
)(, c⁄° * 
__ª°ri˘
, ...);

392 #i‡
__BSD_VISIBLE


393 
	$a•rötf
(**, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

394 *
	`˘îmid_r
(*);

395 
	`f˛o£Æl
();

396 *
	`fgë 
(
FILE
 *, 
size_t
 *);

397 c⁄° *
	$fmtcheck
(c⁄° *, c⁄° *Ë
	`__f‹m©_¨g
(2);

398 
	`Âurge
(
FILE
 *);

399 
	`£tbuf„r
(
FILE
 *, *, );

400 
	`£éöebuf
(
FILE
 *);

401 
	$va•rötf
(**, c⁄° *, 
__va_li°
)

402 
	`__¥ötÊike
(2, 0);

409 
__c⁄°
 
sys_√º
;

410 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

415 
FILE
 *
	`fun›í
(const *,

418 
	$Âos_t
 (*)(*, 
Âos_t
, ),

420 
	#‰›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, fn, 0, 0, 0)

	)

421 
	#fw›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, 0, fn, 0, 0)

	)

426 #i‚de‡
_FTRUNCATE_DECLARED


427 
	#_FTRUNCATE_DECLARED


	)

428 
	`·runˇã
(, 
__off_t
);

430 #i‚de‡
_LSEEK_DECLARED


431 
	#_LSEEK_DECLARED


	)

432 
__off_t
 
	`l£ek
(, __off_t, );

434 #i‚de‡
_MMAP_DECLARED


435 
	#_MMAP_DECLARED


	)

436 *
	`mm≠
(*, 
size_t
, , , , 
__off_t
);

438 #i‚de‡
_TRUNCATE_DECLARED


439 
	#_TRUNCATE_DECLARED


	)

440 
	`åunˇã
(c⁄° *, 
__off_t
);

447 
	`__§gë
(
FILE
 *);

448 
	`__swbuf
(, 
FILE
 *);

454 
	#__sgëc
(
p
Ë(--’)->
_r
 < 0 ? 
	`__§gë
’Ë: ()(*’)->
_p
++))

	)

455 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__STDC__
)

456 
__ölöe
 
	$__•utc
(
_c
, 
FILE
 *
_p
) {

457 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

458  (*
_p
->_p++ = 
_c
);

460  (
	`__swbuf
(
_c
, 
_p
));

461 
	}
}

466 
	#__•utc
(
c
, 
p
) \

467 (--(
p
)->
_w
 < 0 ? \

468 (
p
)->
_w
 >’)->
_lbfsize
 ? \

469 (*(
p
)->
_p
 = (
c
)), *(p)->_p != '\n' ? \

470 ()*(
p
)->
_p
++ : \

471 
	`__swbuf
('\n', 
p
) : \

472 
	`__swbuf
(()(
c
), 
p
) : \

473 (*(
p
)->
_p
 = (
c
), ()*’)->_p++))

	)

476 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

477 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

478 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

479 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

481 
__i°hªaded
;

483 
	#„of
(
p
Ë(!
__i°hªaded
 ? 
	`__s„of
’Ë: (
„of
)’))

	)

484 
	#„º‹
(
p
Ë(!
__i°hªaded
 ? 
	`__s„º‹
’Ë: (
„º‹
)’))

	)

485 
	#˛óªº
(
p
Ë(!
__i°hªaded
 ? 
	`__s˛óªº
’Ë: (
˛óªº
)’))

	)

487 #i‡
__POSIX_VISIBLE


488 
	#fûío
(
p
Ë(!
__i°hªaded
 ? 
	`__sfûío
’Ë: (
fûío
)’))

	)

491 
	#gëc
(
Â
Ë(!
__i°hªaded
 ? 
	`__sgëc
(ÂË: (
gëc
)(Â))

	)

492 
	#putc
(
x
, 
Â
Ë(!
__i°hªaded
 ? 
	`__•utc
(x, fpË: (
putc
)(x, fp))

	)

494 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

495 
	#putch¨
(
x
Ë
	`putc
(x, 
°dout
)

	)

497 #i‡
__BSD_VISIBLE


502 
	#„of_u∆ocked
(
p
Ë
	`__s„of
’)

	)

503 
	#„º‹_u∆ocked
(
p
Ë
	`__s„º‹
’)

	)

504 
	#˛óªº_u∆ocked
(
p
Ë
	`__s˛óªº
’)

	)

505 
	#fûío_u∆ocked
(
p
Ë
	`__sfûío
’)

	)

507 #i‡
__POSIX_VISIBLE
 >= 199506

508 
	#gëc_u∆ocked
(
Â
Ë
	`__sgëc
(Â)

	)

509 
	#putc_u∆ocked
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

511 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

512 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
(x, 
°dout
)

	)

515 
	g__END_DECLS


	@/usr/include/stdlib.h

37 #i‚de‡
_STDLIB_H_


38 
	#_STDLIB_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_nuŒ.h
>

42 
	~<sys/_ty≥s.h
>

44 #i‡
__BSD_VISIBLE


45 #i‚de‡
_RUNE_T_DECLARED


46 
__ru√_t
 
	tru√_t
;

47 
	#_RUNE_T_DECLARED


	)

51 #i‚de‡
_SIZE_T_DECLARED


52 
__size_t
 
	tsize_t
;

53 
	#_SIZE_T_DECLARED


	)

56 #i‚def 
__˝lu•lus


57 #i‚de‡
_WCHAR_T_DECLARED


58 
__wch¨_t
 
	twch¨_t
;

59 
	#_WCHAR_T_DECLARED


	)

64 
	mquŸ
;

65 
	mªm
;

66 } 
	tdiv_t
;

69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

73 
	#EXIT_FAILURE
 1

	)

74 
	#EXIT_SUCCESS
 0

	)

76 
	#RAND_MAX
 0x7fffffff

	)

78 
__mb_cur_max
;

79 
	#MB_CUR_MAX
 
__mb_cur_max


	)

81 
__BEGIN_DECLS


82 
	$ab‹t
(Ë
__dód2
;

83 
	$abs
(Ë
__puª2
;

84 
	`©exô
((*)());

85 
	`©of
(const *);

86 
	`©oi
(const *);

87 
	`©ﬁ
(const *);

88 *
	`b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

89 
size_t
, (*)(const *, const *));

90 *
	$ˇŒoc
(
size_t
, size_tË
__mÆloc_like
;

91 
div_t
 
	$div
(, Ë
__puª2
;

92 
	$exô
(Ë
__dód2
;

93 
	`‰ì
(*);

94 *
	`gëív
(const *);

95 
	$œbs
(Ë
__puª2
;

96 
ldiv_t
 
	$ldiv
(, Ë
__puª2
;

97 *
	$mÆloc
(
size_t
Ë
__mÆloc_like
;

98 
	`mbÀn
(c⁄° *, 
size_t
);

99 
size_t
 
	`mb°owcs
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t);

100 
	`mbtowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

101 
	`qs‹t
(*, 
size_t
, size_t,

103 
	`ønd
();

104 *
	`ªÆloc
(*, 
size_t
);

105 
	`§™d
();

106 
	`°πod
(c⁄° * 
__ª°ri˘
, ** __restrict);

107 
	`°πof
(c⁄° * 
__ª°ri˘
, ** __restrict);

108 
	`°πﬁ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

110 
	`°πﬁd
(c⁄° * 
__ª°ri˘
, ** __restrict);

112 
	`°πoul
(c⁄° * 
__ª°ri˘
, ** __restrict, );

113 
	`sy°em
(const *);

114 
	`w˘omb
(*, 
wch¨_t
);

115 
size_t
 
	`wc°ombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t);

127 #i‡
__ISO_C_VISIBLE
 >= 1999

128 #ifde‡
__LONG_LONG_SUPPORTED


131 
quŸ
;

132 
ªm
;

133 } 
	tŒdiv_t
;

137 
	`©ﬁl
(const *);

140 
	$Œabs
(Ë
__puª2
;

142 
Œdiv_t
 
	$Œdiv
(, Ë
__puª2
;

145 
	`°πﬁl
(c⁄° * 
__ª°ri˘
, ** __restrict, );

148 
	`°πouŒ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

151 
	$_Exô
(Ë
__dód2
;

159 #i‡
__POSIX_VISIBLE


160 
	`posix_memÆign
(**, 
size_t
, size_t);

161 
	`ønd_r
(*);

162 *
	`ªÆ∑th
(c⁄° * 
__ª°ri˘
, * __restrict);

163 
	`£ãnv
(const *, const *, );

164 
	`un£ãnv
(const *);

167 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE


168 
	`gësub›t
(**, *const *, **);

169 #i‚de‡
_MKDTEMP_DECLARED


170 *
	`mkdãmp
(*);

171 
	#_MKDTEMP_DECLARED


	)

173 #i‚de‡
_MKSTEMP_DECLARED


174 
	`mk°emp
(*);

175 
	#_MKSTEMP_DECLARED


	)

185 #i‡
__XSI_VISIBLE


187 
	`a64l
(const *);

188 
	`dønd48
();

190 
	`î™d48
([3]);

193 
	`gø¡±
();

194 *
	`öô°©e
(, *, );

195 
	`jønd48
([3]);

196 *
	`l64a
();

197 
	`lc⁄g48
([7]);

198 
	`Ã™d48
();

199 #i‡!
	`deföed
(
_MKTEMP_DECLARED
Ë&& (
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 <= 600)

200 *
	`mkãmp
(*);

201 
	#_MKTEMP_DECLARED


	)

203 
	`mønd48
();

204 
	`ƒ™d48
([3]);

205 
	`posix_›í±
();

206 *
	`±¢ame
();

207 
	`puãnv
(*);

208 
	`øndom
();

210 *
	`£ed48
([3]);

211 #i‚de‡
_SETKEY_DECLARED


212 
	`£tkey
(const *);

213 
	#_SETKEY_DECLARED


	)

215 *
	`£t°©e
( *);

216 
	`§™d48
();

217 
	`§™dom
();

218 
	`u∆ock±
();

221 #i‡
__BSD_VISIBLE


222 c⁄° *
_mÆloc_›ti⁄s
;

223 (*
_mÆloc_mesßge
)(const *, const *, const *,

235 #i‡
__GNUC__
 >2 || 
	`deföed
(
__INTEL_COMPILER
)

236 #unde‡
Æloˇ


237 
	#Æloˇ
(
sz
Ë
	`__buûtö_Æloˇ
(sz)

	)

238 #ñi‡
	`deföed
(
löt
)

239 *
	`Æloˇ
(
size_t
);

242 
	$ab‹t2
(c⁄° *, , **Ë
__dód2
;

243 
__uöt32_t


244 
	`¨c4øndom
();

245 
	`¨c4øndom_addøndom
(*, );

246 
	`¨c4øndom_buf
(*, 
size_t
);

247 
	`¨c4øndom_°ú
();

248 
__uöt32_t


249 
	`¨c4øndom_unif‹m
(
__uöt32_t
);

250 *
	`gëbsize
(*, *);

252 *
	`cgëˇp
(*, const *, );

253 
	`cgë˛o£
();

254 
	`cgëít
(**, **, const *);

255 
	`cgëfú°
(**, **);

256 
	`cgëm©ch
(const *, const *);

257 
	`cgë√xt
(**, **);

258 
	`cgënum
(*, const *, *);

259 
	`cgë£t
(const *);

260 
	`cgë°r
(*, const *, **);

261 
	`cgëu°r
(*, const *, **);

263 
	`d´m⁄
(, );

264 *
	`dev«me
(
__dev_t
, 
__mode_t
);

265 *
	`dev«me_r
(
__dev_t
, 
__mode_t
, *, );

266 *
	`fdev«me
();

267 *
	`fdev«me_r
(, *, );

268 
	`gëlﬂdavg
([], );

269 
__c⁄°
 *

270 
	`gë¥og«me
();

272 
	`hóps‹t
(*, 
size_t
, size_t, (*)(const *, const *));

273 
	`l64a_r
(, *, );

274 
	`mîges‹t
(*, 
size_t
, size_t, (*)(const *, const *));

275 
	`qs‹t_r
(*, 
size_t
, size_t, *,

277 
	`ødixs‹t
(const **, , const *,

279 *
	`ªÆlocf
(*, 
size_t
);

280 
	`Ωm©ch
(const *);

281 
	`£çrog«me
(const *);

282 
	`§adixs‹t
(const **, , const *,

284 
	`§™ddev
();

285 
	`§™domdev
();

287 
	`°π⁄um
(const *, , , const **);

290 
__öt64_t


291 
	`°πoq
(const *, **, );

292 
__uöt64_t


293 
	`°πouq
(const *, **, );

295 *
sub›èrg
;

297 
__END_DECLS


	@/usr/include/string.h

37 #i‚de‡
_STRING_H_


38 
	#_STRING_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/_nuŒ.h
>

42 
	~<sys/_ty≥s.h
>

48 #i‡
__BSD_VISIBLE


49 
	~<°rögs.h
>

52 #i‚de‡
_SIZE_T_DECLARED


53 
__size_t
 
	tsize_t
;

54 
	#_SIZE_T_DECLARED


	)

57 
	g__BEGIN_DECLS


58 #i‡
__XSI_VISIBLE
 >= 600

59 *
memc˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, , 
size_t
);

61 *
	$memchr
(c⁄° *, , 
size_t
Ë
__puª
;

62 #i‡
__BSD_VISIBLE


63 *
	$memrchr
(c⁄° *, , 
size_t
Ë
__puª
;

65 
	$memcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

66 *
	`mem˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

67 #i‡
__BSD_VISIBLE


68 *
	$memmem
(c⁄° *, 
size_t
, c⁄° *, size_tË
__puª
;

70 *
	`memmove
(*, c⁄° *, 
size_t
);

71 *
	`mem£t
(*, , 
size_t
);

72 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


73 *
	`°p˝y
(* 
__ª°ri˘
, const * __restrict);

74 *
	`°≤˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

76 #i‡
__BSD_VISIBLE


77 *
	$°rˇ£°r
(c⁄° *, c⁄° *Ë
__puª
;

79 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

80 *
	$°rchr
(c⁄° *, Ë
__puª
;

81 
	$°rcmp
(c⁄° *, c⁄° *Ë
__puª
;

82 
	`°rcﬁl
(const *, const *);

83 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

84 
size_t
 
	$°rc•n
(c⁄° *, c⁄° *Ë
__puª
;

85 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


86 *
	$°rdup
(c⁄° *Ë
__mÆloc_like
;

88 *
	`°ªº‹
();

89 #i‡
__POSIX_VISIBLE
 >= 200112

90 
	`°ªº‹_r
(, *, 
size_t
);

92 #i‡
__BSD_VISIBLE


93 
size_t
 
	`°æˇt
(* 
__ª°ri˘
, const * __restrict, size_t);

94 
size_t
 
	`°æ˝y
(* 
__ª°ri˘
, const * __restrict, size_t);

96 
size_t
 
	$°æí
(c⁄° *Ë
__puª
;

97 #i‡
__BSD_VISIBLE


98 
	`°rmode
(, *);

100 *
	`°∫ˇt
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

101 
	$°∫cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

102 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

103 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


104 *
	$°∫dup
(c⁄° *, 
size_t
Ë
__mÆloc_like
;

105 
size_t
 
	$°∫Àn
(c⁄° *, 
size_t
Ë
__puª
;

107 #i‡
__BSD_VISIBLE


108 *
	$°∫°r
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

110 *
	$°Ωbrk
(c⁄° *, c⁄° *Ë
__puª
;

111 *
	$°ºchr
(c⁄° *, Ë
__puª
;

112 #i‡
__BSD_VISIBLE


113 *
	`°r£p
(**, const *);

115 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


116 *
	`°rsig«l
();

118 
size_t
 
	$°r•n
(c⁄° *, c⁄° *Ë
__puª
;

119 *
	$°r°r
(c⁄° *, c⁄° *Ë
__puª
;

120 *
	`°πok
(* 
__ª°ri˘
, const * __restrict);

121 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 500

122 *
	`°πok_r
(*, const *, **);

124 
size_t
 
	`°rx‰m
(* 
__ª°ri˘
, const * __restrict, size_t);

125 #i‡
__BSD_VISIBLE


127 #i‚de‡
_SWAB_DECLARED


128 
	#_SWAB_DECLARED


	)

130 #i‚de‡
_SSIZE_T_DECLARED


131 
__ssize_t
 
	tssize_t
;

132 
	#_SSIZE_T_DECLARED


	)

135 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

139 
__END_DECLS


	@/usr/include/strings.h

29 #i‚de‡
_STRINGS_H_


30 
	#_STRINGS_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 #i‚de‡
_SIZE_T_DECLARED


36 
__size_t
 
	tsize_t
;

37 
	#_SIZE_T_DECLARED


	)

40 
	g__BEGIN_DECLS


41 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 200112

42 
	$bcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

43 
	`bc›y
(c⁄° *, *, 
size_t
);

44 
	`bzîo
(*, 
size_t
);

46 #i‡
__XSI_VISIBLE


47 
	$ffs
(Ë
__puª2
;

49 #ifde‡
__BSD_VISIBLE


50 
	$ff¶
(Ë
__puª2
;

51 
	$ff¶l
(Ë
__puª2
;

52 
	$Ês
(Ë
__puª2
;

53 
	$Ê¶
(Ë
__puª2
;

54 
	$Ê¶l
(Ë
__puª2
;

56 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 200112

57 *
	$ödex
(c⁄° *, Ë
__puª
;

58 *
	$rödex
(c⁄° *, Ë
__puª
;

60 
	$°rˇ£cmp
(c⁄° *, c⁄° *Ë
__puª
;

61 
	$°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

62 
__END_DECLS


	@/usr/include/sys/acl.h

36 #i‚de‡
_SYS_ACL_H_


37 
	#_SYS_ACL_H_


	)

39 
	~<sys/∑øm.h
>

40 
	~<sys/queue.h
>

41 
	~<vm/uma.h
>

47 
uöt32_t
 
	ta˛_èg_t
;

48 
uöt32_t
 
	ta˛_≥rm_t
;

49 
uöt16_t
 
	ta˛_íåy_ty≥_t
;

50 
uöt16_t
 
	ta˛_Êag_t
;

51 
	ta˛_ty≥_t
;

52 *
	ta˛_≥rm£t_t
;

53 
uöt16_t
 *
	ta˛_Êag£t_t
;

67 
	#ACL_MAX_ENTRIES
 254

	)

69 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_ACL_PRIVATE
)

71 
	#POSIX1E_ACL_ACCESS_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

72 
	#POSIX1E_ACL_ACCESS_EXTATTR_NAME
 "posix1e.a˛_ac˚ss"

	)

73 
	#POSIX1E_ACL_DEFAULT_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

74 
	#POSIX1E_ACL_DEFAULT_EXTATTR_NAME
 "posix1e.a˛_deÁu…"

	)

75 
	#NFS4_ACL_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

76 
	#NFS4_ACL_EXTATTR_NAME
 "nfs4.a˛"

	)

77 
	#OLDACL_MAX_ENTRIES
 32

	)

83 
	tﬁda˛_èg_t
;

84 
mode_t
 
	tﬁda˛_≥rm_t
;

86 
	sﬁda˛_íåy
 {

87 
ﬁda˛_èg_t
 
	m´_èg
;

88 
uid_t
 
	m´_id
;

89 
ﬁda˛_≥rm_t
 
	m´_≥rm
;

91 
ﬁda˛_íåy
 *
	tﬁda˛_íåy_t
;

93 
	sﬁda˛
 {

94 
	ma˛_˙t
;

95 
ﬁda˛_íåy
 
	ma˛_íåy
[
OLDACL_MAX_ENTRIES
];

101 
	sa˛_íåy
 {

102 
a˛_èg_t
 
	m´_èg
;

103 
uid_t
 
	m´_id
;

104 
a˛_≥rm_t
 
	m´_≥rm
;

106 
a˛_íåy_ty≥_t
 
	m´_íåy_ty≥
;

108 
a˛_Êag_t
 
	m´_Êags
;

110 
a˛_íåy
 *
	ta˛_íåy_t
;

117 
	sa˛
 {

118 
	ma˛_max˙t
;

119 
	ma˛_˙t
;

121 
	ma˛_•¨e
[4];

122 
a˛_íåy
 
	ma˛_íåy
[
ACL_MAX_ENTRIES
];

128 
	sa˛_t_°ru˘
 {

129 
a˛
 
	m©s_a˛
;

130 
	m©s_cur_íåy
;

139 
	m©s_bønd
;

141 
a˛_t_°ru˘
 *
	ta˛_t
;

145 *
	ta˛_íåy_t
;

146 *
	ta˛_t
;

153 
	#ACL_BRAND_UNKNOWN
 0

	)

154 
	#ACL_BRAND_POSIX
 1

	)

155 
	#ACL_BRAND_NFS4
 2

	)

160 
	#ACL_UNDEFINED_TAG
 0x00000000

	)

161 
	#ACL_USER_OBJ
 0x00000001

	)

162 
	#ACL_USER
 0x00000002

	)

163 
	#ACL_GROUP_OBJ
 0x00000004

	)

164 
	#ACL_GROUP
 0x00000008

	)

165 
	#ACL_MASK
 0x00000010

	)

166 
	#ACL_OTHER
 0x00000020

	)

167 
	#ACL_OTHER_OBJ
 
ACL_OTHER


	)

168 
	#ACL_EVERYONE
 0x00000040

	)

173 
	#ACL_ENTRY_TYPE_ALLOW
 0x0100

	)

174 
	#ACL_ENTRY_TYPE_DENY
 0x0200

	)

175 
	#ACL_ENTRY_TYPE_AUDIT
 0x0400

	)

176 
	#ACL_ENTRY_TYPE_ALARM
 0x0800

	)

182 
	#ACL_TYPE_ACCESS_OLD
 0x00000000

	)

183 
	#ACL_TYPE_DEFAULT_OLD
 0x00000001

	)

184 
	#ACL_TYPE_ACCESS
 0x00000002

	)

185 
	#ACL_TYPE_DEFAULT
 0x00000003

	)

186 
	#ACL_TYPE_NFS4
 0x00000004

	)

192 
	#ACL_EXECUTE
 0x0001

	)

193 
	#ACL_WRITE
 0x0002

	)

194 
	#ACL_READ
 0x0004

	)

195 
	#ACL_PERM_NONE
 0x0000

	)

196 
	#ACL_PERM_BITS
 (
ACL_EXECUTE
 | 
ACL_WRITE
 | 
ACL_READ
)

	)

197 
	#ACL_POSIX1E_BITS
 (
ACL_EXECUTE
 | 
ACL_WRITE
 | 
ACL_READ
)

	)

202 
	#ACL_READ_DATA
 0x00000008

	)

203 
	#ACL_LIST_DIRECTORY
 0x00000008

	)

204 
	#ACL_WRITE_DATA
 0x00000010

	)

205 
	#ACL_ADD_FILE
 0x00000010

	)

206 
	#ACL_APPEND_DATA
 0x00000020

	)

207 
	#ACL_ADD_SUBDIRECTORY
 0x00000020

	)

208 
	#ACL_READ_NAMED_ATTRS
 0x00000040

	)

209 
	#ACL_WRITE_NAMED_ATTRS
 0x00000080

	)

211 
	#ACL_DELETE_CHILD
 0x00000100

	)

212 
	#ACL_READ_ATTRIBUTES
 0x00000200

	)

213 
	#ACL_WRITE_ATTRIBUTES
 0x00000400

	)

214 
	#ACL_DELETE
 0x00000800

	)

215 
	#ACL_READ_ACL
 0x00001000

	)

216 
	#ACL_WRITE_ACL
 0x00002000

	)

217 
	#ACL_WRITE_OWNER
 0x00004000

	)

218 
	#ACL_SYNCHRONIZE
 0x00008000

	)

220 
	#ACL_NFS4_PERM_BITS
 (
ACL_READ_DATA
 | 
ACL_WRITE_DATA
 | \

221 
ACL_APPEND_DATA
 | 
ACL_READ_NAMED_ATTRS
 | 
ACL_WRITE_NAMED_ATTRS
 | \

222 
ACL_EXECUTE
 | 
ACL_DELETE_CHILD
 | 
ACL_READ_ATTRIBUTES
 | \

223 
ACL_WRITE_ATTRIBUTES
 | 
ACL_DELETE
 | 
ACL_READ_ACL
 | 
ACL_WRITE_ACL
 | \

224 
ACL_WRITE_OWNER
 | 
ACL_SYNCHRONIZE
)

	)

229 
	#ACL_FIRST_ENTRY
 0

	)

230 
	#ACL_NEXT_ENTRY
 1

	)

235 
	#ACL_ENTRY_FILE_INHERIT
 0x0001

	)

236 
	#ACL_ENTRY_DIRECTORY_INHERIT
 0x0002

	)

237 
	#ACL_ENTRY_NO_PROPAGATE_INHERIT
 0x0004

	)

238 
	#ACL_ENTRY_INHERIT_ONLY
 0x0008

	)

239 
	#ACL_ENTRY_SUCCESSFUL_ACCESS
 0x0010

	)

240 
	#ACL_ENTRY_FAILED_ACCESS
 0x0020

	)

242 
	#ACL_FLAGS_BITS
 (
ACL_ENTRY_FILE_INHERIT
 | \

243 
ACL_ENTRY_DIRECTORY_INHERIT
 | 
ACL_ENTRY_NO_PROPAGATE_INHERIT
 | \

244 
ACL_ENTRY_INHERIT_ONLY
 | 
ACL_ENTRY_SUCCESSFUL_ACCESS
 | \

245 
ACL_ENTRY_FAILED_ACCESS
)

	)

251 
	#ACL_UNDEFINED_ID
 ((
uid_t
)-1)

	)

256 
	#ACL_TEXT_VERBOSE
 0x01

	)

257 
	#ACL_TEXT_NUMERIC_IDS
 0x02

	)

258 
	#ACL_TEXT_APPEND_ID
 0x04

	)

266 
	#ACL_OVERRIDE_MASK
 (
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
)

	)

267 
	#ACL_PRESERVE_MASK
 (~
ACL_OVERRIDE_MASK
)

	)

269 #ifde‡
_KERNEL


275 
a˛_≥rm_t
 
a˛_posix1e_mode_to_≥rm
(
a˛_èg_t
 
èg
, 
mode_t
 
mode
);

276 
a˛_íåy
 
a˛_posix1e_mode_to_íåy
(
a˛_èg_t
 
èg
, 
uid_t
 
uid
,

277 
gid_t
 
gid
, 
mode_t
 
mode
);

278 
mode_t
 
a˛_posix1e_≥rms_to_mode
(

279 
a˛_íåy
 *
a˛_u£r_obj_íåy
,

280 
a˛_íåy
 *
a˛_group_obj_íåy
,

281 
a˛_íåy
 *
a˛_Ÿhî_íåy
);

282 
mode_t
 
a˛_posix1e_a˛_to_mode
(
a˛
 *acl);

283 
mode_t
 
a˛_posix1e_√wfûemode
(mode_à
cmode
,

284 
a˛
 *
da˛
);

285 
a˛
 *
a˛_Æloc
(
Êags
);

286 
a˛_‰ì
(
a˛
 *
a˛p
);

288 
a˛_nfs4_åivül_‰om_mode
(
a˛
 *
a˛p
,

289 
mode_t
 
mode
);

290 
a˛_nfs4_sync_a˛_‰om_mode
(
a˛
 *
a˛p
,

291 
mode_t
 
mode
, 
fûe_ow√r_id
);

292 
a˛_nfs4_sync_mode_‰om_a˛
(
mode_t
 *
mode
,

293 c⁄° 
a˛
 *
a˛p
);

294 
a˛_nfs4_is_åivül
(c⁄° 
a˛
 *
a˛p
,

295 
fûe_ow√r_id
);

296 
a˛_nfs4_compuã_öhîôed_a˛
(

297 c⁄° 
a˛
 *
∑ª¡_a˛p
,

298 
a˛
 *
chûd_a˛p
, 
mode_t
 
mode
,

299 
fûe_ow√r_id
, 
is_dúe˘‹y
);

300 
a˛_c›y_ﬁda˛_öto_a˛
(c⁄° 
ﬁda˛
 *
sour˚
,

301 
a˛
 *
de°
);

302 
a˛_c›y_a˛_öto_ﬁda˛
(c⁄° 
a˛
 *
sour˚
,

303 
ﬁda˛
 *
de°
);

308 
MALLOC_DECLARE
(
M_ACL
);

312 
a˛_posix1e_check
(
a˛
 *acl);

313 
a˛_nfs4_check
(c⁄° 
a˛
 *
a˛p
, 
is_dúe˘‹y
);

317 #i‡
deföed
(
_ACL_PRIVATE
)

323 
__BEGIN_DECLS


324 
__a˛_a˛check_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

325 
__a˛_a˛check_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
,

326 
a˛
 *
_a˛p
);

327 
__a˛_a˛check_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
,

328 
a˛
 *
_a˛p
);

329 
__a˛_dñëe_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
);

330 
__a˛_dñëe_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

331 
__a˛_dñëe_lök
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

332 
__a˛_gë_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

333 
__a˛_gë_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

334 
__a˛_gë_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

335 
__a˛_£t_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

336 
__a˛_£t_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

337 
__a˛_£t_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

338 
	g__END_DECLS


348 
__BEGIN_DECLS


349 
a˛_add_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

350 
a˛_add_≥rm
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

351 
a˛_ˇlc_mask
(
a˛_t
 *
_a˛_p
);

352 
a˛_˛ór_Êags_≈
(
a˛_Êag£t_t
 
_Êag£t_d
);

353 
a˛_˛ór_≥rms
(
a˛_≥rm£t_t
 
_≥rm£t_d
);

354 
a˛_c›y_íåy
(
a˛_íåy_t
 
_de°_d
,á˛_íåy_à
_§c_d
);

355 
ssize_t
 
a˛_c›y_ext
(*
_buf_p
, 
a˛_t
 
_a˛
, ssize_à
_size
);

356 
a˛_t
 
a˛_c›y_öt
(c⁄° *
_buf_p
);

357 
a˛_¸óã_íåy
(
a˛_t
 *
_a˛_p
, 
a˛_íåy_t
 *
_íåy_p
);

358 
a˛_¸óã_íåy_≈
(
a˛_t
 *
_a˛_p
, 
a˛_íåy_t
 *
_íåy_p
, 
_ödex
);

359 
a˛_dñëe_íåy
(
a˛_t
 
_a˛
, 
a˛_íåy_t
 
_íåy_d
);

360 
a˛_dñëe_íåy_≈
(
a˛_t
 
_a˛
, 
_ödex
);

361 
a˛_dñëe_fd_≈
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
);

362 
a˛_dñëe_fûe_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

363 
a˛_dñëe_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

364 
a˛_dñëe_def_fûe
(c⁄° *
_∑th_p
);

365 
a˛_dñëe_def_lök_≈
(c⁄° *
_∑th_p
);

366 
a˛_dñëe_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

367 
a˛_dñëe_≥rm
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

368 
a˛_t
 
a˛_dup
◊˛_à
_a˛
);

369 
a˛_‰ì
(*
_obj_p
);

370 
a˛_t
 
a˛_‰om_ãxt
(c⁄° *
_buf_p
);

371 
a˛_gë_bønd_≈
(
a˛_t
 
_a˛
, *
_bønd_p
);

372 
a˛_gë_íåy
(
a˛_t
 
_a˛
, 
_íåy_id
, 
a˛_íåy_t
 *
_íåy_p
);

373 
a˛_t
 
a˛_gë_fd
(
_fd
);

374 
a˛_t
 
a˛_gë_fd_≈
(
fd
, 
a˛_ty≥_t
 
_ty≥
);

375 
a˛_t
 
a˛_gë_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

376 
a˛_gë_íåy_ty≥_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_íåy_ty≥_t
 *
_íåy_ty≥_p
);

377 
a˛_t
 
a˛_gë_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

378 *
a˛_gë_quÆifõr
(
a˛_íåy_t
 
_íåy_d
);

379 
a˛_gë_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

380 
a˛_gë_≥rm_≈
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

381 
a˛_gë_Êag£t_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_Êag£t_t
 *
_Êag£t_p
);

382 
a˛_gë_≥rm£t
(
a˛_íåy_t
 
_íåy_d
, 
a˛_≥rm£t_t
 *
_≥rm£t_p
);

383 
a˛_gë_èg_ty≥
(
a˛_íåy_t
 
_íåy_d
, 
a˛_èg_t
 *
_èg_ty≥_p
);

384 
a˛_t
 
a˛_öô
(
_cou¡
);

385 
a˛_£t_fd
(
_fd
, 
a˛_t
 
_a˛
);

386 
a˛_£t_fd_≈
(
_fd
, 
a˛_t
 
_a˛
, 
a˛_ty≥_t
 
_ty≥
);

387 
a˛_£t_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

388 
a˛_£t_íåy_ty≥_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_íåy_ty≥_t
 
_íåy_ty≥
);

389 
a˛_£t_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

390 
a˛_£t_Êag£t_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_Êag£t_t
 
_Êag£t_d
);

391 
a˛_£t_≥rm£t
(
a˛_íåy_t
 
_íåy_d
, 
a˛_≥rm£t_t
 
_≥rm£t_d
);

392 
a˛_£t_quÆifõr
(
a˛_íåy_t
 
_íåy_d
, c⁄° *
_èg_quÆifõr_p
);

393 
a˛_£t_èg_ty≥
(
a˛_íåy_t
 
_íåy_d
, 
a˛_èg_t
 
_èg_ty≥
);

394 
ssize_t
 
a˛_size
(
a˛_t
 
_a˛
);

395 *
a˛_to_ãxt
(
a˛_t
 
_a˛
, 
ssize_t
 *
_Àn_p
);

396 *
a˛_to_ãxt_≈
(
a˛_t
 
_a˛
, 
ssize_t
 *
_Àn_p
, 
_Êags
);

397 
a˛_vÆid
(
a˛_t
 
_a˛
);

398 
a˛_vÆid_fd_≈
(
_fd
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

399 
a˛_vÆid_fûe_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

400 
a˛_vÆid_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

401 
a˛_is_åivül_≈
(c⁄° 
a˛_t
 
_a˛
, *
_åivüÕ
);

402 
a˛_t
 
a˛_°rù_≈
(c⁄°á˛_à
_a˛
, 
ªˇlcuœã_mask
);

403 
	g__END_DECLS


	@/usr/include/sys/cdefs.h

36 #i‚def 
_SYS_CDEFS_H_


37 
	#_SYS_CDEFS_H_


	)

39 #i‡
deföed
(
__˝lu•lus
)

40 
	#__BEGIN_DECLS
 "C" {

	)

41 
	#__END_DECLS
 }

	)

43 
	#__BEGIN_DECLS


	)

44 
	#__END_DECLS


	)

53 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

55 #i‡
__GNUC__
 >3 || 
deföed
(
__INTEL_COMPILER
)

56 
	#__GNUCLIKE_ASM
 3

	)

57 
	#__GNUCLIKE_MATH_BUILTIN_CONSTANTS


	)

59 
	#__GNUCLIKE_ASM
 2

	)

61 
	#__GNUCLIKE___TYPEOF
 1

	)

62 
	#__GNUCLIKE___OFFSETOF
 1

	)

63 
	#__GNUCLIKE___SECTION
 1

	)

65 
	#__GNUCLIKE_ATTRIBUTE_MODE_DI
 1

	)

67 #i‚de‡
__INTEL_COMPILER


68 
	#__GNUCLIKE_CTOR_SECTION_HANDLING
 1

	)

71 
	#__GNUCLIKE_BUILTIN_CONSTANT_P
 1

	)

72 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
__˝lu•lus
) \

73 && 
__INTEL_COMPILER
 < 800

74 #unde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


77 #i‡(
__GNUC_MINOR__
 > 95 || 
__GNUC__
 >3Ë&& !
deföed
(
__INTEL_COMPILER
)

78 
	#__GNUCLIKE_BUILTIN_VARARGS
 1

	)

79 
	#__GNUCLIKE_BUILTIN_STDARG
 1

	)

80 
	#__GNUCLIKE_BUILTIN_VAALIST
 1

	)

83 #i‡
deföed
(
__GNUC__
)

84 
	#__GNUC_VA_LIST_COMPATIBILITY
 1

	)

87 #i‚de‡
__INTEL_COMPILER


88 
	#__GNUCLIKE_BUILTIN_NEXT_ARG
 1

	)

89 
	#__GNUCLIKE_MATH_BUILTIN_RELOPS


	)

92 
	#__GNUCLIKE_BUILTIN_MEMCPY
 1

	)

95 
	#__CC_SUPPORTS_INLINE
 1

	)

96 
	#__CC_SUPPORTS___INLINE
 1

	)

97 
	#__CC_SUPPORTS___INLINE__
 1

	)

99 
	#__CC_SUPPORTS___FUNC__
 1

	)

100 
	#__CC_SUPPORTS_WARNING
 1

	)

102 
	#__CC_SUPPORTS_VARADIC_XXX
 1

	)

104 
	#__CC_SUPPORTS_DYNAMIC_ARRAY_INIT
 1

	)

111 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

112 
	#__GNUC_PREREQ__
(
ma
, 
mi
) \

113 (
__GNUC__
 > (
ma
Ë|| __GNUC__ =(maË&& 
__GNUC_MINOR__
 >(
mi
))

	)

115 
	#__GNUC_PREREQ__
(
ma
, 
mi
Ë0

	)

130 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

131 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

132 
	#__CONCAT1
(
x
,
y
Ëx ## 
	)
y

133 
	#__CONCAT
(
x
,
y
Ë
	`__CONCAT1
(x,y)

	)

134 
	#__STRING
(
x
Ë#x

	)

135 
	#__XSTRING
(
x
Ë
	`__STRING
(xË

	)

137 
	#__c⁄°
 c⁄°

	)

138 
	#__sig√d
 sig√d

	)

139 
	#__vﬁ©ûe
 vﬁ©ûe

	)

140 #i‡
deföed
(
__˝lu•lus
)

141 
	#__ölöe
 
ölöe


	)

143 #i‡!(
deföed
(
__CC_SUPPORTS___INLINE
))

144 
	#__ölöe


	)

149 
	#__P
(
¥Ÿos
Ë(Ë

	)

150 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

151 
	#__STRING
(
x
Ë"x"

	)

153 #i‡!
deföed
(
__CC_SUPPORTS___INLINE
)

154 
	#__c⁄°


	)

155 
	#__ölöe


	)

156 
	#__sig√d


	)

157 
	#__vﬁ©ûe


	)

166 #i‚def 
NO_ANSI_KEYWORDS


167 c⁄°

	)

168 
	#ölöe


	)

169 sig√d

	)

170 vﬁ©ûe

	)

184 #ifde‡
löt


185 
	#__dód2


	)

186 
	#__puª2


	)

187 
	#__unu£d


	)

188 
	#__∑cked


	)

189 
	#__Æig√d
(
x
)

	)

190 
	#__£˘i⁄
(
x
)

	)

192 #i‡!
__GNUC_PREREQ__
(2, 5Ë&& !
deföed
(
__INTEL_COMPILER
)

193 
	#__dód2


	)

194 
	#__puª2


	)

195 
	#__unu£d


	)

197 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >5 && __GNUC_MINOR__ < 7 && !
deföed
(
__INTEL_COMPILER
)

198 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

199 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

200 
	#__unu£d


	)

203 #i‡
__GNUC_PREREQ__
(2, 7)

204 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

205 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

206 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

207 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

208 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

209 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

210 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

212 #i‡
deföed
(
__INTEL_COMPILER
)

213 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

214 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

215 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

216 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

217 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

218 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

219 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

223 #i‡
__GNUC_PREREQ__
(2, 96)

224 
	#__mÆloc_like
 
	`__©åibuã__
((
__mÆloc__
))

	)

225 
	#__puª
 
	`__©åibuã__
((
__puª__
))

	)

227 
	#__mÆloc_like


	)

228 
	#__puª


	)

231 #i‡
__GNUC_PREREQ__
(3, 1Ë|| (
deföed
(
__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

232 
	#__Æways_ölöe
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

234 
	#__Æways_ölöe


	)

237 #i‡
__GNUC_PREREQ__
(4, 2)

238 
	#__gnu89_ölöe
 
	`__©åibuã__
((
__gnu_ölöe__
)Ë
__ölöe


	)

240 
	#__gnu89_ölöe


	)

243 #i‡
__GNUC_PREREQ__
(3, 1)

244 
	#__noölöe
 
	`__©åibuã__
 ((
__noölöe__
))

	)

246 
	#__noölöe


	)

249 #i‡
__GNUC_PREREQ__
(3, 3)

250 
	#__n⁄nuŒ
(
x
Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(x)))

	)

252 
	#__n⁄nuŒ
(
x
)

	)

256 #i‡!
__GNUC_PREREQ__
(2, 7Ë&& !
deföed
(
__INTEL_COMPILER
)

257 
	#__func__
 
NULL


	)

260 #i‡(
deföed
(
__INTEL_COMPILER
Ë|| (deföed(
__GNUC__
Ë&& __GNUC__ >2)Ë&& !deföed(
__STRICT_ANSI__
Ë|| 
__STDC_VERSION__
 >= 199901

261 
	#__LONG_LONG_SUPPORTED


	)

270 #i‡!(
__GNUC__
 =2 && 
__GNUC_MINOR__
 == 95)

271 #i‡!
deföed
(
__STDC_VERSION__
Ë|| __STDC_VERSION__ < 199901 || deföed(
löt
)

272 
	#__ª°ri˘


	)

274 
	#__ª°ri˘
 
ª°ri˘


	)

306 #i‡
__GNUC_PREREQ__
(2, 96)

307 
	#__¥edi˘_åue
(
exp
Ë
	`__buûtö_ex≥˘
(”xp), 1)

	)

308 
	#__¥edi˘_Ál£
(
exp
Ë
	`__buûtö_ex≥˘
(”xp), 0)

	)

310 
	#__¥edi˘_åue
(
exp
Ë”xp)

	)

311 
	#__¥edi˘_Ál£
(
exp
Ë”xp)

	)

314 #i‡
__GNUC_PREREQ__
(4, 2)

315 
	#__hiddí
 
	`__©åibuã__
((
	`__visibûôy__
("hiddí")))

	)

316 
	#__exp‹ãd
 
	`__©åibuã__
((
	`__visibûôy__
("deÁu…")))

	)

318 
	#__hiddí


	)

319 
	#__exp‹ãd


	)

326 #i‡
__GNUC_PREREQ__
(4, 1)

327 
	#__off£tof
(
ty≥
, 
fõld
Ë
	`__buûtö_off£tof
—y≥, fõld)

	)

329 #i‚de‡
__˝lu•lus


330 
	#__off£tof
(
ty≥
, 
fõld
Ë((
size_t
)(&(—y≥ *)0)->fõld))

	)

332 
	#__off£tof
(
ty≥
, 
fõld
) \

333 (
	`__off£tof__
 (
ªöãΩªt_ˇ°
 <
size_t
> \

334 (&
ªöãΩªt_ˇ°
 <const volatile &> \

335 (
°©ic_ˇ°
<
ty≥
 *> (0)->
fõld
))))

	)

338 
	#__øngeof
(
ty≥
, 
°¨t
, 
íd
) \

339 (
	`__off£tof
(
ty≥
, 
íd
Ë- __off£tof—y≥, 
°¨t
))

	)

347 #i‡!
__GNUC_PREREQ__
(2, 7Ë&& !
deföed
(
__INTEL_COMPILER
)

348 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

349 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
)

	)

350 
	#__f‹m©_¨g
(
fmèrg
)

	)

352 
	#__¥ötÊike
(
fmèrg
, 
fú°v¨¨g
) \

353 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

354 
	#__sˇnÊike
(
fmèrg
, 
fú°v¨¨g
) \

355 
	`__©åibuã__
((
	`__f‹m©__
 (
__sˇnf__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

356 
	#__f‹m©_¨g
(
fmèrg
Ë
	`__©åibuã__
((
	`__f‹m©_¨g__
 (fmèrg)))

	)

360 #i‡
__FªeBSD_cc_vîsi⁄
 >300001 && 
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

361 
	#__¥ötf0like
(
fmèrg
, 
fú°v¨¨g
) \

362 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf0__
, 
fmèrg
, 
fú°v¨¨g
)))

	)

364 
	#__¥ötf0like
(
fmèrg
, 
fú°v¨¨g
)

	)

367 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

368 #i‚de‡
__INTEL_COMPILER


369 
	#__°r⁄g_ª„ªn˚
(
sym
,
Æüssym
) \

370 
	`__ty≥of
 (
sym
Ë
Æüssym
 
	`__©åibuã__
 ((
	`__Æüs__
 (#sym)))

	)

372 #ifde‡
__STDC__


373 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

374 
	`__asm__
(".weak " #alias); \

375 
	`__asm__
(".equ " #Æü†", " #sym)

	)

376 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

377 
	`__asm__
(".section .gnu.warning." #sym); \

378 
	`__asm__
(".asciz \"" 
msg
 "\""); \

379 
	`__asm__
(".¥evious")

	)

380 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

381 
	`__asm__
(".symvî " #im∂ ", " #sym "@" #vîid)

	)

382 
	#__sym_deÁu…
(
sym
,
im∂
,
vîid
) \

383 
	`__asm__
(".symvî " #im∂ ", " #sym "@@" #vîid)

	)

385 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

386 
	`__asm__
(".weakálias"); \

387 
	`__asm__
(".equálüs, sym")

	)

388 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

389 
	`__asm__
(".section .gnu.warning.sym"); \

390 
	`__asm__
(".asciz \"msg\""); \

391 
	`__asm__
(".¥evious")

	)

392 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

393 
	`__asm__
(".symvî im∂, sym@vîid")

	)

394 
	#__sym_deÁu…
(
im∂
,
sym
,
vîid
) \

395 
	`__asm__
(".symvî im∂, sym@@vîid")

	)

399 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

400 
	#__IDSTRING
(
«me
,
°rög
Ë
	`__asm__
(".idít\t\"" såög "\"")

	)

408 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__unu£d
 = 
	)
string

417 #i‚def 
__FBSDID


418 #i‡!
deföed
(
löt
Ë&& !deföed(
STRIP_FBSDID
)

419 
	#__FBSDID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

421 
	#__FBSDID
(
s
Ë
__hack


	)

425 #i‚def 
__RCSID


426 #i‚def 
NO__RCSID


427 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

429 
	#__RCSID
(
s
Ë
__hack


	)

433 #i‚def 
__RCSID_SOURCE


434 #i‚def 
NO__RCSID_SOURCE


435 
	#__RCSID_SOURCE
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_sour˚_
,
__LINE__
),s)

	)

437 
	#__RCSID_SOURCE
(
s
Ë
__hack


	)

441 #i‚def 
__SCCSID


442 #i‚def 
NO__SCCSID


443 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__sccsid_
,
__LINE__
),s)

	)

445 
	#__SCCSID
(
s
Ë
__hack


	)

449 #i‚def 
__COPYRIGHT


450 #i‚def 
NO__COPYRIGHT


451 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__c›yright_
,
__LINE__
),s)

	)

453 
	#__COPYRIGHT
(
s
Ë
__hack


	)

457 #i‚def 
__DECONST


458 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° *)(v¨))

	)

461 #i‚def 
__DEVOLATILE


462 
	#__DEVOLATILE
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(vﬁ©ûê*)(v¨))

	)

465 #i‚def 
__DEQUALIFY


466 
	#__DEQUALIFY
(
ty≥
, 
v¨
Ë(—y≥)(
uöçå_t
)(c⁄° vﬁ©ûê*)(v¨))

	)

493 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

494 #unde‡
_POSIX_C_SOURCE


495 
	#_POSIX_C_SOURCE
 199009

	)

499 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

500 #unde‡
_POSIX_C_SOURCE


501 
	#_POSIX_C_SOURCE
 199209

	)

505 #ifde‡
_XOPEN_SOURCE


506 #i‡
_XOPEN_SOURCE
 - 0 >= 700

507 
	#__XSI_VISIBLE
 700

	)

508 #unde‡
_POSIX_C_SOURCE


509 
	#_POSIX_C_SOURCE
 200809

	)

510 #ñi‡
_XOPEN_SOURCE
 - 0 >= 600

511 
	#__XSI_VISIBLE
 600

	)

512 #unde‡
_POSIX_C_SOURCE


513 
	#_POSIX_C_SOURCE
 200112

	)

514 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

515 
	#__XSI_VISIBLE
 500

	)

516 #unde‡
_POSIX_C_SOURCE


517 
	#_POSIX_C_SOURCE
 199506

	)

525 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

526 
	#_POSIX_C_SOURCE
 198808

	)

528 #ifde‡
_POSIX_C_SOURCE


529 #i‡
_POSIX_C_SOURCE
 >= 200809

530 
	#__POSIX_VISIBLE
 200809

	)

531 
	#__ISO_C_VISIBLE
 1999

	)

532 #ñi‡
_POSIX_C_SOURCE
 >= 200112

533 
	#__POSIX_VISIBLE
 200112

	)

534 
	#__ISO_C_VISIBLE
 1999

	)

535 #ñi‡
_POSIX_C_SOURCE
 >= 199506

536 
	#__POSIX_VISIBLE
 199506

	)

537 
	#__ISO_C_VISIBLE
 1990

	)

538 #ñi‡
_POSIX_C_SOURCE
 >= 199309

539 
	#__POSIX_VISIBLE
 199309

	)

540 
	#__ISO_C_VISIBLE
 1990

	)

541 #ñi‡
_POSIX_C_SOURCE
 >= 199209

542 
	#__POSIX_VISIBLE
 199209

	)

543 
	#__ISO_C_VISIBLE
 1990

	)

544 #ñi‡
_POSIX_C_SOURCE
 >= 199009

545 
	#__POSIX_VISIBLE
 199009

	)

546 
	#__ISO_C_VISIBLE
 1990

	)

548 
	#__POSIX_VISIBLE
 198808

	)

549 
	#__ISO_C_VISIBLE
 0

	)

564 #i‡
deföed
(
_ANSI_SOURCE
)

565 
	#__POSIX_VISIBLE
 0

	)

566 
	#__XSI_VISIBLE
 0

	)

567 
	#__BSD_VISIBLE
 0

	)

568 
	#__ISO_C_VISIBLE
 1990

	)

569 #ñi‡
deföed
(
_C99_SOURCE
)

570 
	#__POSIX_VISIBLE
 0

	)

571 
	#__XSI_VISIBLE
 0

	)

572 
	#__BSD_VISIBLE
 0

	)

573 
	#__ISO_C_VISIBLE
 1999

	)

575 
	#__POSIX_VISIBLE
 200809

	)

576 
	#__XSI_VISIBLE
 700

	)

577 
	#__BSD_VISIBLE
 1

	)

578 
	#__ISO_C_VISIBLE
 1999

	)

	@/usr/include/sys/chio.h

35 #i‚def 
_SYS_CHIO_H_


36 
	#_SYS_CHIO_H_


	)

38 #i‚de‡
_KERNEL


39 
	~<sys/ty≥s.h
>

41 
	~<sys/ioccom.h
>

51 
	#CHET_MT
 0

	)

52 
	#CHET_ST
 1

	)

53 
	#CHET_IE
 2

	)

54 
	#CHET_DT
 3

	)

55 
	#CHET_MAX
 
CHET_DT


	)

60 
	#CH_VOLTAG_MAXLEN
 32

	)

65 
	sch™gî_move
 {

66 
u_öt16_t
 
	mcm_‰omty≥
;

67 
u_öt16_t
 
	mcm_‰omunô
;

68 
u_öt16_t
 
	mcm_tŸy≥
;

69 
u_öt16_t
 
	mcm_tounô
;

70 
u_öt16_t
 
	mcm_Êags
;

74 
	#CM_INVERT
 0x01

	)

89 
	sch™gî_exch™ge
 {

90 
u_öt16_t
 
	m˚_§˘y≥
;

91 
u_öt16_t
 
	m˚_§cunô
;

92 
u_öt16_t
 
	m˚_fd°ty≥
;

93 
u_öt16_t
 
	m˚_fd°unô
;

94 
u_öt16_t
 
	m˚_sd°ty≥
;

95 
u_öt16_t
 
	m˚_sd°unô
;

96 
u_öt16_t
 
	m˚_Êags
;

100 
	#CE_INVERT1
 0x01

	)

101 
	#CE_INVERT2
 0x02

	)

107 
	sch™gî_posôi⁄
 {

108 
u_öt16_t
 
	m˝_ty≥
;

109 
u_öt16_t
 
	m˝_unô
;

110 
u_öt16_t
 
	m˝_Êags
;

114 
	#CP_INVERT
 0x01

	)

119 
	sch™gî_∑øms
 {

120 
u_öt16_t
 
	m˝_≈ickîs
;

121 
u_öt16_t
 
	m˝_n¶Ÿs
;

122 
u_öt16_t
 
	m˝_≈‹èls
;

123 
u_öt16_t
 
	m˝_ndrives
;

130 
	sch™gî_vﬁèg
 {

131 
u_ch¨
 
	mcv_vﬁid
[
CH_VOLTAG_MAXLEN
+1];

132 
u_öt16_t
 
	mcv_£rül
;

135 
ch™gî_vﬁèg
 
	tch™gî_vﬁèg_t
;

142 
	mCES_STATUS_FULL
 = 0x001,

143 
	mCES_STATUS_IMPEXP
 = 0x002,

144 
	mCES_STATUS_EXCEPT
 = 0x004,

145 
	mCES_PICKER_MASK
 = 0x005,

146 
	mCES_STATUS_ACCESS
 = 0x008,

147 
	mCES_SLOT_MASK
 = 0x00c,

148 
	mCES_DRIVE_MASK
 = 0x00c,

149 
	mCES_STATUS_EXENAB
 = 0x010,

150 
	mCES_STATUS_INENAB
 = 0x020,

151 
	mCES_PORTAL_MASK
 = 0x03f,

152 
	mCES_INVERT
 = 0x040,

153 
	mCES_SOURCE_VALID
 = 0x080,

154 
	mCES_SCSIID_VALID
 = 0x100,

155 
	mCES_LUN_VALID
 = 0x200

156 } 
	t˚s_°©us_Êags
;

158 
	sch™gî_ñemít_°©us
 {

159 
u_öt8_t
 
	m˚s_ty≥
;

160 
u_öt16_t
 
	m˚s_addr
;

161 
u_öt16_t
 
	m˚s_öt_addr
;

162 
˚s_°©us_Êags
 
	m˚s_Êags
;

166 
u_öt8_t
 
	m˚s_£n£code
;

169 
u_öt8_t
 
	m˚s_£n£quÆ
;

173 
u_öt8_t
 
	m˚s_sour˚_ty≥
;

177 
u_öt16_t
 
	m˚s_sour˚_addr
;

180 
ch™gî_vﬁèg_t
 
	m˚s_pvﬁèg
;

181 
ch™gî_vﬁèg_t
 
	m˚s_avﬁèg
;

182 
u_öt8_t
 
	m˚s_scsi_id
;

183 
u_öt8_t
 
	m˚s_scsi_lun
;

186 
	sch™gî_ñemít_°©us_ªque°
 {

187 
u_öt16_t
 
	m˚§_ñemít_ty≥
;

188 
u_öt16_t
 
	m˚§_ñemít_ba£
;

189 
u_öt16_t
 
	m˚§_ñemít_cou¡
;

191 
u_öt16_t
 
	m˚§_Êags
;

192 
	#CESR_VOLTAGS
 0x01

	)

194 
ch™gî_ñemít_°©us
 *
	m˚§_ñemít_°©us
;

198 
	sch™gî_£t_vﬁèg_ªque°
 {

199 
u_öt16_t
 
	mcsvr_ty≥
;

200 
u_öt16_t
 
	mcsvr_addr
;

202 
u_öt16_t
 
	mcsvr_Êags
;

203 
	#CSVR_MODE_MASK
 0x0‡

	)

204 
	#CSVR_MODE_SET
 0x00

	)

205 
	#CSVR_MODE_REPLACE
 0x01

	)

206 
	#CSVR_MODE_CLEAR
 0x02

	)

208 
	#CSVR_ALTERNATE
 0x10

	)

210 
ch™gî_vﬁèg_t
 
	mcsvr_vﬁèg
;

214 
	#CESTATUS_BITS
 \

215 "\20\6INEAB\5EXENAB\4ACCESS\3EXCEPT\2IMPEXP\1FULL"

	)

217 
	#CHIOMOVE
 
	`_IOW
('c', 0x01, 
ch™gî_move
)

	)

218 
	#CHIOEXCHANGE
 
	`_IOW
('c', 0x02, 
ch™gî_exch™ge
)

	)

219 
	#CHIOPOSITION
 
	`_IOW
('c', 0x03, 
ch™gî_posôi⁄
)

	)

220 
	#CHIOGPICKER
 
	`_IOR
('c', 0x04, )

	)

221 
	#CHIOSPICKER
 
	`_IOW
('c', 0x05, )

	)

222 
	#CHIOGPARAMS
 
	`_IOR
('c', 0x06, 
ch™gî_∑øms
)

	)

223 
	#CHIOIELEM
 
	`_IOW
('c', 0x07, 
u_öt32_t
)

	)

224 
	#CHIOGSTATUS
 
	`_IOW
('c', 0x08, 
ch™gî_ñemít_°©us_ªque°
)

	)

225 
	#CHIOSETVOLTAG
 
	`_IOW
('c', 0x09, 
ch™gî_£t_vﬁèg_ªque°
)

	)

	@/usr/include/sys/conf.h

40 #i‚de‡
_SYS_CONF_H_


41 
	#_SYS_CONF_H_


	)

43 #ifde‡
_KERNEL


44 
	~<sys/evíth™dÀr.h
>

46 
	~<sys/queue.h
>

49 
	g¢≠d©a
;

50 
	gdevfs_dúít
;

51 
	gcdevsw
;

52 
	gfûe
;

54 
	scdev
 {

55 *
	m__si_ª£rved
;

56 
u_öt
 
	msi_Êags
;

57 
	#SI_ETERNAL
 0x0001

	)

58 
	#SI_ALIAS
 0x0002

	)

59 
	#SI_NAMED
 0x0004

	)

60 
	#SI_CHEAPCLONE
 0x0008

	)

61 
	#SI_CHILD
 0x0010

	)

62 
	#SI_DEVOPEN
 0x0020

	)

63 
	#SI_CONSOPEN
 0x0040

	)

64 
	#SI_DUMPDEV
 0x0080

	)

65 
	#SI_CANDELETE
 0x0100

	)

66 
	#SI_CLONELIST
 0x0200

	)

67 
time•ec
 
	msi_©ime
;

68 
time•ec
 
	msi_˘ime
;

69 
time•ec
 
	msi_mtime
;

70 
uid_t
 
	msi_uid
;

71 
gid_t
 
	msi_gid
;

72 
mode_t
 
	msi_mode
;

73 
u¸ed
 *
	msi_¸ed
;

74 
	msi_drv0
;

75 
	msi_ªfcou¡
;

76 
LIST_ENTRY
(
cdev
Ë
	msi_li°
;

77 
LIST_ENTRY
(
cdev
Ë
	msi_˛⁄e
;

78 
LIST_HEAD
(, 
cdev
Ë
	msi_chûdªn
;

79 
LIST_ENTRY
(
cdev
Ë
	msi_siblögs
;

80 
cdev
 *
	msi_∑ª¡
;

81 *
	msi_«me
;

82 *
	msi_drv1
, *
	msi_drv2
;

83 
cdevsw
 *
	msi_devsw
;

84 
	msi_iosize_max
;

85 
u_l⁄g
 
	msi_u£cou¡
;

86 
u_l⁄g
 
	msi_thªadcou¡
;

88 
¢≠d©a
 *
	m__sid_¢≠d©a
;

89 } 
	m__si_u
;

90 
	m__si_«mebuf
[
SPECNAMELEN
 + 1];

93 
	#si_¢≠d©a
 
__si_u
.
__sid_¢≠d©a


	)

95 #ifde‡
_KERNEL


101 
	gbio
;

102 
	gbuf
;

103 
	gthªad
;

104 
	guio
;

105 
	gknŸe
;

106 
	g˛⁄edevs
;

107 
	gvm_obje˘
;

108 
	gvnode
;

126 
thªad
 
	td_thªad_t
;

128 
	td_›í_t
(
	tcdev
 *
	tdev
, 
	toÊags
, 
	tdevty≥
, 
	tthªad
 *
	ttd
);

129 
	td_fd›í_t
(
	tcdev
 *
	tdev
, 
	toÊags
, 
	tthªad
 *
	ttd
, 
	tfûe
 *
	tÂ
);

130 
	td_˛o£_t
(
	tcdev
 *
	tdev
, 
	tfÊag
, 
	tdevty≥
, 
	tthªad
 *
	ttd
);

131 
	td_°øãgy_t
(
	tbio
 *
	tbp
);

132 
	td_io˘l_t
(
	tcdev
 *
	tdev
, 
	tu_l⁄g
 
	tcmd
, 
	tˇddr_t
 
	td©a
,

133 
	tfÊag
, 
	tthªad
 *
	ttd
);

135 
	td_ªad_t
(
	tcdev
 *
	tdev
, 
	tuio
 *uio, 
	tioÊag
);

136 
	td_wrôe_t
(
	tcdev
 *
	tdev
, 
	tuio
 *uio, 
	tioÊag
);

137 
	td_pﬁl_t
(
	tcdev
 *
	tdev
, 
	tevíts
, 
	tthªad
 *
	ttd
);

138 
	td_kqfûãr_t
(
	tcdev
 *
	tdev
, 
	tknŸe
 *
	tkn
);

139 
	td_mm≠_t
(
	tcdev
 *
	tdev
, 
	tvm_off£t_t
 
	toff£t
, 
	tvm_∑ddr_t
 *
	t∑ddr
,

140 
	t≈rŸ
);

141 
	td_mm≠2_t
(
	tcdev
 *
	tdev
, 
	tvm_off£t_t
 
	toff£t
, 
	tvm_∑ddr_t
 *
	t∑ddr
,

142 
	t≈rŸ
, 
	tvm_mem©å_t
 *
	tmem©å
);

143 
	td_mm≠_sögÀ_t
(
	tcdev
 *cdev, 
	tvm_ooff£t_t
 *
	toff£t
,

144 
	tvm_size_t
 
	tsize
, 
	tvm_obje˘
 **
	tobje˘
, 
	t≈rŸ
);

145 
	td_purge_t
(
	tcdev
 *
	tdev
);

147 
	tdum≥r_t
(

148 *
	t_¥iv
,

149 *
	t_vútuÆ
,

150 
	tvm_off£t_t
 
	t_physiˇl
,

151 
	toff_t
 
	t_off£t
,

152 
	tsize_t
 
	t_Àngth
);

159 
	#D_TAPE
 0x0001

	)

160 
	#D_DISK
 0x0002

	)

161 
	#D_TTY
 0x0004

	)

162 
	#D_MEM
 0x0008

	)

164 #ifde‡
_KERNEL


166 
	#D_TYPEMASK
 0xffff

	)

171 
	#D_TRACKCLOSE
 0x00080000

	)

172 
	#D_MMAP_ANON
 0x00100000

	)

173 
	#D_PSEUDO
 0x00200000

	)

174 
	#D_NEEDGIANT
 0x00400000

	)

175 
	#D_NEEDMINOR
 0x00800000

	)

176 
	#D_MMAP2
 0x01000000

	)

181 
	#D_VERSION_00
 0x20011966

	)

182 
	#D_VERSION_01
 0x17032005

	)

183 
	#D_VERSION_02
 0x28042009

	)

184 
	#D_VERSION
 
D_VERSION_02


	)

189 
	#D_INIT
 0x80000000

	)

194 
	scdevsw
 {

195 
	md_vîsi⁄
;

196 
u_öt
 
	md_Êags
;

197 c⁄° *
	md_«me
;

198 
d_›í_t
 *
	md_›í
;

199 
d_fd›í_t
 *
	md_fd›í
;

200 
d_˛o£_t
 *
	md_˛o£
;

201 
d_ªad_t
 *
	md_ªad
;

202 
d_wrôe_t
 *
	md_wrôe
;

203 
d_io˘l_t
 *
	md_io˘l
;

204 
d_pﬁl_t
 *
	md_pﬁl
;

206 
d_mm≠_t
 *
	mﬁd
;

207 
d_mm≠2_t
 *
	m√w
;

208 } 
	m__d_mm≠
;

209 
d_°øãgy_t
 *
	md_°øãgy
;

210 
dum≥r_t
 *
	md_dump
;

211 
d_kqfûãr_t
 *
	md_kqfûãr
;

212 
d_purge_t
 *
	md_purge
;

213 
d_mm≠_sögÀ_t
 *
	md_mm≠_sögÀ
;

214 
uid_t
 
	md_uid
;

215 
gid_t
 
	md_gid
;

216 
mode_t
 
	md_mode
;

217 c⁄° *
	md_köd
;

220 
LIST_ENTRY
(
cdevsw
Ë
	md_li°
;

221 
LIST_HEAD
(, 
cdev
Ë
	md_devs
;

222 
	md_•¨e3
;

224 
cdevsw
 *
	mgü¡åick
;

225 
SLIST_ENTRY
(
cdevsw
Ë
	mpo°‰ì_li°
;

226 } 
	m__d_gü¡
;

228 
	#d_mm≠
 
__d_mm≠
.
ﬁd


	)

229 
	#d_mm≠2
 
__d_mm≠
.
√w


	)

230 
	#d_gü¡åick
 
__d_gü¡
.
gü¡åick


	)

231 
	#d_po°‰ì_li°
 
__d_gü¡
.
po°‰ì_li°


	)

233 
	gmoduÀ
;

235 
	sdevsw_moduÀ_d©a
 {

236 (*
	mchaöevh
)(
	mmoduÀ
 *, , *);

237 *
	mchaö¨g
;

241 
	#DEV_MODULE
(
«me
, 
evh
, 
¨g
) \

242 
moduÀd©a_t
 
«me
##
_mod
 = { \

244 
evh
, \

245 
¨g
 \

247 
	`DECLARE_MODULE
(
«me
,Çame##
_mod
, 
SI_SUB_DRIVERS
, 
SI_ORDER_MIDDLE
)

	)

250 
˛⁄e_£tup
(
˛⁄edevs
 **
cdp
);

251 
˛⁄e_˛ónup
(
˛⁄edevs
 **);

252 
	#CLONE_UNITMASK
 0xfffff

	)

253 
	#CLONE_FLAG0
 (
CLONE_UNITMASK
 + 1)

	)

254 
˛⁄e_¸óã
(
˛⁄edevs
 **, 
cdevsw
 *, *
unô
, 
cdev
 **
dev
, 
exåa
);

256 
cou¡_dev
(
cdev
 *
_dev
);

257 
de°roy_dev
(
cdev
 *
_dev
);

258 
de°roy_dev_sched
(
cdev
 *
dev
);

259 
de°roy_dev_sched_cb
(
cdev
 *
dev
, (*
cb
)(*), *
¨g
);

260 
	`de°roy_dev_døö
(
cdevsw
 *
csw
);

261 
	`døö_dev_˛⁄e_evíts
();

262 
cdevsw
 *
	`dev_ª·hªad
(
cdev
 *
_dev
, *
_ªf
);

263 
cdevsw
 *
	`devvn_ª·hªad
(
vnode
 *
vp
, 
cdev
 **
devp
, *
_ªf
);

264 
	`dev_ª…hªad
(
cdev
 *
_dev
, 
_ªf
);

265 
	`dev_dïíds
(
cdev
 *
_pdev
, cdev *
_cdev
);

266 
	`dev_ªf
(
cdev
 *
dev
);

267 
	`dev_ªÊ
(
cdev
 *
dev
);

268 
	`dev_ªl
(
cdev
 *
dev
);

269 
	`dev_°øãgy
(
cdev
 *
dev
, 
buf
 *
bp
);

270 
cdev
 *
	$make_dev
(
cdevsw
 *
_devsw
, 
_unô
, 
uid_t
 
_uid
, 
gid_t
 
_gid
,

271 
_≥rms
, c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(6, 7);

272 
cdev
 *
	$make_dev_¸ed
(
cdevsw
 *
_devsw
, 
_unô
,

273 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_≥rms
,

274 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(7, 8);

275 
	#MAKEDEV_REF
 0x01

	)

276 
	#MAKEDEV_WHTOUT
 0x02

	)

277 
	#MAKEDEV_NOWAIT
 0x04

	)

278 
	#MAKEDEV_WAITOK
 0x08

	)

279 
	#MAKEDEV_ETERNAL
 0x10

	)

280 
cdev
 *
	$make_dev_¸edf
(
_Êags
,

281 
cdevsw
 *
_devsw
, 
_unô
,

282 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_mode
,

283 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(8, 9);

284 
	$make_dev_p
(
_Êags
, 
cdev
 **
_cdev
, 
cdevsw
 *
_devsw
,

285 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_mode
,

286 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(8, 9);

287 
cdev
 *
	$make_dev_Æüs
(
cdev
 *
_pdev
, c⁄° *
_fmt
, ...)

288 
	`__¥ötÊike
(2, 3);

289 
	`dev_lock
();

290 
	`dev_u∆ock
();

291 
	`£tc⁄f
();

293 #ifde‡
KLD_MODULE


294 
	#MAKEDEV_ETERNAL_KLD
 0

	)

296 
	#MAKEDEV_ETERNAL_KLD
 
MAKEDEV_ETERNAL


	)

299 
	#dev2unô
(
d
Ë((d)->
si_drv0
)

	)

301 (*
	tcdev¥iv_då_t
)(*
	td©a
);

302 
	`devfs_gë_cdev¥iv
(**
d©≠
);

303 
	`devfs_£t_cdev¥iv
(*
¥iv
, 
cdev¥iv_då_t
 
då
);

304 
	`devfs_˛ór_cdev¥iv
();

305 
	`devfs_Âdr›
(
fûe
 *
Â
);

307 
	#UID_ROOT
 0

	)

308 
	#UID_BIN
 3

	)

309 
	#UID_UUCP
 66

	)

310 
	#UID_NOBODY
 65534

	)

312 
	#GID_WHEEL
 0

	)

313 
	#GID_KMEM
 2

	)

314 
	#GID_TTY
 4

	)

315 
	#GID_OPERATOR
 5

	)

316 
	#GID_BIN
 7

	)

317 
	#GID_GAMES
 13

	)

318 
	#GID_DIALER
 68

	)

319 
	#GID_NOBODY
 65534

	)

321 (*
	tdev_˛⁄e_‚
)(*
	t¨g
, 
	tu¸ed
 *
	t¸ed
, *
	t«me
,

322 
	t«mñí
, 
	tcdev
 **
	tªsu…
);

324 
	`dev_°d˛⁄e
(*
_«me
, **
_«mï
, c⁄° *
_°em
, *
_unô
);

325 
	`EVENTHANDLER_DECLARE
(
dev_˛⁄e
, 
dev_˛⁄e_‚
);

329 
	sdum≥röfo
 {

330 
dum≥r_t
 *
dum≥r
;

331 *
¥iv
;

332 
u_öt
 
blocksize
;

333 
u_öt
 
maxiosize
;

334 
off_t
 
medüoff£t
;

335 
off_t
 
medüsize
;

338 
	`£t_dum≥r
(
dum≥röfo
 *);

339 
	`dump_wrôe
(
dum≥röfo
 *, *, 
vm_off£t_t
, 
off_t
, 
size_t
);

340 
	`dumpsys
(
dum≥röfo
 *);

341 
dumpög
;

	@/usr/include/sys/disklabel.h

33 #i‚de‡
_SYS_DISKLABEL_H_


34 
	#_SYS_DISKLABEL_H_


	)

36 #i‚de‡
_KERNEL


37 
	~<sys/ty≥s.h
>

39 
	~<sys/ioccom.h
>

44 
	#_PATH_DISKTAB
 "/ëc/diskèb"

	)

54 #i‡
deföed
(
__i386__
Ë|| deföed(
__amd64__
Ë|| deföed(
__¨m__
) || \

55 
deföed
(
__ü64__
Ë|| 
	$deföed
(
__powîpc__
)

56 
	#LABELSECTOR
 1

	)

57 
	#LABELOFFSET
 0

	)

60 
	#DISKMAGIC
 ((
u_öt32_t
)0x82564557Ë

	)

61 #i‚de‡
MAXPARTITIONS


62 
	#MAXPARTITIONS
 8

	)

66 
	#BBSIZE
 8192

	)

68 
	#LABEL_PART
 2

	)

69 
	#RAW_PART
 2

	)

70 
	#SWAP_PART
 1

	)

72 
	sdiskœbñ
 {

73 
u_öt32_t
 
d_magic
;

74 
u_öt16_t
 
d_ty≥
;

75 
u_öt16_t
 
d_subty≥
;

76 
d_ty≥«me
[16];

78 
d_∑ck«me
[16];

81 
u_öt32_t
 
d_£csize
;

82 
u_öt32_t
 
d_n£˘‹s
;

83 
u_öt32_t
 
d_¡øcks
;

84 
u_öt32_t
 
d_ncylödîs
;

85 
u_öt32_t
 
d_£˝îcyl
;

86 
u_öt32_t
 
d_£˝îunô
;

94 
u_öt16_t
 
d_•¨e•îåack
;

95 
u_öt16_t
 
d_•¨e•îcyl
;

100 
u_öt32_t
 
d_acylödîs
;

119 
u_öt16_t
 
d_Ωm
;

120 
u_öt16_t
 
d_öãæóve
;

121 
u_öt16_t
 
d_åackskew
;

122 
u_öt16_t
 
d_cylskew
;

123 
u_öt32_t
 
d_hódswôch
;

124 
u_öt32_t
 
d_åk£ek
;

125 
u_öt32_t
 
d_Êags
;

126 
	#NDDATA
 5

	)

127 
u_öt32_t
 
d_drived©a
[
NDDATA
];

128 
	#NSPARE
 5

	)

129 
u_öt32_t
 
d_•¨e
[
NSPARE
];

130 
u_öt32_t
 
d_magic2
;

131 
u_öt16_t
 
d_checksum
;

134 
u_öt16_t
 
d_≈¨tôi⁄s
;

135 
u_öt32_t
 
d_bbsize
;

136 
u_öt32_t
 
d_sbsize
;

137 
	s∑πôi⁄
 {

138 
u_öt32_t
 
p_size
;

139 
u_öt32_t
 
p_off£t
;

140 
u_öt32_t
 
p_fsize
;

141 
u_öt8_t
 
p_f°y≥
;

142 
u_öt8_t
 
p_‰ag
;

143 
u_öt16_t
 
p_˝g
;

144 } 
d_∑πôi⁄s
[
MAXPARTITIONS
];

147 #ifde‡
CTASSERT


148 
	`CTASSERT
((
diskœbñ
Ë=148 + 
MAXPARTITIONS
 * 16);

151 
__ölöe
 
u_öt16_t
 
	`dkcksum
(
diskœbñ
 *
Õ
);

152 
__ölöe
 
u_öt16_t


153 
	$dkcksum
(
diskœbñ
 *
Õ
)

155 
u_öt16_t
 *
°¨t
, *
íd
;

156 
u_öt16_t
 
sum
 = 0;

158 
°¨t
 = (
u_öt16_t
 *)
Õ
;

159 
íd
 = (
u_öt16_t
 *)&
Õ
->
d_∑πôi⁄s
[Õ->
d_≈¨tôi⁄s
];

160 
°¨t
 < 
íd
)

161 
sum
 ^*
°¨t
++;

162  (
sum
);

163 
	}
}

167 
	#DTYPE_SMD
 1

	)

168 
	#DTYPE_MSCP
 2

	)

169 
	#DTYPE_DEC
 3

	)

170 
	#DTYPE_SCSI
 4

	)

171 
	#DTYPE_ESDI
 5

	)

172 
	#DTYPE_ST506
 6

	)

173 
	#DTYPE_HPIB
 7

	)

174 
	#DTYPE_HPFL
 8

	)

175 
	#DTYPE_FLOPPY
 10

	)

176 
	#DTYPE_CCD
 11

	)

177 
	#DTYPE_VINUM
 12

	)

178 
	#DTYPE_DOC2K
 13

	)

179 
	#DTYPE_RAID
 14

	)

180 
	#DTYPE_JFS2
 16

	)

182 #ifde‡
DKTYPENAMES


183 c⁄° *
	gdkty≥«mes
[] = {

201 
NULL


203 
	#DKMAXTYPES
 ((
dkty≥«mes
Ë/ (dkty≥«mes[0]Ë- 1)

	)

211 
	#FS_UNUSED
 0

	)

212 
	#FS_SWAP
 1

	)

213 
	#FS_V6
 2

	)

214 
	#FS_V7
 3

	)

215 
	#FS_SYSV
 4

	)

216 
	#FS_V71K
 5

	)

217 
	#FS_V8
 6

	)

218 
	#FS_BSDFFS
 7

	)

219 
	#FS_MSDOS
 8

	)

220 
	#FS_BSDLFS
 9

	)

221 
	#FS_OTHER
 10

	)

222 
	#FS_HPFS
 11

	)

223 
	#FS_ISO9660
 12

	)

224 
	#FS_BOOT
 13

	)

225 
	#FS_VINUM
 14

	)

226 
	#FS_RAID
 15

	)

227 
	#FS_FILECORE
 16

	)

228 
	#FS_EXT2FS
 17

	)

229 
	#FS_NTFS
 18

	)

230 
	#FS_CCD
 20

	)

231 
	#FS_JFS2
 21

	)

232 
	#FS_UDF
 24

	)

233 
	#FS_EFS
 26

	)

234 
	#FS_ZFS
 27

	)

236 #ifdef 
FSTYPENAMES


237 c⁄° *
	gf°y≥«mes
[] = {

266 
NULL


268 
	#FSMAXTYPES
 ((
f°y≥«mes
Ë/ (f°y≥«mes[0]Ë- 1)

	)

274 
	#D_REMOVABLE
 0x01

	)

275 
	#D_ECC
 0x02

	)

276 
	#D_BADSECT
 0x04

	)

277 
	#D_RAMDISK
 0x08

	)

278 
	#D_CHAIN
 0x10

	)

286 
	#DIOCGDINFO
 
	`_IOR
('d', 101, 
diskœbñ
)

	)

287 
	#DIOCSDINFO
 
	`_IOW
('d', 102, 
diskœbñ
)

	)

288 
	#DIOCWDINFO
 
	`_IOW
('d', 103, 
diskœbñ
)

	)

289 
	#DIOCBSDBB
 
	`_IOW
('d', 110, *Ë

	)

295 
bsd_∑πôi⁄_À_dec
(
u_ch¨
 *
±r
, 
∑πôi⁄
 *
d
);

296 
bsd_diskœbñ_À_dec
(
u_ch¨
 *
±r
, 
diskœbñ
 *
d
, 
max∑π
);

297 
bsd_∑πôi⁄_À_íc
(
u_ch¨
 *
±r
, 
∑πôi⁄
 *
d
);

298 
bsd_diskœbñ_À_íc
(
u_ch¨
 *
±r
, 
diskœbñ
 *
d
);

300 #i‚de‡
_KERNEL


301 
__BEGIN_DECLS


302 
diskœbñ
 *
gëdiskby«me
(const *);

303 
	g__END_DECLS


	@/usr/include/sys/event.h

29 #i‚de‡
_SYS_EVENT_H_


30 
	#_SYS_EVENT_H_


	)

32 
	~<sys/queue.h
>

34 
	#EVFILT_READ
 (-1)

	)

35 
	#EVFILT_WRITE
 (-2)

	)

36 
	#EVFILT_AIO
 (-3Ë

	)

37 
	#EVFILT_VNODE
 (-4Ë

	)

38 
	#EVFILT_PROC
 (-5Ë

	)

39 
	#EVFILT_SIGNAL
 (-6Ë

	)

40 
	#EVFILT_TIMER
 (-7Ë

	)

42 
	#EVFILT_FS
 (-9Ë

	)

43 
	#EVFILT_LIO
 (-10Ë

	)

44 
	#EVFILT_USER
 (-11Ë

	)

45 
	#EVFILT_SYSCOUNT
 11

	)

47 
	#EV_SET
(
kevp_
, 
a
, 
b
, 
c
, 
d
, 
e
, 
f
) do { \

48 
kevít
 *
kevp
 = (
kevp_
); \

49 (
kevp
)->
idít
 = (
a
); \

50 (
kevp
)->
fûãr
 = (
b
); \

51 (
kevp
)->
Êags
 = (
c
); \

52 (
kevp
)->
fÊags
 = (
d
); \

53 (
kevp
)->
d©a
 = (
e
); \

54 (
kevp
)->
ud©a
 = (
f
); \

55 } 0)

	)

57 
	skevít
 {

58 
uöçå_t
 
	midít
;

59 
	mfûãr
;

60 
u_sh‹t
 
	mÊags
;

61 
u_öt
 
	mfÊags
;

62 
öçå_t
 
	md©a
;

63 *
	mud©a
;

67 
	#EV_ADD
 0x0001

	)

68 
	#EV_DELETE
 0x0002

	)

69 
	#EV_ENABLE
 0x0004

	)

70 
	#EV_DISABLE
 0x0008

	)

73 
	#EV_ONESHOT
 0x0010

	)

74 
	#EV_CLEAR
 0x0020

	)

75 
	#EV_RECEIPT
 0x0040

	)

76 
	#EV_DISPATCH
 0x0080

	)

78 
	#EV_SYSFLAGS
 0xF000

	)

79 
	#EV_FLAG1
 0x2000

	)

82 
	#EV_EOF
 0x8000

	)

83 
	#EV_ERROR
 0x4000

	)

94 
	#NOTE_FFNOP
 0x00000000

	)

95 
	#NOTE_FFAND
 0x40000000

	)

96 
	#NOTE_FFOR
 0x80000000

	)

97 
	#NOTE_FFCOPY
 0xc0000000

	)

98 
	#NOTE_FFCTRLMASK
 0xc0000000

	)

99 
	#NOTE_FFLAGSMASK
 0x00ffffff

	)

101 
	#NOTE_TRIGGER
 0x01000000

	)

107 
	#NOTE_LOWAT
 0x0001

	)

112 
	#NOTE_DELETE
 0x0001

	)

113 
	#NOTE_WRITE
 0x0002

	)

114 
	#NOTE_EXTEND
 0x0004

	)

115 
	#NOTE_ATTRIB
 0x0008

	)

116 
	#NOTE_LINK
 0x0010

	)

117 
	#NOTE_RENAME
 0x0020

	)

118 
	#NOTE_REVOKE
 0x0040

	)

123 
	#NOTE_EXIT
 0x80000000

	)

124 
	#NOTE_FORK
 0x40000000

	)

125 
	#NOTE_EXEC
 0x20000000

	)

126 
	#NOTE_PCTRLMASK
 0xf0000000

	)

127 
	#NOTE_PDATAMASK
 0x000ffff‡

	)

130 
	#NOTE_TRACK
 0x00000001

	)

131 
	#NOTE_TRACKERR
 0x00000002

	)

132 
	#NOTE_CHILD
 0x00000004

	)

134 
	gknŸe
;

135 
SLIST_HEAD
(
kli°
, 
knŸe
);

136 
	gkqueue
;

137 
SLIST_HEAD
(
kqli°
, 
kqueue
);

138 
	sk∆i°
 {

139 
kli°
 
	mkl_li°
;

140 (*
	mkl_lock
)(*);

141 (*
	mkl_u∆ock
)(*);

142 (*
	mkl_as£π_locked
)(*);

143 (*
	mkl_as£π_u∆ocked
)(*);

144 *
	mkl_lock¨g
;

148 #ifde‡
_KERNEL


150 #ifde‡
MALLOC_DECLARE


151 
MALLOC_DECLARE
(
M_KQUEUE
);

157 
	#KNF_LISTLOCKED
 0x0001

	)

158 
	#KNF_NOKQLOCK
 0x0002

	)

160 
	#KNOTE
(
li°
, 
hi°
, 
Êags
Ë
	`knŸe
÷i°, hi°, fœgs)

	)

161 
	#KNOTE_LOCKED
(
li°
, 
höt
Ë
	`knŸe
÷i°, höt, 
KNF_LISTLOCKED
)

	)

162 
	#KNOTE_UNLOCKED
(
li°
, 
höt
Ë
	`knŸe
÷i°, höt, 0)

	)

164 
	#KNLIST_EMPTY
(
li°
Ë
	`SLIST_EMPTY
(&÷i°)->
kl_li°
)

	)

170 
	#NOTE_SIGNAL
 0x08000000

	)

179 
	#EVENT_REGISTER
 1

	)

180 
	#EVENT_PROCESS
 2

	)

182 
	sfûãr›s
 {

183 
	mf_isfd
;

184 (*
	mf_©èch
)(
knŸe
 *
	mkn
);

185 (*
	mf_dëach
)(
knŸe
 *
	mkn
);

186 (*
	mf_evít
)(
knŸe
 *
	mkn
, 
	mhöt
);

187 (*
	mf_touch
)(
knŸe
 *
	mkn
, 
kevít
 *
	mkev
, 
u_l⁄g
 
	mty≥
);

196 
	sknŸe
 {

197 
SLIST_ENTRY
(
knŸe
Ë
	mkn_lök
;

198 
SLIST_ENTRY
(
knŸe
Ë
	mkn_£ ext
;

199 
k∆i°
 *
	mkn_k∆i°
;

200 
TAILQ_ENTRY
(
knŸe
Ë
	mkn_tqe
;

201 
kqueue
 *
	mkn_kq
;

202 
kevít
 
	mkn_kevít
;

203 
	mkn_°©us
;

204 
	#KN_ACTIVE
 0x01

	)

205 
	#KN_QUEUED
 0x02

	)

206 
	#KN_DISABLED
 0x04

	)

207 
	#KN_DETACHED
 0x08

	)

208 
	#KN_INFLUX
 0x10

	)

209 
	#KN_MARKER
 0x20

	)

210 
	#KN_KQUEUE
 0x40

	)

211 
	#KN_HASKQLOCK
 0x80

	)

212 
	mkn_sfÊags
;

213 
öçå_t
 
	mkn_sd©a
;

215 
fûe
 *
	mp_Â
;

216 
¥oc
 *
	mp_¥oc
;

217 
aiocbli°
 *
	mp_aio
;

218 
aiﬁiojob
 *
	mp_lio
;

219 } 
	mkn_±r
;

220 
fûãr›s
 *
	mkn_f›
;

221 *
	mkn_hook
;

222 
	mkn_hookid
;

224 
	#kn_id
 
kn_kevít
.
idít


	)

225 
	#kn_fûãr
 
kn_kevít
.
fûãr


	)

226 
	#kn_Êags
 
kn_kevít
.
Êags


	)

227 
	#kn_fÊags
 
kn_kevít
.
fÊags


	)

228 
	#kn_d©a
 
kn_kevít
.
d©a


	)

229 
	#kn_Â
 
kn_±r
.
p_Â


	)

231 
	skevít_c›y›s
 {

232 *
	m¨g
;

233 (*
	mk_c›yout
)(*
	m¨g
, 
kevít
 *
	mkevp
, 
	mcou¡
);

234 (*
	mk_c›yö
)(*
	m¨g
, 
kevít
 *
	mkevp
, 
	mcou¡
);

237 
	gthªad
;

238 
	g¥oc
;

239 
	gk∆i°
;

240 
	gmtx
;

242 
knŸe
(
k∆i°
 *
li°
, 
höt
, 
lockÊags
);

243 
knŸe_f‹k
(
k∆i°
 *
li°
, 
pid
);

244 
k∆i°_add
(
k∆i°
 *
k∆
, 
knŸe
 *
kn
, 
i¶ocked
);

245 
k∆i°_ªmove
(
k∆i°
 *
k∆
, 
knŸe
 *
kn
, 
i¶ocked
);

246 
k∆i°_ªmove_öevít
(
k∆i°
 *
k∆
, 
knŸe
 *
kn
);

247 
k∆i°_em±y
(
k∆i°
 *
k∆
);

248 
k∆i°_öô
(
k∆i°
 *
k∆
, *
lock
,

249 (*
kl_lock
)(*), (*
kl_u∆ock
)(*),

250 (*
kl_as£π_locked
)(*), (*
kl_as£π_u∆ocked
)(*));

251 
	`k∆i°_öô_mtx
(
k∆i°
 *
k∆
, 
mtx
 *
lock
);

252 
	`k∆i°_de°roy
(
k∆i°
 *
k∆
);

253 
	`k∆i°_˛órdñ
(
k∆i°
 *
k∆
, 
thªad
 *
td
,

254 
i¶ocked
, 
kûlkn
);

255 
	#k∆i°_˛ór
(
k∆
, 
i¶ocked
) \

256 
	`k∆i°_˛órdñ
((
k∆
), 
NULL
, (
i¶ocked
), 0)

	)

257 
	#k∆i°_dñëe
(
k∆
, 
td
, 
i¶ocked
) \

258 
	`k∆i°_˛órdñ
((
k∆
), (
td
), (
i¶ocked
), 1)

	)

259 
	`knŸe_fd˛o£
(
thªad
 *
p
, 
fd
);

260 
	`kqfd_ªgi°î
(
fd
, 
kevít
 *
kev
, 
thªad
 *
p
,

261 
waôok
);

262 
	`kqueue_add_fûãr›ts
(
fût
, 
fûãr›s
 *
fût›s
);

263 
	`kqueue_dñ_fûãr›ts
(
fût
);

267 
	~<sys/cdefs.h
>

268 
time•ec
;

270 
__BEGIN_DECLS


271 
	`kqueue
();

272 
	`kevít
(
kq
, c⁄° 
kevít
 *
ch™gñi°
, 
nch™ges
,

273 
kevít
 *
evíéi°
, 
√víts
,

274 c⁄° 
time•ec
 *
timeout
);

275 
__END_DECLS


	@/usr/include/sys/fcntl.h

38 #i‚de‡
_SYS_FCNTL_H_


39 
	#_SYS_FCNTL_H_


	)

47 
	~<sys/cdefs.h
>

48 
	~<sys/_ty≥s.h
>

50 #i‚de‡
_MODE_T_DECLARED


51 
__mode_t
 
	tmode_t
;

52 
	#_MODE_T_DECLARED


	)

55 #i‚de‡
_OFF_T_DECLARED


56 
__off_t
 
	toff_t
;

57 
	#_OFF_T_DECLARED


	)

60 #i‚de‡
_PID_T_DECLARED


61 
__pid_t
 
	tpid_t
;

62 
	#_PID_T_DECLARED


	)

73 
	#O_RDONLY
 0x0000

	)

74 
	#O_WRONLY
 0x0001

	)

75 
	#O_RDWR
 0x0002

	)

76 
	#O_ACCMODE
 0x0003

	)

86 #i‡
__BSD_VISIBLE


87 
	#FREAD
 0x0001

	)

88 
	#FWRITE
 0x0002

	)

90 
	#O_NONBLOCK
 0x0004

	)

91 
	#O_APPEND
 0x0008

	)

92 #i‡
__BSD_VISIBLE


93 
	#O_SHLOCK
 0x0010

	)

94 
	#O_EXLOCK
 0x0020

	)

95 
	#O_ASYNC
 0x0040

	)

96 
	#O_FSYNC
 0x0080

	)

98 
	#O_SYNC
 0x0080

	)

99 #i‡
__BSD_VISIBLE


100 
	#O_NOFOLLOW
 0x0100

	)

102 
	#O_CREAT
 0x0200

	)

103 
	#O_TRUNC
 0x0400

	)

104 
	#O_EXCL
 0x0800

	)

105 #ifde‡
_KERNEL


106 
	#FHASLOCK
 0x4000

	)

110 
	#O_NOCTTY
 0x8000

	)

112 #i‡
__BSD_VISIBLE


114 
	#O_DIRECT
 0x00010000

	)

118 #i‡
__BSD_VISIBLE


119 
	#O_DIRECTORY
 0x00020000

	)

120 
	#O_EXEC
 0x00040000

	)

122 #ifdef 
_KERNEL


123 
	#FEXEC
 
O_EXEC


	)

126 #i‡
__POSIX_VISIBLE
 >= 200809

128 
	#O_TTY_INIT
 0x00080000

	)

130 
	#O_CLOEXEC
 0x00100000

	)

137 #ifde‡
_KERNEL


139 
	#FFLAGS
(
oÊags
Ë((oÊagsË+ 1)

	)

140 
	#OFLAGS
(
fÊags
Ë((fÊagsË- 1)

	)

143 
	#FMASK
 (
FREAD
|
FWRITE
|
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
O_DIRECT
|
FEXEC
)

	)

145 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FRDAHEAD
|
O_DIRECT
)

	)

147 #i‡
deföed
(
COMPAT_FREEBSD7
Ë|| deföed(
COMPAT_FREEBSD6
) || \

148 
deföed
(
COMPAT_FREEBSD5
Ë|| 
	$deföed
(
COMPAT_FREEBSD4
)

154 
	#FPOSIXSHM
 
O_NOFOLLOW


	)

155 #unde‡
FCNTLFLAGS


156 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FPOSIXSHM
|
FRDAHEAD
| \

157 
O_DIRECT
)

	)

166 #i‡
__BSD_VISIBLE


167 
	#FAPPEND
 
O_APPEND


	)

168 
	#FASYNC
 
O_ASYNC


	)

169 
	#FFSYNC
 
O_FSYNC


	)

170 
	#FNONBLOCK
 
O_NONBLOCK


	)

171 
	#FNDELAY
 
O_NONBLOCK


	)

172 
	#O_NDELAY
 
O_NONBLOCK


	)

181 #i‡
__BSD_VISIBLE


183 
	#FRDAHEAD
 
O_CREAT


	)

187 #i‡
__BSD_VISIBLE


193 
	#AT_FDCWD
 -100

	)

198 
	#AT_EACCESS
 0x100

	)

199 
	#AT_SYMLINK_NOFOLLOW
 0x200

	)

200 
	#AT_SYMLINK_FOLLOW
 0x400

	)

201 
	#AT_REMOVEDIR
 0x800

	)

209 
	#F_DUPFD
 0

	)

210 
	#F_GETFD
 1

	)

211 
	#F_SETFD
 2

	)

212 
	#F_GETFL
 3

	)

213 
	#F_SETFL
 4

	)

214 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

215 
	#F_GETOWN
 5

	)

216 
	#F_SETOWN
 6

	)

218 
	#F_OGETLK
 7

	)

219 
	#F_OSETLK
 8

	)

220 
	#F_OSETLKW
 9

	)

221 
	#F_DUP2FD
 10

	)

222 
	#F_GETLK
 11

	)

223 
	#F_SETLK
 12

	)

224 
	#F_SETLKW
 13

	)

225 
	#F_SETLK_REMOTE
 14

	)

226 
	#F_READAHEAD
 15

	)

227 
	#F_RDAHEAD
 16

	)

230 
	#FD_CLOEXEC
 1

	)

233 
	#F_RDLCK
 1

	)

234 
	#F_UNLCK
 2

	)

235 
	#F_WRLCK
 3

	)

236 
	#F_UNLCKSYS
 4

	)

237 
	#F_CANCEL
 5

	)

238 #ifde‡
_KERNEL


239 
	#F_WAIT
 0x010

	)

240 
	#F_FLOCK
 0x020

	)

241 
	#F_POSIX
 0x040

	)

242 
	#F_REMOTE
 0x080

	)

243 
	#F_NOINTR
 0x100

	)

250 
	sÊock
 {

251 
off_t
 
l_°¨t
;

252 
off_t
 
l_Àn
;

253 
pid_t
 
l_pid
;

254 
l_ty≥
;

255 
l_whí˚
;

256 
l_sysid
;

263 
	soÊock
 {

264 
off_t
 
l_°¨t
;

265 
off_t
 
l_Àn
;

266 
pid_t
 
l_pid
;

267 
l_ty≥
;

268 
l_whí˚
;

272 #i‡
__BSD_VISIBLE


274 
	#LOCK_SH
 0x01

	)

275 
	#LOCK_EX
 0x02

	)

276 
	#LOCK_NB
 0x04

	)

277 
	#LOCK_UN
 0x08

	)

280 #i‡
__POSIX_VISIBLE
 >= 200112

284 
	#POSIX_FADV_NORMAL
 0

	)

285 
	#POSIX_FADV_RANDOM
 1

	)

286 
	#POSIX_FADV_SEQUENTIAL
 2

	)

287 
	#POSIX_FADV_WILLNEED
 3

	)

288 
	#POSIX_FADV_DONTNEED
 4

	)

289 
	#POSIX_FADV_NOREUSE
 5

	)

292 #i‚de‡
_KERNEL


293 
__BEGIN_DECLS


294 
	`›í
(const *, , ...);

295 
	`¸ót
(c⁄° *, 
mode_t
);

296 
	`f˙é
(, , ...);

297 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

298 
	`›í©
(, const *, , ...);

300 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

301 
	`posix_Ádvi£
(, 
off_t
, off_t, );

302 
	`posix_ÁŒoˇã
(, 
off_t
, off_t);

304 #i‡
__BSD_VISIBLE


305 
	`Êock
(, );

307 
__END_DECLS


	@/usr/include/sys/file.h

33 #i‚de‡
_SYS_FILE_H_


34 
	#_SYS_FILE_H_


	)

36 #i‚de‡
_KERNEL


37 
	~<sys/ty≥s.h
>

38 
	~<sys/f˙é.h
>

39 
	~<sys/uni°d.h
>

41 
	~<sys/queue.h
>

42 
	~<sys/ªfcou¡.h
>

43 
	~<sys/_lock.h
>

44 
	~<sys/_muãx.h
>

46 
	g°©
;

47 
	gthªad
;

48 
	guio
;

49 
	gknŸe
;

50 
	gvnode
;

51 
	gsockë
;

56 
	#DTYPE_VNODE
 1

	)

57 
	#DTYPE_SOCKET
 2

	)

58 
	#DTYPE_PIPE
 3

	)

59 
	#DTYPE_FIFO
 4

	)

60 
	#DTYPE_KQUEUE
 5

	)

61 
	#DTYPE_CRYPTO
 6

	)

62 
	#DTYPE_MQUEUE
 7

	)

63 
	#DTYPE_SHM
 8

	)

64 
	#DTYPE_SEM
 9

	)

65 
	#DTYPE_PTS
 10

	)

67 #ifde‡
_KERNEL


69 
	gfûe
;

70 
	gu¸ed
;

72 
	tfo_rdwr_t
(
	tfûe
 *
	tÂ
, 
	tuio
 *uio,

73 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tÊags
,

74 
	tthªad
 *
	ttd
);

75 
	#FOF_OFFSET
 1

	)

76 
	tfo_åunˇã_t
(
	tfûe
 *
	tÂ
, 
	toff_t
 
	tÀngth
,

77 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

78 
	tfo_io˘l_t
(
	tfûe
 *
	tÂ
, 
	tu_l⁄g
 
	tcom
, *
	td©a
,

79 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

80 
	tfo_pﬁl_t
(
	tfûe
 *
	tÂ
, 
	tevíts
,

81 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

82 
	tfo_kqfûãr_t
(
	tfûe
 *
	tÂ
, 
	tknŸe
 *
	tkn
);

83 
	tfo_°©_t
(
	tfûe
 *
	tÂ
, 
	t°©
 *
	tsb
,

84 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

85 
	tfo_˛o£_t
(
	tfûe
 *
	tÂ
, 
	tthªad
 *
	ttd
);

86 
	tfo_Êags_t
;

88 
	sfûe›s
 {

89 
fo_rdwr_t
 *
	mfo_ªad
;

90 
fo_rdwr_t
 *
	mfo_wrôe
;

91 
fo_åunˇã_t
 *
	mfo_åunˇã
;

92 
fo_io˘l_t
 *
	mfo_io˘l
;

93 
fo_pﬁl_t
 *
	mfo_pﬁl
;

94 
fo_kqfûãr_t
 *
	mfo_kqfûãr
;

95 
fo_°©_t
 *
	mfo_°©
;

96 
fo_˛o£_t
 *
	mfo_˛o£
;

97 
fo_Êags_t
 
	mfo_Êags
;

100 
	#DFLAG_PASSABLE
 0x01

	)

101 
	#DFLAG_SEEKABLE
 0x02

	)

104 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_FILE
)

116 
	sÁdvi£_öfo
 {

117 
	mÁ_advi˚
;

118 
off_t
 
	mÁ_°¨t
;

119 
off_t
 
	mÁ_íd
;

122 
	sfûe
 {

123 *
	mf_d©a
;

124 
fûe›s
 *
	mf_›s
;

125 
u¸ed
 *
	mf_¸ed
;

126 
vnode
 *
	mf_vnode
;

127 
	mf_ty≥
;

128 
	mf_vƒód_Êags
;

129 vﬁ©ûê
u_öt
 
	mf_Êag
;

130 vﬁ©ûê
u_öt
 
	mf_cou¡
;

134 
	mf_£qcou¡
;

135 
off_t
 
	mf_√xtoff
;

137 
cdev_¥ivd©a
 *
	mfvn_cdev¥iv
;

139 
Ádvi£_öfo
 *
	mfvn_advi˚
;

140 } 
	mf_vnun
;

144 
off_t
 
	mf_off£t
;

148 *
	mf_œbñ
;

151 
	#f_cdev¥iv
 
f_vnun
.
fvn_cdev¥iv


	)

152 
	#f_advi˚
 
f_vnun
.
fvn_advi˚


	)

154 
	#FOFFSET_LOCKED
 0x1

	)

155 
	#FOFFSET_LOCK_WAITING
 0x2

	)

162 
	sxfûe
 {

163 
size_t
 
	mxf_size
;

164 
pid_t
 
	mxf_pid
;

165 
uid_t
 
	mxf_uid
;

166 
	mxf_fd
;

167 *
	mxf_fûe
;

168 
	mxf_ty≥
;

169 
	mxf_cou¡
;

170 
	mxf_msgcou¡
;

171 
off_t
 
	mxf_off£t
;

172 *
	mxf_d©a
;

173 *
	mxf_vnode
;

174 
u_öt
 
	mxf_Êag
;

177 #ifde‡
_KERNEL


179 #ifde‡
MALLOC_DECLARE


180 
MALLOC_DECLARE
(
M_FILE
);

183 
fûe›s
 
vn›s
;

184 
fûe›s
 
badfûe›s
;

185 
fûe›s
 
sockë›s
;

186 
maxfûes
;

187 
maxfûe•î¥oc
;

188 vﬁ©ûê
›ífûes
;

190 
fgë
(
thªad
 *
td
, 
fd
, 
fûe
 **
Âp
);

191 
fgë_ªad
(
thªad
 *
td
, 
fd
, 
fûe
 **
Âp
);

192 
fgë_wrôe
(
thªad
 *
td
, 
fd
, 
fûe
 **
Âp
);

193 
_fdr›
(
fûe
 *
Â
, 
thªad
 *
td
);

200 
fo_rdwr_t
 
	gsoo_ªad
;

201 
fo_rdwr_t
 
	gsoo_wrôe
;

202 
fo_åunˇã_t
 
	gsoo_åunˇã
;

203 
fo_io˘l_t
 
	gsoo_io˘l
;

204 
fo_pﬁl_t
 
	gsoo_pﬁl
;

205 
fo_kqfûãr_t
 
	gsoo_kqfûãr
;

206 
fo_°©_t
 
	gsoo_°©
;

207 
fo_˛o£_t
 
	gsoo_˛o£
;

209 
föô
(
fûe
 *, 
u_öt
, , *, 
fûe›s
 *);

210 
fgëvp
(
thªad
 *
td
, 
fd
, 
vnode
 **
vµ
);

211 
fgëvp_ªad
(
thªad
 *
td
, 
fd
, 
vnode
 **
vµ
);

212 
fgëvp_wrôe
(
thªad
 *
td
, 
fd
, 
vnode
 **
vµ
);

214 
fgësock
(
thªad
 *
td
, 
fd
, 
sockë
 **
•p
, 
u_öt
 *
fÊagp
);

215 
Âutsock
(
sockë
 *
•
);

217 
	#fhﬁd
(
Â
) \

218 (
	`ªfcou¡_acquúe
(&(
Â
)->
f_cou¡
))

	)

219 
	#fdr›
(
Â
, 
td
) \

220 (
	`ªfcou¡_ªÀa£
(&(
Â
)->
f_cou¡
Ë? 
	`_fdr›
((Â), (
td
)Ë: 0)

	)

222 
__ölöe
 
fo_rdwr_t
 
	gfo_ªad
;

223 
__ölöe
 
fo_rdwr_t
 
	gfo_wrôe
;

224 
__ölöe
 
fo_åunˇã_t
 
	gfo_åunˇã
;

225 
__ölöe
 
fo_io˘l_t
 
	gfo_io˘l
;

226 
__ölöe
 
fo_pﬁl_t
 
	gfo_pﬁl
;

227 
__ölöe
 
fo_kqfûãr_t
 
	gfo_kqfûãr
;

228 
__ölöe
 
fo_°©_t
 
	gfo_°©
;

229 
__ölöe
 
fo_˛o£_t
 
	gfo_˛o£
;

231 
__ölöe
 

232 
	$fo_ªad
(
Â
, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
)

233 
fûe
 *
Â
;

234 
uio
 *uio;

235 
u¸ed
 *
a˘ive_¸ed
;

236 
Êags
;

237 
thªad
 *
td
;

240  ((*
Â
->
f_›s
->
fo_ªad
)(Â, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
));

241 
	}
}

243 
__ölöe
 

244 
	$fo_wrôe
(
Â
, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
)

245 
fûe
 *
Â
;

246 
uio
 *uio;

247 
u¸ed
 *
a˘ive_¸ed
;

248 
Êags
;

249 
thªad
 *
td
;

252  ((*
Â
->
f_›s
->
fo_wrôe
)(Â, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
));

253 
	}
}

255 
__ölöe
 

256 
	$fo_åunˇã
(
Â
, 
Àngth
, 
a˘ive_¸ed
, 
td
)

257 
fûe
 *
Â
;

258 
off_t
 
Àngth
;

259 
u¸ed
 *
a˘ive_¸ed
;

260 
thªad
 *
td
;

263  ((*
Â
->
f_›s
->
fo_åunˇã
)(Â, 
Àngth
, 
a˘ive_¸ed
, 
td
));

264 
	}
}

266 
__ölöe
 

267 
	$fo_io˘l
(
Â
, 
com
, 
d©a
, 
a˘ive_¸ed
, 
td
)

268 
fûe
 *
Â
;

269 
u_l⁄g
 
com
;

270 *
d©a
;

271 
u¸ed
 *
a˘ive_¸ed
;

272 
thªad
 *
td
;

275  ((*
Â
->
f_›s
->
fo_io˘l
)(Â, 
com
, 
d©a
, 
a˘ive_¸ed
, 
td
));

276 
	}
}

278 
__ölöe
 

279 
	$fo_pﬁl
(
Â
, 
evíts
, 
a˘ive_¸ed
, 
td
)

280 
fûe
 *
Â
;

281 
evíts
;

282 
u¸ed
 *
a˘ive_¸ed
;

283 
thªad
 *
td
;

286  ((*
Â
->
f_›s
->
fo_pﬁl
)(Â, 
evíts
, 
a˘ive_¸ed
, 
td
));

287 
	}
}

289 
__ölöe
 

290 
	$fo_°©
(
Â
, 
sb
, 
a˘ive_¸ed
, 
td
)

291 
fûe
 *
Â
;

292 
°©
 *
sb
;

293 
u¸ed
 *
a˘ive_¸ed
;

294 
thªad
 *
td
;

297  ((*
Â
->
f_›s
->
fo_°©
)(Â, 
sb
, 
a˘ive_¸ed
, 
td
));

298 
	}
}

300 
__ölöe
 

301 
	$fo_˛o£
(
Â
, 
td
)

302 
fûe
 *
Â
;

303 
thªad
 *
td
;

306  ((*
Â
->
f_›s
->
fo_˛o£
)(Â, 
td
));

307 
	}
}

309 
__ölöe
 

310 
	$fo_kqfûãr
(
Â
, 
kn
)

311 
fûe
 *
Â
;

312 
knŸe
 *
kn
;

315  ((*
Â
->
f_›s
->
fo_kqfûãr
)(Â, 
kn
));

316 
	}
}

	@/usr/include/sys/filio.h

38 #i‚def 
_SYS_FILIO_H_


39 
	#_SYS_FILIO_H_


	)

41 
	~<sys/ioccom.h
>

44 
	#FIOCLEX
 
	`_IO
('f', 1Ë

	)

45 
	#FIONCLEX
 
	`_IO
('f', 2Ë

	)

46 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

47 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

48 
	#FIOASYNC
 
	`_IOW
('f', 125, Ë

	)

49 
	#FIOSETOWN
 
	`_IOW
('f', 124, Ë

	)

50 
	#FIOGETOWN
 
	`_IOR
('f', 123, Ë

	)

51 
	#FIODTYPE
 
	`_IOR
('f', 122, Ë

	)

52 
	#FIOGETLBA
 
	`_IOR
('f', 121, Ë

	)

53 
	sfiodg«me_¨g
 {

54 
	mÀn
;

55 *
	mbuf
;

57 
	#FIODGNAME
 
	`_IOW
('f', 120, 
fiodg«me_¨g
Ë

	)

58 
	#FIONWRITE
 
	`_IOR
('f', 119, Ë

	)

59 
	#FIONSPACE
 
	`_IOR
('f', 118, Ë

	)

61 
	#FIOSEEKDATA
 
	`_IOWR
('f', 97, 
off_t
Ë

	)

62 
	#FIOSEEKHOLE
 
	`_IOWR
('f', 98, 
off_t
Ë

	)

	@/usr/include/sys/ioctl.h

38 #i‚def 
_SYS_IOCTL_H_


39 
	#_SYS_IOCTL_H_


	)

41 #ifde‡
_KERNEL


45 
	~<sys/ioccom.h
>

47 
	~<sys/fûio.h
>

48 
	~<sys/sockio.h
>

49 
	~<sys/âycom.h
>

	@/usr/include/sys/mac.h

47 #i‚de‡
_SYS_MAC_H_


48 
	#_SYS_MAC_H_


	)

50 #i‚de‡
_POSIX_MAC


51 
	#_POSIX_MAC


	)

57 
	#MAC_MAX_POLICY_NAME
 32

	)

58 
	#MAC_MAX_LABEL_ELEMENT_NAME
 32

	)

59 
	#MAC_MAX_LABEL_ELEMENT_DATA
 4096

	)

60 
	#MAC_MAX_LABEL_BUF_LEN
 8192

	)

66 
	smac
 {

67 
size_t
 
	mm_buÊí
;

68 *
	mm_°rög
;

71 
mac
 *
	tmac_t
;

73 #i‚de‡
_KERNEL


79 
	#MAC_CONFFILE
 "/ëc/mac.c⁄f"

	)

85 
__BEGIN_DECLS


86 
mac_execve
(*
‚ame
, **
¨gv
, **
ívv
, 
mac_t
 
_œbñ
);

87 
mac_‰ì
(
mac_t
 
_œbñ
);

88 
mac_‰om_ãxt
(
mac_t
 *
_œbñ
, c⁄° *
_ãxt
);

89 
mac_gë_fd
(
_fd
, 
mac_t
 
_œbñ
);

90 
mac_gë_fûe
(c⁄° *
_∑th
, 
mac_t
 
_œbñ
);

91 
mac_gë_lök
(c⁄° *
_∑th
, 
mac_t
 
_œbñ
);

92 
mac_gë_≥î
(
_fd
, 
mac_t
 
_œbñ
);

93 
mac_gë_pid
(
pid_t
 
_pid
, 
mac_t
 
_œbñ
);

94 
mac_gë_¥oc
(
mac_t
 
_œbñ
);

95 
mac_is_¥e£¡
(c⁄° *
_pﬁicy«me
);

96 
mac_¥ï¨e
(
mac_t
 *
_œbñ
, c⁄° *
_ñemíts
);

97 
mac_¥ï¨e_fûe_œbñ
(
mac_t
 *
_œbñ
);

98 
mac_¥ï¨e_i‚ë_œbñ
(
mac_t
 *
_œbñ
);

99 
mac_¥ï¨e_¥o˚ss_œbñ
(
mac_t
 *
_œbñ
);

100 
mac_¥ï¨e_ty≥
(
mac_t
 *
_œbñ
, c⁄° *
_ty≥
);

101 
mac_£t_fd
(
_fûdes
, c⁄° 
mac_t
 
_œbñ
);

102 
mac_£t_fûe
(c⁄° *
_∑th
, 
mac_t
 
_œbñ
);

103 
mac_£t_lök
(c⁄° *
_∑th
, 
mac_t
 
_œbñ
);

104 
mac_£t_¥oc
(c⁄° 
mac_t
 
_œbñ
);

105 
mac_sysˇŒ
(c⁄° *
_pﬁicy«me
, 
_ˇŒ
, *
_¨g
);

106 
mac_to_ãxt
(
mac_t
 
mac
, **
_ãxt
);

107 
	g__END_DECLS


	@/usr/include/sys/mman.h

33 #i‚de‡
_SYS_MMAN_H_


34 
	#_SYS_MMAN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

39 #i‡
__BSD_VISIBLE


43 
	#INHERIT_SHARE
 0

	)

44 
	#INHERIT_COPY
 1

	)

45 
	#INHERIT_NONE
 2

	)

51 
	#PROT_NONE
 0x00

	)

52 
	#PROT_READ
 0x01

	)

53 
	#PROT_WRITE
 0x02

	)

54 
	#PROT_EXEC
 0x04

	)

60 
	#MAP_SHARED
 0x0001

	)

61 
	#MAP_PRIVATE
 0x0002

	)

62 #i‡
__BSD_VISIBLE


63 
	#MAP_COPY
 
MAP_PRIVATE


	)

69 
	#MAP_FIXED
 0x0010

	)

71 #i‡
__BSD_VISIBLE


72 
	#MAP_RENAME
 0x0020

	)

73 
	#MAP_NORESERVE
 0x0040

	)

74 
	#MAP_RESERVED0080
 0x0080

	)

75 
	#MAP_RESERVED0100
 0x0100

	)

76 
	#MAP_HASSEMAPHORE
 0x0200

	)

77 
	#MAP_STACK
 0x0400

	)

78 
	#MAP_NOSYNC
 0x0800

	)

83 
	#MAP_FILE
 0x0000

	)

84 
	#MAP_ANON
 0x1000

	)

85 #i‚de‡
_KERNEL


86 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

92 
	#MAP_NOCORE
 0x00020000

	)

93 
	#MAP_PREFAULT_READ
 0x00040000

	)

96 #i‡
__POSIX_VISIBLE
 >= 199309

100 
	#MCL_CURRENT
 0x0001

	)

101 
	#MCL_FUTURE
 0x0002

	)

107 
	#MAP_FAILED
 ((*)-1)

	)

112 
	#MS_SYNC
 0x0000

	)

113 
	#MS_ASYNC
 0x0001

	)

114 
	#MS_INVALIDATE
 0x0002

	)

119 
	#_MADV_NORMAL
 0

	)

120 
	#_MADV_RANDOM
 1

	)

121 
	#_MADV_SEQUENTIAL
 2

	)

122 
	#_MADV_WILLNEED
 3

	)

123 
	#_MADV_DONTNEED
 4

	)

125 #i‡
__BSD_VISIBLE


126 
	#MADV_NORMAL
 
_MADV_NORMAL


	)

127 
	#MADV_RANDOM
 
_MADV_RANDOM


	)

128 
	#MADV_SEQUENTIAL
 
_MADV_SEQUENTIAL


	)

129 
	#MADV_WILLNEED
 
_MADV_WILLNEED


	)

130 
	#MADV_DONTNEED
 
_MADV_DONTNEED


	)

131 
	#MADV_FREE
 5

	)

132 
	#MADV_NOSYNC
 6

	)

133 
	#MADV_AUTOSYNC
 7

	)

134 
	#MADV_NOCORE
 8

	)

135 
	#MADV_CORE
 9

	)

136 
	#MADV_PROTECT
 10

	)

141 
	#MINCORE_INCORE
 0x1

	)

142 
	#MINCORE_REFERENCED
 0x2

	)

143 
	#MINCORE_MODIFIED
 0x4

	)

144 
	#MINCORE_REFERENCED_OTHER
 0x8

	)

145 
	#MINCORE_MODIFIED_OTHER
 0x10

	)

146 
	#MINCORE_SUPER
 0x20

	)

151 
	#SHM_ANON
 ((*)1)

	)

158 #i‡
__POSIX_VISIBLE
 >= 200112

159 
	#POSIX_MADV_NORMAL
 
_MADV_NORMAL


	)

160 
	#POSIX_MADV_RANDOM
 
_MADV_RANDOM


	)

161 
	#POSIX_MADV_SEQUENTIAL
 
_MADV_SEQUENTIAL


	)

162 
	#POSIX_MADV_WILLNEED
 
_MADV_WILLNEED


	)

163 
	#POSIX_MADV_DONTNEED
 
_MADV_DONTNEED


	)

166 #i‚de‡
_MODE_T_DECLARED


167 
__mode_t
 
	tmode_t
;

168 
	#_MODE_T_DECLARED


	)

171 #i‚de‡
_OFF_T_DECLARED


172 
__off_t
 
	toff_t
;

173 
	#_OFF_T_DECLARED


	)

176 #i‚de‡
_SIZE_T_DECLARED


177 
__size_t
 
	tsize_t
;

178 
	#_SIZE_T_DECLARED


	)

181 #ifde‡
_KERNEL


182 
	~<vm/vm.h
>

184 
	sshmfd
 {

185 
size_t
 
	mshm_size
;

186 
vm_obje˘_t
 
	mshm_obje˘
;

187 
	mshm_ªfs
;

188 
uid_t
 
	mshm_uid
;

189 
gid_t
 
	mshm_gid
;

190 
mode_t
 
	mshm_mode
;

196 
time•ec
 
	mshm_©ime
;

197 
time•ec
 
	mshm_mtime
;

198 
time•ec
 
	mshm_˘ime
;

199 
time•ec
 
	mshm_búthtime
;

201 
œbñ
 *
	mshm_œbñ
;

204 
shm_mm≠
(
shmfd
 *shmfd, 
vm_size_t
 
objsize
, 
vm_ooff£t_t
 
foff
,

205 
vm_obje˘_t
 *
obj
);

209 
	g__BEGIN_DECLS


214 #i‡
__BSD_VISIBLE


215 
gë∑gesizes
(
size_t
 *, );

216 
madvi£
(*, 
size_t
, );

217 
möc‹e
(c⁄° *, 
size_t
, *);

218 
möhîô
(*, 
size_t
, );

220 
mlock
(c⁄° *, 
size_t
);

221 #i‚de‡
_MMAP_DECLARED


222 
	#_MMAP_DECLARED


	)

223 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

225 
m¥Ÿe˘
(c⁄° *, 
size_t
, );

226 
msync
(*, 
size_t
, );

227 
mu∆ock
(c⁄° *, 
size_t
);

228 
munm≠
(*, 
size_t
);

229 #i‡
__POSIX_VISIBLE
 >= 200112

230 
posix_madvi£
(*, 
size_t
, );

232 #i‡
__POSIX_VISIBLE
 >= 199309

233 
mlockÆl
();

234 
mu∆ockÆl
();

235 
shm_›í
(c⁄° *, , 
mode_t
);

236 
shm_u∆ök
(const *);

238 
	g__END_DECLS


	@/usr/include/sys/mount.h

33 #i‚de‡
_SYS_MOUNT_H_


34 
	#_SYS_MOUNT_H_


	)

36 
	~<sys/u¸ed.h
>

37 
	~<sys/queue.h
>

38 #ifde‡
_KERNEL


39 
	~<sys/lock.h
>

40 
	~<sys/lockmgr.h
>

41 
	~<sys/_muãx.h
>

49 
	sfsid
 { 
öt32_t
 
	mvÆ
[2]; } 
	tfsid_t
;

55 
	#MAXFIDSZ
 16

	)

57 
	sfid
 {

58 
u_sh‹t
 
	mfid_Àn
;

59 
u_sh‹t
 
	mfid_d©a0
;

60 
	mfid_d©a
[
MAXFIDSZ
];

66 
	#MFSNAMELEN
 16

	)

67 
	#MNAMELEN
 88

	)

68 
	#STATFS_VERSION
 0x20030518

	)

69 
	s°©fs
 {

70 
uöt32_t
 
	mf_vîsi⁄
;

71 
uöt32_t
 
	mf_ty≥
;

72 
uöt64_t
 
	mf_Êags
;

73 
uöt64_t
 
	mf_bsize
;

74 
uöt64_t
 
	mf_iosize
;

75 
uöt64_t
 
	mf_blocks
;

76 
uöt64_t
 
	mf_b‰ì
;

77 
öt64_t
 
	mf_bavaû
;

78 
uöt64_t
 
	mf_fûes
;

79 
öt64_t
 
	mf_f‰ì
;

80 
uöt64_t
 
	mf_syncwrôes
;

81 
uöt64_t
 
	mf_asyncwrôes
;

82 
uöt64_t
 
	mf_syn¸óds
;

83 
uöt64_t
 
	mf_asyn¸óds
;

84 
uöt64_t
 
	mf_•¨e
[10];

85 
uöt32_t
 
	mf_«memax
;

86 
uid_t
 
	mf_ow√r
;

87 
fsid_t
 
	mf_fsid
;

88 
	mf_ch¨•¨e
[80];

89 
	mf_f°y≥«me
[
MFSNAMELEN
];

90 
	mf_m¡‰om«me
[
MNAMELEN
];

91 
	mf_m¡⁄«me
[
MNAMELEN
];

94 #ifde‡
_KERNEL


95 
	#OMFSNAMELEN
 16

	)

96 
	#OMNAMELEN
 (88 - 2 * ()Ë

	)

100 
	so°©fs
 {

101 
	mf_•¨e2
;

102 
	mf_bsize
;

103 
	mf_iosize
;

104 
	mf_blocks
;

105 
	mf_b‰ì
;

106 
	mf_bavaû
;

107 
	mf_fûes
;

108 
	mf_f‰ì
;

109 
fsid_t
 
	mf_fsid
;

110 
uid_t
 
	mf_ow√r
;

111 
	mf_ty≥
;

112 
	mf_Êags
;

113 
	mf_syncwrôes
;

114 
	mf_asyncwrôes
;

115 
	mf_f°y≥«me
[
OMFSNAMELEN
];

116 
	mf_m¡⁄«me
[
OMNAMELEN
];

117 
	mf_syn¸óds
;

118 
	mf_asyn¸óds
;

119 
	mf_•¨es1
;

120 
	mf_m¡‰om«me
[
OMNAMELEN
];

121 
	mf_•¨es2
;

127 
	mf_•¨e
[2];

130 
TAILQ_HEAD
(
vnodñ°
, 
vnode
);

133 
TAILQ_HEAD
(
vfs›éi°
, 
vfs›t
);

134 
	svfs›t
 {

135 
TAILQ_ENTRY
(
vfs›t
Ë
	mlök
;

136 *
	m«me
;

137 *
	mvÆue
;

138 
	mÀn
;

139 
	mpos
;

140 
	m£í
;

155 
	smou¡
 {

156 
mtx
 
	mm¡_mtx
;

157 
	mm¡_gí
;

158 
	#m¡_°¨tzîo
 
m¡_li°


	)

159 
TAILQ_ENTRY
(
mou¡
Ë
	mm¡_li°
;

160 
vfs›s
 *
	mm¡_›
;

161 
vfsc⁄f
 *
	mm¡_vfc
;

162 
vnode
 *
	mm¡_vnodecovîed
;

163 
vnode
 *
	mm¡_syn˚r
;

164 
	mm¡_ªf
;

165 
vnodñ°
 
	mm¡_nvnodñi°
;

166 
	mm¡_nvnodñi°size
;

167 
	mm¡_wrôe›cou¡
;

168 
	mm¡_kîn_Êag
;

169 
u_öt
 
	mm¡_Êag
;

170 
u_öt
 
	mm¡_xÊag
;

171 
u_öt
 
	mm¡_nﬂsync
;

172 
vfs›éi°
 *
	mm¡_›t
;

173 
vfs›éi°
 *
	mm¡_›äew
;

174 
	mm¡_maxsymlökÀn
;

175 
°©fs
 
	mm¡_°©
;

176 
u¸ed
 *
	mm¡_¸ed
;

177 * 
	mm¡_d©a
;

178 
time_t
 
	mm¡_time
;

179 
	mm¡_iosize_max
;

180 
√ãxp‹t
 *
	mm¡_exp‹t
;

181 
œbñ
 *
	mm¡_œbñ
;

182 
u_öt
 
	mm¡_hash£ed
;

183 
	mm¡_lockªf
;

184 
	mm¡_£c⁄d¨y_wrôes
;

185 
	mm¡_£c⁄d¨y_accwrôes
;

186 
thªad
 *
	mm¡_su•_ow√r
;

187 
	#m¡_ídzîo
 
m¡_gj¥ovidî


	)

188 *
	mm¡_gj¥ovidî
;

189 
lock
 
	mm¡_ex∂ock
;

192 
vnode
 *
__m¡_vnode_√xt
(vnodê**
mvp
, 
mou¡
 *
mp
);

193 
vnode
 *
__m¡_vnode_fú°
(vnodê**
mvp
, 
mou¡
 *
mp
);

194 
__m¡_vnode_m¨kî‰ì
(
vnode
 **
mvp
, 
mou¡
 *
mp
);

196 
	#MNT_VNODE_FOREACH
(
vp
, 
mp
, 
mvp
) \

197 
vp
 = 
	`__m¡_vnode_fú°
(&(
mvp
), (
mp
)); \

198 (
vp
Ë!
NULL
; v∞
	`__m¡_vnode_√xt
(&(
mvp
), (
mp
)))

	)

200 
	#MNT_VNODE_FOREACH_ABORT_ILOCKED
(
mp
, 
mvp
) \

201 
	`__m¡_vnode_m¨kî‰ì
(&(
mvp
), (
mp
))

	)

203 
	#MNT_VNODE_FOREACH_ABORT
(
mp
, 
mvp
) \

205 
	`MNT_ILOCK
(
mp
); \

206 
	`MNT_VNODE_FOREACH_ABORT_ILOCKED
(
mp
, 
mvp
); \

207 
	`MNT_IUNLOCK
(
mp
); \

208 } 0)

	)

210 
	#MNT_ILOCK
(
mp
Ë
	`mtx_lock
(&(mp)->
m¡_mtx
)

	)

211 
	#MNT_ITRYLOCK
(
mp
Ë
	`mtx_åylock
(&(mp)->
m¡_mtx
)

	)

212 
	#MNT_IUNLOCK
(
mp
Ë
	`mtx_u∆ock
(&(mp)->
m¡_mtx
)

	)

213 
	#MNT_MTX
(
mp
Ë(&(mp)->
m¡_mtx
)

	)

214 
	#MNT_REF
(
mp
Ë(mp)->
m¡_ªf
++

	)

215 
	#MNT_REL
(
mp
) do { \

216 
	`KASSERT
((
mp
)->
m¡_ªf
 > 0, ("negative mnt_ref")); \

217 (
mp
)->
m¡_ªf
--; \

218 i‡((
mp
)->
m¡_ªf
 == 0) \

219 
	`wakeup
((
mp
)); \

220 } 0)

	)

227 
	#MNT_RDONLY
 0x00000001

	)

228 
	#MNT_SYNCHRONOUS
 0x00000002

	)

229 
	#MNT_NOEXEC
 0x00000004

	)

230 
	#MNT_NOSUID
 0x00000008

	)

231 
	#MNT_UNION
 0x00000020

	)

232 
	#MNT_ASYNC
 0x00000040

	)

233 
	#MNT_SUIDDIR
 0x00100000

	)

234 
	#MNT_SOFTDEP
 0x00200000

	)

235 
	#MNT_NOSYMFOLLOW
 0x00400000

	)

236 
	#MNT_GJOURNAL
 0x02000000

	)

237 
	#MNT_MULTILABEL
 0x04000000

	)

238 
	#MNT_ACLS
 0x08000000

	)

239 
	#MNT_NOATIME
 0x10000000

	)

240 
	#MNT_NOCLUSTERR
 0x40000000

	)

241 
	#MNT_NOCLUSTERW
 0x80000000

	)

242 
	#MNT_NFS4ACLS
 0x00000010

	)

247 
	#MNT_EXRDONLY
 0x00000080

	)

248 
	#MNT_EXPORTED
 0x00000100

	)

249 
	#MNT_DEFEXPORTED
 0x00000200

	)

250 
	#MNT_EXPORTANON
 0x00000400

	)

251 
	#MNT_EXKERB
 0x00000800

	)

252 
	#MNT_EXPUBLIC
 0x20000000

	)

259 
	#MNT_LOCAL
 0x00001000

	)

260 
	#MNT_QUOTA
 0x00002000

	)

261 
	#MNT_ROOTFS
 0x00004000

	)

262 
	#MNT_USER
 0x00008000

	)

263 
	#MNT_IGNORE
 0x00800000

	)

270 
	#MNT_VISFLAGMASK
 (
MNT_RDONLY
 | 
MNT_SYNCHRONOUS
 | 
MNT_NOEXEC
 | \

271 
MNT_NOSUID
 | 
MNT_UNION
 | \

272 
MNT_ASYNC
 | 
MNT_EXRDONLY
 | 
MNT_EXPORTED
 | \

273 
MNT_DEFEXPORTED
 | 
MNT_EXPORTANON
| 
MNT_EXKERB
 | \

274 
MNT_LOCAL
 | 
MNT_USER
 | 
MNT_QUOTA
 | \

275 
MNT_ROOTFS
 | 
MNT_NOATIME
 | 
MNT_NOCLUSTERR
| \

276 
MNT_NOCLUSTERW
 | 
MNT_SUIDDIR
 | 
MNT_SOFTDEP
 | \

277 
MNT_IGNORE
 | 
MNT_EXPUBLIC
 | 
MNT_NOSYMFOLLOW
 | \

278 
MNT_GJOURNAL
 | 
MNT_MULTILABEL
 | 
MNT_ACLS
 | 
MNT_NFS4ACLS
)

	)

281 
	#MNT_UPDATEMASK
 (
MNT_NOSUID
 | 
MNT_NOEXEC
 | \

282 
MNT_SYNCHRONOUS
 | 
MNT_UNION
 | 
MNT_ASYNC
 | \

283 
MNT_NOATIME
 | \

284 
MNT_NOSYMFOLLOW
 | 
MNT_IGNORE
 | \

285 
MNT_NOCLUSTERR
 | 
MNT_NOCLUSTERW
 | 
MNT_SUIDDIR
 | \

286 
MNT_ACLS
 | 
MNT_USER
 | 
MNT_NFS4ACLS
)

	)

295 
	#MNT_UPDATE
 0x00010000

	)

296 
	#MNT_DELEXPORT
 0x00020000

	)

297 
	#MNT_RELOAD
 0x00040000

	)

298 
	#MNT_FORCE
 0x00080000

	)

299 
	#MNT_SNAPSHOT
 0x01000000

	)

300 
	#MNT_BYFSID
 0x08000000

	)

301 
	#MNT_CMDFLAGS
 (
MNT_UPDATE
 | 
MNT_DELEXPORT
 | 
MNT_RELOAD
 | \

302 
MNT_FORCE
 | 
MNT_SNAPSHOT
 | 
MNT_BYFSID
)

	)

319 
	#MNTK_UNMOUNTF
 0x00000001

	)

320 
	#MNTK_ASYNC
 0x00000002

	)

321 
	#MNTK_SOFTDEP
 0x00000004

	)

322 
	#MNTK_NOINSMNTQ
 0x00000008

	)

323 
	#MNTK_DRAINING
 0x00000010

	)

324 
	#MNTK_REFEXPIRE
 0x00000020

	)

325 
	#MNTK_EXTENDED_SHARED
 0x00000040

	)

326 
	#MNTK_SHARED_WRITES
 0x00000080

	)

327 
	#MNTK_UNMOUNT
 0x01000000

	)

328 
	#MNTK_MWAIT
 0x02000000

	)

329 
	#MNTK_SUSPEND
 0x08000000

	)

330 
	#MNTK_SUSPEND2
 0x04000000

	)

331 
	#MNTK_SUSPENDED
 0x10000000

	)

332 
	#MNTK_MPSAFE
 0x20000000

	)

333 
	#MNTK_LOOKUP_SHARED
 0x40000000

	)

334 
	#MNTK_NOKNOTE
 0x80000000

	)

336 
	#MNT_SHARED_WRITES
(
mp
Ë(((mpË!
NULL
) && \

337 ((
mp
)->
m¡_kîn_Êag
 & 
MNTK_SHARED_WRITES
))

	)

346 
	#VFS_VFSCONF
 0

	)

347 
	#VFS_GENERIC
 0

	)

353 
	#VFS_MAXTYPENUM
 1

	)

354 
	#VFS_CONF
 2

	)

362 
	#MNT_WAIT
 1

	)

363 
	#MNT_NOWAIT
 2

	)

364 
	#MNT_LAZY
 3

	)

365 
	#MNT_SUSPEND
 4

	)

370 
	sfh™dÀ
 {

371 
fsid_t
 
	mfh_fsid
;

372 
fid
 
	mfh_fid
;

374 
fh™dÀ
 
	tfh™dÀ_t
;

379 
	s€xp‹t_¨gs
 {

380 
	mex_Êags
;

381 
uid_t
 
	mex_roŸ
;

382 
xu¸ed
 
	mex_™⁄
;

383 
sockaddr
 *
	mex_addr
;

384 
u_ch¨
 
	mex_addæí
;

385 
sockaddr
 *
	mex_mask
;

386 
u_ch¨
 
	mex_maskÀn
;

387 *
	mex_ödexfûe
;

393 
	#MAXSECFLAVORS
 5

	)

394 
	sexp‹t_¨gs
 {

395 
	mex_Êags
;

396 
uid_t
 
	mex_roŸ
;

397 
xu¸ed
 
	mex_™⁄
;

398 
sockaddr
 *
	mex_addr
;

399 
u_ch¨
 
	mex_addæí
;

400 
sockaddr
 *
	mex_mask
;

401 
u_ch¨
 
	mex_maskÀn
;

402 *
	mex_ödexfûe
;

403 
	mex_num£cÊav‹s
;

404 
	mex_£cÊav‹s
[
MAXSECFLAVORS
];

411 
	snfs_public
 {

412 
	m≈_vÆid
;

413 
fh™dÀ_t
 
	m≈_h™dÀ
;

414 
mou¡
 *
	m≈_mou¡
;

415 *
	m≈_ödex
;

425 
	svfsc⁄f
 {

426 
u_öt
 
	mvfc_vîsi⁄
;

427 
	mvfc_«me
[
MFSNAMELEN
];

428 
vfs›s
 *
	mvfc_vfs›s
;

429 
	mvfc_ty≥num
;

430 
	mvfc_ªfcou¡
;

431 
	mvfc_Êags
;

432 
vfs›tde˛
 *
	mvfc_›ts
;

433 
TAILQ_ENTRY
(
vfsc⁄f
Ë
	mvfc_li°
;

437 
	sxvfsc⁄f
 {

438 
vfs›s
 *
	mvfc_vfs›s
;

439 
	mvfc_«me
[
MFSNAMELEN
];

440 
	mvfc_ty≥num
;

441 
	mvfc_ªfcou¡
;

442 
	mvfc_Êags
;

443 
vfsc⁄f
 *
	mvfc_√xt
;

446 #i‚de‡
BURN_BRIDGES


447 
	sovfsc⁄f
 {

448 *
	mvfc_vfs›s
;

449 
	mvfc_«me
[32];

450 
	mvfc_ödex
;

451 
	mvfc_ªfcou¡
;

452 
	mvfc_Êags
;

460 
	#VFCF_STATIC
 0x00010000

	)

461 
	#VFCF_NETWORK
 0x00020000

	)

462 
	#VFCF_READONLY
 0x00040000

	)

463 
	#VFCF_SYNTHETIC
 0x00080000

	)

464 
	#VFCF_LOOPBACK
 0x00100000

	)

465 
	#VFCF_UNICODE
 0x00200000

	)

466 
	#VFCF_JAIL
 0x00400000

	)

467 
	#VFCF_DELEGADMIN
 0x00800000

	)

469 
uöt32_t
 
	tfs˘l›_t
;

471 
	svfsid˘l
 {

472 
	mvc_vîs
;

473 
fsid_t
 
	mvc_fsid
;

474 
	mvc_f°y≥«me
[
MFSNAMELEN
];

476 
fs˘l›_t
 
	mvc_›
;

477 *
	mvc_±r
;

478 
size_t
 
	mvc_Àn
;

479 
u_öt32_t
 
	mvc_•¨e
[12];

483 
	#VFS_CTL_VERS1
 0x01

	)

492 
	#VFS_CTL_QUERY
 0x00010001

	)

493 
	#VFS_CTL_TIMEO
 0x00010002

	)

494 
	#VFS_CTL_NOLOCKS
 0x00010003

	)

496 
	svfsquîy
 {

497 
u_öt32_t
 
	mvq_Êags
;

498 
u_öt32_t
 
	mvq_•¨e
[31];

502 
	#VQ_NOTRESP
 0x0001

	)

503 
	#VQ_NEEDAUTH
 0x0002

	)

504 
	#VQ_LOWDISK
 0x0004

	)

505 
	#VQ_MOUNT
 0x0008

	)

506 
	#VQ_UNMOUNT
 0x0010

	)

507 
	#VQ_DEAD
 0x0020

	)

508 
	#VQ_ASSIST
 0x0040

	)

510 
	#VQ_NOTRESPLOCK
 0x0080

	)

511 
	#VQ_FLAG0100
 0x0100

	)

512 
	#VQ_FLAG0200
 0x0200

	)

513 
	#VQ_FLAG0400
 0x0400

	)

514 
	#VQ_FLAG0800
 0x0800

	)

515 
	#VQ_FLAG1000
 0x1000

	)

516 
	#VQ_FLAG2000
 0x2000

	)

517 
	#VQ_FLAG4000
 0x4000

	)

518 
	#VQ_FLAG8000
 0x8000

	)

520 #ifde‡
_KERNEL


522 
	#VCTLTOREQ
(
vc
, 
ªq
) \

524 (
ªq
)->
√w±r
 = (
vc
)->
vc_±r
; \

525 (
ªq
)->
√wÀn
 = (
vc
)->
vc_Àn
; \

526 (
ªq
)->
√widx
 = 0; \

527 } 0)

	)

530 
	giovec
;

531 
	guio
;

533 #ifde‡
_KERNEL


538 
	#MBF_NOWAIT
 0x01

	)

539 
	#MBF_MNTLSTLOCK
 0x02

	)

540 
	#MBF_MASK
 (
MBF_NOWAIT
 | 
MBF_MNTLSTLOCK
)

	)

542 #ifde‡
MALLOC_DECLARE


543 
MALLOC_DECLARE
(
M_MOUNT
);

545 
maxvfsc⁄f
;

546 
nfs_mou¡_ty≥
;

548 
TAILQ_HEAD
(
vfsc⁄fhód
, 
vfsc⁄f
);

549 
vfsc⁄fhód
 
vfsc⁄f
;

554 
	gmou¡_¨gs
;

555 
	g«meid©a
;

556 
	gsys˘l_ªq
;

557 
	gm¡¨g
;

559 
	tvfs_cmou¡_t
(
	tm¡¨g
 *
	tma
, *
	td©a
, 
	tÊags
);

560 
	tvfs_unmou¡_t
(
	tmou¡
 *
	tmp
, 
	tm¡Êags
);

561 
	tvfs_roŸ_t
(
	tmou¡
 *
	tmp
, 
	tÊags
, 
	tvnode
 **
	tvµ
);

562 
	tvfs_quŸa˘l_t
(
	tmou¡
 *
	tmp
, 
	tcmds
, 
	tuid_t
 
	tuid
, *
	t¨g
);

563 
	tvfs_°©fs_t
(
	tmou¡
 *
	tmp
, 
	t°©fs
 *
	tsbp
);

564 
	tvfs_sync_t
(
	tmou¡
 *
	tmp
, 
	twaôf‹
);

565 
	tvfs_vgë_t
(
	tmou¡
 *
	tmp
, 
	töo_t
 
	töo
, 
	tÊags
,

566 
	tvnode
 **
	tvµ
);

567 
	tvfs_fhtovp_t
(
	tmou¡
 *
	tmp
, 
	tfid
 *
	tfhp
, 
	tvnode
 **
	tvµ
);

568 
	tvfs_checkexp_t
(
	tmou¡
 *
	tmp
, 
	tsockaddr
 *
	t«m
,

569 *
	textÊag•
, 
	tu¸ed
 **
	t¸ed™⁄p
,

570 *
	tnum£cÊav‹s
, **
	t£cÊav‹s
);

571 
	tvfs_öô_t
(
	tvfsc⁄f
 *);

572 
	tvfs_unöô_t
(
	tvfsc⁄f
 *);

573 
	tvfs_exèâr˘l_t
(
	tmou¡
 *
	tmp
, 
	tcmd
,

574 
	tvnode
 *
	tfûíame_vp
, 
	t©å«me•a˚
,

575 c⁄° *
	t©å«me
);

576 
	tvfs_mou¡_t
(
	tmou¡
 *
	tmp
);

577 
	tvfs_sys˘l_t
(
	tmou¡
 *
	tmp
, 
	tfs˘l›_t
 
	t›
,

578 
	tsys˘l_ªq
 *
	tªq
);

579 
	tvfs_su•_˛ón_t
(
	tmou¡
 *
	tmp
);

581 
	svfs›s
 {

582 
vfs_mou¡_t
 *
	mvfs_mou¡
;

583 
vfs_cmou¡_t
 *
	mvfs_cmou¡
;

584 
vfs_unmou¡_t
 *
	mvfs_unmou¡
;

585 
vfs_roŸ_t
 *
	mvfs_roŸ
;

586 
vfs_quŸa˘l_t
 *
	mvfs_quŸa˘l
;

587 
vfs_°©fs_t
 *
	mvfs_°©fs
;

588 
vfs_sync_t
 *
	mvfs_sync
;

589 
vfs_vgë_t
 *
	mvfs_vgë
;

590 
vfs_fhtovp_t
 *
	mvfs_fhtovp
;

591 
vfs_checkexp_t
 *
	mvfs_checkexp
;

592 
vfs_öô_t
 *
	mvfs_öô
;

593 
vfs_unöô_t
 *
	mvfs_unöô
;

594 
vfs_exèâr˘l_t
 *
	mvfs_exèâr˘l
;

595 
vfs_sys˘l_t
 *
	mvfs_sys˘l
;

596 
vfs_su•_˛ón_t
 *
	mvfs_su•_˛ón
;

599 
vfs_°©fs_t
 
	g__vfs_°©fs
;

601 
	#VFS_MOUNT
(
MP
Ë(*(MP)->
m¡_›
->
vfs_mou¡
)(MP)

	)

602 
	#VFS_UNMOUNT
(
MP
, 
FORCE
Ë(*(MP)->
m¡_›
->
vfs_unmou¡
)(MP, FORCE)

	)

603 
	#VFS_ROOT
(
MP
, 
FLAGS
, 
VPP
) \

604 (*(
MP
)->
m¡_›
->
vfs_roŸ
)(MP, 
FLAGS
, 
VPP
)

	)

605 
	#VFS_QUOTACTL
(
MP
, 
C
, 
U
, 
A
) \

606 (*(
MP
)->
m¡_›
->
vfs_quŸa˘l
)(MP, 
C
, 
U
, 
A
)

	)

607 
	#VFS_STATFS
(
MP
, 
SBP
Ë
	`__vfs_°©fs
((MP), (SBP))

	)

608 
	#VFS_SYNC
(
MP
, 
WAIT
Ë(*(MP)->
m¡_›
->
vfs_sync
)(MP, WAIT)

	)

609 
	#VFS_VGET
(
MP
, 
INO
, 
FLAGS
, 
VPP
) \

610 (*(
MP
)->
m¡_›
->
vfs_vgë
)(MP, 
INO
, 
FLAGS
, 
VPP
)

	)

611 
	#VFS_FHTOVP
(
MP
, 
FIDP
, 
VPP
) \

612 (*(
MP
)->
m¡_›
->
vfs_fhtovp
)(MP, 
FIDP
, 
VPP
)

	)

613 
	#VFS_CHECKEXP
(
MP
, 
NAM
, 
EXFLG
, 
CRED
, 
NUMSEC
, 
SEC
) \

614 (*(
MP
)->
m¡_›
->
vfs_checkexp
)(MP, 
NAM
, 
EXFLG
, 
CRED
, 
NUMSEC
, 
SEC
)

	)

615 
	#VFS_EXTATTRCTL
(
MP
, 
C
, 
FN
, 
NS
, 
N
) \

616 (*(
MP
)->
m¡_›
->
vfs_exèâr˘l
)(MP, 
C
, 
FN
, 
NS
, 
N
)

	)

617 
	#VFS_SYSCTL
(
MP
, 
OP
, 
REQ
) \

618 (*(
MP
)->
m¡_›
->
vfs_sys˘l
)(MP, 
OP
, 
REQ
)

	)

619 
	#VFS_SUSP_CLEAN
(
MP
) \

620 ({i‡(*(
MP
)->
m¡_›
->
vfs_su•_˛ón
 !
NULL
) \

621 (*(
MP
)->
m¡_›
->
vfs_su•_˛ón
)(MP); })

	)

623 
	#VFS_NEEDSGIANT_
(
MP
) \

624 ((
MP
Ë!
NULL
 && ((MP)->
m¡_kîn_Êag
 & 
MNTK_MPSAFE
Ë=0)

	)

626 
	#VFS_NEEDSGIANT
(
MP
Ë
__exãnsi⁄__
 \

628 
mou¡
 *
_mp
; \

629 
_mp
 = (
MP
); \

630 
	`VFS_NEEDSGIANT_
(
_mp
); \

631 })

	)

633 
	#VFS_LOCK_GIANT
(
MP
Ë
__exãnsi⁄__
 \

635 
_locked
; \

636 
mou¡
 *
_mp
; \

637 
_mp
 = (
MP
); \

638 i‡(
	`VFS_NEEDSGIANT_
(
_mp
)) { \

639 
	`mtx_lock
(&
Gü¡
); \

640 
_locked
 = 1; \

642 
_locked
 = 0; \

643 
_locked
; \

644 })

	)

645 
	#VFS_UNLOCK_GIANT
(
locked
Ëi‡(÷ocked)Ë
	`mtx_u∆ock
(&
Gü¡
);

	)

646 
	#VFS_ASSERT_GIANT
(
MP
) do \

648 
mou¡
 *
_mp
; \

649 
_mp
 = (
MP
); \

650 i‡(
	`VFS_NEEDSGIANT_
(
_mp
)) \

651 
	`mtx_as£π
(&
Gü¡
, 
MA_OWNED
); \

652 } 0)

	)

654 
	#VFS_KNOTE_LOCKED
(
vp
, 
höt
) do \

656 i‡(((
vp
)->
v_vÊag
 & 
VV_NOKNOTE
) == 0) \

657 
	`VN_KNOTE
((
vp
), (
höt
), 
KNF_LISTLOCKED
); \

658 } 0)

	)

660 
	#VFS_KNOTE_UNLOCKED
(
vp
, 
höt
) do \

662 i‡(((
vp
)->
v_vÊag
 & 
VV_NOKNOTE
) == 0) \

663 
	`VN_KNOTE
((
vp
), (
höt
), 0); \

664 } 0)

	)

666 
	~<sys/moduÀ.h
>

671 
	#VFS_VERSION_00
 0x19660120

	)

672 
	#VFS_VERSION
 
VFS_VERSION_00


	)

674 
	#VFS_SET
(
vfs›s
, 
f¢ame
, 
Êags
) \

675 
vfsc⁄f
 
f¢ame
 ## 
_vfsc⁄f
 = { \

676 .
vfc_vîsi⁄
 = 
VFS_VERSION
, \

677 .
vfc_«me
 = #fsname, \

678 .
vfc_vfs›s
 = &
vfs›s
, \

679 .
vfc_ty≥num
 = -1, \

680 .
vfc_Êags
 = 
Êags
, \

682 
moduÀd©a_t
 
f¢ame
 ## 
_mod
 = { \

684 
vfs_modevít
, \

685 & 
f¢ame
 ## 
_vfsc⁄f
 \

687 
	`DECLARE_MODULE
(
f¢ame
, f¢amê## 
_mod
, 
SI_SUB_VFS
, 
SI_ORDER_MIDDLE
)

	)

689 *
mou¡roŸf¢ame
;

695 
dounmou¡
(
mou¡
 *, , 
thªad
 *);

697 
kî√l_mou¡
(
m¡¨g
 *
ma
, 
Êags
);

698 
kî√l_vmou¡
(
Êags
, ...);

699 
m¡¨g
 *
mou¡_¨g
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
vÆ
, 
Àn
);

700 
m¡¨g
 *
mou¡_¨gb
(m¡¨g *
ma
, 
Êag
, c⁄° *
«me
);

701 
m¡¨g
 *
mou¡_¨gf
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
fmt
, ...);

702 
m¡¨g
 *
mou¡_¨gsu
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
vÆ
, 
Àn
);

703 
°©fs_sˇÀ_blocks
(
°©fs
 *
sf
, 
max_size
);

704 
vfsc⁄f
 *
vfs_by«me
(const *);

705 
vfsc⁄f
 *
vfs_by«me_kld
(c⁄° *, 
thªad
 *
td
, *);

706 
vfs_mou¡_de°roy
(
mou¡
 *);

707 
vfs_evít_sig«l
(
fsid_t
 *, 
u_öt32_t
, 
öçå_t
);

708 
vfs_‰ì›ts
(
vfs›éi°
 *
›ts
);

709 
vfs_dñëe›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
);

710 
vfs_buûd›ts
(
uio
 *
auio
, 
vfs›éi°
 **
›ti⁄s
);

711 
vfs_Êag›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, 
u_öt
 *
w
, u_öà
vÆ
);

712 
vfs_gë›t
(
vfs›éi°
 *, const *, **, *);

713 
vfs_gë›t_pos
(
vfs›éi°
 *
›ts
, c⁄° *
«me
);

714 *
vfs_gë›ts
(
vfs›éi°
 *, c⁄° *, *
îr‹
);

715 
vfs_c›y›t
(
vfs›éi°
 *, const *, *, );

716 
vfs_fûãr›t
(
vfs›éi°
 *, c⁄° **
ÀgÆ
);

717 
vfs_›ãº‹
(
vfs›éi°
 *
›ts
, c⁄° *
fmt
, ...);

718 
vfs_sˇn›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, c⁄° *
fmt
, ...);

719 
vfs_£t›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, *
vÆue
,

720 
Àn
);

721 
vfs_£t›t_∑π
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, *
vÆue
,

722 
Àn
);

723 
vfs_£t›ts
(
vfs›éi°
 *
›ts
, c⁄° *
«me
,

724 c⁄° *
vÆue
);

725 
	gvfs_£çublicfs


726 (
	gmou¡
 *, 
	g√ãxp‹t
 *, 
	gexp‹t_¨gs
 *);

727 
vfs_msync
(
mou¡
 *, );

728 
vfs_busy
(
mou¡
 *, );

729 
	gvfs_exp‹t


730 (
	gmou¡
 *, 
	gexp‹t_¨gs
 *);

731 
vfs_Æloˇã_syncvnode
(
mou¡
 *);

732 
vfs_d⁄mou¡
(
thªad
 *
td
, 
fsÊags
, 
uio
 *
fs›ti⁄s
);

733 
vfs_gë√wfsid
(
mou¡
 *);

734 
cdev
 *
vfs_gëroŸfsid
(
mou¡
 *);

735 
mou¡
 *
vfs_gëvfs
(
fsid_t
 *);

736 
mou¡
 *
vfs_busyfs
(
fsid_t
 *);

737 
vfs_modevít
(
moduÀ_t
, , *);

738 
vfs_mou¡_îr‹
(
mou¡
 *, const *, ...);

739 
vfs_mou¡roŸ
();

740 
vfs_mou¡ed‰om
(
mou¡
 *, c⁄° *
‰om
);

741 
vfs_€xp‹t_c⁄v
(c⁄° 
€xp‹t_¨gs
 *
€xp
,

742 
exp‹t_¨gs
 *
exp
);

743 
vfs_ªf
(
mou¡
 *);

744 
vfs_ªl
(
mou¡
 *);

745 
mou¡
 *
vfs_mou¡_Æloc
(
vnode
 *, 
vfsc⁄f
 *, const *,

746 
u¸ed
 *);

747 
vfs_su£r
(
mou¡
 *, 
thªad
 *);

748 
vfs_unbusy
(
mou¡
 *);

749 
vfs_unmou¡Æl
();

750 
	$TAILQ_HEAD
(
m¡li°
, 
mou¡
Ë
mou¡li°
;

751 
mtx
 
mou¡li°_mtx
;

752 
nfs_public
 
nfs_pub
;

759 
vfs_roŸ_t
 
vfs_°droŸ
;

760 
vfs_quŸa˘l_t
 
vfs_°dquŸa˘l
;

761 
vfs_°©fs_t
 
vfs_°d°©fs
;

762 
vfs_sync_t
 
vfs_°dsync
;

763 
vfs_sync_t
 
vfs_°dnosync
;

764 
vfs_vgë_t
 
vfs_°dvgë
;

765 
vfs_fhtovp_t
 
vfs_°dfhtovp
;

766 
vfs_checkexp_t
 
vfs_°dcheckexp
;

767 
vfs_öô_t
 
vfs_°döô
;

768 
vfs_unöô_t
 
vfs_°dunöô
;

769 
vfs_exèâr˘l_t
 
vfs_°dexèâr˘l
;

770 
vfs_sys˘l_t
 
vfs_°dsys˘l
;

774 
	~<sys/cdefs.h
>

776 
°©
;

778 
__BEGIN_DECLS


779 
	`fh›í
(c⁄° 
fh™dÀ
 *, );

780 
	`fh°©
(c⁄° 
fh™dÀ
 *, 
°©
 *);

781 
	`fh°©fs
(c⁄° 
fh™dÀ
 *, 
°©fs
 *);

782 
	`f°©fs
(, 
°©fs
 *);

783 
	`gëfh
(c⁄° *, 
fh™dÀ_t
 *);

784 
	`gëfs°©
(
°©fs
 *, , );

785 
	`gëm¡öfo
(
°©fs
 **, );

786 
	`lgëfh
(c⁄° *, 
fh™dÀ_t
 *);

787 
	`mou¡
(const *, const *, , *);

788 
	`nmou¡
(
iovec
 *, , );

789 
	`°©fs
(c⁄° *, 
°©fs
 *);

790 
	`unmou¡
(const *, );

793 
	`gëvfsby«me
(c⁄° *, 
xvfsc⁄f
 *);

794 
__END_DECLS


	@/usr/include/sys/mtio.h

33 #i‚def 
_SYS_MTIO_H_


34 
	#_SYS_MTIO_H_


	)

36 #i‚de‡
_KERNEL


37 
	~<sys/ty≥s.h
>

39 
	~<sys/ioccom.h
>

46 
	smt›
 {

47 
	mmt_›
;

48 
öt32_t
 
	mmt_cou¡
;

52 
	#MTWEOF
 0

	)

53 
	#MTFSF
 1

	)

54 
	#MTBSF
 2

	)

55 
	#MTFSR
 3

	)

56 
	#MTBSR
 4

	)

57 
	#MTREW
 5

	)

58 
	#MTOFFL
 6

	)

59 
	#MTNOP
 7

	)

60 
	#MTCACHE
 8

	)

61 
	#MTNOCACHE
 9

	)

63 #i‡
deföed
(
__FªeBSD__
)

70 
	#MTSETBSIZ
 10

	)

74 
	#MTSETDNSTY
 11

	)

76 
	#MTERASE
 12

	)

77 
	#MTEOD
 13

	)

78 
	#MTCOMP
 14

	)

79 
	#MTRETENS
 15

	)

80 
	#MTWSS
 16

	)

81 
	#MTFSS
 17

	)

82 
	#MTBSS
 18

	)

84 
	#MT_COMP_ENABLE
 0xffffffff

	)

85 
	#MT_COMP_DISABLED
 0xffffff„

	)

86 
	#MT_COMP_UNSUPP
 0xfffffffd

	)

91 
	#MTIO_DSREG_NIL
 0

	)

92 
	#MTIO_DSREG_REST
 1

	)

93 
	#MTIO_DSREG_RBSY
 2

	)

94 
	#MTIO_DSREG_WR
 20

	)

95 
	#MTIO_DSREG_FMK
 21

	)

96 
	#MTIO_DSREG_ZER
 22

	)

97 
	#MTIO_DSREG_RD
 30

	)

98 
	#MTIO_DSREG_FWD
 40

	)

99 
	#MTIO_DSREG_REV
 41

	)

100 
	#MTIO_DSREG_POS
 42

	)

101 
	#MTIO_DSREG_REW
 43

	)

102 
	#MTIO_DSREG_TEN
 44

	)

103 
	#MTIO_DSREG_UNL
 45

	)

104 
	#MTIO_DSREG_LD
 46

	)

110 
	smtgë
 {

111 
	mmt_ty≥
;

113 
	mmt_d§eg
;

114 
	mmt_îªg
;

122 
	mmt_ªsid
;

123 #i‡
deföed
 (
__FªeBSD__
)

124 
öt32_t
 
	mmt_blksiz
;

125 
öt32_t
 
	mmt_dísôy
;

126 
u_öt32_t
 
	mmt_comp
;

127 
öt32_t
 
	mmt_blksiz0
;

128 
öt32_t
 
	mmt_blksiz1
;

129 
öt32_t
 
	mmt_blksiz2
;

130 
öt32_t
 
	mmt_blksiz3
;

131 
öt32_t
 
	mmt_dísôy0
;

132 
öt32_t
 
	mmt_dísôy1
;

133 
öt32_t
 
	mmt_dísôy2
;

134 
öt32_t
 
	mmt_dísôy3
;

136 
u_öt32_t
 
	mmt_comp0
;

137 
u_öt32_t
 
	mmt_comp1
;

138 
u_öt32_t
 
	mmt_comp2
;

139 
u_öt32_t
 
	mmt_comp3
;

142 
öt32_t
 
	mmt_fûío
;

143 
öt32_t
 
	mmt_blkno
;

148 
	sscsi_è≥_îr‹s
 {

154 
u_öt8_t
 
	mio_£n£
[32];

155 
öt32_t
 
	mio_ªsid
;

156 
u_öt8_t
 
	mio_cdb
[16];

157 
u_öt8_t
 
	m˘l_£n£
[32];

158 
öt32_t
 
	m˘l_ªsid
;

159 
u_öt8_t
 
	m˘l_cdb
[16];

166 
u_öt32_t
 
	mªåõs
;

167 
u_öt32_t
 
	mc‹ª˘ed
;

168 
u_öt32_t
 
	m¥o˚s£d
;

169 
u_öt32_t
 
	mÁûuªs
;

170 
u_öt64_t
 
	mnbyãs
;

171 } 
	mwãº
, 
	mrdîr
;

174 
	umãº°©
 {

175 
scsi_è≥_îr‹s
 
	mscsi_îr°©
;

176 
	m_ª£rved_∑ddög
[256];

183 
	#MT_ISTS
 0x01

	)

184 
	#MT_ISHT
 0x02

	)

185 
	#MT_ISTM
 0x03

	)

186 
	#MT_ISMT
 0x04

	)

187 
	#MT_ISUT
 0x05

	)

188 
	#MT_ISCPC
 0x06

	)

189 
	#MT_ISAR
 0x07

	)

190 
	#MT_ISTMSCP
 0x08

	)

191 
	#MT_ISCY
 0x09

	)

192 
	#MT_ISCT
 0x0®

	)

193 
	#MT_ISFHP
 0x0b

	)

194 
	#MT_ISEXABYTE
 0x0¯

	)

195 
	#MT_ISEXA8200
 0x0¯

	)

196 
	#MT_ISEXA8500
 0x0d

	)

197 
	#MT_ISVIPER1
 0x0ê

	)

198 
	#MT_ISPYTHON
 0x0‡

	)

199 
	#MT_ISHPDAT
 0x10

	)

200 
	#MT_ISMFOUR
 0x11

	)

201 
	#MT_ISTK50
 0x12

	)

202 
	#MT_ISMT02
 0x13

	)

205 
	#MTIOCTOP
 
	`_IOW
('m', 1, 
mt›
Ë

	)

206 
	#MTIOCGET
 
	`_IOR
('m', 2, 
mtgë
Ë

	)

208 
	#MTIOCIEOT
 
	`_IO
('m', 3Ë

	)

209 
	#MTIOCEEOT
 
	`_IO
('m', 4Ë

	)

216 
	#MTIOCRDSPOS
 
	`_IOR
('m', 5, 
u_öt32_t
Ë

	)

217 
	#MTIOCRDHPOS
 
	`_IOR
('m', 6, 
u_öt32_t
Ë

	)

218 
	#MTIOCSLOCATE
 
	`_IOW
('m', 5, 
u_öt32_t
Ë

	)

219 
	#MTIOCHLOCATE
 
	`_IOW
('m', 6, 
u_öt32_t
Ë

	)

220 
	#MTIOCERRSTAT
 
	`_IOR
('m', 7, 
mãº°©
Ë

	)

225 
	#MTIOCSETEOTMODEL
 
	`_IOW
('m', 8, 
u_öt32_t
)

	)

227 
	#MTIOCGETEOTMODEL
 
	`_IOR
('m', 8, 
u_öt32_t
)

	)

229 #i‚de‡
_KERNEL


230 
	#DEFTAPE
 "/dev/nß0"

	)

	@/usr/include/sys/param.h

38 #i‚de‡
_SYS_PARAM_H_


39 
	#_SYS_PARAM_H_


	)

41 
	~<sys/_nuŒ.h
>

43 
	#BSD
 199506

	)

44 
	#BSD4_3
 1

	)

45 
	#BSD4_4
 1

	)

60 #unde‡
__FªeBSD_vîsi⁄


61 
	#__FªeBSD_vîsi⁄
 803000

	)

76 #unde‡
__FªeBSD_kî√l__


77 
	#__FªeBSD_kî√l__


	)

79 #ifde‡
_KERNEL


80 
	#P_OSREL_SIGWAIT
 700000

	)

81 
	#P_OSREL_SIGSEGV
 700004

	)

82 
	#P_OSREL_MAP_ANON
 800104

	)

85 #i‚de‡
LOCORE


86 
	~<sys/ty≥s.h
>

96 
	~<sys/sy¶imôs.h
>

98 
	#MAXCOMLEN
 19

	)

99 
	#MAXINTERP
 32

	)

100 
	#MAXLOGNAME
 17

	)

101 
	#MAXUPRC
 
CHILD_MAX


	)

102 
	#NCARGS
 
ARG_MAX


	)

103 
	#NGROUPS
 (
NGROUPS_MAX
+1Ë

	)

104 
	#NOFILE
 
OPEN_MAX


	)

105 
	#NOGROUP
 65535

	)

106 
	#MAXHOSTNAMELEN
 256

	)

107 
	#SPECNAMELEN
 63

	)

110 #ifde‡
_KERNEL


111 
	~<sys/cdefs.h
>

112 
	~<sys/î∫o.h
>

113 #i‚de‡
LOCORE


114 
	~<sys/time.h
>

115 
	~<sys/¥i‹ôy.h
>

118 #i‚de‡
FALSE


119 
	#FALSE
 0

	)

121 #i‚de‡
TRUE


122 
	#TRUE
 1

	)

126 #i‚de‡
_KERNEL


128 
	~<sys/sig«l.h
>

132 
	~<machöe/∑øm.h
>

133 #i‚de‡
_KERNEL


134 
	~<sys/limôs.h
>

137 #i‚de‡
_NO_NAMESPACE_POLLUTION


139 #i‚de‡
DEV_BSHIFT


140 
	#DEV_BSHIFT
 9

	)

142 
	#DEV_BSIZE
 (1<<
DEV_BSHIFT
)

	)

144 #i‚de‡
BLKDEV_IOSIZE


145 
	#BLKDEV_IOSIZE
 
PAGE_SIZE


	)

147 #i‚de‡
DFLTPHYS


148 
	#DFLTPHYS
 (64 * 1024Ë

	)

150 #i‚de‡
MAXPHYS


151 
	#MAXPHYS
 (128 * 1024Ë

	)

153 #i‚de‡
MAXDUMPPGS


154 
	#MAXDUMPPGS
 (
DFLTPHYS
/
PAGE_SIZE
)

	)

161 #i‚def 
MSIZE


162 
	#MSIZE
 256

	)

165 #i‚def 
MCLSHIFT


166 
	#MCLSHIFT
 11

	)

169 
	#MCLBYTES
 (1 << 
MCLSHIFT
Ë

	)

171 
	#MJUMPAGESIZE
 
PAGE_SIZE


	)

172 
	#MJUM9BYTES
 (9 * 1024Ë

	)

173 
	#MJUM16BYTES
 (16 * 1024Ë

	)

180 #i‚de‡
˘ob


181 
	#˘ob
(
x
Ë((x)<<
PAGE_SHIFT
)

	)

185 #i‚de‡
btoc


186 
	#btoc
(
x
Ë(((
vm_off£t_t
)(x)+
PAGE_MASK
)>>
PAGE_SHIFT
)

	)

195 #i‚de‡
btodb


196 
	#btodb
(
byãs
) \

197 ( (
byãs
) > () \

198 ? (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
) \

199 : (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
))

	)

202 #i‚de‡
dbtob


203 
	#dbtob
(
db
) \

204 ((
off_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)

209 
	#PRIMASK
 0x0ff

	)

210 
	#PCATCH
 0x100

	)

211 
	#PDROP
 0x200

	)

212 
	#PBDRY
 0x400

	)

214 
	#NZERO
 0

	)

216 
	#NBBY
 8

	)

217 
	#NBPW
 (Ë

	)

219 
	#CMASK
 022

	)

221 
	#NODEV
 (
dev_t
)(-1Ë

	)

246 
	#MAXBSIZE
 65536

	)

247 
	#BKVASIZE
 16384

	)

248 
	#BKVAMASK
 (
BKVASIZE
-1)

	)

259 
	#MAXPATHLEN
 
PATH_MAX


	)

260 
	#MAXSYMLINKS
 32

	)

263 
	#£tbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] |1<<((i)%NBBY))

	)

264 
	#˛rbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

265 
	#is£t
(
a
,
i
) \

266 (((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY)))

	)

267 
	#is˛r
(
a
,
i
) \

268 ((((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

271 #i‚de‡
howm™y


272 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

274 
	#rounddown
(
x
, 
y
Ë(((x)/(y))*(y))

	)

275 
	#roundup
(
x
, 
y
Ë((((x)+((y)-1))/(y))*(y)Ë

	)

276 
	#roundup2
(
x
, 
y
Ë(((x)+((y)-1))&(~((y)-1))Ë

	)

277 
	#powîof2
(
x
Ë((((x)-1)&(x))==0)

	)

280 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

281 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

283 #ifde‡
_KERNEL


287 #i‚de‡
LOCORE


288 #i‚de‡
_BYTEORDER_PROTOTYPED


289 
	#_BYTEORDER_PROTOTYPED


	)

290 
__BEGIN_DECLS


291 
__uöt32_t
 
ht⁄l
(__uint32_t);

292 
__uöt16_t
 
ht⁄s
(__uint16_t);

293 
__uöt32_t
 
¡ohl
(__uint32_t);

294 
__uöt16_t
 
¡ohs
(__uint16_t);

295 
	g__END_DECLS


299 #i‚de‡
löt


300 #i‚de‡
_BYTEORDER_FUNC_DEFINED


301 
	#_BYTEORDER_FUNC_DEFINED


	)

302 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

303 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

304 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

305 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

321 
	#FSHIFT
 11

	)

322 
	#FSCALE
 (1<<
FSHIFT
)

	)

324 
	#dbtoc
(
db
) \

325 ((
db
 + (
	`˘odb
(1Ë- 1)Ë>> (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

327 
	#˘odb
(
db
) \

328 ((
db
Ë<< (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

334 
	#membî2°ru˘
(
s
, 
m
, 
x
) \

335 ((
s
 *)(*)((*)(
x
Ë- 
	`off£tof
(s, 
m
)))

	)

	@/usr/include/sys/proc.h

38 #i‚de‡
_SYS_PROC_H_


39 
	#_SYS_PROC_H_


	)

41 
	~<sys/ˇŒout.h
>

42 
	~<sys/evít.h
>

43 
	~<sys/c⁄dv¨.h
>

44 #i‚de‡
_KERNEL


45 
	~<sys/fûedesc.h
>

47 
	~<sys/queue.h
>

48 
	~<sys/_lock.h
>

49 
	~<sys/lock_¥ofûe.h
>

50 
	~<sys/_muãx.h
>

51 
	~<sys/osd.h
>

52 
	~<sys/¥i‹ôy.h
>

53 
	~<sys/π¥io.h
>

54 
	~<sys/runq.h
>

55 
	~<sys/ªsour˚.h
>

56 
	~<sys/sigio.h
>

57 
	~<sys/sig«l.h
>

58 
	~<sys/sig«lv¨.h
>

59 #i‚de‡
_KERNEL


60 
	~<sys/time.h
>

62 
	~<sys/p˝u.h
>

64 
	~<sys/uc⁄ãxt.h
>

65 
	~<sys/u¸ed.h
>

66 
	~<machöe/¥oc.h
>

76 
	s£ssi⁄
 {

77 
u_öt
 
	ms_cou¡
;

78 
¥oc
 *
	ms_Àadî
;

79 
vnode
 *
	ms_âyvp
;

80 
ây
 *
	ms_âyp
;

81 
pid_t
 
	ms_sid
;

83 
	ms_logö
[
roundup
(
MAXLOGNAME
, ())];

84 
mtx
 
	ms_mtx
;

95 
	spgΩ
 {

96 
LIST_ENTRY
(
pgΩ
Ë
	mpg_hash
;

97 
LIST_HEAD
(, 
¥oc
Ë
	mpg_membîs
;

98 
£ssi⁄
 *
	mpg_£ssi⁄
;

99 
sigiﬁ°
 
	mpg_sigiﬁ°
;

100 
pid_t
 
	mpg_id
;

101 
	mpg_jobc
;

102 
mtx
 
	mpg_mtx
;

108 
	s∑rgs
 {

109 
u_öt
 
	m¨_ªf
;

110 
u_öt
 
	m¨_Àngth
;

111 
u_ch¨
 
	m¨_¨gs
[1];

159 
	gkaudô_ªc‹d
;

160 
	gtd_sched
;

161 
	g∆möfo
;

162 
	gkaioöfo
;

163 
	gp_sched
;

164 
	g¥oc
;

165 
	g¶ìpqueue
;

166 
	gthªad
;

167 
	gå≠‰ame
;

168 
	gtu∫°ûe
;

169 
	gmqueue_nŸifõr
;

170 
	gkdåa˚_¥oc
;

171 
	gkdåa˚_thªad
;

172 
	g˝u£t
;

185 
	srußge_ext
 {

186 
u_öt64_t
 
	mrux_ru¡ime
;

187 
u_öt64_t
 
	mrux_uticks
;

188 
u_öt64_t
 
	mrux_°icks
;

189 
u_öt64_t
 
	mrux_ôicks
;

190 
u_öt64_t
 
	mrux_uu
;

191 
u_öt64_t
 
	mrux_su
;

192 
u_öt64_t
 
	mrux_tu
;

200 
	sthªad
 {

201 
mtx
 *vﬁ©ûê
	mtd_lock
;

202 
¥oc
 *
	mtd_¥oc
;

203 
TAILQ_ENTRY
(
thªad
Ë
	mtd_∂i°
;

204 
TAILQ_ENTRY
(
thªad
Ë
	mtd_runq
;

205 
TAILQ_ENTRY
(
thªad
Ë
	mtd_¶pq
;

206 
TAILQ_ENTRY
(
thªad
Ë
	mtd_lockq
;

207 
˝u£t
 *
	mtd_˝u£t
;

208 
£…d
 *
	mtd_£l
;

209 
¶ìpqueue
 *
	mtd_¶ìpqueue
;

210 
tu∫°ûe
 *
	mtd_tu∫°ûe
;

211 
umtx_q
 *
	mtd_umtxq
;

212 
lwpid_t
 
	mtd_tid
;

213 
sigqueue_t
 
	mtd_sigqueue
;

214 
	#td_sigli°
 
td_sigqueue
.
sq_sig«ls


	)

217 
	#td_°¨tzîo
 
td_Êags


	)

218 
	mtd_Êags
;

219 
	mtd_öhibô‹s
;

220 
	mtd_pÊags
;

221 
	mtd_dupfd
;

222 
	mtd_sqqueue
;

223 *
	mtd_wch™
;

224 c⁄° *
	mtd_wmesg
;

225 
u_ch¨
 
	mtd_œ°˝u
;

226 
u_ch¨
 
	mtd_⁄˝u
;

227 vﬁ©ûê
u_ch¨
 
	mtd_owïªem±
;

228 
u_ch¨
 
	mtd_tsqueue
;

229 
	mtd_locks
;

230 
	mtd_rw_æocks
;

231 
	mtd_lk_¶ocks
;

232 
tu∫°ûe
 *
	mtd_blocked
;

233 c⁄° *
	mtd_lock«me
;

234 
LIST_HEAD
(, 
tu∫°ûe
Ë
	mtd_c⁄ã°ed
;

235 
lock_li°_íåy
 *
	mtd_¶ì∂ocks
;

236 
	mtd_öå_√°ög_Àvñ
;

237 
	mtd_pö√d
;

238 
u¸ed
 *
	mtd_u¸ed
;

239 
u_öt
 
	mtd_e°˝u
;

240 
	mtd_¶±ick
;

241 
	mtd_blktick
;

242 
rußge
 
	mtd_ru
;

243 
uöt64_t
 
	mtd_ö¸u¡ime
;

244 
uöt64_t
 
	mtd_ru¡ime
;

245 
u_öt
 
	mtd_±icks
;

246 
u_öt
 
	mtd_°icks
;

247 
u_öt
 
	mtd_ôicks
;

248 
u_öt
 
	mtd_uticks
;

249 
	mtd_öåvÆ
;

250 
sig£t_t
 
	mtd_ﬁdsigmask
;

251 
sig£t_t
 
	mtd_sigmask
;

252 vﬁ©ûê
u_öt
 
	mtd_gíî©i⁄
;

253 
°ack_t
 
	mtd_sig°k
;

254 
	mtd_xsig
;

255 
u_l⁄g
 
	mtd_¥ofû_addr
;

256 
u_öt
 
	mtd_¥ofû_ticks
;

257 
	mtd_«me
[
MAXCOMLEN
 + 1];

258 
fûe
 *
	mtd_Â›
;

259 
	mtd_dbgÊags
;

260 
ksigöfo
 
	mtd_dbgksi
;

261 
	mtd_ng_outbound
;

262 
osd
 
	mtd_osd
;

263 
	#td_ídzîo
 
td_rqödex


	)

266 
	#td_°¨tc›y
 
td_ídzîo


	)

267 
u_ch¨
 
	mtd_rqödex
;

268 
u_ch¨
 
	mtd_ba£_¥i
;

269 
u_ch¨
 
	mtd_¥i‹ôy
;

270 
u_ch¨
 
	mtd_¥i_˛ass
;

271 
u_ch¨
 
	mtd_u£r_¥i
;

272 
u_ch¨
 
	mtd_ba£_u£r_¥i
;

273 
	#td_ídc›y
 
td_pcb


	)

279 
pcb
 *
	mtd_pcb
;

281 
	mTDS_INACTIVE
 = 0x0,

282 
	mTDS_INHIBITED
,

283 
	mTDS_CAN_RUN
,

284 
	mTDS_RUNQ
,

285 
	mTDS_RUNNING


286 } 
	mtd_°©e
;

287 
ªgi°î_t
 
	mtd_ªtvÆ
[2];

288 
ˇŒout
 
	mtd_¶pˇŒout
;

289 
å≠‰ame
 *
	mtd_‰ame
;

290 
vm_obje˘
 *
	mtd_k°ack_obj
;

291 
vm_off£t_t
 
	mtd_k°ack
;

292 
	mtd_k°ack_∑ges
;

293 *
	mtd_unu£d1
;

294 
vm_off£t_t
 
	mtd_unu£d2
;

295 
	mtd_unu£d3
;

296 vﬁ©ûê
u_öt
 
	mtd_¸ô√°
;

297 
mdthªad
 
	mtd_md
;

298 
td_sched
 *
	mtd_sched
;

299 
kaudô_ªc‹d
 *
	mtd_¨
;

300 
	mtd_sysˇŒs
;

301 
Õohód
 
	mtd_Õrof
[2];

302 
kdåa˚_thªad
 *
	mtd_dåa˚
;

303 
	mtd_î∫o
;

304 
v√t
 *
	mtd_v√t
;

305 c⁄° *
	mtd_v√t_Õush
;

306 
rußge_ext
 
	mtd_rux
;

307 
vm_m≠_íåy
 *
	mtd_m≠_def_u£r
;

308 
pid_t
 
	mtd_dbg_f‹ked
;

311 
mtx
 *
thªad_lock_block
(
thªad
 *);

312 
thªad_lock_unblock
(
thªad
 *, 
mtx
 *);

313 
thªad_lock_£t
(
thªad
 *, 
mtx
 *);

314 
	#THREAD_LOCK_ASSERT
(
td
, 
ty≥
) \

316 
mtx
 *
__m
 = (
td
)->
td_lock
; \

317 i‡(
__m
 !&
blocked_lock
) \

318 
	`mtx_as£π
(
__m
, (
ty≥
)); \

319 } 0)

	)

321 #ifde‡
INVARIANTS


322 
	#THREAD_LOCKPTR_ASSERT
(
td
, 
lock
) \

324 
mtx
 *
__m
 = (
td
)->
td_lock
; \

325 
	`KASSERT
((
__m
 =&
blocked_lock
 || __m =(
lock
)), \

326 ("Thªad %∞lock %∞d€†nŸ m©ch %p", 
td
, 
__m
, (
lock
))); \

327 } 0)

	)

329 
	#THREAD_LOCKPTR_ASSERT
(
td
, 
lock
)

	)

332 
	#CRITICAL_ASSERT
(
td
) \

333 
	`KASSERT
((
td
)->
td_¸ô√°
 >1, ("NŸ i¿¸ôiˇ»£˘i⁄"));

	)

339 
	#TDF_BORROWING
 0x00000001

	)

340 
	#TDF_INPANIC
 0x00000002

	)

341 
	#TDF_INMEM
 0x00000004

	)

342 
	#TDF_SINTR
 0x00000008

	)

343 
	#TDF_TIMEOUT
 0x00000010

	)

344 
	#TDF_IDLETD
 0x00000020

	)

345 
	#TDF_CANSWAP
 0x00000040

	)

346 
	#TDF_SLEEPABORT
 0x00000080

	)

347 
	#TDF_KTH_SUSP
 0x00000100

	)

348 
	#TDF_UBORROWING
 0x00000200

	)

349 
	#TDF_BOUNDARY
 0x00000400

	)

350 
	#TDF_ASTPENDING
 0x00000800

	)

351 
	#TDF_TIMOFAIL
 0x00001000

	)

352 
	#TDF_SBDRY
 0x00002000

	)

353 
	#TDF_UPIBLOCKED
 0x00004000

	)

354 
	#TDF_NEEDSUSPCHK
 0x00008000

	)

355 
	#TDF_NEEDRESCHED
 0x00010000

	)

356 
	#TDF_NEEDSIGCHK
 0x00020000

	)

357 
	#TDF_NOLOAD
 0x00040000

	)

358 
	#TDF_UNUSED19
 0x00080000

	)

359 
	#TDF_THRWAKEUP
 0x00100000

	)

360 
	#TDF_UNUSED21
 0x00200000

	)

361 
	#TDF_SWAPINREQ
 0x00400000

	)

362 
	#TDF_UNUSED23
 0x00800000

	)

363 
	#TDF_SCHED0
 0x01000000

	)

364 
	#TDF_SCHED1
 0x02000000

	)

365 
	#TDF_SCHED2
 0x04000000

	)

366 
	#TDF_SCHED3
 0x08000000

	)

367 
	#TDF_ALRMPEND
 0x10000000

	)

368 
	#TDF_PROFPEND
 0x20000000

	)

369 
	#TDF_MACPEND
 0x40000000

	)

372 
	#TDB_SUSPEND
 0x00000001

	)

373 
	#TDB_XSIG
 0x00000002

	)

374 
	#TDB_USERWR
 0x00000004

	)

375 
	#TDB_SCE
 0x00000008

	)

376 
	#TDB_SCX
 0x00000010

	)

377 
	#TDB_EXEC
 0x00000020

	)

378 
	#TDB_FORK
 0x00000040

	)

380 
	#TDB_STOPATFORK
 0x00000080

	)

387 
	#TDP_OLDMASK
 0x00000001

	)

388 
	#TDP_INKTR
 0x00000002

	)

389 
	#TDP_INKTRACE
 0x00000004

	)

390 
	#TDP_BUFNEED
 0x00000008

	)

391 
	#TDP_COWINPROGRESS
 0x00000010

	)

392 
	#TDP_ALTSTACK
 0x00000020

	)

393 
	#TDP_DEADLKTREAT
 0x00000040

	)

394 
	#TDP_UNUSED80
 0x00000080

	)

395 
	#TDP_NOSLEEPING
 0x00000100

	)

396 
	#TDP_OWEUPC
 0x00000200

	)

397 
	#TDP_ITHREAD
 0x00000400

	)

398 
	#TDP_SYNCIO
 0x00000800

	)

399 
	#TDP_SCHED1
 0x00001000

	)

400 
	#TDP_SCHED2
 0x00002000

	)

401 
	#TDP_SCHED3
 0x00004000

	)

402 
	#TDP_SCHED4
 0x00008000

	)

403 
	#TDP_GEOM
 0x00010000

	)

404 
	#TDP_SOFTDEP
 0x00020000

	)

405 
	#TDP_NORUNNINGBUF
 0x00040000

	)

406 
	#TDP_WAKEUP
 0x00080000

	)

407 
	#TDP_INBDFLUSH
 0x00100000

	)

408 
	#TDP_KTHREAD
 0x00200000

	)

409 
	#TDP_CALLCHAIN
 0x00400000

	)

410 
	#TDP_IGNSUSP
 0x00800000

	)

411 
	#TDP_AUDITREC
 0x01000000

	)

417 
	#TDI_SUSPENDED
 0x0001

	)

418 
	#TDI_SLEEPING
 0x0002

	)

419 
	#TDI_SWAPPED
 0x0004

	)

420 
	#TDI_LOCK
 0x0008

	)

421 
	#TDI_IWAIT
 0x0010

	)

423 
	#TD_IS_SLEEPING
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SLEEPING
)

	)

424 
	#TD_ON_SLEEPQ
(
td
Ë(—d)->
td_wch™
 !
NULL
)

	)

425 
	#TD_IS_SUSPENDED
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SUSPENDED
)

	)

426 
	#TD_IS_SWAPPED
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SWAPPED
)

	)

427 
	#TD_ON_LOCK
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_LOCK
)

	)

428 
	#TD_AWAITING_INTR
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_IWAIT
)

	)

429 
	#TD_IS_RUNNING
(
td
Ë(—d)->
td_°©e
 =
TDS_RUNNING
)

	)

430 
	#TD_ON_RUNQ
(
td
Ë(—d)->
td_°©e
 =
TDS_RUNQ
)

	)

431 
	#TD_CAN_RUN
(
td
Ë(—d)->
td_°©e
 =
TDS_CAN_RUN
)

	)

432 
	#TD_IS_INHIBITED
(
td
Ë(—d)->
td_°©e
 =
TDS_INHIBITED
)

	)

433 
	#TD_ON_UPILOCK
(
td
Ë(—d)->
td_Êags
 & 
TDF_UPIBLOCKED
)

	)

434 
	#TD_IS_IDLETHREAD
(
td
Ë(—d)->
td_Êags
 & 
TDF_IDLETD
)

	)

437 
	#TD_SET_INHIB
(
td
, 
öhib
) do { \

438 (
td
)->
td_°©e
 = 
TDS_INHIBITED
; \

439 (
td
)->
td_öhibô‹s
 |(
öhib
); \

440 } 0)

	)

442 
	#TD_CLR_INHIB
(
td
, 
öhib
) do { \

443 i‡(((
td
)->
td_öhibô‹s
 & (
öhib
)) && \

444 (((
td
)->
td_öhibô‹s
 &~(
öhib
)) == 0)) \

445 (
td
)->
td_°©e
 = 
TDS_CAN_RUN
; \

446 } 0)

	)

448 
	#TD_SET_SLEEPING
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SLEEPING
)

	)

449 
	#TD_SET_SWAPPED
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SWAPPED
)

	)

450 
	#TD_SET_LOCK
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_LOCK
)

	)

451 
	#TD_SET_SUSPENDED
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SUSPENDED
)

	)

452 
	#TD_SET_IWAIT
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_IWAIT
)

	)

453 
	#TD_SET_EXITING
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_EXITING
)

	)

455 
	#TD_CLR_SLEEPING
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SLEEPING
)

	)

456 
	#TD_CLR_SWAPPED
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SWAPPED
)

	)

457 
	#TD_CLR_LOCK
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_LOCK
)

	)

458 
	#TD_CLR_SUSPENDED
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SUSPENDED
)

	)

459 
	#TD_CLR_IWAIT
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_IWAIT
)

	)

461 
	#TD_SET_RUNNING
(
td
Ë—d)->
td_°©e
 = 
TDS_RUNNING


	)

462 
	#TD_SET_RUNQ
(
td
Ë—d)->
td_°©e
 = 
TDS_RUNQ


	)

463 
	#TD_SET_CAN_RUN
(
td
Ë—d)->
td_°©e
 = 
TDS_CAN_RUN


	)

468 
	s¥oc
 {

469 
LIST_ENTRY
(
¥oc
Ë
	mp_li°
;

470 
TAILQ_HEAD
(, 
thªad
Ë
	mp_thªads
;

471 
mtx
 
	mp_¶ock
;

472 
u¸ed
 *
	mp_u¸ed
;

473 
fûedesc
 *
	mp_fd
;

474 
fûedesc_to_Àadî
 *
	mp_fdtﬁ
;

475 
p°©s
 *
	mp_°©s
;

476 
∂imô
 *
	mp_limô
;

477 
ˇŒout
 
	mp_limco
;

478 
siga˘s
 *
	mp_siga˘s
;

484 
	mp_Êag
;

486 
	mPRS_NEW
 = 0,

487 
	mPRS_NORMAL
,

488 
	mPRS_ZOMBIE


489 } 
	mp_°©e
;

490 
pid_t
 
	mp_pid
;

491 
LIST_ENTRY
(
¥oc
Ë
	mp_hash
;

492 
LIST_ENTRY
(
¥oc
Ë
	mp_pgli°
;

493 
¥oc
 *
	mp_µå
;

494 
LIST_ENTRY
(
¥oc
Ë
	mp_siblög
;

495 
LIST_HEAD
(, 
¥oc
Ë
	mp_chûdªn
;

496 
mtx
 
	mp_mtx
;

497 
ksigöfo
 *
	mp_ksi
;

498 
sigqueue_t
 
	mp_sigqueue
;

499 
	#p_sigli°
 
p_sigqueue
.
sq_sig«ls


	)

502 
	#p_°¨tzîo
 
p_›pid


	)

503 
pid_t
 
	mp_›pid
;

504 
vm•a˚
 *
	mp_vm•a˚
;

505 
u_öt
 
	mp_swtick
;

506 
ôimîvÆ
 
	mp_ªÆtimî
;

507 
rußge
 
	mp_ru
;

508 
rußge_ext
 
	mp_rux
;

509 
rußge_ext
 
	mp_¸ux
;

510 
	mp_¥o·hªads
;

511 vﬁ©ûê
	mp_exôthªads
;

512 
	mp_åa˚Êag
;

513 
vnode
 *
	mp_åa˚vp
;

514 
u¸ed
 *
	mp_åa˚¸ed
;

515 
vnode
 *
	mp_ãxtvp
;

516 
u_öt
 
	mp_lock
;

517 
sigiﬁ°
 
	mp_sigiﬁ°
;

518 
	mp_sig∑ª¡
;

519 
	mp_sig
;

520 
u_l⁄g
 
	mp_code
;

521 
u_öt
 
	mp_°›s
;

522 
u_öt
 
	mp_°y≥
;

523 
	mp_°ï
;

524 
u_ch¨
 
	mp_pfsÊags
;

525 
∆möfo
 *
	mp_∆möfo
;

526 
kaioöfo
 *
	mp_aioöfo
;

527 
thªad
 *
	mp_sögÀthªad
;

528 
	mp_su•cou¡
;

529 
thªad
 *
	mp_xthªad
;

530 
	mp_bound¨y_cou¡
;

531 
	mp_≥ndög˙t
;

532 
ôimîs
 *
	mp_ôimîs
;

534 
	#p_ídzîo
 
p_magic


	)

537 
	#p_°¨tc›y
 
p_ídzîo


	)

538 
u_öt
 
	mp_magic
;

539 
	mp_o§ñ
;

541 
	mp_comm
[
MAXCOMLEN
 + 1];

542 
pgΩ
 *
	mp_pgΩ
;

543 
sy£¡vec
 *
	mp_sy£¡
;

544 
∑rgs
 *
	mp_¨gs
;

545 
æim_t
 
	mp_˝ulimô
;

546 sig√d 
	mp_ni˚
;

547 
	mp_fibnum
;

549 
	#p_ídc›y
 
p_x°©


	)

551 
u_sh‹t
 
	mp_x°©
;

552 
k∆i°
 
	mp_kli°
;

553 
	mp_numthªads
;

554 
md¥oc
 
	mp_md
;

555 
ˇŒout
 
	mp_ôˇŒout
;

556 
u_sh‹t
 
	mp_acÊag
;

557 
¥oc
 *
	mp_≥îs
;

558 
¥oc
 *
	mp_Àadî
;

559 *
	mp_emuld©a
;

560 
œbñ
 *
	mp_œbñ
;

561 
p_sched
 *
	mp_sched
;

562 
STAILQ_HEAD
(, 
kå_ªque°
Ë
	mp_kå
;

563 
LIST_HEAD
(, 
mqueue_nŸifõr
Ë
	mp_mqnŸifõr
;

564 
kdåa˚_¥oc
 *
	mp_dåa˚
;

565 
cv
 
	mp_pwaô
;

566 
cv
 
	mp_dbgwaô
;

570 
	#p_£ssi⁄
 
p_pgΩ
->
pg_£ssi⁄


	)

571 
	#p_pgid
 
p_pgΩ
->
pg_id


	)

573 
	#NOCPU
 0xf‡

	)

575 
	#PROC_SLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_¶ock
)

	)

576 
	#PROC_SUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_¶ock
)

	)

577 
	#PROC_SLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_¶ock
, (ty≥))

	)

580 
	#P_ADVLOCK
 0x00001

	)

581 
	#P_CONTROLT
 0x00002

	)

582 
	#P_KTHREAD
 0x00004

	)

583 
	#P_FOLLOWFORK
 0x00008

	)

584 
	#P_PPWAIT
 0x00010

	)

585 
	#P_PROFIL
 0x00020

	)

586 
	#P_STOPPROF
 0x00040

	)

587 
	#P_HADTHREADS
 0x00080

	)

588 
	#P_SUGID
 0x00100

	)

589 
	#P_SYSTEM
 0x00200

	)

590 
	#P_SINGLE_EXIT
 0x00400

	)

591 
	#P_TRACED
 0x00800

	)

592 
	#P_WAITED
 0x01000

	)

593 
	#P_WEXIT
 0x02000

	)

594 
	#P_EXEC
 0x04000

	)

595 
	#P_WKILLED
 0x08000

	)

596 
	#P_CONTINUED
 0x10000

	)

597 
	#P_STOPPED_SIG
 0x20000

	)

598 
	#P_STOPPED_TRACE
 0x40000

	)

599 
	#P_STOPPED_SINGLE
 0x80000

	)

600 
	#P_PROTECTED
 0x100000

	)

601 
	#P_SIGEVENT
 0x200000

	)

602 
	#P_SINGLE_BOUNDARY
 0x400000

	)

603 
	#P_HWPMC
 0x800000

	)

605 
	#P_JAILED
 0x1000000

	)

606 
	#P_INEXEC
 0x4000000

	)

607 
	#P_STATCHILD
 0x8000000

	)

608 
	#P_INMEM
 0x10000000

	)

609 
	#P_SWAPPINGOUT
 0x20000000

	)

610 
	#P_SWAPPINGIN
 0x40000000

	)

612 
	#P_STOPPED
 (
P_STOPPED_SIG
|
P_STOPPED_SINGLE
|
P_STOPPED_TRACE
)

	)

613 
	#P_SHOULDSTOP
(
p
Ë(’)->
p_Êag
 & 
P_STOPPED
)

	)

614 
	#P_KILLED
(
p
Ë(’)->
p_Êag
 & 
P_WKILLED
)

	)

620 
	#SIDL
 1

	)

621 
	#SRUN
 2

	)

622 
	#SSLEEP
 3

	)

623 
	#SSTOP
 4

	)

624 
	#SZOMB
 5

	)

625 
	#SWAIT
 6

	)

626 
	#SLOCK
 7

	)

628 
	#P_MAGIC
 0xbìfÁ˚

	)

630 #ifde‡
_KERNEL


633 
	#SW_TYPE_MASK
 0xf‡

	)

634 
	#SWT_NONE
 0

	)

635 
	#SWT_PREEMPT
 1

	)

636 
	#SWT_OWEPREEMPT
 2

	)

637 
	#SWT_TURNSTILE
 3

	)

638 
	#SWT_SLEEPQ
 4

	)

639 
	#SWT_SLEEPQTIMO
 5

	)

640 
	#SWT_RELINQUISH
 6

	)

641 
	#SWT_NEEDRESCHED
 7

	)

642 
	#SWT_IDLE
 8

	)

643 
	#SWT_IWAIT
 9

	)

644 
	#SWT_SUSPEND
 10

	)

645 
	#SWT_REMOTEPREEMPT
 11

	)

646 
	#SWT_REMOTEWAKEIDLE
 12

	)

647 
	#SWT_COUNT
 13

	)

649 
	#SW_VOL
 0x0100

	)

650 
	#SW_INVOL
 0x0200

	)

651 
	#SW_PREEMPT
 0x0400

	)

654 
	#SINGLE_NO_EXIT
 0

	)

655 
	#SINGLE_EXIT
 1

	)

656 
	#SINGLE_BOUNDARY
 2

	)

658 #ifde‡
MALLOC_DECLARE


659 
MALLOC_DECLARE
(
M_PARGS
);

660 
MALLOC_DECLARE
(
M_PGRP
);

661 
MALLOC_DECLARE
(
M_SESSION
);

662 
MALLOC_DECLARE
(
M_SUBPROC
);

665 
	#FOREACH_PROC_IN_SYSTEM
(
p
) \

666 
	`LIST_FOREACH
((
p
), &
ÆÕroc
, 
p_li°
)

	)

667 
	#FOREACH_THREAD_IN_PROC
(
p
, 
td
) \

668 
	`TAILQ_FOREACH
((
td
), &(
p
)->
p_thªads
, 
td_∂i°
)

	)

670 
	#FIRST_THREAD_IN_PROC
(
p
Ë
	`TAILQ_FIRST
(&’)->
p_thªads
)

	)

676 
	#PID_MAX
 99999

	)

677 
	#NO_PID
 100000

	)

679 
	#SESS_LEADER
(
p
Ë(’)->
p_£ssi⁄
->
s_Àadî
 =’))

	)

682 
	#STOPEVENT
(
p
, 
e
, 
v
) do { \

683 i‡((
p
)->
p_°›s
 & (
e
)) { \

684 
	`PROC_LOCK
(
p
); \

685 
	`°›evít
((
p
), (
e
), (
v
)); \

686 
	`PROC_UNLOCK
(
p
); \

688 } 0)

	)

689 
	#_STOPEVENT
(
p
, 
e
, 
v
) do { \

690 
	`PROC_LOCK_ASSERT
(
p
, 
MA_OWNED
); \

691 
	`WITNESS_WARN
(
WARN_GIANTOK
 | 
WARN_SLEEPOK
, &
p
->
p_mtx
.
lock_obje˘
, \

692 "checkög st›evíà%d", (
e
)); \

693 i‡((
p
)->
p_°›s
 & (
e
)) \

694 
	`°›evít
((
p
), (
e
), (
v
)); \

695 } 0)

	)

698 
	#PROC_LOCK
(
p
Ë
	`mtx_lock
(&’)->
p_mtx
)

	)

699 
	#PROC_TRYLOCK
(
p
Ë
	`mtx_åylock
(&’)->
p_mtx
)

	)

700 
	#PROC_UNLOCK
(
p
Ë
	`mtx_u∆ock
(&’)->
p_mtx
)

	)

701 
	#PROC_LOCKED
(
p
Ë
	`mtx_ow√d
(&’)->
p_mtx
)

	)

702 
	#PROC_LOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_mtx
, (ty≥))

	)

705 
	#PGRP_LOCK
(
pg
Ë
	`mtx_lock
(&’g)->
pg_mtx
)

	)

706 
	#PGRP_UNLOCK
(
pg
Ë
	`mtx_u∆ock
(&’g)->
pg_mtx
)

	)

707 
	#PGRP_LOCKED
(
pg
Ë
	`mtx_ow√d
(&’g)->
pg_mtx
)

	)

708 
	#PGRP_LOCK_ASSERT
(
pg
, 
ty≥
Ë
	`mtx_as£π
(&’g)->
pg_mtx
, (ty≥))

	)

710 
	#PGRP_LOCK_PGSIGNAL
(
pg
) do { \

711 i‡((
pg
Ë!
NULL
) \

712 
	`PGRP_LOCK
(
pg
); \

713 } 0)

	)

714 
	#PGRP_UNLOCK_PGSIGNAL
(
pg
) do { \

715 i‡((
pg
Ë!
NULL
) \

716 
	`PGRP_UNLOCK
(
pg
); \

717 } 0)

	)

720 
	#SESS_LOCK
(
s
Ë
	`mtx_lock
(&(s)->
s_mtx
)

	)

721 
	#SESS_UNLOCK
(
s
Ë
	`mtx_u∆ock
(&(s)->
s_mtx
)

	)

722 
	#SESS_LOCKED
(
s
Ë
	`mtx_ow√d
(&(s)->
s_mtx
)

	)

723 
	#SESS_LOCK_ASSERT
(
s
, 
ty≥
Ë
	`mtx_as£π
(&(s)->
s_mtx
, (ty≥))

	)

726 
	#PHOLD
(
p
) do { \

727 
	`PROC_LOCK
(
p
); \

728 
	`_PHOLD
(
p
); \

729 
	`PROC_UNLOCK
(
p
); \

730 } 0)

	)

731 
	#_PHOLD
(
p
) do { \

732 
	`PROC_LOCK_ASSERT
((
p
), 
MA_OWNED
); \

733 
	`KASSERT
(!((
p
)->
p_Êag
 & 
P_WEXIT
Ë|| (pË=
cuΩroc
, \

735 (
p
)->
p_lock
++; \

736 i‡(((
p
)->
p_Êag
 & 
P_INMEM
) == 0) \

737 
	`Áu…ö
((
p
)); \

738 } 0)

	)

739 
	#PROC_ASSERT_HELD
(
p
) do { \

740 
	`KASSERT
((
p
)->
p_lock
 > 0, ("processÇot held")); \

741 } 0)

	)

743 
	#PRELE
(
p
) do { \

744 
	`PROC_LOCK
((
p
)); \

745 
	`_PRELE
((
p
)); \

746 
	`PROC_UNLOCK
((
p
)); \

747 } 0)

	)

748 
	#_PRELE
(
p
) do { \

749 
	`PROC_LOCK_ASSERT
((
p
), 
MA_OWNED
); \

750 
	`PROC_ASSERT_HELD
(
p
); \

751 (--(
p
)->
p_lock
); \

752 i‡(((
p
)->
p_Êag
 & 
P_WEXIT
Ë&& (p)->
p_lock
 == 0) \

753 
	`wakeup
(&(
p
)->
p_lock
); \

754 } 0)

	)

755 
	#PROC_ASSERT_NOT_HELD
(
p
) do { \

756 
	`KASSERT
((
p
)->
p_lock
 == 0, ("process held")); \

757 } 0)

	)

760 
	#thªad_ß„tosw≠out
(
td
Ë(—d)->
td_Êags
 & 
TDF_CANSWAP
)

	)

763 
	#THREAD_NO_SLEEPING
() do { \

764 
	`KASSERT
(!(
cuπhªad
->
td_pÊags
 & 
TDP_NOSLEEPING
), \

766 
cuπhªad
->
td_pÊags
 |
TDP_NOSLEEPING
; \

767 } 0)

	)

769 
	#THREAD_SLEEPING_OK
() do { \

770 
	`KASSERT
((
cuπhªad
->
td_pÊags
 & 
TDP_NOSLEEPING
), \

772 
cuπhªad
->
td_pÊags
 &~
TDP_NOSLEEPING
; \

773 } 0)

	)

775 
	#PIDHASH
(
pid
Ë(&
pidhashtbl
[’idË& 
pidhash
])

	)

776 
LIST_HEAD
(
pidhashhód
, 
¥oc
Ë*
pidhashtbl
;

777 
u_l⁄g
 
pidhash
;

779 
	#PGRPHASH
(
pgid
Ë(&
pgΩhashtbl
[’gidË& 
pgΩhash
])

	)

780 
LIST_HEAD
(
pgΩhashhód
, 
pgΩ
Ë*
pgΩhashtbl
;

781 
u_l⁄g
 
pgΩhash
;

783 
sx
 
ÆÕroc_lock
;

784 
sx
 
¥o˘ªe_lock
;

785 
mtx
 
µìrs_lock
;

786 
¥oc
 
¥oc0
;

787 
thªad
 
thªad0
;

788 
vm•a˚
 
vm•a˚0
;

789 
hogticks
;

790 
œ°pid
;

791 
≈rocs
, 
max¥oc
;

792 
max¥o˝îuid
;

793 
u_l⁄g
 
ps_¨g_ˇche_limô
;

795 
LIST_HEAD
(
¥o˛i°
, 
¥oc
);

796 
TAILQ_HEAD
(
¥ocqueue
, 
¥oc
);

797 
TAILQ_HEAD
(
thªadqueue
, 
thªad
);

798 
¥o˛i°
 
ÆÕroc
;

799 
¥o˛i°
 
zomb¥oc
;

800 
¥oc
 *
öô¥oc
, *
∑gïroc
;

802 
uma_z⁄e
 *
¥oc_z⁄e
;

804 
¥oc
 *
pföd
(
pid_t
);

805 
pgΩ
 *
pgföd
(
pid_t
);

806 
¥oc
 *
zpföd
(
pid_t
);

808 
a°
(
å≠‰ame
 *
‰amï
);

809 
thªad
 *
choo£thªad
();

810 
¸_ˇnsig«l
(
u¸ed
 *
¸ed
, 
¥oc
 *¥oc, 
signum
);

811 
íãΩgΩ
(
¥oc
 *
p
, 
pid_t
 
pgid
, 
pgΩ
 *pgrp,

812 
£ssi⁄
 *
£ss
);

813 
íãπhi•gΩ
(
¥oc
 *
p
, 
pgΩ
 *pgrp);

814 
Áu…ö
(
¥oc
 *
p
);

815 
fixjobc
(
¥oc
 *
p
, 
pgΩ
 *pgΩ, 
íãrög
);

816 
f‹k1
(
thªad
 *, , , 
¥oc
 **);

817 
f‹k_exô
((*)(*, 
å≠‰ame
 *), *,

818 
å≠‰ame
 *);

819 
	`f‹k_ªtu∫
(
thªad
 *, 
å≠‰ame
 *);

820 
	`ö„ri‹
(
¥oc
 *
p
);

821 
	`kîn_yõld
();

822 
	`kick_¥oc0
();

823 
	`ÀavïgΩ
(
¥oc
 *
p
);

824 
	`maybe_¥ìm±
(
thªad
 *
td
);

825 
	`maybe_yõld
();

826 
	`mi_swôch
(
Êags
, 
thªad
 *
√wtd
);

827 
	`p_ˇndebug
(
thªad
 *
td
, 
¥oc
 *
p
);

828 
	`p_ˇn£e
(
thªad
 *
td
, 
¥oc
 *
p
);

829 
	`p_ˇnsched
(
thªad
 *
td
, 
¥oc
 *
p
);

830 
	`p_ˇnsig«l
(
thªad
 *
td
, 
¥oc
 *
p
, 
signum
);

831 
	`p_ˇnwaô
(
thªad
 *
td
, 
¥oc
 *
p
);

832 
∑rgs
 *
	`∑rgs_Æloc
(
Àn
);

833 
	`∑rgs_dr›
(
∑rgs
 *
∑
);

834 
	`∑rgs_hﬁd
(
∑rgs
 *
∑
);

835 
	`¥ocöô
();

836 
	`¥oc_lökup0
(
¥oc
 *
p
, 
thªad
 *
td
);

837 
	`¥oc_lökup
(
¥oc
 *
p
, 
thªad
 *
td
);

838 
	`¥oc_ª∑ª¡
(
¥oc
 *
chûd
, ¥o¯*
√w∑ª¡
);

839 
p°©s
 *
	`p°©s_Æloc
();

840 
	`p°©s_f‹k
(
p°©s
 *
§c
, p°©†*
d°
);

841 
	`p°©s_‰ì
(
p°©s
 *
ps
);

842 
	`£cuªÀvñ_ge
(
u¸ed
 *
¸
, 
Àvñ
);

843 
	`£cuªÀvñ_gt
(
u¸ed
 *
¸
, 
Àvñ
);

844 
	`£ss_hﬁd
(
£ssi⁄
 *);

845 
	`£ss_ªÀa£
(
£ssi⁄
 *);

846 
	`£åu¬abÀ
(
thªad
 *);

847 
	`£tsugid
(
¥oc
 *
p
);

848 
	`should_yõld
();

849 
	`sig⁄°ack
(
size_t
 
•
);

850 
	`¶ìpöô
();

851 
	`°›evít
(
¥oc
 *, 
u_öt
, u_int);

852 
	`thªadöô
();

853 
	`˝u_idÀ
();

854 
	`˝u_idÀ_wakeup
();

855 (*
˝u_idÀ_hook
)();

856 
	`˝u_swôch
(
thªad
 *, thªad *, 
mtx
 *);

857 
	$˝u_throw
(
thªad
 *, thªad *Ë
__dód2
;

858 
	`un¶ìp
(
thªad
 *);

859 
	`u£ºë
(
thªad
 *, 
å≠‰ame
 *);

861 
	`˝u_exô
(
thªad
 *);

862 
	$exô1
(
thªad
 *, Ë
__dód2
;

863 
sysˇŒ_¨gs
;

864 
	`˝u_„tch_sysˇŒ_¨gs
(
thªad
 *
td
, 
sysˇŒ_¨gs
 *
ß
);

865 
	`˝u_f‹k
(
thªad
 *, 
¥oc
 *, thread *, );

866 
	`˝u_£t_f‹k_h™dÀr
(
thªad
 *, (*)(*), *);

867 
	`˝u_£t_sysˇŒ_ªtvÆ
(
thªad
 *, );

868 
	`˝u_£t_upˇŒ
(
thªad
 *
td
, thªad *
td0
);

869 
	`˝u_£t_upˇŒ_k£
(
thªad
 *, (*)(*), *,

870 
°ack_t
 *);

871 
	`˝u_£t_u£r_és
(
thªad
 *, *
és_ba£
);

872 
	`˝u_thªad_Æloc
(
thªad
 *);

873 
	`˝u_thªad_˛ón
(
thªad
 *);

874 
	`˝u_thªad_exô
(
thªad
 *);

875 
	`˝u_thªad_‰ì
(
thªad
 *);

876 
	`˝u_thªad_sw≠ö
(
thªad
 *);

877 
	`˝u_thªad_sw≠out
(
thªad
 *);

878 
thªad
 *
	`thªad_Æloc
(
∑ges
);

879 
	`thªad_Æloc_°ack
(
thªad
 *, 
∑ges
);

880 
	$thªad_exô
(Ë
__dód2
;

881 
	`thªad_‰ì
(
thªad
 *
td
);

882 
	`thªad_lök
(
thªad
 *
td
, 
¥oc
 *
p
);

883 
	`thªad_ª≠
();

884 
	`thªad_sögÀ
(
how
);

885 
	`thªad_sögÀ_íd
();

886 
	`thªad_°ash
(
thªad
 *
td
);

887 
	`thªad_°›≥d
(
¥oc
 *
p
);

888 
	`chûd¥oc_°›≥d
(
¥oc
 *
chûd
, 
ªas⁄
);

889 
	`chûd¥oc_c⁄töued
(
¥oc
 *
chûd
);

890 
	`chûd¥oc_exôed
(
¥oc
 *
chûd
);

891 
	`thªad_su•íd_check
(
how
);

892 
	`thªad_su•íd_swôch
(
thªad
 *);

893 
	`thªad_su•íd_⁄e
(
thªad
 *
td
);

894 
	`thªad_u∆ök
(
thªad
 *
td
);

895 
	`thªad_unsu•íd
(
¥oc
 *
p
);

896 
	`thªad_unsu•íd_⁄e
(
thªad
 *
td
);

897 
	`thªad_u¡hªad
(
thªad
 *
td
);

898 
	`thªad_waô
(
¥oc
 *
p
);

899 
thªad
 *
	`thªad_föd
(
¥oc
 *
p
, 
lwpid_t
 
tid
);

901 
__ölöe
 

902 
	$cuπhªad_pÊags_£t
(
Êags
)

904 
thªad
 *
td
;

905 
ßve
;

907 
td
 = 
cuπhªad
;

908 
ßve
 = ~
Êags
 | (
td
->
td_pÊags
 & flags);

909 
td
->
td_pÊags
 |
Êags
;

910  (
ßve
);

911 
	}
}

913 
__ölöe
 

914 
	$cuπhªad_pÊags_ª°‹e
(
ßve
)

917 
cuπhªad
->
td_pÊags
 &
ßve
;

918 
	}
}

	@/usr/include/sys/queue.h

33 #i‚de‡
_SYS_QUEUE_H_


34 
	#_SYS_QUEUE_H_


	)

36 
	~<sys/cdefs.h
>

105 #ifde‡
QUEUE_MACRO_DEBUG


107 
	sqm_åa˚
 {

108 * 
	mœ°fûe
;

109 
	mœ°löe
;

110 * 
	m¥evfûe
;

111 
	m¥evlöe
;

114 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

115 
	#TRASHIT
(
x
Ëdÿ{(xË(*)-1;} 0)

	)

116 
	#QMD_SAVELINK
(
«me
, 
lök
Ë**«mê(*)&÷ök)

	)

118 
	#QMD_TRACE_HEAD
(
hód
) do { \

119 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

120 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

121 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

122 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

123 } 0)

	)

125 
	#QMD_TRACE_ELEM
(
ñem
) do { \

126 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

127 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

128 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

129 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

130 } 0)

	)

133 
	#QMD_TRACE_ELEM
(
ñem
)

	)

134 
	#QMD_TRACE_HEAD
(
hód
)

	)

135 
	#QMD_SAVELINK
(
«me
, 
lök
)

	)

136 
	#TRACEBUF


	)

137 
	#TRASHIT
(
x
)

	)

143 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

144 
	s«me
 { \

145 
ty≥
 *
¶h_fú°
; \

146 }

	)

148 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

149 { 
NULL
 }

	)

151 
	#SLIST_ENTRY
(
ty≥
) \

153 
ty≥
 *
¶e_√xt
; \

154 }

	)

159 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

161 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

163 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

164 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

165 (
v¨
); \

166 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

168 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

169 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

170 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

171 (
v¨
Ë(
tv¨
))

	)

173 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

174 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

175 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

176 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

178 
	#SLIST_INIT
(
hód
) do { \

179 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

180 } 0)

	)

182 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

183 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

184 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

185 } 0)

	)

187 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

188 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

189 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

190 } 0)

	)

192 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

194 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

195 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
¶e_√xt
); \

196 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

197 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

200 
ty≥
 *
cuªlm
 = 
	`SLIST_FIRST
((
hód
)); \

201 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

202 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

203 
	`SLIST_REMOVE_AFTER
(
cuªlm
, 
fõld
); \

205 
	`TRASHIT
(*
ﬁd√xt
); \

206 } 0)

	)

208 
	#SLIST_REMOVE_AFTER
(
ñm
, 
fõld
) do { \

209 
	`SLIST_NEXT
(
ñm
, 
fõld
) = \

210 
	`SLIST_NEXT
(SLIST_NEXT(
ñm
, 
fõld
), field); \

211 } 0)

	)

213 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

214 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

215 } 0)

	)

217 
	#SLIST_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

218 
ty≥
 *
sw≠_fú°
 = 
	`SLIST_FIRST
(
hód1
); \

219 
	`SLIST_FIRST
(
hód1
ËSLIST_FIRST(
hód2
); \

220 
	`SLIST_FIRST
(
hód2
Ë
sw≠_fú°
; \

221 } 0)

	)

226 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

227 
	s«me
 { \

228 
ty≥
 *
°qh_fú°
; \

229 
ty≥
 **
°qh_œ°
; \

230 }

	)

232 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

233 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

235 
	#STAILQ_ENTRY
(
ty≥
) \

237 
ty≥
 *
°qe_√xt
; \

238 }

	)

243 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

244 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

245 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

246 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

247 
	`STAILQ_INIT
((
hód2
)); \

249 } 0)

	)

251 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

253 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

255 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

256 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

257 (
v¨
); \

258 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

261 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

262 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

263 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

264 (
v¨
Ë(
tv¨
))

	)

266 
	#STAILQ_INIT
(
hód
) do { \

267 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

268 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

269 } 0)

	)

271 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

272 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

273 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

274 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

275 } 0)

	)

277 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

278 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

279 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

280 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

281 } 0)

	)

283 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

284 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

285 *(
hód
)->
°qh_œ°
 = (
ñm
); \

286 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

287 } 0)

	)

289 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

290 (
	`STAILQ_EMPTY
((
hód
)) ? \

291 
NULL
 : \

292 ((
ty≥
 *)(*) \

293 ((*)((
hód
)->
°qh_œ°
Ë- 
	`__off£tof
(
ty≥
, 
fõld
))))

	)

295 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

297 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

298 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
°qe_√xt
); \

299 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

300 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

303 
ty≥
 *
cuªlm
 = 
	`STAILQ_FIRST
((
hód
)); \

304 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

305 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

306 
	`STAILQ_REMOVE_AFTER
(
hód
, 
cuªlm
, 
fõld
); \

308 
	`TRASHIT
(*
ﬁd√xt
); \

309 } 0)

	)

311 
	#STAILQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

312 i‡((
	`STAILQ_NEXT
(
ñm
, 
fõld
) = \

313 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), fõld)Ë=
NULL
) \

314 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

315 } 0)

	)

317 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

318 i‡((
	`STAILQ_FIRST
((
hód
)) = \

319 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) \

320 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

321 } 0)

	)

323 
	#STAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

324 
ty≥
 *
sw≠_fú°
 = 
	`STAILQ_FIRST
(
hód1
); \

325 
ty≥
 **
sw≠_œ°
 = (
hód1
)->
°qh_œ°
; \

326 
	`STAILQ_FIRST
(
hód1
ËSTAILQ_FIRST(
hód2
); \

327 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

328 
	`STAILQ_FIRST
(
hód2
Ë
sw≠_fú°
; \

329 (
hód2
)->
°qh_œ°
 = 
sw≠_œ°
; \

330 i‡(
	`STAILQ_EMPTY
(
hód1
)) \

331 (
hód1
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head1); \

332 i‡(
	`STAILQ_EMPTY
(
hód2
)) \

333 (
hód2
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head2); \

334 } 0)

	)

340 
	#LIST_HEAD
(
«me
, 
ty≥
) \

341 
	s«me
 { \

342 
ty≥
 *
lh_fú°
; \

343 }

	)

345 
	#LIST_HEAD_INITIALIZER
(
hód
) \

346 { 
NULL
 }

	)

348 
	#LIST_ENTRY
(
ty≥
) \

350 
ty≥
 *
À_√xt
; \

351 
ty≥
 **
À_¥ev
; \

352 }

	)

358 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

359 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

360 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

361 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != \

362 &
	`LIST_FIRST
((
hód
))) \

363 
	`∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (
hód
)); \

364 } 0)

	)

366 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

367 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

368 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 != \

369 &((
ñm
)->
fõld
.
À_√xt
)) \

370 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

371 } 0)

	)

373 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

374 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

375 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

376 } 0)

	)

378 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

379 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

380 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

383 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

385 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

387 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

388 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

389 (
v¨
); \

390 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

392 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

393 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

394 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

395 (
v¨
Ë(
tv¨
))

	)

397 
	#LIST_INIT
(
hód
) do { \

398 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

399 } 0)

	)

401 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

402 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

403 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

404 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

405 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

406 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

407 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

408 } 0)

	)

410 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

411 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

412 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

413 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

414 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

415 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

416 } 0)

	)

418 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

419 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

420 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

421 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

422 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

423 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

424 } 0)

	)

426 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

428 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

429 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
À_√xt
); \

430 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
À_¥ev
); \

431 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

432 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

433 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

434 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

435 (
ñm
)->
fõld
.
À_¥ev
; \

436 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

437 
	`TRASHIT
(*
ﬁd√xt
); \

438 
	`TRASHIT
(*
ﬁd¥ev
); \

439 } 0)

	)

441 
	#LIST_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

442 
ty≥
 *
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
)); \

443 
	`LIST_FIRST
((
hód1
)ËLIST_FIRST((
hód2
)); \

444 
	`LIST_FIRST
((
hód2
)Ë
sw≠_tmp
; \

445 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
))Ë!
NULL
) \

446 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód1
)); \

447 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód2
))Ë!
NULL
) \

448 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód2
)); \

449 } 0)

	)

454 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

455 
	s«me
 { \

456 
ty≥
 *
tqh_fú°
; \

457 
ty≥
 **
tqh_œ°
; \

458 
TRACEBUF
 \

459 }

	)

461 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

462 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

464 
	#TAILQ_ENTRY
(
ty≥
) \

466 
ty≥
 *
tqe_√xt
; \

467 
ty≥
 **
tqe_¥ev
; \

468 
TRACEBUF
 \

469 }

	)

474 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

475 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

476 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

477 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != \

478 &
	`TAILQ_FIRST
((
hód
))) \

479 
	`∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (
hód
)); \

480 } 0)

	)

482 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

483 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

484 
	`∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL", (
hód
)); \

485 } 0)

	)

487 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

488 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

489 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 != \

490 &((
ñm
)->
fõld
.
tqe_√xt
)) \

491 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

492 } 0)

	)

494 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

495 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

496 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

497 } 0)

	)

499 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

500 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

501 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

502 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

505 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

506 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

507 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

508 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

509 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

510 
	`TAILQ_INIT
((
hód2
)); \

511 
	`QMD_TRACE_HEAD
(
hód1
); \

512 
	`QMD_TRACE_HEAD
(
hód2
); \

514 } 0)

	)

516 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

518 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

520 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

521 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

522 (
v¨
); \

523 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

525 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

526 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

527 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

528 (
v¨
Ë(
tv¨
))

	)

530 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

531 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

532 (
v¨
); \

533 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

535 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

536 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

537 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

538 (
v¨
Ë(
tv¨
))

	)

540 
	#TAILQ_INIT
(
hód
) do { \

541 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

542 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

543 
	`QMD_TRACE_HEAD
(
hód
); \

544 } 0)

	)

546 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

547 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

548 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

549 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

550 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

552 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

553 
	`QMD_TRACE_HEAD
(
hód
); \

555 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

556 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

557 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

558 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

559 } 0)

	)

561 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

562 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

563 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

564 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

565 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

566 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

567 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

568 
	`QMD_TRACE_ELEM
(&
li°ñm
->
fõld
); \

569 } 0)

	)

571 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

572 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

573 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

574 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

575 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

577 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

578 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

579 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

580 
	`QMD_TRACE_HEAD
(
hód
); \

581 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

582 } 0)

	)

584 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

585 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

586 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

587 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

588 *(
hód
)->
tqh_œ°
 = (
ñm
); \

589 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

590 
	`QMD_TRACE_HEAD
(
hód
); \

591 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

592 } 0)

	)

594 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

595 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

597 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

599 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

600 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

602 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

603 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
tqe_√xt
); \

604 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
tqe_¥ev
); \

605 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

606 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

607 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) \

608 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

609 (
ñm
)->
fõld
.
tqe_¥ev
; \

611 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

612 
	`QMD_TRACE_HEAD
(
hód
); \

614 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

615 
	`TRASHIT
(*
ﬁd√xt
); \

616 
	`TRASHIT
(*
ﬁd¥ev
); \

617 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

618 } 0)

	)

620 
	#TAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

621 
ty≥
 *
sw≠_fú°
 = (
hód1
)->
tqh_fú°
; \

622 
ty≥
 **
sw≠_œ°
 = (
hód1
)->
tqh_œ°
; \

623 (
hód1
)->
tqh_fú°
 = (
hód2
)->tqh_first; \

624 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

625 (
hód2
)->
tqh_fú°
 = 
sw≠_fú°
; \

626 (
hód2
)->
tqh_œ°
 = 
sw≠_œ°
; \

627 i‡((
sw≠_fú°
 = (
hód1
)->
tqh_fú°
Ë!
NULL
) \

628 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód1
)->
tqh_fú°
; \

630 (
hód1
)->
tqh_œ°
 = &(hód1)->
tqh_fú°
; \

631 i‡((
sw≠_fú°
 = (
hód2
)->
tqh_fú°
Ë!
NULL
) \

632 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód2
)->
tqh_fú°
; \

634 (
hód2
)->
tqh_œ°
 = &(hód2)->
tqh_fú°
; \

635 } 0)

	)

	@/usr/include/sys/resource.h

33 #i‚de‡
_SYS_RESOURCE_H_


34 
	#_SYS_RESOURCE_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_timevÆ.h
>

38 
	~<sys/_ty≥s.h
>

43 
	#PRIO_MIN
 -20

	)

44 
	#PRIO_MAX
 20

	)

46 
	#PRIO_PROCESS
 0

	)

47 
	#PRIO_PGRP
 1

	)

48 
	#PRIO_USER
 2

	)

57 
	#RUSAGE_SELF
 0

	)

58 
	#RUSAGE_CHILDREN
 -1

	)

59 
	#RUSAGE_THREAD
 1

	)

61 
	srußge
 {

62 
timevÆ
 
	mru_utime
;

63 
timevÆ
 
	mru_°ime
;

64 
	mru_maxrss
;

65 
	#ru_fú°
 
ru_ixrss


	)

66 
	mru_ixrss
;

67 
	mru_idrss
;

68 
	mru_i§ss
;

69 
	mru_möÊt
;

70 
	mru_majÊt
;

71 
	mru_nsw≠
;

72 
	mru_öblock
;

73 
	mru_oublock
;

74 
	mru_msg¢d
;

75 
	mru_msgrcv
;

76 
	mru_nsig«ls
;

77 
	mru_nvcsw
;

78 
	mru_nivcsw
;

79 
	#ru_œ°
 
ru_nivcsw


	)

85 
	#RLIMIT_CPU
 0

	)

86 
	#RLIMIT_FSIZE
 1

	)

87 
	#RLIMIT_DATA
 2

	)

88 
	#RLIMIT_STACK
 3

	)

89 
	#RLIMIT_CORE
 4

	)

90 
	#RLIMIT_RSS
 5

	)

91 
	#RLIMIT_MEMLOCK
 6

	)

92 
	#RLIMIT_NPROC
 7

	)

93 
	#RLIMIT_NOFILE
 8

	)

94 
	#RLIMIT_SBSIZE
 9

	)

95 
	#RLIMIT_VMEM
 10

	)

96 
	#RLIMIT_AS
 
RLIMIT_VMEM


	)

97 
	#RLIMIT_NPTS
 11

	)

98 
	#RLIMIT_SWAP
 12

	)

100 
	#RLIM_NLIMITS
 13

	)

102 
	#RLIM_INFINITY
 ((
æim_t
)(((
uöt64_t
)1 << 63Ë- 1))

	)

110 #ifde‡
_RLIMIT_IDENT


111 c⁄° *
	gæimô_idít
[
RLIM_NLIMITS
] = {

128 #i‚de‡
_RLIM_T_DECLARED


129 
__æim_t
 
	tæim_t
;

130 
	#_RLIM_T_DECLARED


	)

133 
	sæimô
 {

134 
æim_t
 
	mæim_cur
;

135 
æim_t
 
	mæim_max
;

138 #i‡
__BSD_VISIBLE


140 
	s‹limô
 {

141 
__öt32_t
 
	mæim_cur
;

142 
__öt32_t
 
	mæim_max
;

145 
	slﬂdavg
 {

146 
__fix±_t
 
	mldavg
[3];

147 
	mfsˇÀ
;

150 
	#CP_USER
 0

	)

151 
	#CP_NICE
 1

	)

152 
	#CP_SYS
 2

	)

153 
	#CP_INTR
 3

	)

154 
	#CP_IDLE
 4

	)

155 
	#CPUSTATES
 5

	)

159 #ifde‡
_KERNEL


161 
lﬂdavg
 
avîu¬abÀ
;

162 
ªad_˝u_time
(*
˝_time
);

166 
__BEGIN_DECLS


168 
gë¥i‹ôy
(, );

169 
gëæimô
(, 
æimô
 *);

170 
gërußge
(, 
rußge
 *);

171 
£çri‹ôy
(, , );

172 
£ålimô
(, c⁄° 
æimô
 *);

173 
	g__END_DECLS


	@/usr/include/sys/socket.h

33 #i‚de‡
_SYS_SOCKET_H_


34 
	#_SYS_SOCKET_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

39 
	#_NO_NAMESPACE_POLLUTION


	)

40 
	~<machöe/∑øm.h
>

41 #unde‡
_NO_NAMESPACE_POLLUTION


50 #i‡
__BSD_VISIBLE


51 #i‚de‡
_GID_T_DECLARED


52 
__gid_t
 
	tgid_t
;

53 
	#_GID_T_DECLARED


	)

56 #i‚de‡
_OFF_T_DECLARED


57 
__off_t
 
	toff_t
;

58 
	#_OFF_T_DECLARED


	)

61 #i‚de‡
_PID_T_DECLARED


62 
__pid_t
 
	tpid_t
;

63 
	#_PID_T_DECLARED


	)

67 #i‚de‡
_SA_FAMILY_T_DECLARED


68 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

69 
	#_SA_FAMILY_T_DECLARED


	)

72 #i‚de‡
_SOCKLEN_T_DECLARED


73 
__sockÀn_t
 
	tsockÀn_t
;

74 
	#_SOCKLEN_T_DECLARED


	)

77 #i‚de‡
_SSIZE_T_DECLARED


78 
__ssize_t
 
	tssize_t
;

79 
	#_SSIZE_T_DECLARED


	)

82 #i‡
__BSD_VISIBLE


83 #i‚de‡
_UID_T_DECLARED


84 
__uid_t
 
	tuid_t
;

85 
	#_UID_T_DECLARED


	)

92 
	#SOCK_STREAM
 1

	)

93 
	#SOCK_DGRAM
 2

	)

94 
	#SOCK_RAW
 3

	)

95 #i‡
__BSD_VISIBLE


96 
	#SOCK_RDM
 4

	)

98 
	#SOCK_SEQPACKET
 5

	)

103 
	#SO_DEBUG
 0x0001

	)

104 
	#SO_ACCEPTCONN
 0x0002

	)

105 
	#SO_REUSEADDR
 0x0004

	)

106 
	#SO_KEEPALIVE
 0x0008

	)

107 
	#SO_DONTROUTE
 0x0010

	)

108 
	#SO_BROADCAST
 0x0020

	)

109 #i‡
__BSD_VISIBLE


110 
	#SO_USELOOPBACK
 0x0040

	)

112 
	#SO_LINGER
 0x0080

	)

113 
	#SO_OOBINLINE
 0x0100

	)

114 #i‡
__BSD_VISIBLE


115 
	#SO_REUSEPORT
 0x0200

	)

116 
	#SO_TIMESTAMP
 0x0400

	)

117 
	#SO_NOSIGPIPE
 0x0800

	)

118 
	#SO_ACCEPTFILTER
 0x1000

	)

119 
	#SO_BINTIME
 0x2000

	)

121 
	#SO_NO_OFFLOAD
 0x4000

	)

122 
	#SO_NO_DDP
 0x8000

	)

127 
	#SO_SNDBUF
 0x1001

	)

128 
	#SO_RCVBUF
 0x1002

	)

129 
	#SO_SNDLOWAT
 0x1003

	)

130 
	#SO_RCVLOWAT
 0x1004

	)

131 
	#SO_SNDTIMEO
 0x1005

	)

132 
	#SO_RCVTIMEO
 0x1006

	)

133 
	#SO_ERROR
 0x1007

	)

134 
	#SO_TYPE
 0x1008

	)

135 #i‡
__BSD_VISIBLE


136 
	#SO_LABEL
 0x1009

	)

137 
	#SO_PEERLABEL
 0x1010

	)

138 
	#SO_LISTENQLIMIT
 0x1011

	)

139 
	#SO_LISTENQLEN
 0x1012

	)

140 
	#SO_LISTENINCQLEN
 0x1013

	)

141 
	#SO_SETFIB
 0x1014

	)

147 
	slögî
 {

148 
	ml_⁄off
;

149 
	ml_lögî
;

152 #i‡
__BSD_VISIBLE


153 
	sac˚±_fûãr_¨g
 {

154 
	maf_«me
[16];

155 
	maf_¨g
[256-16];

162 
	#SOL_SOCKET
 0xfff‡

	)

167 
	#AF_UNSPEC
 0

	)

168 #i‡
__BSD_VISIBLE


169 
	#AF_LOCAL
 
AF_UNIX


	)

171 
	#AF_UNIX
 1

	)

172 
	#AF_INET
 2

	)

173 #i‡
__BSD_VISIBLE


174 
	#AF_IMPLINK
 3

	)

175 
	#AF_PUP
 4

	)

176 
	#AF_CHAOS
 5

	)

177 
	#AF_NETBIOS
 6

	)

178 
	#AF_ISO
 7

	)

179 
	#AF_OSI
 
AF_ISO


	)

180 
	#AF_ECMA
 8

	)

181 
	#AF_DATAKIT
 9

	)

182 
	#AF_CCITT
 10

	)

183 
	#AF_SNA
 11

	)

184 
	#AF_DEC√t
 12

	)

185 
	#AF_DLI
 13

	)

186 
	#AF_LAT
 14

	)

187 
	#AF_HYLINK
 15

	)

188 
	#AF_APPLETALK
 16

	)

189 
	#AF_ROUTE
 17

	)

190 
	#AF_LINK
 18

	)

191 
	#p£udo_AF_XTP
 19

	)

192 
	#AF_COIP
 20

	)

193 
	#AF_CNT
 21

	)

194 
	#p£udo_AF_RTIP
 22

	)

195 
	#AF_IPX
 23

	)

196 
	#AF_SIP
 24

	)

197 
	#p£udo_AF_PIP
 25

	)

198 
	#AF_ISDN
 26

	)

199 
	#AF_E164
 
AF_ISDN


	)

200 
	#p£udo_AF_KEY
 27

	)

202 
	#AF_INET6
 28

	)

203 #i‡
__BSD_VISIBLE


204 
	#AF_NATM
 29

	)

205 
	#AF_ATM
 30

	)

206 
	#p£udo_AF_HDRCMPLT
 31

	)

209 
	#AF_NETGRAPH
 32

	)

210 
	#AF_SLOW
 33

	)

211 
	#AF_SCLUSTER
 34

	)

212 
	#AF_ARP
 35

	)

213 
	#AF_BLUETOOTH
 36

	)

214 
	#AF_IEEE80211
 37

	)

215 
	#AF_MAX
 38

	)

221 
	#AF_VENDOR00
 39

	)

222 
	#AF_VENDOR01
 41

	)

223 
	#AF_VENDOR02
 43

	)

224 
	#AF_VENDOR03
 45

	)

225 
	#AF_VENDOR04
 47

	)

226 
	#AF_VENDOR05
 49

	)

227 
	#AF_VENDOR06
 51

	)

228 
	#AF_VENDOR07
 53

	)

229 
	#AF_VENDOR08
 55

	)

230 
	#AF_VENDOR09
 57

	)

231 
	#AF_VENDOR10
 59

	)

232 
	#AF_VENDOR11
 61

	)

233 
	#AF_VENDOR12
 63

	)

234 
	#AF_VENDOR13
 65

	)

235 
	#AF_VENDOR14
 67

	)

236 
	#AF_VENDOR15
 69

	)

237 
	#AF_VENDOR16
 71

	)

238 
	#AF_VENDOR17
 73

	)

239 
	#AF_VENDOR18
 75

	)

240 
	#AF_VENDOR19
 77

	)

241 
	#AF_VENDOR20
 79

	)

242 
	#AF_VENDOR21
 81

	)

243 
	#AF_VENDOR22
 83

	)

244 
	#AF_VENDOR23
 85

	)

245 
	#AF_VENDOR24
 87

	)

246 
	#AF_VENDOR25
 89

	)

247 
	#AF_VENDOR26
 91

	)

248 
	#AF_VENDOR27
 93

	)

249 
	#AF_VENDOR28
 95

	)

250 
	#AF_VENDOR29
 97

	)

251 
	#AF_VENDOR30
 99

	)

252 
	#AF_VENDOR31
 101

	)

253 
	#AF_VENDOR32
 103

	)

254 
	#AF_VENDOR33
 105

	)

255 
	#AF_VENDOR34
 107

	)

256 
	#AF_VENDOR35
 109

	)

257 
	#AF_VENDOR36
 111

	)

258 
	#AF_VENDOR37
 113

	)

259 
	#AF_VENDOR38
 115

	)

260 
	#AF_VENDOR39
 117

	)

261 
	#AF_VENDOR40
 119

	)

262 
	#AF_VENDOR41
 121

	)

263 
	#AF_VENDOR42
 123

	)

264 
	#AF_VENDOR43
 125

	)

265 
	#AF_VENDOR44
 127

	)

266 
	#AF_VENDOR45
 129

	)

267 
	#AF_VENDOR46
 131

	)

268 
	#AF_VENDOR47
 133

	)

275 
	ssockaddr
 {

276 
	mß_Àn
;

277 
ß_Ámûy_t
 
	mß_Ámûy
;

278 
	mß_d©a
[14];

280 #i‡
__BSD_VISIBLE


281 
	#SOCK_MAXADDRLEN
 255

	)

287 
	ssock¥Ÿo
 {

288 
	m•_Ámûy
;

289 
	m•_¥Ÿocﬁ
;

293 #i‚def 
_STRUCT_SOCKADDR_STORAGE_DECLARED


297 
	#_SS_MAXSIZE
 128U

	)

298 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

299 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - () - \

300 (
ß_Ámûy_t
))

	)

301 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () - \

302 (
ß_Ámûy_t
Ë- 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

304 
	ssockaddr_°‹age
 {

305 
	mss_Àn
;

306 
ß_Ámûy_t
 
	mss_Ámûy
;

307 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

308 
__öt64_t
 
	m__ss_Æign
;

309 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

311 
	#_STRUCT_SOCKADDR_STORAGE_DECLARED


	)

314 #i‡
__BSD_VISIBLE


318 
	#PF_UNSPEC
 
AF_UNSPEC


	)

319 
	#PF_LOCAL
 
AF_LOCAL


	)

320 
	#PF_UNIX
 
PF_LOCAL


	)

321 
	#PF_INET
 
AF_INET


	)

322 
	#PF_IMPLINK
 
AF_IMPLINK


	)

323 
	#PF_PUP
 
AF_PUP


	)

324 
	#PF_CHAOS
 
AF_CHAOS


	)

325 
	#PF_NETBIOS
 
AF_NETBIOS


	)

326 
	#PF_ISO
 
AF_ISO


	)

327 
	#PF_OSI
 
AF_ISO


	)

328 
	#PF_ECMA
 
AF_ECMA


	)

329 
	#PF_DATAKIT
 
AF_DATAKIT


	)

330 
	#PF_CCITT
 
AF_CCITT


	)

331 
	#PF_SNA
 
AF_SNA


	)

332 
	#PF_DEC√t
 
AF_DEC√t


	)

333 
	#PF_DLI
 
AF_DLI


	)

334 
	#PF_LAT
 
AF_LAT


	)

335 
	#PF_HYLINK
 
AF_HYLINK


	)

336 
	#PF_APPLETALK
 
AF_APPLETALK


	)

337 
	#PF_ROUTE
 
AF_ROUTE


	)

338 
	#PF_LINK
 
AF_LINK


	)

339 
	#PF_XTP
 
p£udo_AF_XTP


	)

340 
	#PF_COIP
 
AF_COIP


	)

341 
	#PF_CNT
 
AF_CNT


	)

342 
	#PF_SIP
 
AF_SIP


	)

343 
	#PF_IPX
 
AF_IPX


	)

344 
	#PF_RTIP
 
p£udo_AF_RTIP


	)

345 
	#PF_PIP
 
p£udo_AF_PIP


	)

346 
	#PF_ISDN
 
AF_ISDN


	)

347 
	#PF_KEY
 
p£udo_AF_KEY


	)

348 
	#PF_INET6
 
AF_INET6


	)

349 
	#PF_NATM
 
AF_NATM


	)

350 
	#PF_ATM
 
AF_ATM


	)

351 
	#PF_NETGRAPH
 
AF_NETGRAPH


	)

352 
	#PF_SLOW
 
AF_SLOW


	)

353 
	#PF_SCLUSTER
 
AF_SCLUSTER


	)

354 
	#PF_ARP
 
AF_ARP


	)

355 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

357 
	#PF_MAX
 
AF_MAX


	)

367 
	#NET_MAXID
 
AF_MAX


	)

369 
	#CTL_NET_NAMES
 { \

371 { "unix", 
CTLTYPE_NODE
 }, \

372 { "öë", 
CTLTYPE_NODE
 }, \

373 { "im∂ök", 
CTLTYPE_NODE
 }, \

374 { "pup", 
CTLTYPE_NODE
 }, \

375 { "chaos", 
CTLTYPE_NODE
 }, \

376 { "xîox_ns", 
CTLTYPE_NODE
 }, \

377 { "iso", 
CTLTYPE_NODE
 }, \

378 { "emˇ", 
CTLTYPE_NODE
 }, \

379 { "d©akô", 
CTLTYPE_NODE
 }, \

380 { "ccôt", 
CTLTYPE_NODE
 }, \

381 { "ibm_¢a", 
CTLTYPE_NODE
 }, \

382 { "de˙ë", 
CTLTYPE_NODE
 }, \

383 { "dec_dli", 
CTLTYPE_NODE
 }, \

384 { "œt", 
CTLTYPE_NODE
 }, \

385 { "hylök", 
CTLTYPE_NODE
 }, \

386 { "≠∂ëÆk", 
CTLTYPE_NODE
 }, \

387 { "rouã", 
CTLTYPE_NODE
 }, \

388 { "lök_œyî", 
CTLTYPE_NODE
 }, \

389 { "xç", 
CTLTYPE_NODE
 }, \

390 { "coù", 
CTLTYPE_NODE
 }, \

391 { "˙t", 
CTLTYPE_NODE
 }, \

392 { "πù", 
CTLTYPE_NODE
 }, \

393 { "ùx", 
CTLTYPE_NODE
 }, \

394 { "sù", 
CTLTYPE_NODE
 }, \

395 { "pù", 
CTLTYPE_NODE
 }, \

396 { "isdn", 
CTLTYPE_NODE
 }, \

397 { "key", 
CTLTYPE_NODE
 }, \

398 { "öë6", 
CTLTYPE_NODE
 }, \

399 { "«tm", 
CTLTYPE_NODE
 }, \

400 { "©m", 
CTLTYPE_NODE
 }, \

401 { "hdrcom∂ëe", 
CTLTYPE_NODE
 }, \

402 { "√tgøph", 
CTLTYPE_NODE
 }, \

403 { "¢p", 
CTLTYPE_NODE
 }, \

404 { "s˝", 
CTLTYPE_NODE
 }, \

405 }

	)

415 
	#NET_RT_DUMP
 1

	)

416 
	#NET_RT_FLAGS
 2

	)

417 
	#NET_RT_IFLIST
 3

	)

418 
	#NET_RT_IFMALIST
 4

	)

419 
	#NET_RT_IFLISTL
 5

	)

421 
	#NET_RT_MAXID
 6

	)

423 
	#CTL_NET_RT_NAMES
 { \

425 { "dump", 
CTLTYPE_STRUCT
 }, \

426 { "Êags", 
CTLTYPE_STRUCT
 }, \

427 { "iÊi°", 
CTLTYPE_STRUCT
 }, \

428 { "ifmÆi°", 
CTLTYPE_STRUCT
 }, \

429 { "iÊi°l", 
CTLTYPE_STRUCT
 }, \

430 }

	)

436 
	#SOMAXCONN
 128

	)

442 
	smsghdr
 {

443 *
	mmsg_«me
;

444 
sockÀn_t
 
	mmsg_«mñí
;

445 
iovec
 *
	mmsg_iov
;

446 
	mmsg_iovÀn
;

447 *
	mmsg_c⁄åﬁ
;

448 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

449 
	mmsg_Êags
;

452 
	#MSG_OOB
 0x1

	)

453 
	#MSG_PEEK
 0x2

	)

454 
	#MSG_DONTROUTE
 0x4

	)

455 
	#MSG_EOR
 0x8

	)

456 
	#MSG_TRUNC
 0x10

	)

457 
	#MSG_CTRUNC
 0x20

	)

458 
	#MSG_WAITALL
 0x40

	)

459 
	#MSG_NOTIFICATION
 0x2000

	)

460 #i‡
__BSD_VISIBLE


461 
	#MSG_DONTWAIT
 0x80

	)

462 
	#MSG_EOF
 0x100

	)

463 
	#MSG_NBIO
 0x4000

	)

464 
	#MSG_COMPAT
 0x8000

	)

466 #ifde‡
_KERNEL


467 
	#MSG_SOCALLBCK
 0x10000

	)

469 #i‡
__BSD_VISIBLE


470 
	#MSG_NOSIGNAL
 0x20000

	)

479 
	scmsghdr
 {

480 
sockÀn_t
 
	mcmsg_Àn
;

481 
	mcmsg_Àvñ
;

482 
	mcmsg_ty≥
;

486 #i‡
__BSD_VISIBLE


492 
	#CMGROUP_MAX
 16

	)

501 
	scmsg¸ed
 {

502 
pid_t
 
	mcm¸ed_pid
;

503 
uid_t
 
	mcm¸ed_uid
;

504 
uid_t
 
	mcm¸ed_euid
;

505 
gid_t
 
	mcm¸ed_gid
;

506 
	mcm¸ed_ngroups
;

507 
gid_t
 
	mcm¸ed_groups
[
CMGROUP_MAX
];

513 
	ssock¸ed
 {

514 
uid_t
 
	msc_uid
;

515 
uid_t
 
	msc_euid
;

516 
gid_t
 
	msc_gid
;

517 
gid_t
 
	msc_egid
;

518 
	msc_ngroups
;

519 
gid_t
 
	msc_groups
[1];

525 
	#SOCKCREDSIZE
(
ngΩs
) \

526 ((
sock¸ed
Ë+ ((
gid_t
Ë* ((
ngΩs
Ë- 1)))

	)

531 
	#CMSG_DATA
(
cmsg
) ((*)(cmsg) + \

532 
	`_ALIGN
((
cmsghdr
)))

	)

535 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
) \

536 ((*)(
cmsg
Ë=
NULL
 ? 
	`CMSG_FIRSTHDR
(
mhdr
) : \

537 ((*)(
cmsg
Ë+ 
	`_ALIGN
(((
cmsghdr
 *)(cmsg))->
cmsg_Àn
) + \

538 
	`_ALIGN
((
cmsghdr
)) > \

539 (*)(
mhdr
)->
msg_c⁄åﬁ
 + (mhdr)->
msg_c⁄åﬁÀn
) ? \

540 (
cmsghdr
 *)0 : \

541 (
cmsghdr
 *)((*)(
cmsg
) + \

542 
	`_ALIGN
(((
cmsghdr
 *)(
cmsg
))->
cmsg_Àn
)))

	)

548 
	#CMSG_FIRSTHDR
(
mhdr
) \

549 ((
mhdr
)->
msg_c⁄åﬁÀn
 >(
cmsghdr
) ? \

550 (
cmsghdr
 *)(
mhdr
)->
msg_c⁄åﬁ
 : \

551 (
cmsghdr
 *)
NULL
)

	)

553 #i‡
__BSD_VISIBLE


555 
	#CMSG_SPACE
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ _ALIGN÷))

	)

556 
	#CMSG_LEN
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ (l))

	)

559 #ifde‡
_KERNEL


560 
	#CMSG_ALIGN
(
n
Ë
	`_ALIGN
“)

	)

564 
	#SCM_RIGHTS
 0x01

	)

565 #i‡
__BSD_VISIBLE


566 
	#SCM_TIMESTAMP
 0x02

	)

567 
	#SCM_CREDS
 0x03

	)

568 
	#SCM_BINTIME
 0x04

	)

571 #i‡
__BSD_VISIBLE


575 
	sosockaddr
 {

576 
	mß_Ámûy
;

577 
	mß_d©a
[14];

583 
	somsghdr
 {

584 *
	mmsg_«me
;

585 
	mmsg_«mñí
;

586 
iovec
 *
	mmsg_iov
;

587 
	mmsg_iovÀn
;

588 *
	mmsg_ac¸ights
;

589 
	mmsg_ac¸ight¶í
;

596 
	#SHUT_RD
 0

	)

597 
	#SHUT_WR
 1

	)

598 
	#SHUT_RDWR
 2

	)

601 
	#PRU_FLUSH_RD
 
SHUT_RD


	)

602 
	#PRU_FLUSH_WR
 
SHUT_WR


	)

603 
	#PRU_FLUSH_RDWR
 
SHUT_RDWR


	)

606 #i‡
__BSD_VISIBLE


610 
	ssf_hdå
 {

611 
iovec
 *
	mhódîs
;

612 
	mhdr_˙t
;

613 
iovec
 *
	måaûîs
;

614 
	mål_˙t
;

620 
	#SF_NODISKIO
 0x00000001

	)

621 
	#SF_MNOWAIT
 0x00000002

	)

622 
	#SF_SYNC
 0x00000004

	)

625 #i‚def 
_KERNEL


627 
	~<sys/cdefs.h
>

629 
__BEGIN_DECLS


630 
ac˚±
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

631 
böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

632 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

633 
gë≥î«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

634 
gësock«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

635 
gësock›t
(, , , * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

636 
li°í
(, );

637 
ssize_t
 
ªcv
(, *, 
size_t
, );

638 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

639 
ssize_t
 
ªcvmsg
(, 
msghdr
 *, );

640 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

641 
ssize_t
 
£ndto
(, const *,

642 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

643 
ssize_t
 
£ndmsg
(, c⁄° 
msghdr
 *, );

644 #i‡
__BSD_VISIBLE


645 
£ndfûe
(, , 
off_t
, 
size_t
, 
sf_hdå
 *, off_t *, );

646 
£tfib
();

648 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

649 
shutdown
(, );

650 
sock©m¨k
();

651 
sockë
(, , );

652 
sockë∑ú
(, , , *);

653 
	g__END_DECLS


657 #ifde‡
_KERNEL


658 
	gsockë
;

660 
t˝cb
 *
so_sŸŸ˝cb
(
sockë
 *
so
);

661 
öpcb
 *
so_sŸoöpcb
(
sockë
 *
so
);

662 
sockbuf
 *
so_sockbuf_¢d
(
sockë
 *);

663 
sockbuf
 *
so_sockbuf_rcv
(
sockë
 *);

665 
so_°©e_gë
(c⁄° 
sockë
 *);

666 
so_°©e_£t
(
sockë
 *, );

668 
so_›ti⁄s_gë
(c⁄° 
sockë
 *);

669 
so_›ti⁄s_£t
(
sockë
 *, );

671 
so_îr‹_gë
(c⁄° 
sockë
 *);

672 
so_îr‹_£t
(
sockë
 *, );

674 
so_lögî_gë
(c⁄° 
sockë
 *);

675 
so_lögî_£t
(
sockë
 *, );

677 
¥Ÿosw
 *
so_¥Ÿosw_gë
(c⁄° 
sockë
 *);

678 
so_¥Ÿosw_£t
(
sockë
 *, 
¥Ÿosw
 *);

680 
so_s‹wakeup_locked
(
sockë
 *
so
);

681 
so_sowwakeup_locked
(
sockë
 *
so
);

683 
so_s‹wakeup
(
sockë
 *
so
);

684 
so_sowwakeup
(
sockë
 *
so
);

686 
so_lock
(
sockë
 *
so
);

687 
so_u∆ock
(
sockë
 *
so
);

689 
so_li°íîs_≠∂y_Æl
(
sockë
 *
so
, (*
func
)(sockë *, *), *
¨g
);

	@/usr/include/sys/stat.h

38 #i‚de‡
_SYS_STAT_H_


39 
	#_SYS_STAT_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_ty≥s.h
>

44 #i‚de‡
_BLKSIZE_T_DECLARED


45 
__blksize_t
 
	tblksize_t
;

46 
	#_BLKSIZE_T_DECLARED


	)

49 #i‚de‡
_BLKCNT_T_DECLARED


50 
__blk˙t_t
 
	tblk˙t_t
;

51 
	#_BLKCNT_T_DECLARED


	)

54 #i‚de‡
_DEV_T_DECLARED


55 
__dev_t
 
	tdev_t
;

56 
	#_DEV_T_DECLARED


	)

59 #i‚de‡
_FFLAGS_T_DECLARED


60 
__fÊags_t
 
	tfÊags_t
;

61 
	#_FFLAGS_T_DECLARED


	)

64 #i‚de‡
_GID_T_DECLARED


65 
__gid_t
 
	tgid_t
;

66 
	#_GID_T_DECLARED


	)

69 #i‚de‡
_INO_T_DECLARED


70 
__öo_t
 
	töo_t
;

71 
	#_INO_T_DECLARED


	)

74 #i‚de‡
_MODE_T_DECLARED


75 
__mode_t
 
	tmode_t
;

76 
	#_MODE_T_DECLARED


	)

79 #i‚de‡
_NLINK_T_DECLARED


80 
__∆ök_t
 
	t∆ök_t
;

81 
	#_NLINK_T_DECLARED


	)

84 #i‚de‡
_OFF_T_DECLARED


85 
__off_t
 
	toff_t
;

86 
	#_OFF_T_DECLARED


	)

89 #i‚de‡
_TIME_T_DECLARED


90 
__time_t
 
	ttime_t
;

91 
	#_TIME_T_DECLARED


	)

94 #i‚de‡
_UID_T_DECLARED


95 
__uid_t
 
	tuid_t
;

96 
	#_UID_T_DECLARED


	)

99 #i‡!
deföed
(
_KERNEL
Ë&& 
__BSD_VISIBLE


104 
	~<sys/time.h
>

107 #i‡!
__BSD_VISIBLE


108 
	~<sys/_time•ec.h
>

111 #i‡
__BSD_VISIBLE


112 
	so°©
 {

113 
__uöt16_t
 
	m°_dev
;

114 
öo_t
 
	m°_öo
;

115 
mode_t
 
	m°_mode
;

116 
∆ök_t
 
	m°_∆ök
;

117 
__uöt16_t
 
	m°_uid
;

118 
__uöt16_t
 
	m°_gid
;

119 
__uöt16_t
 
	m°_rdev
;

120 
__öt32_t
 
	m°_size
;

121 
time•ec
 
	m°_©ime•ec
;

122 
time•ec
 
	m°_mtime•ec
;

123 
time•ec
 
	m°_˘ime•ec
;

124 
__öt32_t
 
	m°_blksize
;

125 
__öt32_t
 
	m°_blocks
;

126 
fÊags_t
 
	m°_Êags
;

127 
__uöt32_t
 
	m°_gí
;

131 
	s°©
 {

132 
__dev_t
 
	m°_dev
;

133 
öo_t
 
	m°_öo
;

134 
mode_t
 
	m°_mode
;

135 
∆ök_t
 
	m°_∆ök
;

136 
uid_t
 
	m°_uid
;

137 
gid_t
 
	m°_gid
;

138 
__dev_t
 
	m°_rdev
;

139 #i‡
__BSD_VISIBLE


140 
time•ec
 
	m°_©ime•ec
;

141 
time•ec
 
	m°_mtime•ec
;

142 
time•ec
 
	m°_˘ime•ec
;

144 
time_t
 
	m°_©ime
;

145 
	m__°_©imí£c
;

146 
time_t
 
	m°_mtime
;

147 
	m__°_mtimí£c
;

148 
time_t
 
	m°_˘ime
;

149 
	m__°_˘imí£c
;

151 
off_t
 
	m°_size
;

152 
blk˙t_t
 
	m°_blocks
;

153 
blksize_t
 
	m°_blksize
;

154 
fÊags_t
 
	m°_Êags
;

155 
__uöt32_t
 
	m°_gí
;

156 
__öt32_t
 
	m°_l•¨e
;

157 #i‡
__BSD_VISIBLE


158 
time•ec
 
	m°_búthtime•ec
;

167 :(8 / 2Ë* (16 - ()(
time•ec
));

168 :(8 / 2Ë* (16 - ()(
time•ec
));

170 
time_t
 
	m°_búthtime
;

171 
	m°_búthtimí£c
;

172 :(8 / 2Ë* (16 - ()(
__time•ec
));

173 :(8 / 2Ë* (16 - ()(
__time•ec
));

177 #i‡
__BSD_VISIBLE


178 
	sn°©
 {

179 
__dev_t
 
	m°_dev
;

180 
öo_t
 
	m°_öo
;

181 
__uöt32_t
 
	m°_mode
;

182 
__uöt32_t
 
	m°_∆ök
;

183 
uid_t
 
	m°_uid
;

184 
gid_t
 
	m°_gid
;

185 
__dev_t
 
	m°_rdev
;

186 
time•ec
 
	m°_©ime•ec
;

187 
time•ec
 
	m°_mtime•ec
;

188 
time•ec
 
	m°_˘ime•ec
;

189 
off_t
 
	m°_size
;

190 
blk˙t_t
 
	m°_blocks
;

191 
blksize_t
 
	m°_blksize
;

192 
fÊags_t
 
	m°_Êags
;

193 
__uöt32_t
 
	m°_gí
;

194 
time•ec
 
	m°_búthtime•ec
;

198 :(8 / 2Ë* (16 - ()(
time•ec
));

199 :(8 / 2Ë* (16 - ()(
time•ec
));

203 #i‡
__BSD_VISIBLE


204 
	#°_©ime
 
°_©ime•ec
.
tv_£c


	)

205 
	#°_mtime
 
°_mtime•ec
.
tv_£c


	)

206 
	#°_˘ime
 
°_˘ime•ec
.
tv_£c


	)

207 
	#°_búthtime
 
°_búthtime•ec
.
tv_£c


	)

210 
	#S_ISUID
 0004000

	)

211 
	#S_ISGID
 0002000

	)

212 #i‡
__BSD_VISIBLE


213 
	#S_ISTXT
 0001000

	)

216 
	#S_IRWXU
 0000700

	)

217 
	#S_IRUSR
 0000400

	)

218 
	#S_IWUSR
 0000200

	)

219 
	#S_IXUSR
 0000100

	)

221 #i‡
__BSD_VISIBLE


222 
	#S_IREAD
 
S_IRUSR


	)

223 
	#S_IWRITE
 
S_IWUSR


	)

224 
	#S_IEXEC
 
S_IXUSR


	)

227 
	#S_IRWXG
 0000070

	)

228 
	#S_IRGRP
 0000040

	)

229 
	#S_IWGRP
 0000020

	)

230 
	#S_IXGRP
 0000010

	)

232 
	#S_IRWXO
 0000007

	)

233 
	#S_IROTH
 0000004

	)

234 
	#S_IWOTH
 0000002

	)

235 
	#S_IXOTH
 0000001

	)

237 #i‡
__XSI_VISIBLE


238 
	#S_IFMT
 0170000

	)

239 
	#S_IFIFO
 0010000

	)

240 
	#S_IFCHR
 0020000

	)

241 
	#S_IFDIR
 0040000

	)

242 
	#S_IFBLK
 0060000

	)

243 
	#S_IFREG
 0100000

	)

244 
	#S_IFLNK
 0120000

	)

245 
	#S_IFSOCK
 0140000

	)

246 
	#S_ISVTX
 0001000

	)

248 #i‡
__BSD_VISIBLE


249 
	#S_IFWHT
 0160000

	)

252 
	#S_ISDIR
(
m
Ë(((mË& 0170000Ë=0040000Ë

	)

253 
	#S_ISCHR
(
m
Ë(((mË& 0170000Ë=0020000Ë

	)

254 
	#S_ISBLK
(
m
Ë(((mË& 0170000Ë=0060000Ë

	)

255 
	#S_ISREG
(
m
Ë(((mË& 0170000Ë=0100000Ë

	)

256 
	#S_ISFIFO
(
m
Ë(((mË& 0170000Ë=0010000Ë

	)

257 #i‡
__POSIX_VISIBLE
 >= 200112

258 
	#S_ISLNK
(
m
Ë(((mË& 0170000Ë=0120000Ë

	)

259 
	#S_ISSOCK
(
m
Ë(((mË& 0170000Ë=0140000Ë

	)

261 #i‡
__BSD_VISIBLE


262 
	#S_ISWHT
(
m
Ë(((mË& 0170000Ë=0160000Ë

	)

265 #i‡
__BSD_VISIBLE


266 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

268 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISTXT
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

270 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

272 
	#S_BLKSIZE
 512

	)

279 
	#UF_SETTABLE
 0x0000fff‡

	)

280 
	#UF_NODUMP
 0x00000001

	)

281 
	#UF_IMMUTABLE
 0x00000002

	)

282 
	#UF_APPEND
 0x00000004

	)

283 
	#UF_OPAQUE
 0x00000008

	)

284 
	#UF_NOUNLINK
 0x00000010

	)

288 
	#SF_SETTABLE
 0xffff0000

	)

289 
	#SF_ARCHIVED
 0x00010000

	)

290 
	#SF_IMMUTABLE
 0x00020000

	)

291 
	#SF_APPEND
 0x00040000

	)

292 
	#SF_NOUNLINK
 0x00100000

	)

293 
	#SF_SNAPSHOT
 0x00200000

	)

295 #ifde‡
_KERNEL


299 
	#OPAQUE
 (
UF_OPAQUE
)

	)

300 
	#APPEND
 (
UF_APPEND
 | 
SF_APPEND
)

	)

301 
	#IMMUTABLE
 (
UF_IMMUTABLE
 | 
SF_IMMUTABLE
)

	)

302 
	#NOUNLINK
 (
UF_NOUNLINK
 | 
SF_NOUNLINK
)

	)

307 #i‚de‡
_KERNEL


308 
	g__BEGIN_DECLS


309 #i‡
__BSD_VISIBLE


310 
chÊags
(const *, );

312 
chmod
(c⁄° *, 
mode_t
);

313 #i‡
__BSD_VISIBLE


314 
fchÊags
(, );

316 #i‡
__POSIX_VISIBLE
 >= 200112

317 
fchmod
(, 
mode_t
);

319 #i‡
__POSIX_VISIBLE
 >= 200809

320 
fchmod©
(, c⁄° *, 
mode_t
, );

322 
f°©
(, 
°©
 *);

323 #i‡
__BSD_VISIBLE


324 
lchÊags
(const *, );

325 
lchmod
(c⁄° *, 
mode_t
);

327 #i‡
__POSIX_VISIBLE
 >= 200112

328 
l°©
(c⁄° * 
__ª°ri˘
, 
°©
 * __restrict);

330 
mkdú
(c⁄° *, 
mode_t
);

331 
mkfifo
(c⁄° *, 
mode_t
);

332 #i‡!
deföed
(
_MKNOD_DECLARED
Ë&& 
__XSI_VISIBLE


333 
mknod
(c⁄° *, 
mode_t
, 
dev_t
);

334 
	#_MKNOD_DECLARED


	)

336 
°©
(c⁄° * 
__ª°ri˘
, stat * __restrict);

337 
mode_t
 
umask
(mode_t);

338 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

339 
f°©©
(, c⁄° *, 
°©
 *, );

340 
mkdú©
(, c⁄° *, 
mode_t
);

341 
mkfifﬂt
(, c⁄° *, 
mode_t
);

343 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 >= 700

344 
mknod©
(, c⁄° *, 
mode_t
, 
dev_t
);

346 
	g__END_DECLS


	@/usr/include/sys/sysctl.h

36 #i‚de‡
_SYS_SYSCTL_H_


37 
	#_SYS_SYSCTL_H_


	)

39 
	~<sys/queue.h
>

41 
	gthªad
;

51 
	#CTL_MAXNAME
 24

	)

60 
	s˘ ame
 {

61 *
	m˘l_«me
;

62 
	m˘l_ty≥
;

65 
	#CTLTYPE
 0x‡

	)

66 
	#CTLTYPE_NODE
 1

	)

67 
	#CTLTYPE_INT
 2

	)

68 
	#CTLTYPE_STRING
 3

	)

69 
	#CTLTYPE_QUAD
 4

	)

70 
	#CTLTYPE_OPAQUE
 5

	)

71 
	#CTLTYPE_STRUCT
 
CTLTYPE_OPAQUE


	)

72 
	#CTLTYPE_UINT
 6

	)

73 
	#CTLTYPE_LONG
 7

	)

74 
	#CTLTYPE_ULONG
 8

	)

76 
	#CTLFLAG_RD
 0x80000000

	)

77 
	#CTLFLAG_WR
 0x40000000

	)

78 
	#CTLFLAG_RW
 (
CTLFLAG_RD
|
CTLFLAG_WR
)

	)

79 
	#CTLFLAG_NOLOCK
 0x20000000

	)

80 
	#CTLFLAG_ANYBODY
 0x10000000

	)

81 
	#CTLFLAG_SECURE
 0x08000000

	)

82 
	#CTLFLAG_PRISON
 0x04000000

	)

83 
	#CTLFLAG_DYN
 0x02000000

	)

84 
	#CTLFLAG_SKIP
 0x01000000

	)

85 
	#CTLMASK_SECURE
 0x00F00000

	)

86 
	#CTLFLAG_TUN
 0x00080000

	)

87 
	#CTLFLAG_MPSAFE
 0x00040000

	)

88 
	#CTLFLAG_VNET
 0x00020000

	)

89 
	#CTLFLAG_RDTUN
 (
CTLFLAG_RD
|
CTLFLAG_TUN
)

	)

90 
	#CTLFLAG_DYING
 0x00010000

	)

97 
	#CTLSHIFT_SECURE
 20

	)

98 
	#CTLFLAG_SECURE1
 (
CTLFLAG_SECURE
 | (0 << 
CTLSHIFT_SECURE
))

	)

99 
	#CTLFLAG_SECURE2
 (
CTLFLAG_SECURE
 | (1 << 
CTLSHIFT_SECURE
))

	)

100 
	#CTLFLAG_SECURE3
 (
CTLFLAG_SECURE
 | (2 << 
CTLSHIFT_SECURE
))

	)

109 
	#OID_AUTO
 (-1)

	)

115 
	#CTL_AUTO_START
 0x100

	)

117 #ifde‡
_KERNEL


118 
	~<sys/lökî_£t.h
>

120 
	#SYSCTL_HANDLER_ARGS
 
sys˘l_oid
 *
oidp
, *
¨g1
, 
¨g2
, \

121 
sys˘l_ªq
 *
ªq


	)

124 
	#REQ_UNLOCKED
 0

	)

125 
	#REQ_LOCKED
 1

	)

126 
	#REQ_WIRED
 2

	)

129 #i‡
deföed
(
__amd64__
Ë|| deföed(
__ü64__
)

130 
	#SCTL_MASK32
 1

	)

137 
	ssys˘l_ªq
 {

138 
thªad
 *
	mtd
;

139 
	mlock
;

140 *
	mﬁd±r
;

141 
size_t
 
	mﬁdÀn
;

142 
size_t
 
	mﬁdidx
;

143 (*
	mﬁdfunc
)(
	msys˘l_ªq
 *, c⁄° *, 
	msize_t
);

144 *
	m√w±r
;

145 
size_t
 
	m√wÀn
;

146 
size_t
 
	m√widx
;

147 (*
	m√wfunc
)(
	msys˘l_ªq
 *, *, 
	msize_t
);

148 
size_t
 
	mvÆidÀn
;

149 
	mÊags
;

152 
SLIST_HEAD
(
sys˘l_oid_li°
, 
sys˘l_oid
);

158 
	ssys˘l_oid
 {

159 
sys˘l_oid_li°
 *
	moid_∑ª¡
;

160 
SLIST_ENTRY
(
sys˘l_oid
Ë
	moid_lök
;

161 
	moid_numbî
;

162 
u_öt
 
	moid_köd
;

163 *
	moid_¨g1
;

164 
	moid_¨g2
;

165 c⁄° *
	moid_«me
;

166 (*
	moid_h™dÀr
)(
	mSYSCTL_HANDLER_ARGS
);

167 c⁄° *
	moid_fmt
;

168 
öt16_t
 
	moid_ªf˙t
;

169 
uöt16_t
 
	moid_ru¬ög
;

170 c⁄° *
	moid_des¸
;

173 
	#SYSCTL_IN
(
r
, 
p
, 
l
Ë‘->
√wfunc
)‘,Ö,Ü)

	)

174 
	#SYSCTL_OUT
(
r
, 
p
, 
l
Ë‘->
ﬁdfunc
)‘,Ö,Ü)

	)

176 
sys˘l_h™dÀ_öt
(
SYSCTL_HANDLER_ARGS
);

177 
sys˘l_m£c_to_ticks
(
SYSCTL_HANDLER_ARGS
);

178 
sys˘l_h™dÀ_l⁄g
(
SYSCTL_HANDLER_ARGS
);

179 
sys˘l_h™dÀ_quad
(
SYSCTL_HANDLER_ARGS
);

180 
sys˘l_h™dÀ_öçå
(
SYSCTL_HANDLER_ARGS
);

181 
sys˘l_h™dÀ_°rög
(
SYSCTL_HANDLER_ARGS
);

182 
sys˘l_h™dÀ_›aque
(
SYSCTL_HANDLER_ARGS
);

184 
sys˘l_dp˝u_öt
(
SYSCTL_HANDLER_ARGS
);

185 
sys˘l_dp˝u_l⁄g
(
SYSCTL_HANDLER_ARGS
);

186 
sys˘l_dp˝u_quad
(
SYSCTL_HANDLER_ARGS
);

191 
sys˘l_ªgi°î_oid
(
sys˘l_oid
 *
oidp
);

192 
sys˘l_uƒegi°î_oid
(
sys˘l_oid
 *
oidp
);

195 
	#SYSCTL_DECL
(
«me
) \

196 
sys˘l_oid_li°
 
sys˘l_
##
«me
##
_chûdªn


	)

199 
	#SYSCTL_CHILDREN
(
oid_±r
Ë(
sys˘l_oid_li°
 *) \

200 (
oid_±r
)->
oid_¨g1


	)

201 
	#SYSCTL_CHILDREN_SET
(
oid_±r
, 
vÆ
) \

202 (
oid_±r
)->
oid_¨g1
 = (
vÆ
);

	)

203 
	#SYSCTL_STATIC_CHILDREN
(
oid_«me
) \

204 (&
sys˘l_
##
oid_«me
##
_chûdªn
)

	)

209 
	ssys˘l_˘x_íåy
 {

210 
sys˘l_oid
 *
	míåy
;

211 
TAILQ_ENTRY
(
sys˘l_˘x_íåy
Ë
	mlök
;

214 
TAILQ_HEAD
(
sys˘l_˘x_li°
, 
sys˘l_˘x_íåy
);

216 
	#SYSCTL_NODE_CHILDREN
(
∑ª¡
, 
«me
) \

217 
sys˘l_
##
∑ª¡
##
_
##
«me
##
_chûdªn


	)

219 #i‚de‡
NO_SYSCTL_DESCR


220 
	#__DESCR
(
d
Ë
	)
d

222 
	#__DESCR
(
d
Ë""

	)

226 
	#SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
) \

227 
sys˘l_oid
 
sys˘l__
##
∑ª¡
##
_
##
«me
 = { \

228 &
sys˘l_
##
∑ª¡
##
_chûdªn
, { 
NULL
 }, 
nbr
, 
köd
, \

229 
a1
, 
a2
, #«me, 
h™dÀr
, 
fmt
, 0, 0, 
	`__DESCR
(
des¸
) }; \

230 
	`DATA_SET
(
sys˘l_£t
, 
sys˘l__
##
∑ª¡
##
_
##
«me
)

	)

232 
	#SYSCTL_ADD_OID
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
) \

233 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
	`__DESCR
(
des¸
))

	)

236 
	#SYSCTL_NODE
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
) \

237 
sys˘l_oid_li°
 
	`SYSCTL_NODE_CHILDREN
(
∑ª¡
, 
«me
); \

238 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_NODE
|(
ac˚ss
), \

239 (*)&
	`SYSCTL_NODE_CHILDREN
(
∑ª¡
, 
«me
), 0, 
h™dÀr
, "N", 
des¸
)

	)

241 
	#SYSCTL_ADD_NODE
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
) \

242 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_NODE
|(
ac˚ss
), \

243 
NULL
, 0, 
h™dÀr
, "N", 
	`__DESCR
(
des¸
))

	)

246 
	#SYSCTL_STRING
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
¨g
, 
Àn
, 
des¸
) \

247 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_STRING
|(
ac˚ss
), \

248 
¨g
, 
Àn
, 
sys˘l_h™dÀ_°rög
, "A", 
des¸
)

	)

250 
	#SYSCTL_ADD_STRING
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
¨g
, 
Àn
, 
des¸
) \

251 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_STRING
|(
ac˚ss
), \

252 
¨g
, 
Àn
, 
sys˘l_h™dÀ_°rög
, "A", 
	`__DESCR
(
des¸
))

	)

255 
	#SYSCTL_INT
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

256 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_INT
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

257 
±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "I", 
des¸
)

	)

259 
	#SYSCTL_ADD_INT
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

260 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_INT
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

261 
±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "I", 
	`__DESCR
(
des¸
))

	)

264 
	#SYSCTL_UINT
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

265 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_UINT
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

266 
±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "IU", 
des¸
)

	)

268 
	#SYSCTL_ADD_UINT
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

269 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_UINT
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

270 
±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "IU", 
	`__DESCR
(
des¸
))

	)

272 
	#SYSCTL_XINT
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

273 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_UINT
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

274 
±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "IX", 
des¸
)

	)

276 
	#SYSCTL_ADD_XINT
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

277 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_UINT
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

278 
±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "IX", 
	`__DESCR
(
des¸
))

	)

281 
	#SYSCTL_LONG
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

282 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_LONG
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

283 
±r
, 
vÆ
, 
sys˘l_h™dÀ_l⁄g
, "L", 
des¸
)

	)

285 
	#SYSCTL_ADD_LONG
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

286 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_LONG
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

287 
±r
, 0, 
sys˘l_h™dÀ_l⁄g
, "L", 
	`__DESCR
(
des¸
))

	)

290 
	#SYSCTL_ULONG
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

291 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_ULONG
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

292 
±r
, 
vÆ
, 
sys˘l_h™dÀ_l⁄g
, "LU", 
	`__DESCR
(
des¸
))

	)

294 
	#SYSCTL_ADD_ULONG
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

295 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_ULONG
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

296 
±r
, 0, 
sys˘l_h™dÀ_l⁄g
, "LU", 
	`__DESCR
(
des¸
))

	)

298 
	#SYSCTL_XLONG
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

299 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_ULONG
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

300 
±r
, 
vÆ
, 
sys˘l_h™dÀ_l⁄g
, "LX", 
	`__DESCR
(
des¸
))

	)

302 
	#SYSCTL_ADD_XLONG
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

303 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_ULONG
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

304 
±r
, 0, 
sys˘l_h™dÀ_l⁄g
, "LX", 
	`__DESCR
(
des¸
))

	)

307 
	#SYSCTL_QUAD
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

308 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_QUAD
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

309 
±r
, 
vÆ
, 
sys˘l_h™dÀ_quad
, "Q", 
	`__DESCR
(
des¸
))

	)

311 
	#SYSCTL_ADD_QUAD
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

312 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_QUAD
|
CTLFLAG_MPSAFE
|(
ac˚ss
), \

313 
±r
, 0, 
sys˘l_h™dÀ_quad
, "Q", 
	`__DESCR
(
des¸
))

	)

316 
	#SYSCTL_OPAQUE
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
Àn
, 
fmt
, 
des¸
) \

317 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_OPAQUE
|(
ac˚ss
), \

318 
±r
, 
Àn
, 
sys˘l_h™dÀ_›aque
, 
fmt
, 
des¸
)

	)

320 
	#SYSCTL_ADD_OPAQUE
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
Àn
, 
fmt
, 
des¸
)\

321 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_OPAQUE
|(
ac˚ss
), \

322 
±r
, 
Àn
, 
sys˘l_h™dÀ_›aque
, 
fmt
, 
	`__DESCR
(
des¸
))

	)

325 
	#SYSCTL_STRUCT
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
ty≥
, 
des¸
) \

326 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_OPAQUE
|(
ac˚ss
), \

327 
±r
, (
ty≥
), 
sys˘l_h™dÀ_›aque
, \

328 "S," #ty≥, 
des¸
)

	)

330 
	#SYSCTL_ADD_STRUCT
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
ty≥
, 
des¸
) \

331 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_OPAQUE
|(
ac˚ss
), \

332 
±r
, (
ty≥
), 
sys˘l_h™dÀ_›aque
, "S," #ty≥, 
	`__DESCR
(
des¸
))

	)

335 
	#SYSCTL_PROC
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
¨g
, 
h™dÀr
, 
fmt
, 
des¸
) \

336 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, (
ac˚ss
), \

337 
±r
, 
¨g
, 
h™dÀr
, 
fmt
, 
des¸
)

	)

339 
	#SYSCTL_ADD_PROC
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
¨g
, 
h™dÀr
, 
fmt
, 
des¸
) \

340 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, (
ac˚ss
), \

341 
±r
, 
¨g
, 
h™dÀr
, 
fmt
, 
	`__DESCR
(
des¸
))

	)

347 
	#FEATURE
(
«me
, 
desc
) \

348 
	`SYSCTL_INT
(
_kîn_„©uªs
, 
OID_AUTO
, 
«me
, 
CTLFLAG_RD
, 0, 1, 
desc
)

	)

355 
	#CTL_UNSPEC
 0

	)

356 
	#CTL_KERN
 1

	)

357 
	#CTL_VM
 2

	)

358 
	#CTL_VFS
 3

	)

359 
	#CTL_NET
 4

	)

360 
	#CTL_DEBUG
 5

	)

361 
	#CTL_HW
 6

	)

362 
	#CTL_MACHDEP
 7

	)

363 
	#CTL_USER
 8

	)

364 
	#CTL_P1003_1B
 9

	)

365 
	#CTL_MAXID
 10

	)

367 
	#CTL_NAMES
 { \

369 { "kîn", 
CTLTYPE_NODE
 }, \

370 { "vm", 
CTLTYPE_NODE
 }, \

371 { "vfs", 
CTLTYPE_NODE
 }, \

372 { "√t", 
CTLTYPE_NODE
 }, \

373 { "debug", 
CTLTYPE_NODE
 }, \

374 { "hw", 
CTLTYPE_NODE
 }, \

375 { "machdï", 
CTLTYPE_NODE
 }, \

376 { "u£r", 
CTLTYPE_NODE
 }, \

377 { "p1003_1b", 
CTLTYPE_NODE
 }, \

378 }

	)

383 
	#KERN_OSTYPE
 1

	)

384 
	#KERN_OSRELEASE
 2

	)

385 
	#KERN_OSREV
 3

	)

386 
	#KERN_VERSION
 4

	)

387 
	#KERN_MAXVNODES
 5

	)

388 
	#KERN_MAXPROC
 6

	)

389 
	#KERN_MAXFILES
 7

	)

390 
	#KERN_ARGMAX
 8

	)

391 
	#KERN_SECURELVL
 9

	)

392 
	#KERN_HOSTNAME
 10

	)

393 
	#KERN_HOSTID
 11

	)

394 
	#KERN_CLOCKRATE
 12

	)

395 
	#KERN_VNODE
 13

	)

396 
	#KERN_PROC
 14

	)

397 
	#KERN_FILE
 15

	)

398 
	#KERN_PROF
 16

	)

399 
	#KERN_POSIX1
 17

	)

400 
	#KERN_NGROUPS
 18

	)

401 
	#KERN_JOB_CONTROL
 19

	)

402 
	#KERN_SAVED_IDS
 20

	)

403 
	#KERN_BOOTTIME
 21

	)

404 
	#KERN_NISDOMAINNAME
 22

	)

405 
	#KERN_UPDATEINTERVAL
 23

	)

406 
	#KERN_OSRELDATE
 24

	)

407 
	#KERN_NTP_PLL
 25

	)

408 
	#KERN_BOOTFILE
 26

	)

409 
	#KERN_MAXFILESPERPROC
 27

	)

410 
	#KERN_MAXPROCPERUID
 28

	)

411 
	#KERN_DUMPDEV
 29

	)

412 
	#KERN_IPC
 30

	)

413 
	#KERN_DUMMY
 31

	)

414 
	#KERN_PS_STRINGS
 32

	)

415 
	#KERN_USRSTACK
 33

	)

416 
	#KERN_LOGSIGEXIT
 34

	)

417 
	#KERN_IOV_MAX
 35

	)

418 
	#KERN_HOSTUUID
 36

	)

419 
	#KERN_ARND
 37

	)

420 
	#KERN_MAXID
 38

	)

422 
	#CTL_KERN_NAMES
 { \

424 { "o°y≥", 
CTLTYPE_STRING
 }, \

425 { "o§ñó£", 
CTLTYPE_STRING
 }, \

426 { "o§evisi⁄", 
CTLTYPE_INT
 }, \

427 { "vîsi⁄", 
CTLTYPE_STRING
 }, \

428 { "maxvnodes", 
CTLTYPE_INT
 }, \

429 { "max¥oc", 
CTLTYPE_INT
 }, \

430 { "maxfûes", 
CTLTYPE_INT
 }, \

431 { "¨gmax", 
CTLTYPE_INT
 }, \

432 { "£cuªÀvñ", 
CTLTYPE_INT
 }, \

433 { "ho°«me", 
CTLTYPE_STRING
 }, \

434 { "ho°id", 
CTLTYPE_UINT
 }, \

435 { "˛ockøã", 
CTLTYPE_STRUCT
 }, \

436 { "vnode", 
CTLTYPE_STRUCT
 }, \

437 { "¥oc", 
CTLTYPE_STRUCT
 }, \

438 { "fûe", 
CTLTYPE_STRUCT
 }, \

439 { "¥ofûög", 
CTLTYPE_NODE
 }, \

440 { "posix1vîsi⁄", 
CTLTYPE_INT
 }, \

441 { "ngroups", 
CTLTYPE_INT
 }, \

442 { "job_c⁄åﬁ", 
CTLTYPE_INT
 }, \

443 { "ßved_ids", 
CTLTYPE_INT
 }, \

444 { "boŸtime", 
CTLTYPE_STRUCT
 }, \

445 { "nisdomaö«me", 
CTLTYPE_STRING
 }, \

446 { "upd©e", 
CTLTYPE_INT
 }, \

447 { "o§ñd©e", 
CTLTYPE_INT
 }, \

448 { "¡p_∂l", 
CTLTYPE_NODE
 }, \

449 { "boŸfûe", 
CTLTYPE_STRING
 }, \

450 { "maxfûe•î¥oc", 
CTLTYPE_INT
 }, \

451 { "max¥o˝îuid", 
CTLTYPE_INT
 }, \

452 { "ùc", 
CTLTYPE_NODE
 }, \

453 { "dummy", 
CTLTYPE_INT
 }, \

454 { "ps_°rögs", 
CTLTYPE_INT
 }, \

455 { "u§°ack", 
CTLTYPE_INT
 }, \

456 { "logsigexô", 
CTLTYPE_INT
 }, \

457 { "iov_max", 
CTLTYPE_INT
 }, \

458 { "ho°uuid", 
CTLTYPE_STRING
 }, \

459 { "¨c4ønd", 
CTLTYPE_OPAQUE
 }, \

460 }

	)

465 
	#CTL_VFS_NAMES
 { \

466 { "vfsc⁄f", 
CTLTYPE_STRUCT
 }, \

467 }

	)

472 
	#KERN_PROC_ALL
 0

	)

473 
	#KERN_PROC_PID
 1

	)

474 
	#KERN_PROC_PGRP
 2

	)

475 
	#KERN_PROC_SESSION
 3

	)

476 
	#KERN_PROC_TTY
 4

	)

477 
	#KERN_PROC_UID
 5

	)

478 
	#KERN_PROC_RUID
 6

	)

479 
	#KERN_PROC_ARGS
 7

	)

480 
	#KERN_PROC_PROC
 8

	)

481 
	#KERN_PROC_SV_NAME
 9

	)

482 
	#KERN_PROC_RGID
 10

	)

483 
	#KERN_PROC_GID
 11

	)

484 
	#KERN_PROC_PATHNAME
 12

	)

485 
	#KERN_PROC_OVMMAP
 13

	)

486 
	#KERN_PROC_OFILEDESC
 14

	)

487 
	#KERN_PROC_KSTACK
 15

	)

488 
	#KERN_PROC_INC_THREAD
 0x10

	)

493 
	#KERN_PROC_VMMAP
 32

	)

494 
	#KERN_PROC_FILEDESC
 33

	)

495 
	#KERN_PROC_GROUPS
 34

	)

500 
	#KIPC_MAXSOCKBUF
 1

	)

501 
	#KIPC_SOCKBUF_WASTE
 2

	)

502 
	#KIPC_SOMAXCONN
 3

	)

503 
	#KIPC_MAX_LINKHDR
 4

	)

504 
	#KIPC_MAX_PROTOHDR
 5

	)

505 
	#KIPC_MAX_HDR
 6

	)

506 
	#KIPC_MAX_DATALEN
 7

	)

511 
	#HW_MACHINE
 1

	)

512 
	#HW_MODEL
 2

	)

513 
	#HW_NCPU
 3

	)

514 
	#HW_BYTEORDER
 4

	)

515 
	#HW_PHYSMEM
 5

	)

516 
	#HW_USERMEM
 6

	)

517 
	#HW_PAGESIZE
 7

	)

518 
	#HW_DISKNAMES
 8

	)

519 
	#HW_DISKSTATS
 9

	)

520 
	#HW_FLOATINGPT
 10

	)

521 
	#HW_MACHINE_ARCH
 11

	)

522 
	#HW_REALMEM
 12

	)

523 
	#HW_MAXID
 13

	)

525 
	#CTL_HW_NAMES
 { \

527 { "machöe", 
CTLTYPE_STRING
 }, \

528 { "modñ", 
CTLTYPE_STRING
 }, \

529 { "n˝u", 
CTLTYPE_INT
 }, \

530 { "byã‹dî", 
CTLTYPE_INT
 }, \

531 { "physmem", 
CTLTYPE_ULONG
 }, \

532 { "u£rmem", 
CTLTYPE_ULONG
 }, \

533 { "∑gesize", 
CTLTYPE_INT
 }, \

534 { "disk«mes", 
CTLTYPE_STRUCT
 }, \

535 { "disk°©s", 
CTLTYPE_STRUCT
 }, \

536 { "Êﬂtögpoöt", 
CTLTYPE_INT
 }, \

537 { "machöe_¨ch", 
CTLTYPE_STRING
 }, \

538 { "ªÆmem", 
CTLTYPE_ULONG
 }, \

539 }

	)

544 
	#USER_CS_PATH
 1

	)

545 
	#USER_BC_BASE_MAX
 2

	)

546 
	#USER_BC_DIM_MAX
 3

	)

547 
	#USER_BC_SCALE_MAX
 4

	)

548 
	#USER_BC_STRING_MAX
 5

	)

549 
	#USER_COLL_WEIGHTS_MAX
 6

	)

550 
	#USER_EXPR_NEST_MAX
 7

	)

551 
	#USER_LINE_MAX
 8

	)

552 
	#USER_RE_DUP_MAX
 9

	)

553 
	#USER_POSIX2_VERSION
 10

	)

554 
	#USER_POSIX2_C_BIND
 11

	)

555 
	#USER_POSIX2_C_DEV
 12

	)

556 
	#USER_POSIX2_CHAR_TERM
 13

	)

557 
	#USER_POSIX2_FORT_DEV
 14

	)

558 
	#USER_POSIX2_FORT_RUN
 15

	)

559 
	#USER_POSIX2_LOCALEDEF
 16

	)

560 
	#USER_POSIX2_SW_DEV
 17

	)

561 
	#USER_POSIX2_UPE
 18

	)

562 
	#USER_STREAM_MAX
 19

	)

563 
	#USER_TZNAME_MAX
 20

	)

564 
	#USER_MAXID
 21

	)

566 
	#CTL_USER_NAMES
 { \

568 { "cs_∑th", 
CTLTYPE_STRING
 }, \

569 { "bc_ba£_max", 
CTLTYPE_INT
 }, \

570 { "bc_dim_max", 
CTLTYPE_INT
 }, \

571 { "bc_sˇÀ_max", 
CTLTYPE_INT
 }, \

572 { "bc_°rög_max", 
CTLTYPE_INT
 }, \

573 { "cﬁl_weights_max", 
CTLTYPE_INT
 }, \

574 { "ex¥_√°_max", 
CTLTYPE_INT
 }, \

575 { "löe_max", 
CTLTYPE_INT
 }, \

576 { "ª_dup_max", 
CTLTYPE_INT
 }, \

577 { "posix2_vîsi⁄", 
CTLTYPE_INT
 }, \

578 { "posix2_c_böd", 
CTLTYPE_INT
 }, \

579 { "posix2_c_dev", 
CTLTYPE_INT
 }, \

580 { "posix2_ch¨_ãrm", 
CTLTYPE_INT
 }, \

581 { "posix2_f‹t_dev", 
CTLTYPE_INT
 }, \

582 { "posix2_f‹t_run", 
CTLTYPE_INT
 }, \

583 { "posix2_loˇÀdef", 
CTLTYPE_INT
 }, \

584 { "posix2_sw_dev", 
CTLTYPE_INT
 }, \

585 { "posix2_u≥", 
CTLTYPE_INT
 }, \

586 { "°ªam_max", 
CTLTYPE_INT
 }, \

587 { "tz«me_max", 
CTLTYPE_INT
 }, \

588 }

	)

590 
	#CTL_P1003_1B_ASYNCHRONOUS_IO
 1

	)

591 
	#CTL_P1003_1B_MAPPED_FILES
 2

	)

592 
	#CTL_P1003_1B_MEMLOCK
 3

	)

593 
	#CTL_P1003_1B_MEMLOCK_RANGE
 4

	)

594 
	#CTL_P1003_1B_MEMORY_PROTECTION
 5

	)

595 
	#CTL_P1003_1B_MESSAGE_PASSING
 6

	)

596 
	#CTL_P1003_1B_PRIORITIZED_IO
 7

	)

597 
	#CTL_P1003_1B_PRIORITY_SCHEDULING
 8

	)

598 
	#CTL_P1003_1B_REALTIME_SIGNALS
 9

	)

599 
	#CTL_P1003_1B_SEMAPHORES
 10

	)

600 
	#CTL_P1003_1B_FSYNC
 11

	)

601 
	#CTL_P1003_1B_SHARED_MEMORY_OBJECTS
 12

	)

602 
	#CTL_P1003_1B_SYNCHRONIZED_IO
 13

	)

603 
	#CTL_P1003_1B_TIMERS
 14

	)

604 
	#CTL_P1003_1B_AIO_LISTIO_MAX
 15

	)

605 
	#CTL_P1003_1B_AIO_MAX
 16

	)

606 
	#CTL_P1003_1B_AIO_PRIO_DELTA_MAX
 17

	)

607 
	#CTL_P1003_1B_DELAYTIMER_MAX
 18

	)

608 
	#CTL_P1003_1B_MQ_OPEN_MAX
 19

	)

609 
	#CTL_P1003_1B_PAGESIZE
 20

	)

610 
	#CTL_P1003_1B_RTSIG_MAX
 21

	)

611 
	#CTL_P1003_1B_SEM_NSEMS_MAX
 22

	)

612 
	#CTL_P1003_1B_SEM_VALUE_MAX
 23

	)

613 
	#CTL_P1003_1B_SIGQUEUE_MAX
 24

	)

614 
	#CTL_P1003_1B_TIMER_MAX
 25

	)

616 
	#CTL_P1003_1B_MAXID
 26

	)

618 
	#CTL_P1003_1B_NAMES
 { \

620 { "asynchr⁄ous_io", 
CTLTYPE_INT
 }, \

621 { "m≠≥d_fûes", 
CTLTYPE_INT
 }, \

622 { "memlock", 
CTLTYPE_INT
 }, \

623 { "memlock_ønge", 
CTLTYPE_INT
 }, \

624 { "mem‹y_¥Ÿe˘i⁄", 
CTLTYPE_INT
 }, \

625 { "mesßge_∑ssög", 
CTLTYPE_INT
 }, \

626 { "¥i‹ôized_io", 
CTLTYPE_INT
 }, \

627 { "¥i‹ôy_schedulög", 
CTLTYPE_INT
 }, \

628 { "ªÆtime_sig«ls", 
CTLTYPE_INT
 }, \

629 { "£m≠h‹es", 
CTLTYPE_INT
 }, \

630 { "fsync", 
CTLTYPE_INT
 }, \

631 { "sh¨ed_mem‹y_obje˘s", 
CTLTYPE_INT
 }, \

632 { "synchr⁄ized_io", 
CTLTYPE_INT
 }, \

633 { "timîs", 
CTLTYPE_INT
 }, \

634 { "aio_li°io_max", 
CTLTYPE_INT
 }, \

635 { "aio_max", 
CTLTYPE_INT
 }, \

636 { "aio_¥io_dñè_max", 
CTLTYPE_INT
 }, \

637 { "dñaytimî_max", 
CTLTYPE_INT
 }, \

638 { "mq_›í_max", 
CTLTYPE_INT
 }, \

639 { "∑gesize", 
CTLTYPE_INT
 }, \

640 { "πsig_max", 
CTLTYPE_INT
 }, \

641 { "n£ms_max", 
CTLTYPE_INT
 }, \

642 { "£m_vÆue_max", 
CTLTYPE_INT
 }, \

643 { "sigqueue_max", 
CTLTYPE_INT
 }, \

644 { "timî_max", 
CTLTYPE_INT
 }, \

645 }

	)

647 #ifde‡
_KERNEL


652 
sys˘l_oid_li°
 
sys˘l__chûdªn
;

653 
SYSCTL_DECL
(
_kîn
);

654 
SYSCTL_DECL
(
_kîn_„©uªs
);

655 
SYSCTL_DECL
(
_kîn_ùc
);

656 
SYSCTL_DECL
(
_kîn_¥oc
);

657 
SYSCTL_DECL
(
_kîn_sched
);

658 
SYSCTL_DECL
(
_kîn_sched_°©s
);

659 
SYSCTL_DECL
(
_sys˘l
);

660 
SYSCTL_DECL
(
_vm
);

661 
SYSCTL_DECL
(
_vm_°©s
);

662 
SYSCTL_DECL
(
_vm_°©s_misc
);

663 
SYSCTL_DECL
(
_vfs
);

664 
SYSCTL_DECL
(
_√t
);

665 
SYSCTL_DECL
(
_debug
);

666 
SYSCTL_DECL
(
_debug_sizeof
);

667 
SYSCTL_DECL
(
_dev
);

668 
SYSCTL_DECL
(
_hw
);

669 
SYSCTL_DECL
(
_hw_bus
);

670 
SYSCTL_DECL
(
_hw_bus_devi˚s
);

671 
SYSCTL_DECL
(
_hw_bus_öfo
);

672 
SYSCTL_DECL
(
_machdï
);

673 
SYSCTL_DECL
(
_u£r
);

674 
SYSCTL_DECL
(
_com∑t
);

675 
SYSCTL_DECL
(
_ªgªssi⁄
);

676 
SYSCTL_DECL
(
_£curôy
);

677 
SYSCTL_DECL
(
_£curôy_bsd
);

679 
machöe
[];

680 
o§ñó£
[];

681 
o°y≥
[];

682 
kîn_idít
[];

685 
sys˘l_oid
 *
sys˘l_add_oid
(
sys˘l_˘x_li°
 *
˛i°
,

686 
sys˘l_oid_li°
 *
∑ª¡
, 
nbr
, c⁄° *
«me
,

687 
köd
, *
¨g1
, 
¨g2
,

688 (*
h™dÀr
Ë(
SYSCTL_HANDLER_ARGS
),

689 c⁄° *
fmt
, c⁄° *
des¸
);

690 
	`sys˘l_ª«me_oid
(
sys˘l_oid
 *
oidp
, c⁄° *
«me
);

691 
	`sys˘l_move_oid
(
sys˘l_oid
 *
oidp
,

692 
sys˘l_oid_li°
 *
∑ª¡
);

693 
	`sys˘l_ªmove_oid
(
sys˘l_oid
 *
oidp
, 
dñ
, 
ªcur£
);

694 
	`sys˘l_˘x_öô
(
sys˘l_˘x_li°
 *
˛i°
);

695 
	`sys˘l_˘x_‰ì
(
sys˘l_˘x_li°
 *
˛i°
);

696 
sys˘l_˘x_íåy
 *
	`sys˘l_˘x_íåy_add
(
sys˘l_˘x_li°
 *
˛i°
,

697 
sys˘l_oid
 *
oidp
);

698 
sys˘l_˘x_íåy
 *
	`sys˘l_˘x_íåy_föd
(
sys˘l_˘x_li°
 *
˛i°
,

699 
sys˘l_oid
 *
oidp
);

700 
	`sys˘l_˘x_íåy_dñ
(
sys˘l_˘x_li°
 *
˛i°
,

701 
sys˘l_oid
 *
oidp
);

703 
	`kî√l_sys˘l
(
thªad
 *
td
, *
«me
, 
u_öt
 
«mñí
, *
ﬁd
,

704 
size_t
 *
ﬁdÀ≈
, *
√w
, size_à
√wÀn
,

705 
size_t
 *
ªtvÆ
, 
Êags
);

706 
	`kî√l_sys˘lby«me
(
thªad
 *
td
, *
«me
,

707 *
ﬁd
, 
size_t
 *
ﬁdÀ≈
, *
√w
, size_à
√wÀn
,

708 
size_t
 *
ªtvÆ
, 
Êags
);

709 
	`u£æ™d_sys˘l
(
thªad
 *
td
, *
«me
, 
u_öt
 
«mñí
, *
ﬁd
,

710 
size_t
 *
ﬁdÀ≈
, 
ökî√l
, *
√w
, size_à
√wÀn
,

711 
size_t
 *
ªtvÆ
, 
Êags
);

712 
	`sys˘l_föd_oid
(*
«me
, 
u_öt
 
«mñí
, 
sys˘l_oid
 **
noid
,

713 *
nödx
, 
sys˘l_ªq
 *
ªq
);

714 
	`sys˘l_lock
();

715 
	`sys˘l_u∆ock
();

716 
	`sys˘l_wúe_ﬁd_buf„r
(
sys˘l_ªq
 *
ªq
, 
size_t
 
Àn
);

718 
sbuf
;

719 
sbuf
 *
	`sbuf_√w_f‹_sys˘l
(sbuf *, *, ,

720 
sys˘l_ªq
 *);

722 
	~<sys/cdefs.h
>

724 
__BEGIN_DECLS


725 
	`sys˘l
(*, 
u_öt
, *, 
size_t
 *, *, size_t);

726 
	`sys˘lby«me
(c⁄° *, *, 
size_t
 *, *, size_t);

727 
	`sys˘ amëomib
(c⁄° *, *, 
size_t
 *);

728 
__END_DECLS


	@/usr/include/sys/time.h

33 #i‚de‡
_SYS_TIME_H_


34 
	#_SYS_TIME_H_


	)

36 
	~<sys/_timevÆ.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/time•ec.h
>

40 
	stimez⁄e
 {

41 
	mtz_möuãswe°
;

42 
	mtz_d°time
;

44 
	#DST_NONE
 0

	)

45 
	#DST_USA
 1

	)

46 
	#DST_AUST
 2

	)

47 
	#DST_WET
 3

	)

48 
	#DST_MET
 4

	)

49 
	#DST_EET
 5

	)

50 
	#DST_CAN
 6

	)

52 #i‡
__BSD_VISIBLE


53 
	sbötime
 {

54 
time_t
 
	m£c
;

55 
uöt64_t
 
	m‰ac
;

58 
__ölöe
 

59 
	$bötime_addx
(
bötime
 *
bt
, 
uöt64_t
 
x
)

61 
uöt64_t
 
u
;

63 
u
 = 
bt
->
‰ac
;

64 
bt
->
‰ac
 +
x
;

65 i‡(
u
 > 
bt
->
‰ac
)

66 
bt
->
£c
++;

67 
	}
}

69 
__ölöe
 

70 
	$bötime_add
(
bötime
 *
bt
, c⁄° bötimê*
bt2
)

72 
uöt64_t
 
u
;

74 
u
 = 
bt
->
‰ac
;

75 
bt
->
‰ac
 +
bt2
->frac;

76 i‡(
u
 > 
bt
->
‰ac
)

77 
bt
->
£c
++;

78 
bt
->
£c
 +
bt2
->sec;

79 
	}
}

81 
__ölöe
 

82 
	$bötime_sub
(
bötime
 *
bt
, c⁄° bötimê*
bt2
)

84 
uöt64_t
 
u
;

86 
u
 = 
bt
->
‰ac
;

87 
bt
->
‰ac
 -
bt2
->frac;

88 i‡(
u
 < 
bt
->
‰ac
)

89 
bt
->
£c
--;

90 
bt
->
£c
 -
bt2
->sec;

91 
	}
}

107 
__ölöe
 

108 
	$bötime2time•ec
(c⁄° 
bötime
 *
bt
, 
time•ec
 *
ts
)

111 
ts
->
tv_£c
 = 
bt
->
£c
;

112 
ts
->
tv_n£c
 = ((
uöt64_t
)1000000000 * (
uöt32_t
)(
bt
->
‰ac
 >> 32)) >> 32;

113 
	}
}

115 
__ölöe
 

116 
	$time•ec2bötime
(c⁄° 
time•ec
 *
ts
, 
bötime
 *
bt
)

119 
bt
->
£c
 = 
ts
->
tv_£c
;

121 
bt
->
‰ac
 = 
ts
->
tv_n£c
 * (
uöt64_t
)18446744073LL;

122 
	}
}

124 
__ölöe
 

125 
	$bötime2timevÆ
(c⁄° 
bötime
 *
bt
, 
timevÆ
 *
tv
)

128 
tv
->
tv_£c
 = 
bt
->
£c
;

129 
tv
->
tv_u£c
 = ((
uöt64_t
)1000000 * (
uöt32_t
)(
bt
->
‰ac
 >> 32)) >> 32;

130 
	}
}

132 
__ölöe
 

133 
	$timevÆ2bötime
(c⁄° 
timevÆ
 *
tv
, 
bötime
 *
bt
)

136 
bt
->
£c
 = 
tv
->
tv_£c
;

138 
bt
->
‰ac
 = 
tv
->
tv_u£c
 * (
uöt64_t
)18446744073709LL;

139 
	}
}

142 #ifde‡
_KERNEL


145 
	#time•ec˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_n£c
 = 0)

	)

146 
	#time•ecis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_n£c
)

	)

147 
	#time•eccmp
(
tvp
, 
uvp
, 
cmp
) \

148 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

149 ((
tvp
)->
tv_n£c
 
	`cmp
 (
uvp
)->tv_nsec) : \

150 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

151 
	#time•eˇdd
(
vvp
, 
uvp
) \

153 (
vvp
)->
tv_£c
 +(
uvp
)->tv_sec; \

154 (
vvp
)->
tv_n£c
 +(
uvp
)->tv_nsec; \

155 i‡((
vvp
)->
tv_n£c
 >= 1000000000) { \

156 (
vvp
)->
tv_£c
++; \

157 (
vvp
)->
tv_n£c
 -= 1000000000; \

159 } 0)

	)

160 
	#time•ecsub
(
vvp
, 
uvp
) \

162 (
vvp
)->
tv_£c
 -(
uvp
)->tv_sec; \

163 (
vvp
)->
tv_n£c
 -(
uvp
)->tv_nsec; \

164 i‡((
vvp
)->
tv_n£c
 < 0) { \

165 (
vvp
)->
tv_£c
--; \

166 (
vvp
)->
tv_n£c
 += 1000000000; \

168 } 0)

	)

172 
	#timevÆ˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

173 
	#timevÆis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

174 
	#timevÆcmp
(
tvp
, 
uvp
, 
cmp
) \

175 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

176 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

177 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

183 #i‚de‡
_KERNEL


185 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

186 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

187 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

188 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

189 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

190 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

191 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

193 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

194 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

195 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

196 (
vvp
)->
tv_£c
++; \

197 (
vvp
)->
tv_u£c
 -= 1000000; \

199 } 0)

	)

200 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

202 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

203 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

204 i‡((
vvp
)->
tv_u£c
 < 0) { \

205 (
vvp
)->
tv_£c
--; \

206 (
vvp
)->
tv_u£c
 += 1000000; \

208 } 0)

	)

215 
	#ITIMER_REAL
 0

	)

216 
	#ITIMER_VIRTUAL
 1

	)

217 
	#ITIMER_PROF
 2

	)

219 
	sôimîvÆ
 {

220 
timevÆ
 
	mô_öãrvÆ
;

221 
timevÆ
 
	mô_vÆue
;

227 
	s˛ocköfo
 {

228 
	mhz
;

229 
	mtick
;

230 
	m•¨e
;

231 
	m°©hz
;

232 
	m¥ofhz
;

236 #i‚de‡
CLOCK_REALTIME


237 
	#CLOCK_REALTIME
 0

	)

238 
	#CLOCK_VIRTUAL
 1

	)

239 
	#CLOCK_PROF
 2

	)

240 
	#CLOCK_MONOTONIC
 4

	)

241 
	#CLOCK_UPTIME
 5

	)

242 
	#CLOCK_UPTIME_PRECISE
 7

	)

243 
	#CLOCK_UPTIME_FAST
 8

	)

244 
	#CLOCK_REALTIME_PRECISE
 9

	)

245 
	#CLOCK_REALTIME_FAST
 10

	)

246 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

247 
	#CLOCK_MONOTONIC_FAST
 12

	)

248 
	#CLOCK_SECOND
 13

	)

249 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

252 #i‚de‡
TIMER_ABSTIME


253 
	#TIMER_RELTIME
 0x0

	)

254 
	#TIMER_ABSTIME
 0x1

	)

257 #ifde‡
_KERNEL


262 
öôtodr
(
time_t
 
ba£
);

263 
ª£âodr
();

265 
time_t
 
time_£c⁄d
;

266 
time_t
 
time_u±ime
;

267 
timevÆ
 
boŸtime
;

291 
böu±ime
(
bötime
 *
bt
);

292 
«nou±ime
(
time•ec
 *
t•
);

293 
mi¸ou±ime
(
timevÆ
 *
tvp
);

295 
bötime
(bötimê*
bt
);

296 
«nŸime
(
time•ec
 *
t•
);

297 
mi¸Ÿime
(
timevÆ
 *
tvp
);

299 
gëböu±ime
(
bötime
 *
bt
);

300 
gë«nou±ime
(
time•ec
 *
t•
);

301 
gëmi¸ou±ime
(
timevÆ
 *
tvp
);

303 
gëbötime
(
bötime
 *
bt
);

304 
gë«nŸime
(
time•ec
 *
t•
);

305 
gëmi¸Ÿime
(
timevÆ
 *
tvp
);

308 
ôimîde¸
(
ôimîvÆ
 *
ôp
, 
u£c
);

309 
ôimîfix
(
timevÆ
 *
tv
);

310 
µ§©echeck
(
timevÆ
 *, *, );

311 
øãcheck
(
timevÆ
 *, const timeval *);

312 
timevÆadd
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

313 
timevÆsub
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

314 
tvtohz
(
timevÆ
 *
tv
);

316 
	~<time.h
>

318 
	~<sys/cdefs.h
>

319 
	~<sys/£À˘.h
>

321 
__BEGIN_DECLS


322 
£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

323 
utimes
(c⁄° *, c⁄° 
timevÆ
 *);

325 #i‡
__BSD_VISIBLE


326 
adjtime
(c⁄° 
timevÆ
 *, timeval *);

327 
futimes
(, c⁄° 
timevÆ
 *);

328 
futimeßt
(, c⁄° *, c⁄° 
timevÆ
 [2]);

329 
lutimes
(c⁄° *, c⁄° 
timevÆ
 *);

330 
£âimeofday
(c⁄° 
timevÆ
 *, c⁄° 
timez⁄e
 *);

333 #i‡
__XSI_VISIBLE


334 
gëôimî
(, 
ôimîvÆ
 *);

335 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

338 
	g__END_DECLS


	@/usr/include/sys/types.h

38 #i‚de‡
_SYS_TYPES_H_


39 
	#_SYS_TYPES_H_


	)

41 
	~<sys/cdefs.h
>

44 
	~<machöe/ídün.h
>

45 
	~<sys/_ty≥s.h
>

47 
	~<sys/_±hªadty≥s.h
>

49 #i‡
__BSD_VISIBLE


50 
	tu_ch¨
;

51 
	tu_sh‹t
;

52 
	tu_öt
;

53 
	tu_l⁄g
;

54 #i‚de‡
_KERNEL


55 
	tush‹t
;

56 
	tuöt
;

63 #i‚de‡
_INT8_T_DECLARED


64 
__öt8_t
 
	töt8_t
;

65 
	#_INT8_T_DECLARED


	)

68 #i‚de‡
_INT16_T_DECLARED


69 
__öt16_t
 
	töt16_t
;

70 
	#_INT16_T_DECLARED


	)

73 #i‚de‡
_INT32_T_DECLARED


74 
__öt32_t
 
	töt32_t
;

75 
	#_INT32_T_DECLARED


	)

78 #i‚de‡
_INT64_T_DECLARED


79 
__öt64_t
 
	töt64_t
;

80 
	#_INT64_T_DECLARED


	)

83 #i‚de‡
_UINT8_T_DECLARED


84 
__uöt8_t
 
	tuöt8_t
;

85 
	#_UINT8_T_DECLARED


	)

88 #i‚de‡
_UINT16_T_DECLARED


89 
__uöt16_t
 
	tuöt16_t
;

90 
	#_UINT16_T_DECLARED


	)

93 #i‚de‡
_UINT32_T_DECLARED


94 
__uöt32_t
 
	tuöt32_t
;

95 
	#_UINT32_T_DECLARED


	)

98 #i‚de‡
_UINT64_T_DECLARED


99 
__uöt64_t
 
	tuöt64_t
;

100 
	#_UINT64_T_DECLARED


	)

103 #i‚de‡
_INTPTR_T_DECLARED


104 
__öçå_t
 
	töçå_t
;

105 
__uöçå_t
 
	tuöçå_t
;

106 
	#_INTPTR_T_DECLARED


	)

109 
__uöt8_t
 
	tu_öt8_t
;

110 
__uöt16_t
 
	tu_öt16_t
;

111 
__uöt32_t
 
	tu_öt32_t
;

112 
__uöt64_t
 
	tu_öt64_t
;

114 
__uöt64_t
 
	tu_quad_t
;

115 
__öt64_t
 
	tquad_t
;

116 
quad_t
 * 
	tqaddr_t
;

118 * 
	tˇddr_t
;

119 
__c⁄°
 * 
	tc_ˇddr_t
;

120 
__vﬁ©ûe
 *
	tv_ˇddr_t
;

122 #i‚de‡
_BLKSIZE_T_DECLARED


123 
__blksize_t
 
	tblksize_t
;

124 
	#_BLKSIZE_T_DECLARED


	)

127 
__˝uwhich_t
 
	t˝uwhich_t
;

128 
__˝uÀvñ_t
 
	t˝uÀvñ_t
;

129 
__˝u£tid_t
 
	t˝u£tid_t
;

131 #i‚de‡
_BLKCNT_T_DECLARED


132 
__blk˙t_t
 
	tblk˙t_t
;

133 
	#_BLKCNT_T_DECLARED


	)

136 #i‚de‡
_CLOCK_T_DECLARED


137 
__˛ock_t
 
	t˛ock_t
;

138 
	#_CLOCK_T_DECLARED


	)

141 #i‚de‡
_CLOCKID_T_DECLARED


142 
__˛ockid_t
 
	t˛ockid_t
;

143 
	#_CLOCKID_T_DECLARED


	)

146 
__˝umask_t
 
	t˝umask_t
;

147 
__¸ôiˇl_t
 
	t¸ôiˇl_t
;

148 
__öt64_t
 
	tdaddr_t
;

150 #i‚de‡
_DEV_T_DECLARED


151 
__dev_t
 
	tdev_t
;

152 
	#_DEV_T_DECLARED


	)

155 #i‚de‡
_FFLAGS_T_DECLARED


156 
__fÊags_t
 
	tfÊags_t
;

157 
	#_FFLAGS_T_DECLARED


	)

160 
__fix±_t
 
	tfix±_t
;

162 #i‚de‡
_FSBLKCNT_T_DECLARED


163 
__fsblk˙t_t
 
	tfsblk˙t_t
;

164 
__fsfû˙t_t
 
	tfsfû˙t_t
;

165 
	#_FSBLKCNT_T_DECLARED


	)

168 #i‚de‡
_GID_T_DECLARED


169 
__gid_t
 
	tgid_t
;

170 
	#_GID_T_DECLARED


	)

173 #i‚de‡
_IN_ADDR_T_DECLARED


174 
__uöt32_t
 
	tö_addr_t
;

175 
	#_IN_ADDR_T_DECLARED


	)

178 #i‚de‡
_IN_PORT_T_DECLARED


179 
__uöt16_t
 
	tö_p‹t_t
;

180 
	#_IN_PORT_T_DECLARED


	)

183 #i‚de‡
_ID_T_DECLARED


184 
__id_t
 
	tid_t
;

185 
	#_ID_T_DECLARED


	)

188 #i‚de‡
_INO_T_DECLARED


189 
__öo_t
 
	töo_t
;

190 
	#_INO_T_DECLARED


	)

193 #i‚de‡
_KEY_T_DECLARED


194 
__key_t
 
	tkey_t
;

195 
	#_KEY_T_DECLARED


	)

198 #i‚de‡
_LWPID_T_DECLARED


199 
__lwpid_t
 
	tlwpid_t
;

200 
	#_LWPID_T_DECLARED


	)

203 #i‚de‡
_MODE_T_DECLARED


204 
__mode_t
 
	tmode_t
;

205 
	#_MODE_T_DECLARED


	)

208 #i‚de‡
_ACCMODE_T_DECLARED


209 
__accmode_t
 
	taccmode_t
;

210 
	#_ACCMODE_T_DECLARED


	)

213 #i‚de‡
_NLINK_T_DECLARED


214 
__∆ök_t
 
	t∆ök_t
;

215 
	#_NLINK_T_DECLARED


	)

218 #i‚de‡
_OFF_T_DECLARED


219 
__off_t
 
	toff_t
;

220 
	#_OFF_T_DECLARED


	)

223 #i‚de‡
_PID_T_DECLARED


224 
__pid_t
 
	tpid_t
;

225 
	#_PID_T_DECLARED


	)

228 
__ªgi°î_t
 
	tªgi°î_t
;

230 #i‚de‡
_RLIM_T_DECLARED


231 
__æim_t
 
	tæim_t
;

232 
	#_RLIM_T_DECLARED


	)

235 
__£gsz_t
 
	t£gsz_t
;

237 #i‚de‡
_SIZE_T_DECLARED


238 
__size_t
 
	tsize_t
;

239 
	#_SIZE_T_DECLARED


	)

242 #i‚de‡
_SSIZE_T_DECLARED


243 
__ssize_t
 
	tssize_t
;

244 
	#_SSIZE_T_DECLARED


	)

247 #i‚de‡
_SUSECONDS_T_DECLARED


248 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

249 
	#_SUSECONDS_T_DECLARED


	)

252 #i‚de‡
_TIME_T_DECLARED


253 
__time_t
 
	ttime_t
;

254 
	#_TIME_T_DECLARED


	)

257 #i‚de‡
_TIMER_T_DECLARED


258 
__timî_t
 
	ttimî_t
;

259 
	#_TIMER_T_DECLARED


	)

262 #i‚de‡
_MQD_T_DECLARED


263 
__mqd_t
 
	tmqd_t
;

264 
	#_MQD_T_DECLARED


	)

267 
__u_ªgi°î_t
 
	tu_ªgi°î_t
;

269 #i‚de‡
_UID_T_DECLARED


270 
__uid_t
 
	tuid_t
;

271 
	#_UID_T_DECLARED


	)

274 #i‚de‡
_USECONDS_T_DECLARED


275 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

276 
	#_USECONDS_T_DECLARED


	)

279 
__vm_off£t_t
 
	tvm_off£t_t
;

280 
__vm_ooff£t_t
 
	tvm_ooff£t_t
;

281 
__vm_∑ddr_t
 
	tvm_∑ddr_t
;

282 
__vm_pödex_t
 
	tvm_pödex_t
;

283 
__vm_size_t
 
	tvm_size_t
;

285 #ifde‡
_KERNEL


286 
	tboﬁón_t
;

287 
devi˚
 *
	tdevi˚_t
;

288 
__ötÂå_t
 
	tötÂå_t
;

298 
__uöt32_t
 
	töåmask_t
;

300 
__uötÂå_t
 
	tuötÂå_t
;

301 
__uöt64_t
 
	tuoff_t
;

302 
	tvm_mem©å_t
;

303 
vm_∑ge
 *
	tvm_∑ge_t
;

305 
	#off£tof
(
ty≥
, 
fõld
Ë
	`__off£tof
—y≥, fõld)

	)

313 #i‡
__BSD_VISIBLE


315 
	~<sys/£À˘.h
>

322 
	#maj‹
(
x
Ë(()(((
u_öt
)(xË>> 8)&0xff)Ë

	)

323 
	#mö‹
(
x
Ë(()((x)&0xffff00ff)Ë

	)

324 
	#makedev
(
x
,
y
Ë((
dev_t
)(((xË<< 8Ë| (y))Ë

	)

331 #i‚de‡
_KERNEL


332 
	g__BEGIN_DECLS


333 #i‚de‡
_FTRUNCATE_DECLARED


334 
	#_FTRUNCATE_DECLARED


	)

335 
·runˇã
(, 
off_t
);

337 #i‚de‡
_LSEEK_DECLARED


338 
	#_LSEEK_DECLARED


	)

339 
off_t
 
l£ek
(, off_t, );

341 #i‚de‡
_MMAP_DECLARED


342 
	#_MMAP_DECLARED


	)

343 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

345 #i‚de‡
_TRUNCATE_DECLARED


346 
	#_TRUNCATE_DECLARED


	)

347 
åunˇã
(c⁄° *, 
off_t
);

349 
	g__END_DECLS


	@/usr/include/sys/uio.h

33 #i‚de‡
_SYS_UIO_H_


34 
	#_SYS_UIO_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

40 #i‚de‡
_SSIZE_T_DECLARED


41 
__ssize_t
 
	tssize_t
;

42 
	#_SSIZE_T_DECLARED


	)

45 #i‚de‡
_OFF_T_DECLARED


46 
__off_t
 
	toff_t
;

47 
	#_OFF_T_DECLARED


	)

50 #i‡
__BSD_VISIBLE


51 
	euio_rw
 { 
	mUIO_READ
, 
	mUIO_WRITE
 };

54 
	euio_£g
 {

55 
	mUIO_USERSPACE
,

56 
	mUIO_SYSSPACE
,

57 
	mUIO_NOCOPY


61 #ifde‡
_KERNEL


63 
	suio
 {

64 
iovec
 *
	muio_iov
;

65 
	muio_iov˙t
;

66 
off_t
 
	muio_off£t
;

67 
ssize_t
 
	muio_ªsid
;

68 
uio_£g
 
	muio_£gÊg
;

69 
uio_rw
 
	muio_rw
;

70 
thªad
 *
	muio_td
;

84 
	#UIO_MAXIOV
 1024

	)

86 
	gvm_obje˘
;

87 
	gvm_∑ge
;

89 
uio
 *
˛⁄euio
(uiÿ*
ui›
);

90 
c›yö‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

91 
size_t
 
Àn
, 
£g
);

92 
c›yöiov
(
iovec
 *
iovp
, 
u_öt
 
iov˙t
, iove¯**
iov
,

93 
îr‹
);

94 
c›yö°r‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

95 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
c›õd
, 
£g
);

96 
c›yöuio
(
iovec
 *
iovp
, 
u_öt
 
iov˙t
, 
uio
 **
ui›
);

97 
c›yout_m≠
(
thªad
 *
td
, 
vm_off£t_t
 *
addr
, 
size_t
 
sz
);

98 
c›yout_unm≠
(
thªad
 *
td
, 
vm_off£t_t
 
addr
, 
size_t
 
sz
);

99 
uio_yõld
();

100 
uiomove
(*
˝
, 
n
, 
uio
 *uio);

101 
uiomove_‰ombuf
(*
buf
, 
buÊí
, 
uio
 *uio);

102 
uiomove_‰omphys
(
vm_∑ge
 *
ma
[], 
vm_off£t_t
 
off£t
, 
n
,

103 
uio
 *uio);

104 
uiomoveco
(*
˝
, 
n
, 
uio
 *uio, 
di•oßbÀ
);

108 
__BEGIN_DECLS


109 
ssize_t
 
ªadv
(, c⁄° 
iovec
 *, );

110 
ssize_t
 
wrôev
(, c⁄° 
iovec
 *, );

111 #i‡
__BSD_VISIBLE


112 
ssize_t
 
¥ódv
(, c⁄° 
iovec
 *, , 
off_t
);

113 
ssize_t
 
pwrôev
(, c⁄° 
iovec
 *, , 
off_t
);

115 
	g__END_DECLS


	@/usr/include/sys/un.h

33 #i‚de‡
_SYS_UN_H_


34 
	#_SYS_UN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

39 #i‚de‡
_SA_FAMILY_T_DECLARED


40 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

41 
	#_SA_FAMILY_T_DECLARED


	)

47 
	ssockaddr_un
 {

48 
	msun_Àn
;

49 
ß_Ámûy_t
 
	msun_Ámûy
;

50 
	msun_∑th
[104];

53 #i‡
__BSD_VISIBLE


56 
	#LOCAL_PEERCRED
 0x001

	)

57 
	#LOCAL_CREDS
 0x002

	)

58 
	#LOCAL_CONNWAIT
 0x004

	)

60 #i‚de‡
_KERNEL


63 
	#SUN_LEN
(
su
) \

64 ((*(
su
)Ë- ((su)->
sun_∑th
Ë+ 
	`°æí
((su)->sun_∑th))

	)

	@/usr/include/sys/user.h

35 #i‚de‡
_SYS_USER_H_


36 
	#_SYS_USER_H_


	)

38 
	~<machöe/pcb.h
>

39 #i‚de‡
_KERNEL


41 
	~<sys/î∫o.h
>

42 
	~<sys/time.h
>

43 
	~<sys/ªsour˚.h
>

44 
	~<sys/u¸ed.h
>

45 
	~<sys/uio.h
>

46 
	~<sys/queue.h
>

47 
	~<sys/_lock.h
>

48 
	~<sys/_muãx.h
>

49 
	~<sys/¥oc.h
>

50 
	~<vm/vm.h
>

51 
	~<vm/vm_∑øm.h
>

52 
	~<vm/pm≠.h
>

53 
	~<vm/vm_m≠.h
>

55 #i‚de‡
_SYS_RESOURCEVAR_H_


56 
	~<sys/ªsour˚v¨.h
>

58 #i‚de‡
_SYS_SIGNALVAR_H_


59 
	~<sys/sig«lv¨.h
>

61 #i‚de‡
_SYS_SOCKET_VAR_H_


62 
	~<sys/sockë.h
>

86 
	#KI_NSPARE_INT
 9

	)

87 
	#KI_NSPARE_LONG
 12

	)

88 
	#KI_NSPARE_PTR
 6

	)

90 #i‚de‡
_KERNEL


91 #i‚de‡
KINFO_PROC_SIZE


96 
	#WMESGLEN
 8

	)

97 
	#LOCKNAMELEN
 8

	)

98 
	#OCOMMLEN
 16

	)

99 
	#COMMLEN
 19

	)

100 
	#KI_EMULNAMELEN
 16

	)

101 
	#KI_NGROUPS
 16

	)

102 
	#LOGNAMELEN
 17

	)

108 
	#KI_CRF_GRP_OVERFLOW
 0x80000000

	)

110 
	sköfo_¥oc
 {

111 
	mki_°ru˘size
;

112 
	mki_œyout
;

113 
∑rgs
 *
	mki_¨gs
;

114 
¥oc
 *
	mki_∑ddr
;

115 
u£r
 *
	mki_addr
;

116 
vnode
 *
	mki_åa˚p
;

117 
vnode
 *
	mki_ãxtvp
;

118 
fûedesc
 *
	mki_fd
;

119 
vm•a˚
 *
	mki_vm•a˚
;

120 *
	mki_wch™
;

121 
pid_t
 
	mki_pid
;

122 
pid_t
 
	mki_µid
;

123 
pid_t
 
	mki_pgid
;

124 
pid_t
 
	mki_çgid
;

125 
pid_t
 
	mki_sid
;

126 
pid_t
 
	mki_tsid
;

127 
	mki_jobc
;

128 
	mki_•¨e_sh‹t1
;

129 
dev_t
 
	mki_tdev
;

130 
sig£t_t
 
	mki_sigli°
;

131 
sig£t_t
 
	mki_sigmask
;

132 
sig£t_t
 
	mki_sigign‹e
;

133 
sig£t_t
 
	mki_sigˇtch
;

134 
uid_t
 
	mki_uid
;

135 
uid_t
 
	mki_ruid
;

136 
uid_t
 
	mki_svuid
;

137 
gid_t
 
	mki_rgid
;

138 
gid_t
 
	mki_svgid
;

139 
	mki_ngroups
;

140 
	mki_•¨e_sh‹t2
;

141 
gid_t
 
	mki_groups
[
KI_NGROUPS
];

142 
vm_size_t
 
	mki_size
;

143 
£gsz_t
 
	mki_rssize
;

144 
£gsz_t
 
	mki_swrss
;

145 
£gsz_t
 
	mki_tsize
;

146 
£gsz_t
 
	mki_dsize
;

147 
£gsz_t
 
	mki_ssize
;

148 
u_sh‹t
 
	mki_x°©
;

149 
u_sh‹t
 
	mki_acÊag
;

150 
fix±_t
 
	mki_p˘˝u
;

151 
u_öt
 
	mki_e°˝u
;

152 
u_öt
 
	mki_¶±ime
;

153 
u_öt
 
	mki_swtime
;

154 
	mki_•¨eöt1
;

155 
u_öt64_t
 
	mki_ru¡ime
;

156 
timevÆ
 
	mki_°¨t
;

157 
timevÆ
 
	mki_chûdtime
;

158 
	mki_Êag
;

159 
	mki_kiÊag
;

160 
	mki_åa˚Êag
;

161 
	mki_°©
;

162 sig√d 
	mki_ni˚
;

163 
	mki_lock
;

164 
	mki_rqödex
;

165 
u_ch¨
 
	mki_⁄˝u
;

166 
u_ch¨
 
	mki_œ°˝u
;

167 
	mki_ocomm
[
OCOMMLEN
+1];

168 
	mki_wmesg
[
WMESGLEN
+1];

169 
	mki_logö
[
LOGNAMELEN
+1];

170 
	mki_lock«me
[
LOCKNAMELEN
+1];

171 
	mki_comm
[
COMMLEN
+1];

172 
	mki_emul
[
KI_EMULNAMELEN
+1];

178 
	mki_•¨e°rögs
[68];

179 
	mki_•¨eöts
[
KI_NSPARE_INT
];

180 
u_öt
 
	mki_¸_Êags
;

181 
	mki_jid
;

182 
	mki_numthªads
;

183 
lwpid_t
 
	mki_tid
;

184 
¥i‹ôy
 
	mki_¥i
;

185 
rußge
 
	mki_rußge
;

187 
rußge
 
	mki_rußge_ch
;

188 
pcb
 *
	mki_pcb
;

189 *
	mki_k°ack
;

190 *
	mki_ud©a
;

191 
thªad
 *
	mki_tdaddr
;

197 *
	mki_•¨ïås
[
KI_NSPARE_PTR
];

198 
	mki_•¨ñ⁄gs
[
KI_NSPARE_LONG
];

199 
	mki_sÊag
;

200 
	mki_tdÊags
;

202 
fûl_köfo_¥oc
(
¥oc
 *, 
köfo_¥oc
 *);

204 
	#ki_chûd°ime
 
ki_rußge_ch
.
ru_°ime


	)

205 
	#ki_chûdutime
 
ki_rußge_ch
.
ru_utime


	)

211 
	#PS_INMEM
 0x00001

	)

214 
	#KI_CTTY
 0x00000001

	)

215 
	#KI_SLEADER
 0x00000002

	)

216 
	#KI_LOCKBLOCK
 0x00000004

	)

223 
	su£r
 {

224 
p°©s
 
	mu_°©s
;

225 
köfo_¥oc
 
	mu_k¥oc
;

232 
	#KF_TYPE_NONE
 0

	)

233 
	#KF_TYPE_VNODE
 1

	)

234 
	#KF_TYPE_SOCKET
 2

	)

235 
	#KF_TYPE_PIPE
 3

	)

236 
	#KF_TYPE_FIFO
 4

	)

237 
	#KF_TYPE_KQUEUE
 5

	)

238 
	#KF_TYPE_CRYPTO
 6

	)

239 
	#KF_TYPE_MQUEUE
 7

	)

240 
	#KF_TYPE_SHM
 8

	)

241 
	#KF_TYPE_SEM
 9

	)

242 
	#KF_TYPE_PTS
 10

	)

243 
	#KF_TYPE_UNKNOWN
 255

	)

245 
	#KF_VTYPE_VNON
 0

	)

246 
	#KF_VTYPE_VREG
 1

	)

247 
	#KF_VTYPE_VDIR
 2

	)

248 
	#KF_VTYPE_VBLK
 3

	)

249 
	#KF_VTYPE_VCHR
 4

	)

250 
	#KF_VTYPE_VLNK
 5

	)

251 
	#KF_VTYPE_VSOCK
 6

	)

252 
	#KF_VTYPE_VFIFO
 7

	)

253 
	#KF_VTYPE_VBAD
 8

	)

254 
	#KF_VTYPE_UNKNOWN
 255

	)

256 
	#KF_FD_TYPE_CWD
 -1

	)

257 
	#KF_FD_TYPE_ROOT
 -2

	)

258 
	#KF_FD_TYPE_JAIL
 -3

	)

260 
	#KF_FLAG_READ
 0x00000001

	)

261 
	#KF_FLAG_WRITE
 0x00000002

	)

262 
	#KF_FLAG_APPEND
 0x00000004

	)

263 
	#KF_FLAG_ASYNC
 0x00000008

	)

264 
	#KF_FLAG_FSYNC
 0x00000010

	)

265 
	#KF_FLAG_NONBLOCK
 0x00000020

	)

266 
	#KF_FLAG_DIRECT
 0x00000040

	)

267 
	#KF_FLAG_HASLOCK
 0x00000080

	)

273 #i‡
deföed
(
__amd64__
)

274 
	#KINFO_OFILE_SIZE
 1328

	)

276 #i‡
deföed
(
__i386__
)

277 
	#KINFO_OFILE_SIZE
 1324

	)

280 
	sköfo_ofûe
 {

281 
	mkf_°ru˘size
;

282 
	mkf_ty≥
;

283 
	mkf_fd
;

284 
	mkf_ªf_cou¡
;

285 
	mkf_Êags
;

287 
off_t
 
	mkf_off£t
;

288 
	mkf_vnode_ty≥
;

289 
	mkf_sock_domaö
;

290 
	mkf_sock_ty≥
;

291 
	mkf_sock_¥Ÿocﬁ
;

292 
	mkf_∑th
[
PATH_MAX
];

293 
sockaddr_°‹age
 
	mkf_ß_loˇl
;

294 
sockaddr_°‹age
 
	mkf_ß_≥î
;

297 #i‡
deföed
(
__amd64__
Ë|| deföed(
__i386__
)

298 
	#KINFO_FILE_SIZE
 1392

	)

301 
	sköfo_fûe
 {

302 
	mkf_°ru˘size
;

303 
	mkf_ty≥
;

304 
	mkf_fd
;

305 
	mkf_ªf_cou¡
;

306 
	mkf_Êags
;

307 
	m_kf_∑d0
;

308 
öt64_t
 
	mkf_off£t
;

309 
	mkf_vnode_ty≥
;

310 
	mkf_sock_domaö
;

311 
	mkf_sock_ty≥
;

312 
	mkf_sock_¥Ÿocﬁ
;

313 
sockaddr_°‹age
 
	mkf_ß_loˇl
;

314 
sockaddr_°‹age
 
	mkf_ß_≥î
;

315 
	m_kf_i•¨e
[16];

317 
	mkf_∑th
[
PATH_MAX
];

324 
	#KVME_TYPE_NONE
 0

	)

325 
	#KVME_TYPE_DEFAULT
 1

	)

326 
	#KVME_TYPE_VNODE
 2

	)

327 
	#KVME_TYPE_SWAP
 3

	)

328 
	#KVME_TYPE_DEVICE
 4

	)

329 
	#KVME_TYPE_PHYS
 5

	)

330 
	#KVME_TYPE_DEAD
 6

	)

331 
	#KVME_TYPE_SG
 7

	)

332 
	#KVME_TYPE_UNKNOWN
 255

	)

334 
	#KVME_PROT_READ
 0x00000001

	)

335 
	#KVME_PROT_WRITE
 0x00000002

	)

336 
	#KVME_PROT_EXEC
 0x00000004

	)

338 
	#KVME_FLAG_COW
 0x00000001

	)

339 
	#KVME_FLAG_NEEDS_COPY
 0x00000002

	)

340 
	#KVME_FLAG_NOCOREDUMP
 0x00000004

	)

342 #i‡
deföed
(
__amd64__
)

343 
	#KINFO_OVMENTRY_SIZE
 1168

	)

345 #i‡
deföed
(
__i386__
)

346 
	#KINFO_OVMENTRY_SIZE
 1128

	)

349 
	sköfo_ovmíåy
 {

350 
	mkve_°ru˘size
;

351 
	mkve_ty≥
;

352 *
	mkve_°¨t
;

353 *
	mkve_íd
;

354 
	mkve_Êags
;

355 
	mkve_ªsidít
;

356 
	mkve_¥iv©e_ªsidít
;

357 
	mkve_¥Ÿe˘i⁄
;

358 
	mkve_ªf_cou¡
;

359 
	mkve_shadow_cou¡
;

360 
	mkve_∑th
[
PATH_MAX
];

361 *
	m_kve_p•¨e
[8];

362 
off_t
 
	mkve_off£t
;

363 
uöt64_t
 
	mkve_fûeid
;

364 
dev_t
 
	mkve_fsid
;

365 
	m_kve_i•¨e
[3];

368 #i‡
deföed
(
__amd64__
Ë|| deföed(
__i386__
)

369 
	#KINFO_VMENTRY_SIZE
 1160

	)

372 
	sköfo_vmíåy
 {

373 
	mkve_°ru˘size
;

374 
	mkve_ty≥
;

375 
uöt64_t
 
	mkve_°¨t
;

376 
uöt64_t
 
	mkve_íd
;

377 
uöt64_t
 
	mkve_off£t
;

378 
uöt64_t
 
	mkve_fûeid
;

379 
uöt32_t
 
	mkve_fsid
;

380 
	mkve_Êags
;

381 
	mkve_ªsidít
;

382 
	mkve_¥iv©e_ªsidít
;

383 
	mkve_¥Ÿe˘i⁄
;

384 
	mkve_ªf_cou¡
;

385 
	mkve_shadow_cou¡
;

386 
	m_kve_∑d0
;

387 
	m_kve_i•¨e
[16];

389 
	mkve_∑th
[
PATH_MAX
];

397 
	#KKST_MAXLEN
 1024

	)

399 
	#KKST_STATE_STACKOK
 0

	)

400 
	#KKST_STATE_SWAPPED
 1

	)

401 
	#KKST_STATE_RUNNING
 2

	)

403 #i‡
deföed
(
__amd64__
Ë|| deföed(
__i386__
)

404 
	#KINFO_KSTACK_SIZE
 1096

	)

407 
	sköfo_k°ack
 {

408 
lwpid_t
 
	mkk°_tid
;

409 
	mkk°_°©e
;

410 
	mkk°_åa˚
[
KKST_MAXLEN
];

411 
	m_kk°_i•¨e
[16];

	@/usr/include/sys/wait.h

33 #i‚de‡
_SYS_WAIT_H_


34 
	#_SYS_WAIT_H_


	)

36 
	~<sys/cdefs.h
>

47 #i‡
__BSD_VISIBLE


48 
	#WCOREFLAG
 0200

	)

50 
	#_W_INT
(
i
Ë(i)

	)

52 
	#_WSTATUS
(
x
Ë(
	`_W_INT
(xË& 0177)

	)

53 
	#_WSTOPPED
 0177

	)

54 
	#WIFSTOPPED
(
x
Ë(
	`_WSTATUS
(xË=
_WSTOPPED
)

	)

55 
	#WSTOPSIG
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

56 
	#WIFSIGNALED
(
x
Ë(
	`_WSTATUS
(xË!
_WSTOPPED
 && _WSTATUS(xË!0)

	)

57 
	#WTERMSIG
(
x
Ë(
	`_WSTATUS
(x))

	)

58 
	#WIFEXITED
(
x
Ë(
	`_WSTATUS
(xË=0)

	)

59 
	#WEXITSTATUS
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

60 
	#WIFCONTINUED
(
x
Ë(x =0x13Ë

	)

61 #i‡
__BSD_VISIBLE


62 
	#WCOREDUMP
(
x
Ë(
	`_W_INT
(xË& 
WCOREFLAG
)

	)

64 
	#W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

65 
	#W_STOPCODE
(
sig
Ë((sigË<< 8 | 
_WSTOPPED
)

	)

78 
	#WNOHANG
 1

	)

79 
	#WUNTRACED
 2

	)

80 
	#WSTOPPED
 
WUNTRACED


	)

81 
	#WCONTINUED
 4

	)

82 
	#WNOWAIT
 8

	)

84 #i‡
__BSD_VISIBLE


85 
	#WLINUXCLONE
 0x80000000

	)

91 #i‡
__BSD_VISIBLE


92 
	#WAIT_ANY
 (-1Ë

	)

93 
	#WAIT_MYPGRP
 0

	)

96 #i‚de‡
_KERNEL


97 
	~<sys/ty≥s.h
>

99 
__BEGIN_DECLS


100 
pid_t
 
waô
(*);

101 
pid_t
 
waôpid
(pid_t, *, );

102 #i‡
__BSD_VISIBLE


103 
	grußge
;

104 
pid_t
 
waô3
(*, , 
rußge
 *);

105 
pid_t
 
waô4
’id_t, *, , 
rußge
 *);

107 
	g__END_DECLS


	@/usr/include/sysexits.h

36 #i‚def 
_SYSEXITS_H_


37 
	#_SYSEXITS_H_


	)

96 
	#EX_OK
 0

	)

98 
	#EX__BASE
 64

	)

100 
	#EX_USAGE
 64

	)

101 
	#EX_DATAERR
 65

	)

102 
	#EX_NOINPUT
 66

	)

103 
	#EX_NOUSER
 67

	)

104 
	#EX_NOHOST
 68

	)

105 
	#EX_UNAVAILABLE
 69

	)

106 
	#EX_SOFTWARE
 70

	)

107 
	#EX_OSERR
 71

	)

108 
	#EX_OSFILE
 72

	)

109 
	#EX_CANTCREAT
 73

	)

110 
	#EX_IOERR
 74

	)

111 
	#EX_TEMPFAIL
 75

	)

112 
	#EX_PROTOCOL
 76

	)

113 
	#EX_NOPERM
 77

	)

114 
	#EX_CONFIG
 78

	)

116 
	#EX__MAX
 78

	)

	@/usr/include/syslog.h

33 #i‚de‡
_SYS_SYSLOG_H_


34 
	#_SYS_SYSLOG_H_


	)

36 
	#_PATH_LOG
 "/v¨/run/log"

	)

37 
	#_PATH_LOG_PRIV
 "/v¨/run/log¥iv"

	)

38 
	#_PATH_OLDLOG
 "/dev/log"

	)

49 
	#LOG_EMERG
 0

	)

50 
	#LOG_ALERT
 1

	)

51 
	#LOG_CRIT
 2

	)

52 
	#LOG_ERR
 3

	)

53 
	#LOG_WARNING
 4

	)

54 
	#LOG_NOTICE
 5

	)

55 
	#LOG_INFO
 6

	)

56 
	#LOG_DEBUG
 7

	)

58 
	#LOG_PRIMASK
 0x07

	)

60 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

61 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

63 #ifde‡
SYSLOG_NAMES


64 
	#INTERNAL_NOPRI
 0x10

	)

66 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
((
LOG_NFACILITIES
<<3), 0)

	)

67 
	s_code
 {

68 c⁄° *
	mc_«me
;

69 
	mc_vÆ
;

70 } 
	tCODE
;

72 
CODE
 
	g¥i‹ôy«mes
[] = {

73 { "Æît", 
LOG_ALERT
, },

74 { "¸ô", 
LOG_CRIT
, },

75 { "debug", 
LOG_DEBUG
, },

76 { "emîg", 
LOG_EMERG
, },

77 { "îr", 
LOG_ERR
, },

78 { "îr‹", 
LOG_ERR
, },

79 { "öfo", 
LOG_INFO
, },

80 { "n⁄e", 
INTERNAL_NOPRI
, },

81 { "nŸi˚", 
LOG_NOTICE
, },

82 { "∑nic", 
LOG_EMERG
, },

83 { "w¨n", 
LOG_WARNING
, },

84 { "w¨nög", 
LOG_WARNING
, },

85 { 
NULL
, -1, }

90 
	#LOG_KERN
 (0<<3Ë

	)

91 
	#LOG_USER
 (1<<3Ë

	)

92 
	#LOG_MAIL
 (2<<3Ë

	)

93 
	#LOG_DAEMON
 (3<<3Ë

	)

94 
	#LOG_AUTH
 (4<<3Ë

	)

95 
	#LOG_SYSLOG
 (5<<3Ë

	)

96 
	#LOG_LPR
 (6<<3Ë

	)

97 
	#LOG_NEWS
 (7<<3Ë

	)

98 
	#LOG_UUCP
 (8<<3Ë

	)

99 
	#LOG_CRON
 (9<<3Ë

	)

100 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

105 
	#LOG_NTP
 (12<<3Ë

	)

106 
	#LOG_SECURITY
 (13<<3Ë

	)

107 
	#LOG_CONSOLE
 (14<<3Ë

	)

110 
	#LOG_LOCAL0
 (16<<3Ë

	)

111 
	#LOG_LOCAL1
 (17<<3Ë

	)

112 
	#LOG_LOCAL2
 (18<<3Ë

	)

113 
	#LOG_LOCAL3
 (19<<3Ë

	)

114 
	#LOG_LOCAL4
 (20<<3Ë

	)

115 
	#LOG_LOCAL5
 (21<<3Ë

	)

116 
	#LOG_LOCAL6
 (22<<3Ë

	)

117 
	#LOG_LOCAL7
 (23<<3Ë

	)

119 
	#LOG_NFACILITIES
 24

	)

120 
	#LOG_FACMASK
 0x03f8

	)

122 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

124 #ifde‡
SYSLOG_NAMES


125 
CODE
 
	gÁcûôy«mes
[] = {

126 { "auth", 
LOG_AUTH
, },

127 { "auth¥iv", 
LOG_AUTHPRIV
, },

128 { "c⁄sﬁe", 
LOG_CONSOLE
, },

129 { "¸⁄", 
LOG_CRON
, },

130 { "d´m⁄", 
LOG_DAEMON
, },

131 { "·p", 
LOG_FTP
, },

132 { "kîn", 
LOG_KERN
, },

133 { "Õr", 
LOG_LPR
, },

134 { "maû", 
LOG_MAIL
, },

135 { "m¨k", 
INTERNAL_MARK
, },

136 { "√ws", 
LOG_NEWS
, },

137 { "¡p", 
LOG_NTP
, },

138 { "£curôy", 
LOG_SECURITY
, },

139 { "sy¶og", 
LOG_SYSLOG
, },

140 { "u£r", 
LOG_USER
, },

141 { "uu˝", 
LOG_UUCP
, },

142 { "loˇl0", 
LOG_LOCAL0
, },

143 { "loˇl1", 
LOG_LOCAL1
, },

144 { "loˇl2", 
LOG_LOCAL2
, },

145 { "loˇl3", 
LOG_LOCAL3
, },

146 { "loˇl4", 
LOG_LOCAL4
, },

147 { "loˇl5", 
LOG_LOCAL5
, },

148 { "loˇl6", 
LOG_LOCAL6
, },

149 { "loˇl7", 
LOG_LOCAL7
, },

150 { 
NULL
, -1, }

154 #ifde‡
_KERNEL


155 
	#LOG_PRINTF
 -1

	)

161 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

162 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

170 
	#LOG_PID
 0x01

	)

171 
	#LOG_CONS
 0x02

	)

172 
	#LOG_ODELAY
 0x04

	)

173 
	#LOG_NDELAY
 0x08

	)

174 
	#LOG_NOWAIT
 0x10

	)

175 
	#LOG_PERROR
 0x20

	)

177 #ifde‡
_KERNEL


188 
	~<sys/cdefs.h
>

189 
	~<sys/_ty≥s.h
>

191 
__BEGIN_DECLS


192 
˛o£log
();

193 
›ílog
(const *, , );

194 
£éogmask
();

195 
	$sy¶og
(, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

196 #i‡
__BSD_VISIBLE


197 
	$vsy¶og
(, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(2, 0);

199 
__END_DECLS


	@/usr/include/tar.h

39 #i‚de‡
_TAR_H


40 
	#_TAR_H


	)

42 
	#TMAGIC
 "u°¨"

	)

43 
	#TMAGLEN
 6

	)

44 
	#TVERSION
 "00"

	)

45 
	#TVERSLEN
 2

	)

48 
	#REGTYPE
 '0'

	)

49 
	#AREGTYPE
 '\0'

	)

50 
	#LNKTYPE
 '1'

	)

51 
	#SYMTYPE
 '2'

	)

52 
	#CHRTYPE
 '3'

	)

53 
	#BLKTYPE
 '4'

	)

54 
	#DIRTYPE
 '5'

	)

55 
	#FIFOTYPE
 '6'

	)

56 
	#CONTTYPE
 '7'

	)

59 
	#TSUID
 04000

	)

60 
	#TSGID
 02000

	)

61 
	#TSVTX
 01000

	)

63 
	#TUREAD
 00400

	)

64 
	#TUWRITE
 00200

	)

65 
	#TUEXEC
 00100

	)

66 
	#TGREAD
 00040

	)

67 
	#TGWRITE
 00020

	)

68 
	#TGEXEC
 00010

	)

69 
	#TOREAD
 00004

	)

70 
	#TOWRITE
 00002

	)

71 
	#TOEXEC
 00001

	)

	@/usr/include/termcap.h

36 #i‚de‡
NCURSES_TERMCAP_H_ö˛


37 
	#NCURSES_TERMCAP_H_ö˛
 1

	)

39 #unde‡
NCURSES_VERSION


40 
	#NCURSES_VERSION
 "5.7"

	)

42 
	~<ncur£s_dŒ.h
>

44 #ifde‡
__˝lu•lus


49 
	~<sys/ty≥s.h
>

51 #unde‡
NCURSES_CONST


52 
	#NCURSES_CONST
 c⁄°

	)

54 #unde‡
NCURSES_OSPEED


55 
	#NCURSES_OSPEED
 

	)

57 
NCURSES_EXPORT_VAR
(Ë
PC
;

58 
NCURSES_EXPORT_VAR
(*Ë
UP
;

59 
NCURSES_EXPORT_VAR
(*Ë
BC
;

60 
NCURSES_EXPORT_VAR
(
NCURSES_OSPEED
Ë
o•ìd
;

62 #i‡!
deföed
(
NCURSES_TERM_H_ö˛
)

63 
NCURSES_EXPORT
(*Ë
tgë°r
 (
NCURSES_CONST
 *, **);

64 
NCURSES_EXPORT
(*Ë
tgŸo
 (const *, , );

65 
NCURSES_EXPORT
(Ë
tgëít
 (*, const *);

66 
NCURSES_EXPORT
(Ë
tgëÊag
 (
NCURSES_CONST
 *);

67 
NCURSES_EXPORT
(Ë
tgënum
 (
NCURSES_CONST
 *);

68 
NCURSES_EXPORT
(Ë
çuts
 (const *, , (*)());

71 #ifde‡
__˝lu•lus


	@/usr/include/termios.h

33 #i‚de‡
_SYS_TERMIOS_H_


34 
	#_SYS_TERMIOS_H_


	)

36 
	~<sys/_ty≥s.h
>

37 #i‚de‡
_PID_T_DECLARED


38 
__pid_t
 
	tpid_t
;

39 
	#_PID_T_DECLARED


	)

49 
	#VEOF
 0

	)

50 
	#VEOL
 1

	)

51 #i‚de‡
_POSIX_SOURCE


52 
	#VEOL2
 2

	)

54 
	#VERASE
 3

	)

55 #i‚de‡
_POSIX_SOURCE


56 
	#VWERASE
 4

	)

58 
	#VKILL
 5

	)

59 #i‚de‡
_POSIX_SOURCE


60 
	#VREPRINT
 6

	)

61 
	#VERASE2
 7

	)

64 
	#VINTR
 8

	)

65 
	#VQUIT
 9

	)

66 
	#VSUSP
 10

	)

67 #i‚de‡
_POSIX_SOURCE


68 
	#VDSUSP
 11

	)

70 
	#VSTART
 12

	)

71 
	#VSTOP
 13

	)

72 #i‚de‡
_POSIX_SOURCE


73 
	#VLNEXT
 14

	)

74 
	#VDISCARD
 15

	)

76 
	#VMIN
 16

	)

77 
	#VTIME
 17

	)

78 #i‚de‡
_POSIX_SOURCE


79 
	#VSTATUS
 18

	)

82 
	#NCCS
 20

	)

84 
	#_POSIX_VDISABLE
 0xff

	)

89 
	#IGNBRK
 0x00000001

	)

90 
	#BRKINT
 0x00000002

	)

91 
	#IGNPAR
 0x00000004

	)

92 
	#PARMRK
 0x00000008

	)

93 
	#INPCK
 0x00000010

	)

94 
	#ISTRIP
 0x00000020

	)

95 
	#INLCR
 0x00000040

	)

96 
	#IGNCR
 0x00000080

	)

97 
	#ICRNL
 0x00000100

	)

98 
	#IXON
 0x00000200

	)

99 
	#IXOFF
 0x00000400

	)

100 #i‚de‡
_POSIX_SOURCE


101 
	#IXANY
 0x00000800

	)

102 
	#IMAXBEL
 0x00002000

	)

108 
	#OPOST
 0x00000001

	)

109 #i‚de‡
_POSIX_SOURCE


110 
	#ONLCR
 0x00000002

	)

111 
	#TABDLY
 0x00000004

	)

112 
	#TAB0
 0x00000000

	)

113 
	#TAB3
 0x00000004

	)

114 #i‚de‡
_KERNEL


115 
	#OXTABS
 
TAB3


	)

117 
	#ONOEOT
 0x00000008

	)

118 
	#OCRNL
 0x00000010

	)

119 
	#ONOCR
 0x00000020

	)

120 
	#ONLRET
 0x00000040

	)

126 #i‚de‡
_POSIX_SOURCE


127 
	#CIGNORE
 0x00000001

	)

129 
	#CSIZE
 0x00000300

	)

130 
	#CS5
 0x00000000

	)

131 
	#CS6
 0x00000100

	)

132 
	#CS7
 0x00000200

	)

133 
	#CS8
 0x00000300

	)

134 
	#CSTOPB
 0x00000400

	)

135 
	#CREAD
 0x00000800

	)

136 
	#PARENB
 0x00001000

	)

137 
	#PARODD
 0x00002000

	)

138 
	#HUPCL
 0x00004000

	)

139 
	#CLOCAL
 0x00008000

	)

140 #i‚de‡
_POSIX_SOURCE


141 
	#CCTS_OFLOW
 0x00010000

	)

142 
	#CRTSCTS
 (
CCTS_OFLOW
 | 
CRTS_IFLOW
)

	)

143 
	#CRTS_IFLOW
 0x00020000

	)

144 
	#CDTR_IFLOW
 0x00040000

	)

145 
	#CDSR_OFLOW
 0x00080000

	)

146 
	#CCAR_OFLOW
 0x00100000

	)

147 #i‚de‡
_KERNEL


148 
	#MDMBUF
 
CCAR_OFLOW


	)

161 #i‚de‡
_POSIX_SOURCE


162 
	#ECHOKE
 0x00000001

	)

164 
	#ECHOE
 0x00000002

	)

165 
	#ECHOK
 0x00000004

	)

166 
	#ECHO
 0x00000008

	)

167 
	#ECHONL
 0x00000010

	)

168 #i‚de‡
_POSIX_SOURCE


169 
	#ECHOPRT
 0x00000020

	)

170 
	#ECHOCTL
 0x00000040

	)

172 
	#ISIG
 0x00000080

	)

173 
	#ICANON
 0x00000100

	)

174 #i‚de‡
_POSIX_SOURCE


175 
	#ALTWERASE
 0x00000200

	)

177 
	#IEXTEN
 0x00000400

	)

178 
	#EXTPROC
 0x00000800

	)

179 
	#TOSTOP
 0x00400000

	)

180 #i‚de‡
_POSIX_SOURCE


181 
	#FLUSHO
 0x00800000

	)

182 
	#NOKERNINFO
 0x02000000

	)

183 
	#PENDIN
 0x20000000

	)

185 
	#NOFLSH
 0x80000000

	)

187 
	ttcÊag_t
;

188 
	tcc_t
;

189 
	t•ìd_t
;

191 
	sãrmios
 {

192 
tcÊag_t
 
	mc_iÊag
;

193 
tcÊag_t
 
	mc_oÊag
;

194 
tcÊag_t
 
	mc_cÊag
;

195 
tcÊag_t
 
	mc_lÊag
;

196 
cc_t
 
	mc_cc
[
NCCS
];

197 
•ìd_t
 
	mc_i•ìd
;

198 
•ìd_t
 
	mc_o•ìd
;

204 
	#B0
 0

	)

205 
	#B50
 50

	)

206 
	#B75
 75

	)

207 
	#B110
 110

	)

208 
	#B134
 134

	)

209 
	#B150
 150

	)

210 
	#B200
 200

	)

211 
	#B300
 300

	)

212 
	#B600
 600

	)

213 
	#B1200
 1200

	)

214 
	#B1800
 1800

	)

215 
	#B2400
 2400

	)

216 
	#B4800
 4800

	)

217 
	#B9600
 9600

	)

218 
	#B19200
 19200

	)

219 
	#B38400
 38400

	)

220 #i‚de‡
_POSIX_SOURCE


221 
	#B7200
 7200

	)

222 
	#B14400
 14400

	)

223 
	#B28800
 28800

	)

224 
	#B57600
 57600

	)

225 
	#B76800
 76800

	)

226 
	#B115200
 115200

	)

227 
	#B230400
 230400

	)

228 
	#B460800
 460800

	)

229 
	#B921600
 921600

	)

230 
	#EXTA
 19200

	)

231 
	#EXTB
 38400

	)

234 #i‚de‡
_KERNEL


236 #i‚de‡
_POSIX_SOURCE


237 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

243 
	#TCSANOW
 0

	)

244 
	#TCSADRAIN
 1

	)

245 
	#TCSAFLUSH
 2

	)

246 #i‚de‡
_POSIX_SOURCE


247 
	#TCSASOFT
 0x10

	)

250 
	#TCIFLUSH
 1

	)

251 
	#TCOFLUSH
 2

	)

252 
	#TCIOFLUSH
 3

	)

253 
	#TCOOFF
 1

	)

254 
	#TCOON
 2

	)

255 
	#TCIOFF
 3

	)

256 
	#TCION
 4

	)

258 
	~<sys/cdefs.h
>

260 
__BEGIN_DECLS


261 
•ìd_t
 
cfgëi•ìd
(c⁄° 
ãrmios
 *);

262 
•ìd_t
 
cfgëo•ìd
(c⁄° 
ãrmios
 *);

263 
cf£ti•ìd
(
ãrmios
 *, 
•ìd_t
);

264 
cf£to•ìd
(
ãrmios
 *, 
•ìd_t
);

265 
tcgë©å
(, 
ãrmios
 *);

266 
tc£èâr
(, , c⁄° 
ãrmios
 *);

267 
tcdøö
();

268 
tcÊow
(, );

269 
tcÊush
(, );

270 
tc£ndbªak
(, );

272 #i‡
__POSIX_VISIBLE
 >200112 || 
__BSD_VISIBLE


273 
pid_t
 
tcgësid
();

275 #i‡
__BSD_VISIBLE


276 
tc£tsid
(, 
pid_t
);

278 
cfmakîaw
(
ãrmios
 *);

279 
cf£t•ìd
(
ãrmios
 *, 
•ìd_t
);

281 
	g__END_DECLS


285 #i‚de‡
_POSIX_SOURCE


292 
	~<sys/âycom.h
>

300 #i‚de‡
_POSIX_SOURCE


301 
	~<sys/âydeÁu…s.h
>

	@/usr/include/time.h

45 #i‚de‡
_TIME_H_


46 
	#_TIME_H_


	)

48 
	~<sys/cdefs.h
>

49 
	~<sys/_nuŒ.h
>

50 
	~<sys/_ty≥s.h
>

52 #i‡
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE < 200112 || 
__BSD_VISIBLE


57 
	#CLK_TCK
 128

	)

61 
	#CLOCKS_PER_SEC
 128

	)

63 #i‚de‡
_CLOCK_T_DECLARED


64 
__˛ock_t
 
	t˛ock_t
;

65 
	#_CLOCK_T_DECLARED


	)

68 #i‚de‡
_TIME_T_DECLARED


69 
__time_t
 
	ttime_t
;

70 
	#_TIME_T_DECLARED


	)

73 #i‚de‡
_SIZE_T_DECLARED


74 
__size_t
 
	tsize_t
;

75 
	#_SIZE_T_DECLARED


	)

78 #i‡
__POSIX_VISIBLE
 >= 199309

82 #i‚de‡
_CLOCKID_T_DECLARED


83 
__˛ockid_t
 
	t˛ockid_t
;

84 
	#_CLOCKID_T_DECLARED


	)

87 #i‚de‡
_TIMER_T_DECLARED


88 
__timî_t
 
	ttimî_t
;

89 
	#_TIMER_T_DECLARED


	)

92 
	~<sys/time•ec.h
>

96 #i‡!
deföed
(
CLOCK_REALTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

97 
	#CLOCK_REALTIME
 0

	)

98 #ifde‡
__BSD_VISIBLE


99 
	#CLOCK_VIRTUAL
 1

	)

100 
	#CLOCK_PROF
 2

	)

102 
	#CLOCK_MONOTONIC
 4

	)

103 
	#CLOCK_UPTIME
 5

	)

104 
	#CLOCK_UPTIME_PRECISE
 7

	)

105 
	#CLOCK_UPTIME_FAST
 8

	)

106 
	#CLOCK_REALTIME_PRECISE
 9

	)

107 
	#CLOCK_REALTIME_FAST
 10

	)

108 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

109 
	#CLOCK_MONOTONIC_FAST
 12

	)

110 
	#CLOCK_SECOND
 13

	)

111 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

114 #i‡!
deföed
(
TIMER_ABSTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

115 #i‡
__BSD_VISIBLE


116 
	#TIMER_RELTIME
 0x0

	)

118 
	#TIMER_ABSTIME
 0x1

	)

121 
	stm
 {

122 
	mtm_£c
;

123 
	mtm_mö
;

124 
	mtm_hour
;

125 
	mtm_mday
;

126 
	mtm_m⁄
;

127 
	mtm_yór
;

128 
	mtm_wday
;

129 
	mtm_yday
;

130 
	mtm_isd°
;

131 
	mtm_gmtoff
;

132 *
	mtm_z⁄e
;

135 #i‡
__POSIX_VISIBLE


136 *
tz«me
[];

139 
__BEGIN_DECLS


140 *
as˘ime
(c⁄° 
tm
 *);

141 
˛ock_t
 
˛ock
();

142 *
˘ime
(c⁄° 
time_t
 *);

143 
dif·ime
(
time_t
,Åime_t);

145 
tm
 *
gmtime
(c⁄° 
time_t
 *);

146 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

147 
time_t
 
mktime
(
tm
 *);

148 
size_t
 
°r·ime
(* 
__ª°ri˘
, size_t, const * __restrict,

149 c⁄° 
tm
 * 
__ª°ri˘
);

150 
time_t
 
time
(time_t *);

151 #i‡
__POSIX_VISIBLE
 >= 200112

152 
	gsigevít
;

153 
timî_¸óã
(
˛ockid_t
, 
sigevít
 *
__ª°ri˘
, 
timî_t
 *__restrict);

154 
timî_dñëe
(
timî_t
);

155 
timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

156 
timî_gëovîrun
(
timî_t
);

157 
timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *
__ª°ri˘
,

158 
ôimî•ec
 *
__ª°ri˘
);

160 #i‡
__POSIX_VISIBLE


161 
tz£t
();

164 #i‡
__POSIX_VISIBLE
 >= 199309

165 
˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

166 
˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

167 
˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

169 
«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

172 #i‡
__POSIX_VISIBLE
 >= 199506

173 *
as˘ime_r
(c⁄° 
tm
 *, *);

174 *
˘ime_r
(c⁄° 
time_t
 *, *);

175 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

176 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

179 #i‡
__XSI_VISIBLE


180 *
°Ωtime
(c⁄° * 
__ª°ri˘
, const * __restrict,

181 
tm
 * 
__ª°ri˘
);

184 #i‡
__BSD_VISIBLE


185 *
timez⁄e
(, );

186 
tz£twÆl
();

187 
time_t
 
timñoˇl
(
tm
 * const);

188 
time_t
 
timegm
(
tm
 * const);

190 
	g__END_DECLS


	@/usr/include/ufs/ufs/ufsmount.h

33 #i‚de‡
_UFS_UFS_UFSMOUNT_H_


34 
	#_UFS_UFS_UFSMOUNT_H_


	)

36 
	~<sys/buf.h
>

41 
	sufs_¨gs
 {

42 *
	mf•ec
;

43 
€xp‹t_¨gs
 
	mexp‹t
;

46 #ifde‡
_KERNEL


48 #ifde‡
MALLOC_DECLARE


49 
MALLOC_DECLARE
(
M_UFSMNT
);

52 
	gbuf
;

53 
	göode
;

54 
	g«meid©a
;

55 
	gtimevÆ
;

56 
	gu¸ed
;

57 
	guio
;

58 
	gvnode
;

59 
	gufs_exèâr_≥r_mou¡
;

62 
	sufsmou¡
 {

63 
mou¡
 *
	mum_mou¡p
;

64 
cdev
 *
	mum_dev
;

65 
g_c⁄sumî
 *
	mum_˝
;

66 
bufobj
 *
	mum_bo
;

67 
vnode
 *
	mum_devvp
;

68 
u_l⁄g
 
	mum_f°y≥
;

69 
fs
 *
	mum_fs
;

70 
ufs_exèâr_≥r_mou¡
 
	mum_exèâr
;

71 
u_l⁄g
 
	mum_nödú
;

72 
u_l⁄g
 
	mum_b±πodb
;

73 
u_l⁄g
 
	mum_£qöc
;

74 
mtx
 
	mum_lock
;

75 
	mum_numödúdïs
;

76 
w‹khód
 
	mso·dï_w‹kôem_≥ndög
;

77 
w‹kli°
 *
	mso·dï_w‹kli°_èû
;

78 
	mso·dï_⁄_w‹kli°
;

79 
	mso·dï_⁄_w‹kli°_ö¥ogªss
;

80 
	mso·dï_dïs
;

81 
	mso·dï_accdïs
;

82 
	mso·dï_ªq
;

83 
vnode
 *
	mum_quŸas
[
MAXQUOTAS
];

84 
u¸ed
 *
	mum_¸ed
[
MAXQUOTAS
];

85 
time_t
 
	mum_btime
[
MAXQUOTAS
];

86 
time_t
 
	mum_ôime
[
MAXQUOTAS
];

87 
	mum_qÊags
[
MAXQUOTAS
];

88 
öt64_t
 
	mum_ßvedmaxfûesize
;

89 
	mum_ˇndñëe
;

90 (*
	mum_bÆloc
)(
	mvnode
 *, 
	moff_t
, , 
	mu¸ed
 *, , 
	mbuf
 **);

91 (*
	mum_blk©off
)(
	mvnode
 *, 
	moff_t
, **, 
	mbuf
 **);

92 (*
	mum_åunˇã
)(
	mvnode
 *, 
	moff_t
, , 
	mu¸ed
 *, 
	mthªad
 *);

93 (*
	mum_upd©e
)(
	mvnode
 *, );

94 (*
	mum_vÆloc
)(
	mvnode
 *, , 
	mu¸ed
 *, vnode **);

95 (*
	mum_v‰ì
)(
	mvnode
 *, 
	möo_t
, );

96 (*
	mum_i‰ì
)(
	mufsmou¡
 *, 
	möode
 *);

97 (*
	mum_rd⁄ly
)(
	möode
 *);

98 (*
	mum_¢≠g⁄e
)(
	möode
 *);

101 
	#UFS_BALLOC
(
Ø
, 
bb
, 
cc
, 
dd
, 
ì
, 
ff
Ë
	`VFSTOUFS
(◊a)->
v_mou¡
)->
	`um_bÆloc
◊a, bb, cc, dd,Ée, ff)

	)

102 
	#UFS_BLKATOFF
(
Ø
, 
bb
, 
cc
, 
dd
Ë
	`VFSTOUFS
(◊a)->
v_mou¡
)->
	`um_blk©off
◊a, bb, cc, dd)

	)

103 
	#UFS_TRUNCATE
(
Ø
, 
bb
, 
cc
, 
dd
, 
ì
Ë
	`VFSTOUFS
(◊a)->
v_mou¡
)->
	`um_åunˇã
◊a, bb, cc, dd,Ée)

	)

104 
	#UFS_UPDATE
(
Ø
, 
bb
Ë
	`VFSTOUFS
(◊a)->
v_mou¡
)->
	`um_upd©e
◊a, bb)

	)

105 
	#UFS_VALLOC
(
Ø
, 
bb
, 
cc
, 
dd
Ë
	`VFSTOUFS
(◊a)->
v_mou¡
)->
	`um_vÆloc
◊a, bb, cc, dd)

	)

106 
	#UFS_VFREE
(
Ø
, 
bb
, 
cc
Ë
	`VFSTOUFS
(◊a)->
v_mou¡
)->
	`um_v‰ì
◊a, bb, cc)

	)

107 
	#UFS_IFREE
(
Ø
, 
bb
Ë(◊a)->
	`um_i‰ì
◊a, bb))

	)

108 
	#UFS_RDONLY
(
Ø
Ë(◊a)->
i_ump
->
	`um_rd⁄ly
◊a))

	)

109 
	#UFS_SNAPGONE
(
Ø
Ë(◊a)->
i_ump
->
	`um_¢≠g⁄e
◊a))

	)

111 
	#UFS_LOCK
(
Ø
Ë
	`mtx_lock
(&◊a)->
um_lock
)

	)

112 
	#UFS_UNLOCK
(
Ø
Ë
	`mtx_u∆ock
(&◊a)->
um_lock
)

	)

113 
	#UFS_MTX
(
Ø
Ë(&◊a)->
um_lock
)

	)

118 
	#UFS1
 1

	)

119 
	#UFS2
 2

	)

124 
	#QTF_OPENING
 0x01

	)

125 
	#QTF_CLOSING
 0x02

	)

128 
	#VFSTOUFS
(
mp
Ë((
ufsmou¡
 *)((mp)->
m¡_d©a
))

	)

129 
	#UFSTOVFS
(
ump
Ë(ump)->
um_mou¡p


	)

135 
	#MNINDIR
(
ump
Ë((ump)->
um_nödú
)

	)

136 
	#blk±πodb
(
ump
, 
b
Ë((bË<< (ump)->
um_b±πodb
)

	)

137 
	#is_£quítül
(
ump
, 
a
, 
b
Ë((bË=◊Ë+ ump->
um_£qöc
)

	)

	@/usr/include/unistd.h

37 #i‚de‡
_UNISTD_H_


38 
	#_UNISTD_H_


	)

40 
	~<sys/cdefs.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/uni°d.h
>

43 
	~<sys/_nuŒ.h
>

44 
	~<sys/_ty≥s.h
>

46 #i‚de‡
_GID_T_DECLARED


47 
__gid_t
 
	tgid_t
;

48 
	#_GID_T_DECLARED


	)

51 #i‚de‡
_OFF_T_DECLARED


52 
__off_t
 
	toff_t
;

53 
	#_OFF_T_DECLARED


	)

56 #i‚de‡
_PID_T_DECLARED


57 
__pid_t
 
	tpid_t
;

58 
	#_PID_T_DECLARED


	)

61 #i‚de‡
_SIZE_T_DECLARED


62 
__size_t
 
	tsize_t
;

63 
	#_SIZE_T_DECLARED


	)

66 #i‚de‡
_SSIZE_T_DECLARED


67 
__ssize_t
 
	tssize_t
;

68 
	#_SSIZE_T_DECLARED


	)

71 #i‚de‡
_UID_T_DECLARED


72 
__uid_t
 
	tuid_t
;

73 
	#_UID_T_DECLARED


	)

76 #i‚de‡
_USECONDS_T_DECLARED


77 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

78 
	#_USECONDS_T_DECLARED


	)

81 
	#STDIN_FILENO
 0

	)

82 
	#STDOUT_FILENO
 1

	)

83 
	#STDERR_FILENO
 2

	)

85 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

86 
	#F_ULOCK
 0

	)

87 
	#F_LOCK
 1

	)

88 
	#F_TLOCK
 2

	)

89 
	#F_TEST
 3

	)

106 
	#_POSIX_BARRIERS
 200112L

	)

107 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

108 
	#_POSIX_REGEXP
 1

	)

109 
	#_POSIX_SHELL
 1

	)

110 
	#_POSIX_SPAWN
 200112L

	)

111 
	#_POSIX_SPIN_LOCKS
 200112L

	)

112 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

113 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

114 
	#_POSIX_THREAD_CPUTIME
 200112L

	)

115 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

116 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

117 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

118 
	#_POSIX_THREAD_PROCESS_SHARED
 -1

	)

119 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 -1

	)

120 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

121 
	#_POSIX_THREADS
 200112L

	)

122 
	#_POSIX_TRACE
 -1

	)

123 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

124 
	#_POSIX_TRACE_INHERIT
 -1

	)

125 
	#_POSIX_TRACE_LOG
 -1

	)

126 
	#_POSIX2_C_BIND
 200112L

	)

127 
	#_POSIX2_C_DEV
 -1

	)

128 
	#_POSIX2_CHAR_TERM
 1

	)

129 
	#_POSIX2_FORT_DEV
 -1

	)

130 
	#_POSIX2_FORT_RUN
 200112L

	)

131 
	#_POSIX2_LOCALEDEF
 -1

	)

132 
	#_POSIX2_PBS
 -1

	)

133 
	#_POSIX2_PBS_ACCOUNTING
 -1

	)

134 
	#_POSIX2_PBS_CHECKPOINT
 -1

	)

135 
	#_POSIX2_PBS_LOCATE
 -1

	)

136 
	#_POSIX2_PBS_MESSAGE
 -1

	)

137 
	#_POSIX2_PBS_TRACK
 -1

	)

138 
	#_POSIX2_SW_DEV
 -1

	)

139 
	#_POSIX2_UPE
 200112L

	)

140 
	#_V6_ILP32_OFF32
 -1

	)

141 
	#_V6_ILP32_OFFBIG
 0

	)

142 
	#_V6_LP64_OFF64
 0

	)

143 
	#_V6_LPBIG_OFFBIG
 -1

	)

145 #i‡
__XSI_VISIBLE


146 
	#_XOPEN_CRYPT
 -1

	)

147 
	#_XOPEN_ENH_I18N
 -1

	)

148 
	#_XOPEN_LEGACY
 -1

	)

149 
	#_XOPEN_REALTIME
 -1

	)

150 
	#_XOPEN_REALTIME_THREADS
 -1

	)

151 
	#_XOPEN_UNIX
 -1

	)

155 
	#_POSIX2_VERSION
 199212L

	)

166 
	#_SC_ARG_MAX
 1

	)

167 
	#_SC_CHILD_MAX
 2

	)

168 
	#_SC_CLK_TCK
 3

	)

169 
	#_SC_NGROUPS_MAX
 4

	)

170 
	#_SC_OPEN_MAX
 5

	)

171 
	#_SC_JOB_CONTROL
 6

	)

172 
	#_SC_SAVED_IDS
 7

	)

173 
	#_SC_VERSION
 8

	)

174 
	#_SC_BC_BASE_MAX
 9

	)

175 
	#_SC_BC_DIM_MAX
 10

	)

176 
	#_SC_BC_SCALE_MAX
 11

	)

177 
	#_SC_BC_STRING_MAX
 12

	)

178 
	#_SC_COLL_WEIGHTS_MAX
 13

	)

179 
	#_SC_EXPR_NEST_MAX
 14

	)

180 
	#_SC_LINE_MAX
 15

	)

181 
	#_SC_RE_DUP_MAX
 16

	)

182 
	#_SC_2_VERSION
 17

	)

183 
	#_SC_2_C_BIND
 18

	)

184 
	#_SC_2_C_DEV
 19

	)

185 
	#_SC_2_CHAR_TERM
 20

	)

186 
	#_SC_2_FORT_DEV
 21

	)

187 
	#_SC_2_FORT_RUN
 22

	)

188 
	#_SC_2_LOCALEDEF
 23

	)

189 
	#_SC_2_SW_DEV
 24

	)

190 
	#_SC_2_UPE
 25

	)

191 
	#_SC_STREAM_MAX
 26

	)

192 
	#_SC_TZNAME_MAX
 27

	)

194 #i‡
__POSIX_VISIBLE
 >= 199309

195 
	#_SC_ASYNCHRONOUS_IO
 28

	)

196 
	#_SC_MAPPED_FILES
 29

	)

197 
	#_SC_MEMLOCK
 30

	)

198 
	#_SC_MEMLOCK_RANGE
 31

	)

199 
	#_SC_MEMORY_PROTECTION
 32

	)

200 
	#_SC_MESSAGE_PASSING
 33

	)

201 
	#_SC_PRIORITIZED_IO
 34

	)

202 
	#_SC_PRIORITY_SCHEDULING
 35

	)

203 
	#_SC_REALTIME_SIGNALS
 36

	)

204 
	#_SC_SEMAPHORES
 37

	)

205 
	#_SC_FSYNC
 38

	)

206 
	#_SC_SHARED_MEMORY_OBJECTS
 39

	)

207 
	#_SC_SYNCHRONIZED_IO
 40

	)

208 
	#_SC_TIMERS
 41

	)

209 
	#_SC_AIO_LISTIO_MAX
 42

	)

210 
	#_SC_AIO_MAX
 43

	)

211 
	#_SC_AIO_PRIO_DELTA_MAX
 44

	)

212 
	#_SC_DELAYTIMER_MAX
 45

	)

213 
	#_SC_MQ_OPEN_MAX
 46

	)

214 
	#_SC_PAGESIZE
 47

	)

215 
	#_SC_RTSIG_MAX
 48

	)

216 
	#_SC_SEM_NSEMS_MAX
 49

	)

217 
	#_SC_SEM_VALUE_MAX
 50

	)

218 
	#_SC_SIGQUEUE_MAX
 51

	)

219 
	#_SC_TIMER_MAX
 52

	)

222 #i‡
__POSIX_VISIBLE
 >= 200112

223 
	#_SC_2_PBS
 59

	)

224 
	#_SC_2_PBS_ACCOUNTING
 60

	)

225 
	#_SC_2_PBS_CHECKPOINT
 61

	)

226 
	#_SC_2_PBS_LOCATE
 62

	)

227 
	#_SC_2_PBS_MESSAGE
 63

	)

228 
	#_SC_2_PBS_TRACK
 64

	)

229 
	#_SC_ADVISORY_INFO
 65

	)

230 
	#_SC_BARRIERS
 66

	)

231 
	#_SC_CLOCK_SELECTION
 67

	)

232 
	#_SC_CPUTIME
 68

	)

233 
	#_SC_FILE_LOCKING
 69

	)

234 
	#_SC_GETGR_R_SIZE_MAX
 70

	)

235 
	#_SC_GETPW_R_SIZE_MAX
 71

	)

236 
	#_SC_HOST_NAME_MAX
 72

	)

237 
	#_SC_LOGIN_NAME_MAX
 73

	)

238 
	#_SC_MONOTONIC_CLOCK
 74

	)

239 
	#_SC_MQ_PRIO_MAX
 75

	)

240 
	#_SC_READER_WRITER_LOCKS
 76

	)

241 
	#_SC_REGEXP
 77

	)

242 
	#_SC_SHELL
 78

	)

243 
	#_SC_SPAWN
 79

	)

244 
	#_SC_SPIN_LOCKS
 80

	)

245 
	#_SC_SPORADIC_SERVER
 81

	)

246 
	#_SC_THREAD_ATTR_STACKADDR
 82

	)

247 
	#_SC_THREAD_ATTR_STACKSIZE
 83

	)

248 
	#_SC_THREAD_CPUTIME
 84

	)

249 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 85

	)

250 
	#_SC_THREAD_KEYS_MAX
 86

	)

251 
	#_SC_THREAD_PRIO_INHERIT
 87

	)

252 
	#_SC_THREAD_PRIO_PROTECT
 88

	)

253 
	#_SC_THREAD_PRIORITY_SCHEDULING
 89

	)

254 
	#_SC_THREAD_PROCESS_SHARED
 90

	)

255 
	#_SC_THREAD_SAFE_FUNCTIONS
 91

	)

256 
	#_SC_THREAD_SPORADIC_SERVER
 92

	)

257 
	#_SC_THREAD_STACK_MIN
 93

	)

258 
	#_SC_THREAD_THREADS_MAX
 94

	)

259 
	#_SC_TIMEOUTS
 95

	)

260 
	#_SC_THREADS
 96

	)

261 
	#_SC_TRACE
 97

	)

262 
	#_SC_TRACE_EVENT_FILTER
 98

	)

263 
	#_SC_TRACE_INHERIT
 99

	)

264 
	#_SC_TRACE_LOG
 100

	)

265 
	#_SC_TTY_NAME_MAX
 101

	)

266 
	#_SC_TYPED_MEMORY_OBJECTS
 102

	)

267 
	#_SC_V6_ILP32_OFF32
 103

	)

268 
	#_SC_V6_ILP32_OFFBIG
 104

	)

269 
	#_SC_V6_LP64_OFF64
 105

	)

270 
	#_SC_V6_LPBIG_OFFBIG
 106

	)

271 
	#_SC_IPV6
 118

	)

272 
	#_SC_RAW_SOCKETS
 119

	)

273 
	#_SC_SYMLOOP_MAX
 120

	)

276 #i‡
__XSI_VISIBLE


277 
	#_SC_ATEXIT_MAX
 107

	)

278 
	#_SC_IOV_MAX
 56

	)

279 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

280 
	#_SC_XOPEN_CRYPT
 108

	)

281 
	#_SC_XOPEN_ENH_I18N
 109

	)

282 
	#_SC_XOPEN_LEGACY
 110

	)

283 
	#_SC_XOPEN_REALTIME
 111

	)

284 
	#_SC_XOPEN_REALTIME_THREADS
 112

	)

285 
	#_SC_XOPEN_SHM
 113

	)

286 
	#_SC_XOPEN_STREAMS
 114

	)

287 
	#_SC_XOPEN_UNIX
 115

	)

288 
	#_SC_XOPEN_VERSION
 116

	)

289 
	#_SC_XOPEN_XCU_VERSION
 117

	)

292 #i‡
__BSD_VISIBLE


293 
	#_SC_NPROCESSORS_CONF
 57

	)

294 
	#_SC_NPROCESSORS_ONLN
 58

	)

298 
	#_SC_PHYS_PAGES
 121

	)

301 #i‡
__POSIX_VISIBLE
 >= 199209

302 
	#_CS_PATH
 1

	)

305 #i‡
__POSIX_VISIBLE
 >= 200112

306 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 2

	)

307 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 3

	)

308 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 4

	)

309 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 5

	)

310 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 6

	)

311 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 7

	)

312 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 8

	)

313 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 9

	)

314 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 10

	)

315 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 11

	)

316 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 12

	)

317 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 13

	)

318 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 14

	)

321 
__BEGIN_DECLS


323 
	$_exô
(Ë
__dód2
;

324 
	`ac˚ss
(const *, );

325 
	`Æ¨m
();

326 
	`chdú
(const *);

327 
	`chown
(c⁄° *, 
uid_t
, 
gid_t
);

328 
	`˛o£
();

329 
	`˛o£‰om
();

330 
	`dup
();

331 
	`dup2
(, );

332 
	`exe˛
(const *, const *, ...);

333 
	`exe˛e
(const *, const *, ...);

334 
	`exe˛p
(const *, const *, ...);

335 
	`execv
(const *, * const *);

336 
	`execve
(const *, * const *, * const *);

337 
	`execvp
(const *, * const *);

338 
pid_t
 
	`f‹k
();

339 
	`Â©hc⁄f
(, );

340 *
	`gëcwd
(*, 
size_t
);

341 
gid_t
 
	`gëegid
();

342 
uid_t
 
	`gëeuid
();

343 
gid_t
 
	`gëgid
();

344 
	`gëgroups
(, 
gid_t
 []);

345 *
	`gëlogö
();

346 
pid_t
 
	`gëpgΩ
();

347 
pid_t
 
	`gëpid
();

348 
pid_t
 
	`gëµid
();

349 
uid_t
 
	`gëuid
();

350 
	`ißây
();

351 
	`lök
(const *, const *);

352 #i‚de‡
_LSEEK_DECLARED


353 
	#_LSEEK_DECLARED


	)

354 
off_t
 
	`l£ek
(, off_t, );

356 
	`∑thc⁄f
(const *, );

357 
	`∑u£
();

358 
	`pùe
(*);

359 
ssize_t
 
	`ªad
(, *, 
size_t
);

360 
	`rmdú
(const *);

361 
	`£tgid
(
gid_t
);

362 
	`£çgid
(
pid_t
,Öid_t);

363 
pid_t
 
	`£tsid
();

364 
	`£tuid
(
uid_t
);

365 
	`¶ìp
();

366 
	`sysc⁄f
();

367 
pid_t
 
	`tcgëpgΩ
();

368 
	`tc£çgΩ
(, 
pid_t
);

369 *
	`ây«me
();

370 
	`ây«me_r
(, *, 
size_t
);

371 
	`u∆ök
(const *);

372 
ssize_t
 
	`wrôe
(, c⁄° *, 
size_t
);

375 #i‡
__POSIX_VISIBLE
 >199209 || 
__XSI_VISIBLE


376 
size_t
 
	`c⁄f°r
(, *, size_t);

377 #i‚de‡
_GETOPT_DECLARED


378 
	#_GETOPT_DECLARED


	)

379 
	`gë›t
(, * const [], const *);

381 *
›èrg
;

382 
›töd
, 
›ãº
, 
›t›t
;

387 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE


388 
	`fsync
();

394 #i‚de‡
_FTRUNCATE_DECLARED


395 
	#_FTRUNCATE_DECLARED


	)

396 
	`·runˇã
(, 
off_t
);

400 #i‡
__POSIX_VISIBLE
 >= 199506

401 
	`gëlogö_r
(*, );

405 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


406 
	`fchown
(, 
uid_t
, 
gid_t
);

407 
ssize_t
 
	`ªadlök
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

409 #i‡
__POSIX_VISIBLE
 >= 200112

410 
	`gëho°«me
(*, 
size_t
);

411 
	`£ãgid
(
gid_t
);

412 
	`£ãuid
(
uid_t
);

416 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE


417 
	`gësid
(
pid_t
 
_pid
);

418 
	`fchdú
();

419 
	`gëpgid
(
pid_t
 
_pid
);

420 
	`lchown
(c⁄° *, 
uid_t
, 
gid_t
);

421 
ssize_t
 
	`¥ód
(, *, 
size_t
, 
off_t
);

422 
ssize_t
 
	`pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

425 #i‚de‡
_TRUNCATE_DECLARED


426 
	#_TRUNCATE_DECLARED


	)

427 
	`åunˇã
(c⁄° *, 
off_t
);

431 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


432 
	`Ác˚sßt
(, const *, , );

433 
	`fchow«t
(, c⁄° *, 
uid_t
, 
gid_t
, );

434 
	`„xecve
(, *const [], *const []);

435 
	`lök©
(, const *, , const *, );

436 
ssize_t
 
	`ªadlök©
(, c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

437 
	`symlök©
(const *, , const *);

438 
	`u∆ök©
(, const *, );

446 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE
 >402 || 
__BSD_VISIBLE


447 
	`symlök
(c⁄° * 
__ª°ri˘
, const * __restrict);

451 #i‡
__XSI_VISIBLE


452 *
	`¸y±
(const *, const *);

454 
	`í¸y±
(*, );

455 
	`gëho°id
();

456 
	`lockf
(, , 
off_t
);

457 
	`ni˚
();

458 
	`£çgΩ
(
pid_t
 
_pid
,Öid_à
_pgΩ
);

459 
	`£åegid
(
gid_t
, gid_t);

460 
	`£åeuid
(
uid_t
, uid_t);

462 #i‚de‡
_SWAB_DECLARED


463 
	#_SWAB_DECLARED


	)

464 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

467 
	`sync
();

471 #i‡(
__XSI_VISIBLE
 && __XSI_VISIBLE <500Ë|| 
__BSD_VISIBLE


472 
	`brk
(const *);

473 
	`chroŸ
(const *);

474 
	`gëdèbÀsize
();

475 
	$gë∑gesize
(Ë
__puª2
;

476 *
	`gë∑ss
(const *);

477 *
	`sbrk
(
öçå_t
);

480 #i‡(
__XSI_VISIBLE
 && __XSI_VISIBLE <600Ë|| 
__BSD_VISIBLE


481 *
	`gëwd
(*);

482 
u£c⁄ds_t


483 
	`uÆ¨m
(
u£c⁄ds_t
, useconds_t);

484 
	`u¶ìp
(
u£c⁄ds_t
);

485 
pid_t
 
	`vf‹k
();

488 #i‡
__BSD_VISIBLE


489 
timevÆ
;

490 
	`ac˘
(const *);

491 
	`async_d´m⁄
();

492 
	`check_utûôy_com∑t
(const *);

494 
	`¸y±_gë_f‹m©
();

495 
	`¸y±_£t_f‹m©
(const *);

496 
	`des_cùhî
(const *, *, , );

497 
	`des_£tkey
(c⁄° *
key
);

498 
	`óc˚ss
(const *, );

499 
	`ídu£rshñl
();

500 
	`exe˘
(const *, * const *, * const *);

501 
	`execvP
(const *, const *, * const *);

502 
	`„©uª_¥e£¡
(const *);

503 *
	`fÊag°o°r
(
u_l⁄g
);

504 
	`gëdomaö«me
(*, );

505 
	`gëgrou∂i°
(c⁄° *, 
gid_t
, gid_t *, *);

506 
mode_t
 
	`gëmode
(const *, mode_t);

507 
	`gëo§ñd©e
();

508 
	`gë≥îeid
(, 
uid_t
 *, 
gid_t
 *);

509 
	`gëªsgid
(
gid_t
 *, gid_t *, gid_t *);

510 
	`gëªsuid
(
uid_t
 *, uid_t *, uid_t *);

511 *
	`gëu£rshñl
();

512 
	`öôgroups
(c⁄° *, 
gid_t
);

513 
	`úu£rok
(, , const *, const *);

514 
	`úu£rok_ß
(const *, , , const *, const *);

515 
	`is£tugid
();

516 
	`__FªeBSD_libc_íãr_ª°ri˘ed_mode
();

517 
	`Õ©hc⁄f
(const *, );

518 #i‚de‡
_MKDTEMP_DECLARED


519 *
	`mkdãmp
(*);

520 
	#_MKDTEMP_DECLARED


	)

522 #i‚def 
_MKNOD_DECLARED


523 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

524 
	#_MKNOD_DECLARED


	)

526 #i‚de‡
_MKSTEMP_DECLARED


527 
	`mk°emp
(*);

528 
	#_MKSTEMP_DECLARED


	)

530 
	`mk°emps
(*, );

531 #i‚de‡
_MKTEMP_DECLARED


532 *
	`mkãmp
(*);

533 
	#_MKTEMP_DECLARED


	)

535 
	`nfssvc
(, *);

536 
	`¥ofû
(*, 
size_t
, 
vm_off£t_t
, );

537 
	`rcmd
(**, , const *, const *, const *, *);

538 
	`rcmd_af
(**, , const *,

540 
	`rcmdsh
(**, , const *,

542 *
	`ª_comp
(const *);

543 
	`ª_exec
(const *);

544 
	`ªboŸ
();

545 
	`ªvoke
(const *);

546 
pid_t
 
	`rf‹k
();

547 
pid_t
 
	`rf‹k_thªad
(, *, (*)(*), *);

548 
	`ºesvp‹t
(*);

549 
	`ºesvp‹t_af
(*, );

550 
	`ru£rok
(const *, , const *, const *);

551 #i‡
__BSD_VISIBLE


552 #i‚de‡
_SELECT_DECLARED


553 
	#_SELECT_DECLARED


	)

554 
	`£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

557 
	`£tdomaö«me
(const *, );

558 
	`£tgroups
(, c⁄° 
gid_t
 *);

559 
	`£tho°id
();

560 
	`£tho°«me
(const *, );

561 #i‚de‡
_SETKEY_DECLARED


562 
	`£tkey
(const *);

563 
	#_SETKEY_DECLARED


	)

565 
	`£éogö
(const *);

566 *
	`£tmode
(const *);

567 
	$£çro˘ôÀ
(c⁄° *
_fmt
, ...Ë
	`__¥ötf0like
(1, 2);

568 
	`£åesgid
(
gid_t
, gid_t, gid_t);

569 
	`£åesuid
(
uid_t
, uid_t, uid_t);

570 
	`£ågid
(
gid_t
);

571 
	`£åuid
(
uid_t
);

572 
	`£tu£rshñl
();

573 
	`°πofÊags
(**, 
u_l⁄g
 *, u_long *);

574 
	`sw≠⁄
(const *);

575 
	`sw≠off
(const *);

576 
	`sysˇŒ
(, ...);

577 
off_t
 
	`__sysˇŒ
(
quad_t
, ...);

578 
	`ây¶Ÿ
();

579 
	`undñëe
(const *);

580 
	`unwhôeout
(const *);

581 *
	`vÆloc
(
size_t
);

583 #i‚de‡
_OPTRESET_DECLARED


584 
	#_OPTRESET_DECLARED


	)

585 
›åe£t
;

588 
__END_DECLS


	@/usr/include/utmp.h

42 #i‚def 
_UTMP_H_


43 
	#_UTMP_H_


	)

45 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

46 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

47 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

56 
	#UT_NAMESIZE
 16

	)

57 
	#UT_LINESIZE
 8

	)

58 
	#UT_HOSTSIZE
 16

	)

60 
	sœ°log
 {

61 
öt32_t
 
	mŒ_time
;

62 
	mŒ_löe
[
UT_LINESIZE
];

63 
	mŒ_ho°
[
UT_HOSTSIZE
];

66 
	sutmp
 {

67 
	mut_löe
[
UT_LINESIZE
];

68 
	mut_«me
[
UT_NAMESIZE
];

69 
	mut_ho°
[
UT_HOSTSIZE
];

70 
öt32_t
 
	mut_time
;

	@/usr/include/uuid.h

30 #i‚de‡
_UUID_H_


31 
	#_UUID_H_


	)

33 
	~<sys/ty≥s.h
>

34 
	~<sys/uuid.h
>

43 
	#uuid_s_ok
 0

	)

44 
	#uuid_s_bad_vîsi⁄
 1

	)

45 
	#uuid_s_övÆid_°rög_uuid
 2

	)

46 
	#uuid_s_no_mem‹y
 3

	)

48 
__BEGIN_DECLS


49 
öt32_t
 
uuid_com∑ª
(c⁄° 
uuid_t
 *, c⁄° uuid_à*, 
uöt32_t
 *);

50 
uuid_¸óã
(
uuid_t
 *, 
uöt32_t
 *);

51 
uuid_¸óã_nû
(
uuid_t
 *, 
uöt32_t
 *);

52 
öt32_t
 
uuid_equÆ
(c⁄° 
uuid_t
 *, c⁄° uuid_à*, 
uöt32_t
 *);

53 
uuid_‰om_°rög
(c⁄° *, 
uuid_t
 *, 
uöt32_t
 *);

54 
uöt16_t
 
uuid_hash
(c⁄° 
uuid_t
 *, 
uöt32_t
 *);

55 
öt32_t
 
uuid_is_nû
(c⁄° 
uuid_t
 *, 
uöt32_t
 *);

56 
uuid_to_°rög
(c⁄° 
uuid_t
 *, **, 
uöt32_t
 *);

57 
uuid_íc_À
(*, c⁄° 
uuid_t
 *);

58 
uuid_dec_À
(c⁄° *, 
uuid_t
 *);

59 
uuid_íc_be
(*, c⁄° 
uuid_t
 *);

60 
uuid_dec_be
(c⁄° *, 
uuid_t
 *);

61 
	g__END_DECLS


	@/usr/include/vis.h

37 #i‚de‡
_VIS_H_


38 
	#_VIS_H_


	)

40 
	~<sys/_ty≥s.h
>

42 #i‚de‡
_SIZE_T_DECLARED


43 
__size_t
 
	tsize_t
;

44 
	#_SIZE_T_DECLARED


	)

50 
	#VIS_OCTAL
 0x01

	)

51 
	#VIS_CSTYLE
 0x02

	)

57 
	#VIS_SP
 0x04

	)

58 
	#VIS_TAB
 0x08

	)

59 
	#VIS_NL
 0x10

	)

60 
	#VIS_WHITE
 (
VIS_SP
 | 
VIS_TAB
 | 
VIS_NL
)

	)

61 
	#VIS_SAFE
 0x20

	)

66 
	#VIS_NOSLASH
 0x40

	)

67 
	#VIS_HTTPSTYLE
 0x80

	)

68 
	#VIS_GLOB
 0x100

	)

73 
	#UNVIS_VALID
 1

	)

74 
	#UNVIS_VALIDPUSH
 2

	)

75 
	#UNVIS_NOCHAR
 3

	)

76 
	#UNVIS_SYNBAD
 -1

	)

77 
	#UNVIS_ERROR
 -2

	)

82 
	#UNVIS_END
 1

	)

84 
	~<sys/cdefs.h
>

86 
__BEGIN_DECLS


87 *
vis
(*, , , );

88 
°rvis
(*, const *, );

89 
°rvisx
(*, c⁄° *, 
size_t
, );

90 
°runvis
(*, const *);

91 
°runvisx
(*, const *, );

92 
unvis
(*, , *, );

93 
	g__END_DECLS


	@/usr/include/wchar.h

67 #i‚de‡
_WCHAR_H_


68 
	#_WCHAR_H_


	)

70 
	~<sys/cdefs.h
>

71 
	~<sys/_nuŒ.h
>

72 
	~<sys/_ty≥s.h
>

73 
	~<machöe/_limôs.h
>

74 
	~<_˘y≥.h
>

76 #i‚de‡
_MBSTATE_T_DECLARED


77 
__mb°©e_t
 
	tmb°©e_t
;

78 
	#_MBSTATE_T_DECLARED


	)

81 #i‚de‡
_SIZE_T_DECLARED


82 
__size_t
 
	tsize_t
;

83 
	#_SIZE_T_DECLARED


	)

86 #i‚def 
__˝lu•lus


87 #i‚de‡
_WCHAR_T_DECLARED


88 
__wch¨_t
 
	twch¨_t
;

89 
	#_WCHAR_T_DECLARED


	)

93 #i‚de‡
_WINT_T_DECLARED


94 
__wöt_t
 
	twöt_t
;

95 
	#_WINT_T_DECLARED


	)

98 #i‚def 
WCHAR_MIN


99 
	#WCHAR_MIN
 
__INT_MIN


	)

100 
	#WCHAR_MAX
 
__INT_MAX


	)

103 #i‚de‡
WEOF


104 
	#WEOF
 ((
wöt_t
)-1)

	)

107 
	g__sFILE
;

108 
	gtm
;

110 
__BEGIN_DECLS


111 
wöt_t
 
btowc
();

112 
wöt_t
 
fgëwc
(
__sFILE
 *);

113 
wch¨_t
 *

114 
fgëws
(
wch¨_t
 * 
__ª°ri˘
, , 
__sFILE
 * __restrict);

115 
wöt_t
 
Âutwc
(
wch¨_t
, 
__sFILE
 *);

116 
Âutws
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, 
__sFILE
 * __restrict);

117 
fwide
(
__sFILE
 *, );

118 
fw¥ötf
(
__sFILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, ...);

119 
fwsˇnf
(
__sFILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, ...);

120 
wöt_t
 
gëwc
(
__sFILE
 *);

121 
wöt_t
 
gëwch¨
();

122 
size_t
 
mbæí
(c⁄° * 
__ª°ri˘
, size_t, 
mb°©e_t
 * __restrict);

123 
size_t
 
mbπowc
(
wch¨_t
 * 
__ª°ri˘
, const * __restrict, size_t,

124 
mb°©e_t
 * 
__ª°ri˘
);

125 
mbsöô
(c⁄° 
mb°©e_t
 *);

126 
size_t
 
mb§towcs
(
wch¨_t
 * 
__ª°ri˘
, const ** __restrict, size_t,

127 
mb°©e_t
 * 
__ª°ri˘
);

128 
wöt_t
 
putwc
(
wch¨_t
, 
__sFILE
 *);

129 
wöt_t
 
putwch¨
(
wch¨_t
);

130 
sw¥ötf
(
wch¨_t
 * 
__ª°ri˘
, 
size_t
 
n
, const wchar_t * __restrict,

132 
swsˇnf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, const wchar_t * __restrict, ...);

133 
wöt_t
 
ungëwc
(wöt_t, 
__sFILE
 *);

134 
vfw¥ötf
(
__sFILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

135 
__va_li°
);

136 
vsw¥ötf
(
wch¨_t
 * 
__ª°ri˘
, 
size_t
 
n
, const wchar_t * __restrict,

137 
__va_li°
);

138 
vw¥ötf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, 
__va_li°
);

139 
size_t
 
w¸tomb
(* 
__ª°ri˘
, 
wch¨_t
, 
mb°©e_t
 * __restrict);

140 
wch¨_t
 *
wcsˇt
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict);

141 
wch¨_t
 *
	$wcschr
(c⁄° 
wch¨_t
 *, wch¨_tË
__puª
;

142 
	$wcscmp
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*Ë
__puª
;

143 
	`wcscﬁl
(c⁄° 
wch¨_t
 *, const wchar_t *);

144 
wch¨_t
 *
	`wcs˝y
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict);

145 
size_t
 
	$wcsc•n
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*Ë
__puª
;

146 
size_t
 
	`wcs·ime
(
wch¨_t
 * 
__ª°ri˘
, size_t, const wchar_t * __restrict,

147 c⁄° 
tm
 * 
__ª°ri˘
);

148 
size_t
 
	$wc¶í
(c⁄° 
wch¨_t
 *Ë
__puª
;

149 
wch¨_t
 *
	`wc¢ˇt
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict,

150 
size_t
);

151 
	$wc¢cmp
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*, 
size_t
Ë
__puª
;

152 
wch¨_t
 *
	`wc¢˝y
(wch¨_à* 
__ª°ri˘
 , c⁄° wch¨_à* __ª°ri˘, 
size_t
);

153 
wch¨_t
 *
	$wc•brk
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*Ë
__puª
;

154 
wch¨_t
 *
	$wc§chr
(c⁄° 
wch¨_t
 *, wch¨_tË
__puª
;

155 
size_t
 
	`wc§tombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 ** __restrict, size_t,

156 
mb°©e_t
 * 
__ª°ri˘
);

157 
size_t
 
	$wcs•n
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*Ë
__puª
;

158 
wch¨_t
 *
	$wcs°r
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, const wchar_t * __restrict)

159 
__puª
;

160 
size_t
 
	`wcsx‰m
(
wch¨_t
 * 
__ª°ri˘
, const wchar_t * __restrict, size_t);

161 
	`w˘ob
(
wöt_t
);

162 
	`wc°od
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict);

163 
wch¨_t
 *
	`wc°ok
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict,

164 
wch¨_t
 ** 
__ª°ri˘
);

165 
	`wc°ﬁ
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict, );

167 
	`wc°oul
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict, );

168 
wch¨_t
 *
	$wmemchr
(c⁄° 
wch¨_t
 *, wch¨_t, 
size_t
Ë
__puª
;

169 
	$wmemcmp
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*, 
size_t
Ë
__puª
;

170 
wch¨_t
 *
	`wmem˝y
(wch¨_à* 
__ª°ri˘
, c⁄° wch¨_à* __ª°ri˘, 
size_t
);

171 
wch¨_t
 *
	`wmemmove
(wch¨_à*, c⁄° wch¨_à*, 
size_t
);

172 
wch¨_t
 *
	`wmem£t
(wch¨_à*, wch¨_t, 
size_t
);

173 
	`w¥ötf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, ...);

174 
	`wsˇnf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, ...);

176 #i‚de‡
_STDSTREAM_DECLARED


177 
__sFILE
 *
__°döp
;

178 
__sFILE
 *
__°douç
;

179 
__sFILE
 *
__°dîΩ
;

180 
	#_STDSTREAM_DECLARED


	)

183 
	#gëwc
(
Â
Ë
	`fgëwc
(Â)

	)

184 
	#gëwch¨
(Ë
	`fgëwc
(
__°döp
)

	)

185 
	#putwc
(
wc
, 
Â
Ë
	`Âutwc
(wc, fp)

	)

186 
	#putwch¨
(
wc
Ë
	`Âutwc
(wc, 
__°douç
)

	)

188 #i‡
__ISO_C_VISIBLE
 >= 1999

189 
	`vfwsˇnf
(
__sFILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

190 
__va_li°
);

191 
	`vswsˇnf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, const wchar_t * __restrict,

192 
__va_li°
);

193 
	`vwsˇnf
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, 
__va_li°
);

194 
	`wc°of
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict);

196 
	`wc°ﬁd
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict);

197 #ifde‡
__LONG_LONG_SUPPORTED


200 
	`wc°ﬁl
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict, );

203 
	`wc°ouŒ
(c⁄° 
wch¨_t
 * 
__ª°ri˘
, wchar_t ** __restrict, );

207 #i‡
__XSI_VISIBLE


208 
	`wcswidth
(c⁄° 
wch¨_t
 *, 
size_t
);

209 
	`wcwidth
(
wch¨_t
);

210 
	#wcwidth
(
_c
Ë
	`__wcwidth
(_c)

	)

213 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


214 
size_t
 
	`mb¢πowcs
(
wch¨_t
 * 
__ª°ri˘
, const ** __restrict, size_t,

215 
size_t
, 
mb°©e_t
 * 
__ª°ri˘
);

216 
wch¨_t
 *
	`w˝˝y
(wch¨_à* 
__ª°ri˘
, const wchar_t * __restrict);

217 
wch¨_t
 *
	`w˝n˝y
(wch¨_à* 
__ª°ri˘
, c⁄° wch¨_à* __ª°ri˘, 
size_t
);

218 
wch¨_t
 *
	$wcsdup
(c⁄° 
wch¨_t
 *Ë
__mÆloc_like
;

219 
	`wcsˇ£cmp
(c⁄° 
wch¨_t
 *, const wchar_t *);

220 
	`wc¢ˇ£cmp
(c⁄° 
wch¨_t
 *, c⁄° wch¨_à*, 
size_t
 
n
);

221 
size_t
 
	$wc¢Àn
(c⁄° 
wch¨_t
 *, 
size_t
Ë
__puª
;

222 
size_t
 
	`wc¢πombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 ** __restrict, size_t,

223 
size_t
, 
mb°©e_t
 * 
__ª°ri˘
);

226 #i‡
__BSD_VISIBLE


227 
wch¨_t
 *
	`fgëw 
(
__sFILE
 * 
__ª°ri˘
, 
size_t
 * __restrict);

228 
size_t
 
	`wc¶ˇt
(
wch¨_t
 *, const wchar_t *, size_t);

229 
size_t
 
	`wc¶˝y
(
wch¨_t
 *, const wchar_t *, size_t);

231 
__END_DECLS


	@/usr/include/wctype.h

31 #i‚de‡
_WCTYPE_H_


32 
	#_WCTYPE_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<sys/_ty≥s.h
>

37 
	~<_˘y≥.h
>

39 #i‚de‡
_WCTRANS_T


40 
	tw˘øns_t
;

41 
	#_WCTRANS_T


	)

44 #i‚de‡
_WCTYPE_T


45 
	tw˘y≥_t
;

46 
	#_WCTYPE_T


	)

49 #i‚de‡
_WINT_T_DECLARED


50 
__wöt_t
 
	twöt_t
;

51 
	#_WINT_T_DECLARED


	)

54 #i‚de‡
WEOF


55 
	#WEOF
 ((
wöt_t
)-1)

	)

58 
__BEGIN_DECLS


59 
iswÆnum
(
wöt_t
);

60 
iswÆpha
(
wöt_t
);

61 
iswbœnk
(
wöt_t
);

62 
isw˙ål
(
wöt_t
);

63 
isw˘y≥
(
wöt_t
, 
w˘y≥_t
);

64 
iswdigô
(
wöt_t
);

65 
iswgøph
(
wöt_t
);

66 
iswlowî
(
wöt_t
);

67 
isw¥öt
(
wöt_t
);

68 
iswpun˘
(
wöt_t
);

69 
isw•a˚
(
wöt_t
);

70 
iswuµî
(
wöt_t
);

71 
iswxdigô
(
wöt_t
);

72 
wöt_t
 
tow˘øns
(wöt_t, 
w˘øns_t
);

73 
wöt_t
 
towlowî
(wint_t);

74 
wöt_t
 
towuµî
(wint_t);

75 
w˘øns_t


76 
w˘øns
(const *);

77 
w˘y≥_t


78 
w˘y≥
(const *);

80 #i‡
__BSD_VISIBLE


81 
wöt_t
 
iswascii
(wint_t);

82 
wöt_t
 
iswhexnumbî
(wint_t);

83 
wöt_t
 
iswideogøm
(wint_t);

84 
wöt_t
 
iswnumbî
(wint_t);

85 
wöt_t
 
iswph⁄ogøm
(wint_t);

86 
wöt_t
 
iswru√
(wint_t);

87 
wöt_t
 
isw•ecül
(wint_t);

88 
wöt_t
 
√xtw˘y≥
(wöt_t, 
w˘y≥_t
);

90 
	g__END_DECLS


92 
	#iswÆnum
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_A
|
_CTYPE_D
)

	)

93 
	#iswÆpha
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_A
)

	)

94 
	#iswbœnk
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_B
)

	)

95 
	#isw˙ål
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_C
)

	)

96 
	#isw˘y≥
(
wc
, 
ch¨˛ass
Ë
	`__i°y≥
((wc), (ch¨˛ass))

	)

97 
	#iswdigô
(
wc
Ë
	`__is˘y≥
((wc), 
_CTYPE_D
)

	)

98 
	#iswgøph
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_G
)

	)

99 
	#iswlowî
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_L
)

	)

100 
	#isw¥öt
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_R
)

	)

101 
	#iswpun˘
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_P
)

	)

102 
	#isw•a˚
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_S
)

	)

103 
	#iswuµî
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_U
)

	)

104 
	#iswxdigô
(
wc
Ë
	`__is˘y≥
((wc), 
_CTYPE_X
)

	)

105 
	#towlowî
(
wc
Ë
	`__tﬁowî
(wc)

	)

106 
	#towuµî
(
wc
Ë
	`__touµî
(wc)

	)

108 #i‡
__BSD_VISIBLE


109 
	#iswascii
(
wc
Ë(((wcË& ~0x7FË=0)

	)

110 
	#iswhexnumbî
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_X
)

	)

111 
	#iswideogøm
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_I
)

	)

112 
	#iswnumbî
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_D
)

	)

113 
	#iswph⁄ogøm
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_Q
)

	)

114 
	#iswru√
(
wc
Ë
	`__i°y≥
((wc), 0xFFFFFF00L)

	)

115 
	#isw•ecül
(
wc
Ë
	`__i°y≥
((wc), 
_CTYPE_T
)

	)

	@/usr/include/_ctype.h

46 #i‚de‡
__CTYPE_H_


47 
	#__CTYPE_H_


	)

49 
	~<sys/cdefs.h
>

50 
	~<sys/_ty≥s.h
>

52 
	#_CTYPE_A
 0x00000100L

	)

53 
	#_CTYPE_C
 0x00000200L

	)

54 
	#_CTYPE_D
 0x00000400L

	)

55 
	#_CTYPE_G
 0x00000800L

	)

56 
	#_CTYPE_L
 0x00001000L

	)

57 
	#_CTYPE_P
 0x00002000L

	)

58 
	#_CTYPE_S
 0x00004000L

	)

59 
	#_CTYPE_U
 0x00008000L

	)

60 
	#_CTYPE_X
 0x00010000L

	)

61 
	#_CTYPE_B
 0x00020000L

	)

62 
	#_CTYPE_R
 0x00040000L

	)

63 
	#_CTYPE_I
 0x00080000L

	)

64 
	#_CTYPE_T
 0x00100000L

	)

65 
	#_CTYPE_Q
 0x00200000L

	)

66 
	#_CTYPE_SW0
 0x20000000L

	)

67 
	#_CTYPE_SW1
 0x40000000L

	)

68 
	#_CTYPE_SW2
 0x80000000L

	)

69 
	#_CTYPE_SW3
 0xc0000000L

	)

70 
	#_CTYPE_SWM
 0xe0000000L

	)

71 
	#_CTYPE_SWS
 30

	)

74 
__BEGIN_DECLS


75 
	$___ru√ty≥
(
__˘_ru√_t
Ë
__puª
;

76 
__˘_ru√_t
 
	$___tﬁowî
(
__˘_ru√_t
Ë
__puª
;

77 
__˘_ru√_t
 
	$___touµî
(
__˘_ru√_t
Ë
__puª
;

78 
__END_DECLS


84 #ifde‡
_EXTERNALIZE_CTYPE_INLINES_


85 
	#_USE_CTYPE_INLINE_


	)

86 

	)

87 
	#__ölöe


	)

90 
__mb_sb_limô
;

95 #i‡!
	`deföed
(
_DONT_USE_CTYPE_INLINE_
) && \

96 (
	`deföed
(
_USE_CTYPE_INLINE_
Ë|| deföed(
__GNUC__
Ë|| 
	$deföed
(
__˝lu•lus
))

98 
	~<ru√ty≥.h
>

100 
__ölöe
 

101 
	$__maskru√
(
__˘_ru√_t
 
_c
, 
_f
)

103  ((
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___ru√ty≥
(_c) :

104 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
]Ë& 
_f
;

105 
	}
}

107 
__ölöe
 

108 
	$__sbmaskru√
(
__˘_ru√_t
 
_c
, 
_f
)

110  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? 0 :

111 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
] & 
_f
;

112 
	}
}

114 
__ölöe
 

115 
	$__i°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

117  (!!
	`__maskru√
(
_c
, 
_f
));

118 
	}
}

120 
__ölöe
 

121 
	$__sbi°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

123  (!!
	`__sbmaskru√
(
_c
, 
_f
));

124 
	}
}

126 
__ölöe
 

127 
	$__is˘y≥
(
__˘_ru√_t
 
_c
, 
_f
)

129  (
_c
 < 0 || _c >= 128) ? 0 :

130 !!(
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[
_c
] & 
_f
);

131 
	}
}

133 
__ölöe
 
__˘_ru√_t


134 
	$__touµî
(
__˘_ru√_t
 
_c
)

136  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___touµî
(_c) :

137 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

138 
	}
}

140 
__ölöe
 
__˘_ru√_t


141 
	$__sbtouµî
(
__˘_ru√_t
 
_c
)

143  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? _c :

144 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

145 
	}
}

147 
__ölöe
 
__˘_ru√_t


148 
	$__tﬁowî
(
__˘_ru√_t
 
_c
)

150  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___tﬁowî
(_c) :

151 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

152 
	}
}

154 
__ölöe
 
__˘_ru√_t


155 
	$__sbtﬁowî
(
__˘_ru√_t
 
_c
)

157  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? _c :

158 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

159 
	}
}

161 
__ölöe
 

162 
	$__wcwidth
(
__˘_ru√_t
 
_c
)

164 
_x
;

166 i‡(
_c
 == 0)

168 
_x
 = ()
	`__maskru√
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
);

169 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

170  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

171  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

172 
	}
}

176 
__BEGIN_DECLS


177 
__maskru√
(
__˘_ru√_t
, );

178 
__sbmaskru√
(
__˘_ru√_t
, );

179 
__i°y≥
(
__˘_ru√_t
, );

180 
__sbi°y≥
(
__˘_ru√_t
, );

181 
__is˘y≥
(
__˘_ru√_t
, );

182 
__˘_ru√_t
 
__touµî
(__ct_rune_t);

183 
__˘_ru√_t
 
__sbtouµî
(__ct_rune_t);

184 
__˘_ru√_t
 
__tﬁowî
(__ct_rune_t);

185 
__˘_ru√_t
 
__sbtﬁowî
(__ct_rune_t);

186 
__wcwidth
(
__˘_ru√_t
);

187 
	g__END_DECLS


	@/usr/include/machine/_inttypes.h

33 #i‚de‡
_MACHINE_INTTYPES_H_


34 
	#_MACHINE_INTTYPES_H_


	)

42 
	#PRId8
 "d"

	)

43 
	#PRId16
 "d"

	)

44 
	#PRId32
 "d"

	)

45 
	#PRId64
 "ld"

	)

46 
	#PRIdLEAST8
 "d"

	)

47 
	#PRIdLEAST16
 "d"

	)

48 
	#PRIdLEAST32
 "d"

	)

49 
	#PRIdLEAST64
 "ld"

	)

50 
	#PRIdFAST8
 "d"

	)

51 
	#PRIdFAST16
 "d"

	)

52 
	#PRIdFAST32
 "d"

	)

53 
	#PRIdFAST64
 "ld"

	)

54 
	#PRIdMAX
 "jd"

	)

55 
	#PRIdPTR
 "ld"

	)

57 
	#PRIi8
 "i"

	)

58 
	#PRIi16
 "i"

	)

59 
	#PRIi32
 "i"

	)

60 
	#PRIi64
 "li"

	)

61 
	#PRIiLEAST8
 "i"

	)

62 
	#PRIiLEAST16
 "i"

	)

63 
	#PRIiLEAST32
 "i"

	)

64 
	#PRIiLEAST64
 "li"

	)

65 
	#PRIiFAST8
 "i"

	)

66 
	#PRIiFAST16
 "i"

	)

67 
	#PRIiFAST32
 "i"

	)

68 
	#PRIiFAST64
 "li"

	)

69 
	#PRIiMAX
 "ji"

	)

70 
	#PRIiPTR
 "li"

	)

74 
	#PRIo8
 "o"

	)

75 
	#PRIo16
 "o"

	)

76 
	#PRIo32
 "o"

	)

77 
	#PRIo64
 "lo"

	)

78 
	#PRIoLEAST8
 "o"

	)

79 
	#PRIoLEAST16
 "o"

	)

80 
	#PRIoLEAST32
 "o"

	)

81 
	#PRIoLEAST64
 "lo"

	)

82 
	#PRIoFAST8
 "o"

	)

83 
	#PRIoFAST16
 "o"

	)

84 
	#PRIoFAST32
 "o"

	)

85 
	#PRIoFAST64
 "lo"

	)

86 
	#PRIoMAX
 "jo"

	)

87 
	#PRIoPTR
 "lo"

	)

89 
	#PRIu8
 "u"

	)

90 
	#PRIu16
 "u"

	)

91 
	#PRIu32
 "u"

	)

92 
	#PRIu64
 "lu"

	)

93 
	#PRIuLEAST8
 "u"

	)

94 
	#PRIuLEAST16
 "u"

	)

95 
	#PRIuLEAST32
 "u"

	)

96 
	#PRIuLEAST64
 "lu"

	)

97 
	#PRIuFAST8
 "u"

	)

98 
	#PRIuFAST16
 "u"

	)

99 
	#PRIuFAST32
 "u"

	)

100 
	#PRIuFAST64
 "lu"

	)

101 
	#PRIuMAX
 "ju"

	)

102 
	#PRIuPTR
 "lu"

	)

104 
	#PRIx8
 "x"

	)

105 
	#PRIx16
 "x"

	)

106 
	#PRIx32
 "x"

	)

107 
	#PRIx64
 "lx"

	)

108 
	#PRIxLEAST8
 "x"

	)

109 
	#PRIxLEAST16
 "x"

	)

110 
	#PRIxLEAST32
 "x"

	)

111 
	#PRIxLEAST64
 "lx"

	)

112 
	#PRIxFAST8
 "x"

	)

113 
	#PRIxFAST16
 "x"

	)

114 
	#PRIxFAST32
 "x"

	)

115 
	#PRIxFAST64
 "lx"

	)

116 
	#PRIxMAX
 "jx"

	)

117 
	#PRIxPTR
 "lx"

	)

119 
	#PRIX8
 "X"

	)

120 
	#PRIX16
 "X"

	)

121 
	#PRIX32
 "X"

	)

122 
	#PRIX64
 "lX"

	)

123 
	#PRIXLEAST8
 "X"

	)

124 
	#PRIXLEAST16
 "X"

	)

125 
	#PRIXLEAST32
 "X"

	)

126 
	#PRIXLEAST64
 "lX"

	)

127 
	#PRIXFAST8
 "X"

	)

128 
	#PRIXFAST16
 "X"

	)

129 
	#PRIXFAST32
 "X"

	)

130 
	#PRIXFAST64
 "lX"

	)

131 
	#PRIXMAX
 "jX"

	)

132 
	#PRIXPTR
 "lX"

	)

136 
	#SCNd8
 "hhd"

	)

137 
	#SCNd16
 "hd"

	)

138 
	#SCNd32
 "d"

	)

139 
	#SCNd64
 "ld"

	)

140 
	#SCNdLEAST8
 "hhd"

	)

141 
	#SCNdLEAST16
 "hd"

	)

142 
	#SCNdLEAST32
 "d"

	)

143 
	#SCNdLEAST64
 "ld"

	)

144 
	#SCNdFAST8
 "d"

	)

145 
	#SCNdFAST16
 "d"

	)

146 
	#SCNdFAST32
 "d"

	)

147 
	#SCNdFAST64
 "ld"

	)

148 
	#SCNdMAX
 "jd"

	)

149 
	#SCNdPTR
 "ld"

	)

151 
	#SCNi8
 "hhi"

	)

152 
	#SCNi16
 "hi"

	)

153 
	#SCNi32
 "i"

	)

154 
	#SCNi64
 "li"

	)

155 
	#SCNiLEAST8
 "hhi"

	)

156 
	#SCNiLEAST16
 "hi"

	)

157 
	#SCNiLEAST32
 "i"

	)

158 
	#SCNiLEAST64
 "li"

	)

159 
	#SCNiFAST8
 "i"

	)

160 
	#SCNiFAST16
 "i"

	)

161 
	#SCNiFAST32
 "i"

	)

162 
	#SCNiFAST64
 "li"

	)

163 
	#SCNiMAX
 "ji"

	)

164 
	#SCNiPTR
 "li"

	)

168 
	#SCNo8
 "hho"

	)

169 
	#SCNo16
 "ho"

	)

170 
	#SCNo32
 "o"

	)

171 
	#SCNo64
 "lo"

	)

172 
	#SCNoLEAST8
 "hho"

	)

173 
	#SCNoLEAST16
 "ho"

	)

174 
	#SCNoLEAST32
 "o"

	)

175 
	#SCNoLEAST64
 "lo"

	)

176 
	#SCNoFAST8
 "o"

	)

177 
	#SCNoFAST16
 "o"

	)

178 
	#SCNoFAST32
 "o"

	)

179 
	#SCNoFAST64
 "lo"

	)

180 
	#SCNoMAX
 "jo"

	)

181 
	#SCNoPTR
 "lo"

	)

183 
	#SCNu8
 "hhu"

	)

184 
	#SCNu16
 "hu"

	)

185 
	#SCNu32
 "u"

	)

186 
	#SCNu64
 "lu"

	)

187 
	#SCNuLEAST8
 "hhu"

	)

188 
	#SCNuLEAST16
 "hu"

	)

189 
	#SCNuLEAST32
 "u"

	)

190 
	#SCNuLEAST64
 "lu"

	)

191 
	#SCNuFAST8
 "u"

	)

192 
	#SCNuFAST16
 "u"

	)

193 
	#SCNuFAST32
 "u"

	)

194 
	#SCNuFAST64
 "lu"

	)

195 
	#SCNuMAX
 "ju"

	)

196 
	#SCNuPTR
 "lu"

	)

198 
	#SCNx8
 "hhx"

	)

199 
	#SCNx16
 "hx"

	)

200 
	#SCNx32
 "x"

	)

201 
	#SCNx64
 "lx"

	)

202 
	#SCNxLEAST8
 "hhx"

	)

203 
	#SCNxLEAST16
 "hx"

	)

204 
	#SCNxLEAST32
 "x"

	)

205 
	#SCNxLEAST64
 "lx"

	)

206 
	#SCNxFAST8
 "x"

	)

207 
	#SCNxFAST16
 "x"

	)

208 
	#SCNxFAST32
 "x"

	)

209 
	#SCNxFAST64
 "lx"

	)

210 
	#SCNxMAX
 "jx"

	)

211 
	#SCNxPTR
 "lx"

	)

	@/usr/include/machine/_limits.h

33 #i‚def 
_MACHINE__LIMITS_H_


34 
	#_MACHINE__LIMITS_H_


	)

47 
	#__CHAR_BIT
 8

	)

49 
	#__SCHAR_MAX
 0x7‡

	)

50 
	#__SCHAR_MIN
 (-0x7‡- 1Ë

	)

52 
	#__UCHAR_MAX
 0xffU

	)

54 
	#__USHRT_MAX
 0xffffU

	)

55 
	#__SHRT_MAX
 0x7ff‡

	)

56 
	#__SHRT_MIN
 (-0x7ff‡- 1Ë

	)

58 
	#__UINT_MAX
 0xffffffffU

	)

59 
	#__INT_MAX
 0x7ffffff‡

	)

60 
	#__INT_MIN
 (-0x7ffffff‡- 1Ë

	)

62 
	#__ULONG_MAX
 0xffffffffffffffffUL

	)

63 
	#__LONG_MAX
 0x7fffffffffffffffL

	)

64 
	#__LONG_MIN
 (-0x7fffffffffffffffL - 1Ë

	)

67 
	#__ULLONG_MAX
 0xffffffffffffffffULL

	)

68 
	#__LLONG_MAX
 0x7fffffffffffffffLL

	)

69 
	#__LLONG_MIN
 (-0x7fffffffffffffffLL - 1Ë

	)

71 
	#__SSIZE_MAX
 
__LONG_MAX


	)

73 
	#__SIZE_T_MAX
 
__ULONG_MAX


	)

75 
	#__OFF_MAX
 
__LONG_MAX


	)

76 
	#__OFF_MIN
 
__LONG_MIN


	)

79 
	#__UQUAD_MAX
 
__ULONG_MAX


	)

80 
	#__QUAD_MAX
 
__LONG_MAX


	)

81 
	#__QUAD_MIN
 
__LONG_MIN


	)

83 
	#__LONG_BIT
 64

	)

84 
	#__WORD_BIT
 32

	)

90 
	#__MINSIGSTKSZ
 (512 * 4)

	)

	@/usr/include/machine/_stdint.h

40 #i‚de‡
_MACHINE__STDINT_H_


41 
	#_MACHINE__STDINT_H_


	)

43 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

45 
	#INT8_C
(
c
Ë(c)

	)

46 
	#INT16_C
(
c
Ë(c)

	)

47 
	#INT32_C
(
c
Ë(c)

	)

48 
	#INT64_C
(
c
Ë(¯## 
L
)

	)

50 
	#UINT8_C
(
c
Ë(c)

	)

51 
	#UINT16_C
(
c
Ë(c)

	)

52 
	#UINT32_C
(
c
Ë(¯## 
U
)

	)

53 
	#UINT64_C
(
c
Ë(¯## 
UL
)

	)

55 
	#INTMAX_C
(
c
Ë(¯## 
L
)

	)

56 
	#UINTMAX_C
(
c
Ë(¯## 
UL
)

	)

60 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

67 
	#INT8_MIN
 (-0x7f-1)

	)

68 
	#INT16_MIN
 (-0x7fff-1)

	)

69 
	#INT32_MIN
 (-0x7fffffff-1)

	)

70 
	#INT64_MIN
 (-0x7fffffffffffffffL-1)

	)

73 
	#INT8_MAX
 0x7f

	)

74 
	#INT16_MAX
 0x7fff

	)

75 
	#INT32_MAX
 0x7fffffff

	)

76 
	#INT64_MAX
 0x7fffffffffffffffL

	)

79 
	#UINT8_MAX
 0xff

	)

80 
	#UINT16_MAX
 0xffff

	)

81 
	#UINT32_MAX
 0xffffffffU

	)

82 
	#UINT64_MAX
 0xffffffffffffffffUL

	)

89 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

90 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

91 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

92 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

95 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

96 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

97 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

98 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

101 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

102 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

103 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

104 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

111 
	#INT_FAST8_MIN
 
INT32_MIN


	)

112 
	#INT_FAST16_MIN
 
INT32_MIN


	)

113 
	#INT_FAST32_MIN
 
INT32_MIN


	)

114 
	#INT_FAST64_MIN
 
INT64_MIN


	)

117 
	#INT_FAST8_MAX
 
INT32_MAX


	)

118 
	#INT_FAST16_MAX
 
INT32_MAX


	)

119 
	#INT_FAST32_MAX
 
INT32_MAX


	)

120 
	#INT_FAST64_MAX
 
INT64_MAX


	)

123 
	#UINT_FAST8_MAX
 
UINT32_MAX


	)

124 
	#UINT_FAST16_MAX
 
UINT32_MAX


	)

125 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

126 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

132 
	#INTPTR_MIN
 
INT64_MIN


	)

133 
	#INTPTR_MAX
 
INT64_MAX


	)

134 
	#UINTPTR_MAX
 
UINT64_MAX


	)

140 
	#INTMAX_MIN
 
INT64_MIN


	)

141 
	#INTMAX_MAX
 
INT64_MAX


	)

142 
	#UINTMAX_MAX
 
UINT64_MAX


	)

149 
	#PTRDIFF_MIN
 
INT64_MIN


	)

150 
	#PTRDIFF_MAX
 
INT64_MAX


	)

153 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

154 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

157 
	#SIZE_MAX
 
UINT64_MAX


	)

159 #i‚de‡
WCHAR_MIN


161 
	#WCHAR_MIN
 
INT32_MIN


	)

162 
	#WCHAR_MAX
 
INT32_MAX


	)

166 
	#WINT_MIN
 
INT32_MIN


	)

167 
	#WINT_MAX
 
INT32_MAX


	)

	@/usr/include/machine/endian.h

33 #i‚de‡
_MACHINE_ENDIAN_H_


34 
	#_MACHINE_ENDIAN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

39 #ifde‡
__˝lu•lus


46 
	#_QUAD_HIGHWORD
 1

	)

47 
	#_QUAD_LOWWORD
 0

	)

53 
	#_LITTLE_ENDIAN
 1234

	)

54 
	#_BIG_ENDIAN
 4321

	)

55 
	#_PDP_ENDIAN
 3412

	)

57 
	#_BYTE_ORDER
 
_LITTLE_ENDIAN


	)

63 #i‡
__BSD_VISIBLE


64 
	#LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

65 
	#BIG_ENDIAN
 
_BIG_ENDIAN


	)

66 
	#PDP_ENDIAN
 
_PDP_ENDIAN


	)

67 
	#BYTE_ORDER
 
_BYTE_ORDER


	)

70 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__GNUCLIKE_BUILTIN_CONSTANT_P
)

72 
	#__byã_sw≠_öt_v¨
(
x
) \

73 
	`__exãnsi⁄__
 ({ 
__uöt32_t
 
__X
 = (
x
); \

74 
	`__asm
 ("bsw≠ %0" : "+r" (
__X
)); \

75 
__X
; })

	)

77 #ifde‡
__OPTIMIZE__


79 
	#__byã_sw≠_öt_c⁄°
(
x
) \

80 ((((
x
) & 0xff000000) >> 24) | \

81 (((
x
) & 0x00ff0000) >> 8) | \

82 (((
x
) & 0x0000ff00) << 8) | \

83 (((
x
Ë& 0x000000ffË<< 24))

	)

84 
	#__byã_sw≠_öt
(
x
Ë(
	`__buûtö_c⁄°™t_p
(x) ? \

85 
	`__byã_sw≠_öt_c⁄°
(
x
Ë: 
	`__byã_sw≠_öt_v¨
(x))

	)

89 
	#__byã_sw≠_öt
(
x
Ë
	`__byã_sw≠_öt_v¨
(x)

	)

93 
	#__byã_sw≠_l⁄g_v¨
(
x
) \

94 
	`__exãnsi⁄__
 ({ 
__uöt64_t
 
__X
 = (
x
); \

95 
	`__asm
 ("bsw≠ %0" : "+r" (
__X
)); \

96 
__X
; })

	)

98 #ifde‡
__OPTIMIZE__


100 
	#__byã_sw≠_l⁄g_c⁄°
(
x
) \

101 (((
x
 >> 56) | \

102 ((
x
 >> 40) & 0xff00) | \

103 ((
x
 >> 24) & 0xff0000) | \

104 ((
x
 >> 8) & 0xff000000) | \

105 ((
x
 << 8) & (0xfful << 32)) | \

106 ((
x
 << 24) & (0xfful << 40)) | \

107 ((
x
 << 40) & (0xfful << 48)) | \

108 ((
x
 << 56))))

	)

110 
	#__byã_sw≠_l⁄g
(
x
Ë(
	`__buûtö_c⁄°™t_p
(x) ? \

111 
	`__byã_sw≠_l⁄g_c⁄°
(
x
Ë: 
	`__byã_sw≠_l⁄g_v¨
(x))

	)

115 
	#__byã_sw≠_l⁄g
(
x
Ë
	`__byã_sw≠_l⁄g_v¨
(x)

	)

119 
__ölöe
 
__uöt64_t


120 
__bsw≠64
(
__uöt64_t
 
_x
)

123  (
__byã_sw≠_l⁄g
(
_x
));

126 
__ölöe
 
__uöt32_t


127 
__bsw≠32
(
__uöt32_t
 
_x
)

130  (
__byã_sw≠_öt
(
_x
));

133 
__ölöe
 
__uöt16_t


134 
__bsw≠16
(
__uöt16_t
 
_x
)

136  (
_x
 << 8 | _x >> 8);

139 
	#__ht⁄l
(
x
Ë
	`__bsw≠32
(x)

	)

140 
	#__ht⁄s
(
x
Ë
	`__bsw≠16
(x)

	)

141 
	#__¡ohl
(
x
Ë
	`__bsw≠32
(x)

	)

142 
	#__¡ohs
(
x
Ë
	`__bsw≠16
(x)

	)

151 
	#_BYTEORDER_FUNC_DEFINED


	)

155 #ifde‡
__˝lu•lus


	@/usr/include/machine/param.h

51 #i‚de‡
_ALIGNBYTES


52 
	#_ALIGNBYTES
 ((Ë- 1)

	)

54 #i‚de‡
_ALIGN


55 
	#_ALIGN
(
p
Ë(((
u_l⁄g
)’Ë+ 
_ALIGNBYTES
Ë&~ _ALIGNBYTES)

	)

58 #i‚de‡
_NO_NAMESPACE_POLLUTION


60 
	#__HAVE_ACPI


	)

61 
	#__PCI_REROUTE_INTERRUPT


	)

63 #i‚de‡
_MACHINE_PARAM_H_


64 
	#_MACHINE_PARAM_H_


	)

66 #i‚de‡
MACHINE


67 
	#MACHINE
 "amd64"

	)

69 #i‚de‡
MACHINE_ARCH


70 
	#MACHINE_ARCH
 "amd64"

	)

72 #i‚de‡
MACHINE_ARCH32


73 
	#MACHINE_ARCH32
 "i386"

	)

76 #i‡
deföed
(
SMP
Ë|| deföed(
KLD_MODULE
)

77 
	#MAXCPU
 32

	)

79 
	#MAXCPU
 1

	)

82 
	#ALIGNBYTES
 
_ALIGNBYTES


	)

83 
	#ALIGN
(
p
Ë
	`_ALIGN
’)

	)

90 
	#ALIGNED_POINTER
(
p
, 
t
Ë1

	)

96 
	#CACHE_LINE_SHIFT
 7

	)

97 
	#CACHE_LINE_SIZE
 (1 << 
CACHE_LINE_SHIFT
)

	)

100 
	#NPTEPG
 (
PAGE_SIZE
/( (
±_íåy_t
)))

	)

101 
	#NPTEPGSHIFT
 9

	)

102 
	#PAGE_SHIFT
 12

	)

103 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
Ë

	)

104 
	#PAGE_MASK
 (
PAGE_SIZE
-1)

	)

106 
	#NPDEPG
 (
PAGE_SIZE
/( (
pd_íåy_t
)))

	)

107 
	#NPDEPGSHIFT
 9

	)

108 
	#PDRSHIFT
 21

	)

109 
	#NBPDR
 (1<<
PDRSHIFT
Ë

	)

110 
	#PDRMASK
 (
NBPDR
-1)

	)

112 
	#NPDPEPG
 (
PAGE_SIZE
/( (
pdp_íåy_t
)))

	)

113 
	#NPDPEPGSHIFT
 9

	)

114 
	#PDPSHIFT
 30

	)

115 
	#NBPDP
 (1<<
PDPSHIFT
Ë

	)

116 
	#PDPMASK
 (
NBPDP
-1)

	)

118 
	#NPML4EPG
 (
PAGE_SIZE
/( (
pml4_íåy_t
)))

	)

119 
	#NPML4EPGSHIFT
 9

	)

120 
	#PML4SHIFT
 39

	)

121 
	#NBPML4
 (1ul<<
PML4SHIFT
)

	)

122 
	#PML4MASK
 (
NBPML4
-1)

	)

124 
	#MAXPAGESIZES
 3

	)

126 
	#IOPAGES
 2

	)

128 #i‚def 
KSTACK_PAGES


129 
	#KSTACK_PAGES
 4

	)

131 
	#KSTACK_GUARD_PAGES
 1

	)

137 #i‚de‡
VM_SWZONE_SIZE_MAX


138 
	#VM_SWZONE_SIZE_MAX
 (32 * 1024 * 1024)

	)

144 
	#round_∑ge
(
x
Ë(((()(x)Ë+ 
PAGE_MASK
Ë& ~(PAGE_MASK))

	)

145 
	#åunc_∑ge
(
x
Ë(()(xË& ~(
PAGE_MASK
))

	)

146 
	#åunc_2m∑ge
(
x
Ë(()(xË& ~
PDRMASK
)

	)

147 
	#round_2m∑ge
(
x
Ë(((()(x)Ë+ 
PDRMASK
Ë& ~PDRMASK)

	)

148 
	#åunc_1g∑ge
(
x
Ë(()(xË& ~
PDPMASK
)

	)

150 
	#©›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

151 
	#±ﬂ
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

153 
	#amd64_bt›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

154 
	#amd64_±ob
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

156 
	#pgtok
(
x
Ë(()(xË* (
PAGE_SIZE
 / 1024))

	)

	@/usr/include/machine/pcb.h

37 #i‚de‡
_AMD64_PCB_H_


38 
	#_AMD64_PCB_H_


	)

43 
	~<machöe/Âu.h
>

44 
	~<machöe/£gmíts.h
>

46 
	spcb
 {

47 
ªgi°î_t
 
	mpcb_r15
;

48 
ªgi°î_t
 
	mpcb_r14
;

49 
ªgi°î_t
 
	mpcb_r13
;

50 
ªgi°î_t
 
	mpcb_r12
;

51 
ªgi°î_t
 
	mpcb_rbp
;

52 
ªgi°î_t
 
	mpcb_r•
;

53 
ªgi°î_t
 
	mpcb_rbx
;

54 
ªgi°î_t
 
	mpcb_rù
;

55 
ªgi°î_t
 
	mpcb_fsba£
;

56 
ªgi°î_t
 
	mpcb_gsba£
;

57 
ªgi°î_t
 
	mpcb_kgsba£
;

58 
ªgi°î_t
 
	mpcb_¸0
;

59 
ªgi°î_t
 
	mpcb_¸2
;

60 
ªgi°î_t
 
	mpcb_¸3
;

61 
ªgi°î_t
 
	mpcb_¸4
;

62 
ªgi°î_t
 
	mpcb_dr0
;

63 
ªgi°î_t
 
	mpcb_dr1
;

64 
ªgi°î_t
 
	mpcb_dr2
;

65 
ªgi°î_t
 
	mpcb_dr3
;

66 
ªgi°î_t
 
	mpcb_dr6
;

67 
ªgi°î_t
 
	mpcb_dr7
;

69 
ªgi⁄_des¸ùt‹
 
	mpcb_gdt
;

70 
ªgi⁄_des¸ùt‹
 
	mpcb_idt
;

71 
ªgi⁄_des¸ùt‹
 
	mpcb_ldt
;

72 
uöt16_t
 
	mpcb_å
;

74 
u_öt
 
	mpcb_Êags
;

75 
	#PCB_FULL_IRET
 0x01

	)

76 
	#PCB_DBREGS
 0x02

	)

77 
	#PCB_KERNFPU
 0x04

	)

78 
	#PCB_FPUINITDONE
 0x08

	)

79 
	#PCB_USERFPUINITDONE
 0x10

	)

80 
	#PCB_GS32BIT
 0x20

	)

81 
	#PCB_32BIT
 0x40

	)

83 
uöt16_t
 
	mpcb_öôül_Âucw
;

86 
ˇddr_t
 
	mpcb_⁄Áu…
;

89 
u£r_£gmít_des¸ùt‹
 
	mpcb_gs32sd
;

92 
amd64tss
 *
	mpcb_ts•
;

94 
ßveÂu
 *
	mpcb_ßve
;

95 
ßveÂu
 
	mpcb_u£r_ßve
;

98 #ifde‡
_KERNEL


99 
	gå≠‰ame
;

113 
__ölöe
 

114 
	$£t_pcb_Êags
(
pcb
 *pcb, c⁄° 
u_öt
 
Êags
)

117 
__asm
 
	`__vﬁ©ûe
("orl %1,%0"

118 : "=m" (
pcb
->
pcb_Êags
Ë: "ú" (
Êags
), "m" (pcb->pcb_flags)

120 
	}
}

122 
__ölöe
 

123 
	$˛ór_pcb_Êags
(
pcb
 *pcb, c⁄° 
u_öt
 
Êags
)

126 
__asm
 
	`__vﬁ©ûe
("andl %1,%0"

127 : "=m" (
pcb
->
pcb_Êags
Ë: "ú" (~
Êags
), "m" (pcb->pcb_flags)

129 
	}
}

131 
make˘x
(
å≠‰ame
 *, 
pcb
 *);

132 
ßve˘x
(
pcb
 *);

	@/usr/include/machine/proc.h

33 #i‚de‡
_MACHINE_PROC_H_


34 
	#_MACHINE_PROC_H_


	)

36 
	~<machöe/£gmíts.h
>

38 
	s¥oc_ldt
 {

39 
ˇddr_t
 
	mldt_ba£
;

40 
	mldt_ªf˙t
;

46 
	smdthªad
 {

47 
	mmd_•ölock_cou¡
;

48 
ªgi°î_t
 
	mmd_ßved_Êags
;

51 
	smd¥oc
 {

52 
¥oc_ldt
 *
	mmd_ldt
;

53 
sy°em_£gmít_des¸ùt‹
 
	mmd_ldt_sd
;

56 
	#KINFO_PROC_SIZE
 1088

	)

57 
	#KINFO_PROC32_SIZE
 768

	)

59 #ifdef 
_KERNEL


62 
	#GET_STACK_USAGE
(
tŸÆ
, 
u£d
) do { \

63 
thªad
 *
td
 = 
cuπhªad
; \

64 (
tŸÆ
Ë
td
->
td_k°ack_∑ges
 * 
PAGE_SIZE
; \

65 (
u£d
Ë(*)
td
->
td_k°ack
 + \

66 
td
->
td_k°ack_∑ges
 * 
PAGE_SIZE
 - \

67 (*)&
td
; \

68 } 0)

	)

70 
£t_u£r_ldt
(
md¥oc
 *);

71 
¥oc_ldt
 *
u£r_ldt_Æloc
(
¥oc
 *, );

72 
u£r_ldt_‰ì
(
thªad
 *);

73 
u£r_ldt_dîef
(
¥oc_ldt
 *);

74 
	gsyßrch_¨gs
;

75 
syßrch_ldt
(
thªad
 *
td
, 
syßrch_¨gs
 *
u≠
, 
u≠_•a˚
);

76 
amd64_£t_ldt_d©a
(
thªad
 *
td
, 
°¨t
, 
num
,

77 
u£r_£gmít_des¸ùt‹
 *
descs
);

79 
mtx
 
dt_lock
;

80 
max_ldt_£gmít
;

82 
	ssysˇŒ_¨gs
 {

83 
u_öt
 
	mcode
;

84 
sy£¡
 *
	mˇŒp
;

85 
ªgi°î_t
 
	m¨gs
[8];

86 
	m«rg
;

88 
	#HAVE_SYSCALL_ARGS_DEF
 1

	)

	@/usr/include/machine/setjmp.h

32 #i‚de‡
_MACHINE_SETJMP_H_


33 
	#_MACHINE_SETJMP_H_


	)

35 
	~<sys/cdefs.h
>

37 
	#_JBLEN
 12

	)

44 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


45 
	s_sigjmp_buf
 { 
	m_sjb
[
_JBLEN
]; } 
	tsigjmp_buf
[1];

48 
	s_jmp_buf
 { 
	m_jb
[
_JBLEN
]; } 
	tjmp_buf
[1];

	@/usr/include/ncurses_dll.h

30 #i‚de‡
NCURSES_DLL_H_ö˛


31 
	#NCURSES_DLL_H_ö˛
 1

	)

37 #unde‡
NCURSES_DLL


38 
	#NCURSES_STATIC


	)

40 #i‡
deföed
(
__CYGWIN__
)

41 #i‡
deföed
(
NCURSES_DLL
)

42 #i‡
deföed
(
NCURSES_STATIC
)

43 #unde‡
NCURSES_STATIC


46 #unde‡
NCURSES_IMPEXP


47 #unde‡
NCURSES_API


48 #unde‡
NCURSES_EXPORT


49 #unde‡
NCURSES_EXPORT_VAR


50 #i‡
deföed
(
NCURSES_DLL
)

52 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

53 #ñi‡
deföed
(
NCURSES_STATIC
)

55 
	#NCURSES_IMPEXP


	)

58 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 
	#NCURSES_API
 
__cde˛


	)

61 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

62 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

66 #i‡!
deföed
(
NCURSES_IMPEXP
)

67 
	#NCURSES_IMPEXP


	)

69 #i‡!
deföed
(
NCURSES_API
)

70 
	#NCURSES_API


	)

72 #i‡!
deföed
(
NCURSES_EXPORT
)

73 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

75 #i‡!
deföed
(
NCURSES_EXPORT_VAR
)

76 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

83 
	#NCURSES_PUBLIC_VAR
(
«me
Ë
_nc_
##
	)
name

84 
	#NCURSES_WRAPPED_VAR
(
ty≥
,
«me
Ëty≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

	@/usr/include/netinet6/in6.h

64 #i‚de‡
__KAME_NETINET_IN_H_INCLUDED_


68 #i‚de‡
_NETINET6_IN6_H_


69 
	#_NETINET6_IN6_H_


	)

76 
	#__KAME__


	)

77 
	#__KAME_VERSION
 "FªeBSD"

	)

84 #i‡
__BSD_VISIBLE


85 
	#IPV6PORT_RESERVED
 1024

	)

86 
	#IPV6PORT_ANONMIN
 49152

	)

87 
	#IPV6PORT_ANONMAX
 65535

	)

88 
	#IPV6PORT_RESERVEDMIN
 600

	)

89 
	#IPV6PORT_RESERVEDMAX
 (
IPV6PORT_RESERVED
-1)

	)

95 
	sö6_addr
 {

97 
uöt8_t
 
	m__u6_addr8
[16];

98 
uöt16_t
 
	m__u6_addr16
[8];

99 
uöt32_t
 
	m__u6_addr32
[4];

100 } 
	m__u6_addr
;

103 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

104 #ifde‡
_KERNEL


105 
	#s6_addr8
 
__u6_addr
.
__u6_addr8


	)

106 
	#s6_addr16
 
__u6_addr
.
__u6_addr16


	)

107 
	#s6_addr32
 
__u6_addr
.
__u6_addr32


	)

110 
	#INET6_ADDRSTRLEN
 46

	)

119 #i‡
__BSD_VISIBLE


120 
	#SIN6_LEN


	)

123 
	ssockaddr_ö6
 {

124 
uöt8_t
 
	msö6_Àn
;

125 
ß_Ámûy_t
 
	msö6_Ámûy
;

126 
ö_p‹t_t
 
	msö6_p‹t
;

127 
uöt32_t
 
	msö6_Êowöfo
;

128 
ö6_addr
 
	msö6_addr
;

129 
uöt32_t
 
	msö6_sc›e_id
;

135 #ifde‡
_KERNEL


136 
	#IN6MASK0
 {{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}}

	)

137 
	#IN6MASK32
 {{{ 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, \

138 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

139 
	#IN6MASK64
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

140 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

141 
	#IN6MASK96
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

142 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}}

	)

143 
	#IN6MASK128
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

144 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf‡}}}

	)

147 #ifde‡
_KERNEL


148 c⁄° 
sockaddr_ö6
 
ß6_™y
;

150 c⁄° 
ö6_addr
 
ö6mask0
;

151 c⁄° 
ö6_addr
 
ö6mask32
;

152 c⁄° 
ö6_addr
 
ö6mask64
;

153 c⁄° 
ö6_addr
 
ö6mask96
;

154 c⁄° 
ö6_addr
 
ö6mask128
;

160 #ifde‡
_KERNEL


161 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


162 
	#IPV6_ADDR_INT32_ONE
 1

	)

163 
	#IPV6_ADDR_INT32_TWO
 2

	)

164 
	#IPV6_ADDR_INT32_MNL
 0xff010000

	)

165 
	#IPV6_ADDR_INT32_MLL
 0xff020000

	)

166 
	#IPV6_ADDR_INT32_SMP
 0x0000ffff

	)

167 
	#IPV6_ADDR_INT16_ULL
 0x„80

	)

168 
	#IPV6_ADDR_INT16_USL
 0x„c0

	)

169 
	#IPV6_ADDR_INT16_MLL
 0xff02

	)

170 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


171 
	#IPV6_ADDR_INT32_ONE
 0x01000000

	)

172 
	#IPV6_ADDR_INT32_TWO
 0x02000000

	)

173 
	#IPV6_ADDR_INT32_MNL
 0x000001ff

	)

174 
	#IPV6_ADDR_INT32_MLL
 0x000002ff

	)

175 
	#IPV6_ADDR_INT32_SMP
 0xffff0000

	)

176 
	#IPV6_ADDR_INT16_ULL
 0x80„

	)

177 
	#IPV6_ADDR_INT16_USL
 0xc0„

	)

178 
	#IPV6_ADDR_INT16_MLL
 0x02ff

	)

185 #i‡
__BSD_VISIBLE


186 
	#IN6ADDR_ANY_INIT
 \

188 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

189 
	#IN6ADDR_LOOPBACK_INIT
 \

191 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

192 
	#IN6ADDR_NODELOCAL_ALLNODES_INIT
 \

194 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

195 
	#IN6ADDR_INTFACELOCAL_ALLNODES_INIT
 \

197 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

198 
	#IN6ADDR_LINKLOCAL_ALLNODES_INIT
 \

200 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

201 
	#IN6ADDR_LINKLOCAL_ALLROUTERS_INIT
 \

203 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}

	)

204 
	#IN6ADDR_LINKLOCAL_ALLV2ROUTERS_INIT
 \

206 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 }}}

	)

209 c⁄° 
ö6_addr
 
ö6addr_™y
;

210 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

211 #i‡
__BSD_VISIBLE


212 c⁄° 
ö6_addr
 
ö6addr_nodñoˇl_Æ odes
;

213 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Æ odes
;

214 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_ÆÃouãrs
;

215 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Ælv2rouãrs
;

224 #ifde‡
_KERNEL


225 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

226 (
	`bcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

228 #i‡
__BSD_VISIBLE


229 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

230 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

237 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

238 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

239 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

240 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

241 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=0))

	)

246 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

247 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

248 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

249 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

250 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë=
	`¡ohl
(1)))

	)

255 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

256 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

257 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

258 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]) == 0) && \

259 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]) != 0) && \

260 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[12]Ë!
	`¡ohl
(1)))

	)

265 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

266 ((*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[0]) == 0) && \

267 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[4]) == 0) && \

268 (*(c⁄° 
u_öt32_t
 *)(c⁄° *)(&(
a
)->
s6_addr
[8]Ë=
	`¡ohl
(0x0000ffff)))

	)

274 #ifde‡
_KERNEL


275 
	#IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

276 
	#IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

277 
	#IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

278 
	#IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

279 
	#IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

280 
	#IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

282 
	#__IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

283 
	#__IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

284 
	#__IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

285 
	#__IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

286 
	#__IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

287 
	#__IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

294 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

295 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0x80))

	)

296 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

297 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0xc0))

	)

302 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(◊)->
s6_addr
[0] =0xff)

	)

304 #ifde‡
_KERNEL


305 
	#IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

307 
	#__IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

313 #ifde‡
_KERNEL


314 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

315 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

316 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_NODELOCAL
))

	)

317 
	#IN6_IS_ADDR_MC_INTFACELOCAL
(
a
) \

318 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

319 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_INTFACELOCAL
))

	)

320 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

321 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

322 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

323 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

324 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

325 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_SITELOCAL
))

	)

326 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

327 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

328 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

329 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

330 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

331 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_GLOBAL
))

	)

333 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

334 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

335 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_NODELOCAL
))

	)

336 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

337 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

338 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

339 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

340 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

341 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_SITELOCAL
))

	)

342 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

343 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

344 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

345 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

346 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

347 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_GLOBAL
))

	)

350 #ifde‡
_KERNEL


354 
	#IN6_IS_SCOPE_LINKLOCAL
(
a
) \

355 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

356 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)))

	)

357 
	#IN6_IS_SCOPE_EMBED
(
a
) \

358 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

359 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)) || \

360 (
	`IN6_IS_ADDR_MC_INTFACELOCAL
(
a
)))

	)

362 
	#IFA6_IS_DEPRECATED
(
a
) \

363 ((
a
)->
ü6_li„time
.
ü6t_∂time
 !
ND6_INFINITE_LIFETIME
 && \

364 (
u_öt32_t
)((
time_£c⁄d
 - (
a
)->
ü6_upd©ëime
)) > \

365 (
a
)->
ü6_li„time
.
ü6t_∂time
)

	)

366 
	#IFA6_IS_INVALID
(
a
) \

367 ((
a
)->
ü6_li„time
.
ü6t_v…ime
 !
ND6_INFINITE_LIFETIME
 && \

368 (
u_öt32_t
)((
time_£c⁄d
 - (
a
)->
ü6_upd©ëime
)) > \

369 (
a
)->
ü6_li„time
.
ü6t_v…ime
)

	)

375 #i‡
__BSD_VISIBLE


376 
	srouã_ö6
 {

377 
πíåy
 *
	mro_π
;

378 
Œíåy
 *
	mro_Œe
;

379 
sockaddr_ö6
 
	mro_d°
;

389 
	#IPV6_OPTIONS
 1

	)

390 
	#IPV6_RECVOPTS
 5

	)

391 
	#IPV6_RECVRETOPTS
 6

	)

392 
	#IPV6_RECVDSTADDR
 7

	)

393 
	#IPV6_RETOPTS
 8

	)

395 
	#IPV6_SOCKOPT_RESERVED1
 3

	)

396 
	#IPV6_UNICAST_HOPS
 4

	)

397 
	#IPV6_MULTICAST_IF
 9

	)

398 
	#IPV6_MULTICAST_HOPS
 10

	)

399 
	#IPV6_MULTICAST_LOOP
 11

	)

400 
	#IPV6_JOIN_GROUP
 12

	)

401 
	#IPV6_LEAVE_GROUP
 13

	)

402 
	#IPV6_PORTRANGE
 14

	)

403 
	#ICMP6_FILTER
 18

	)

405 #ifde‡
_KERNEL


406 
	#IPV6_2292PKTINFO
 19

	)

407 
	#IPV6_2292HOPLIMIT
 20

	)

408 
	#IPV6_2292NEXTHOP
 21

	)

409 
	#IPV6_2292HOPOPTS
 22

	)

410 
	#IPV6_2292DSTOPTS
 23

	)

411 
	#IPV6_2292RTHDR
 24

	)

412 
	#IPV6_2292PKTOPTIONS
 25

	)

415 
	#IPV6_CHECKSUM
 26

	)

416 
	#IPV6_V6ONLY
 27

	)

417 #i‚de‡
_KERNEL


418 
	#IPV6_BINDV6ONLY
 
IPV6_V6ONLY


	)

422 
	#IPV6_IPSEC_POLICY
 28

	)

425 
	#IPV6_FAITH
 29

	)

428 
	#IPV6_FW_ADD
 30

	)

429 
	#IPV6_FW_DEL
 31

	)

430 
	#IPV6_FW_FLUSH
 32

	)

431 
	#IPV6_FW_ZERO
 33

	)

432 
	#IPV6_FW_GET
 34

	)

436 
	#IPV6_RTHDRDSTOPTS
 35

	)

438 
	#IPV6_RECVPKTINFO
 36

	)

439 
	#IPV6_RECVHOPLIMIT
 37

	)

440 
	#IPV6_RECVRTHDR
 38

	)

441 
	#IPV6_RECVHOPOPTS
 39

	)

442 
	#IPV6_RECVDSTOPTS
 40

	)

443 #ifde‡
_KERNEL


444 
	#IPV6_RECVRTHDRDSTOPTS
 41

	)

447 
	#IPV6_USE_MIN_MTU
 42

	)

448 
	#IPV6_RECVPATHMTU
 43

	)

450 
	#IPV6_PATHMTU
 44

	)

453 
	#IPV6_REACHCONF
 45

	)

458 
	#IPV6_PKTINFO
 46

	)

459 
	#IPV6_HOPLIMIT
 47

	)

460 
	#IPV6_NEXTHOP
 48

	)

461 
	#IPV6_HOPOPTS
 49

	)

462 
	#IPV6_DSTOPTS
 50

	)

463 
	#IPV6_RTHDR
 51

	)

465 
	#IPV6_PKTOPTIONS
 52

	)

469 
	#IPV6_RECVTCLASS
 57

	)

471 
	#IPV6_AUTOFLOWLABEL
 59

	)

473 
	#IPV6_TCLASS
 61

	)

474 
	#IPV6_DONTFRAG
 62

	)

476 
	#IPV6_PREFER_TEMPADDR
 63

	)

480 
	#IPV6_BINDANY
 64

	)

486 
	#IPV6_MSFILTER
 74

	)

492 
	#IPV6_RTHDR_LOOSE
 0

	)

493 
	#IPV6_RTHDR_STRICT
 1

	)

494 
	#IPV6_RTHDR_TYPE_0
 0

	)

499 
	#IPV6_DEFAULT_MULTICAST_HOPS
 1

	)

500 
	#IPV6_DEFAULT_MULTICAST_LOOP
 1

	)

507 
	#IPV6_MIN_MEMBERSHIPS
 31

	)

508 
	#IPV6_MAX_MEMBERSHIPS
 4095

	)

514 
	#IPV6_MAX_GROUP_SRC_FILTER
 512

	)

515 
	#IPV6_MAX_SOCK_SRC_FILTER
 128

	)

520 
	sùv6_mªq
 {

521 
ö6_addr
 
	mùv6mr_mu…üddr
;

522 
	mùv6mr_öãrÁ˚
;

528 
	sö6_pktöfo
 {

529 
ö6_addr
 
	mùi6_addr
;

530 
	mùi6_ifödex
;

536 
	sù6_mtuöfo
 {

537 
sockaddr_ö6
 
	mù6m_addr
;

538 
uöt32_t
 
	mù6m_mtu
;

545 
	#IPV6_PORTRANGE_DEFAULT
 0

	)

546 
	#IPV6_PORTRANGE_HIGH
 1

	)

547 
	#IPV6_PORTRANGE_LOW
 2

	)

549 #i‡
__BSD_VISIBLE


556 
	#IPV6PROTO_MAXID
 (
IPPROTO_PIM
 + 1Ë

	)

561 
	#IPV6CTL_FORWARDING
 1

	)

562 
	#IPV6CTL_SENDREDIRECTS
 2

	)

563 
	#IPV6CTL_DEFHLIM
 3

	)

564 #ifde‡
nŸyë


565 
	#IPV6CTL_DEFMTU
 4

	)

567 
	#IPV6CTL_FORWSRCRT
 5

	)

568 
	#IPV6CTL_STATS
 6

	)

569 
	#IPV6CTL_MRTSTATS
 7

	)

570 
	#IPV6CTL_MRTPROTO
 8

	)

571 
	#IPV6CTL_MAXFRAGPACKETS
 9

	)

572 
	#IPV6CTL_SOURCECHECK
 10

	)

573 
	#IPV6CTL_SOURCECHECK_LOGINT
 11

	)

574 
	#IPV6CTL_ACCEPT_RTADV
 12

	)

575 
	#IPV6CTL_KEEPFAITH
 13

	)

576 
	#IPV6CTL_LOG_INTERVAL
 14

	)

577 
	#IPV6CTL_HDRNESTLIMIT
 15

	)

578 
	#IPV6CTL_DAD_COUNT
 16

	)

579 
	#IPV6CTL_AUTO_FLOWLABEL
 17

	)

580 
	#IPV6CTL_DEFMCASTHLIM
 18

	)

581 
	#IPV6CTL_GIF_HLIM
 19

	)

582 
	#IPV6CTL_KAME_VERSION
 20

	)

583 
	#IPV6CTL_USE_DEPRECATED
 21

	)

584 
	#IPV6CTL_RR_PRUNE
 22

	)

586 
	#IPV6CTL_MAPPED_ADDR
 23

	)

588 
	#IPV6CTL_V6ONLY
 24

	)

589 
	#IPV6CTL_RTEXPIRE
 25

	)

590 
	#IPV6CTL_RTMINEXPIRE
 26

	)

591 
	#IPV6CTL_RTMAXCACHE
 27

	)

593 
	#IPV6CTL_USETEMPADDR
 32

	)

594 
	#IPV6CTL_TEMPPLTIME
 33

	)

595 
	#IPV6CTL_TEMPVLTIME
 34

	)

596 
	#IPV6CTL_AUTO_LINKLOCAL
 35

	)

597 
	#IPV6CTL_RIP6STATS
 36

	)

598 
	#IPV6CTL_PREFER_TEMPADDR
 37

	)

599 
	#IPV6CTL_ADDRCTLPOLICY
 38

	)

600 
	#IPV6CTL_USE_DEFAULTZONE
 39

	)

602 
	#IPV6CTL_MAXFRAGS
 41

	)

604 
	#IPV6CTL_IFQ
 42

	)

605 
	#IPV6CTL_ISATAPRTR
 43

	)

607 
	#IPV6CTL_MCAST_PMTU
 44

	)

611 
	#IPV6CTL_STEALTH
 45

	)

613 
	#ICMPV6CTL_ND6_ONLINKNSRFC4861
 47

	)

614 
	#IPV6CTL_MAXID
 48

	)

620 
	#M_AUTHIPHDR
 
M_PROTO2


	)

621 
	#M_DECRYPTED
 
M_PROTO3


	)

622 
	#M_LOOP
 
M_PROTO4


	)

623 
	#M_AUTHIPDGM
 
M_PROTO5


	)

624 
	#M_RTALERT_MLD
 
M_PROTO6


	)

626 #ifde‡
_KERNEL


627 
	gcmsghdr
;

629 
ö6_cksum
 
__P
((
mbuf
 *, 
u_öt8_t
, 
u_öt32_t
, u_int32_t));

630 
ö6_loˇœddr
 
__P
((
ö6_addr
 *));

631 
ö6_addrsc›e
 
__P
((
ö6_addr
 *));

632 
ö6_iÁddr
 *
ö6_iÁwôhiÂ
 
__P
((
i‚ë
 *, 
ö6_addr
 *));

633 
ö6_if_up
 
__P
((
i‚ë
 *));

634 
	gsockaddr
;

635 
u_ch¨
 
ù6_¥Ÿox
[];

637 
ö6_sö6_2_sö
 
__P
((
sockaddr_ö
 *
sö
,

638 
sockaddr_ö6
 *
sö6
));

639 
ö6_sö_2_v4m≠sö6
 
__P
((
sockaddr_ö
 *
sö
,

640 
sockaddr_ö6
 *
sö6
));

641 
ö6_sö6_2_sö_ö_sock
 
__P
((
sockaddr
 *
«m
));

642 
ö6_sö_2_v4m≠sö6_ö_sock
 
__P
((
sockaddr
 **
«m
));

643 
addr£l_pﬁicy_öô
 
__P
(());

645 
	#ßtosö6
(
ß
Ë((
sockaddr_ö6
 *)(ß))

	)

646 
	#sö6toß
(
sö6
Ë((
sockaddr
 *)(sö6))

	)

647 
	#iÁtoü6
(
iÁ
Ë((
ö6_iÁddr
 *)(iÁ))

	)

649 (*
Áôh¥efix_p
)(
ö6_addr
 *);

652 #i‚de‡
_SIZE_T_DECLARED


653 
__size_t
 
	tsize_t
;

654 
	#_SIZE_T_DECLARED


	)

657 #i‚de‡
_SOCKLEN_T_DECLARED


658 
__sockÀn_t
 
	tsockÀn_t
;

659 
	#_SOCKLEN_T_DECLARED


	)

662 #i‡
__BSD_VISIBLE


664 
__BEGIN_DECLS


665 
cmsghdr
;

667 
öë6_›ti⁄_•a˚
 
	`__P
(());

668 
öë6_›ti⁄_öô
 
	`__P
((*, 
cmsghdr
 **, ));

669 
öë6_›ti⁄_≠≥nd
 
	`__P
((
cmsghdr
 *, c⁄° 
uöt8_t
 *,

671 
uöt8_t
 *
öë6_›ti⁄_Æloc
 
	`__P
((
cmsghdr
 *, , , ));

672 
öë6_›ti⁄_√xt
 
	`__P
((c⁄° 
cmsghdr
 *, 
uöt8_t
 **));

673 
öë6_›ti⁄_föd
 
	`__P
((c⁄° 
cmsghdr
 *, 
uöt8_t
 **, ));

675 
size_t
 
öë6_πhdr_•a˚
 
	`__P
((, ));

676 
cmsghdr
 *
öë6_πhdr_öô
 
	`__P
((*, ));

677 
öë6_πhdr_add
 
	`__P
((
cmsghdr
 *, c⁄° 
ö6_addr
 *,

679 
öë6_πhdr_œ°h›
 
	`__P
((
cmsghdr
 *, ));

681 
öë6_πhdr_ªvî£
 
	`__P
((c⁄° 
cmsghdr
 *, cmsghdr *));

683 
öë6_πhdr_£gmíts
 
	`__P
((c⁄° 
cmsghdr
 *));

684 
ö6_addr
 *
öë6_πhdr_gëaddr
 
	`__P
((
cmsghdr
 *, ));

685 
öë6_πhdr_gëÊags
 
	`__P
((c⁄° 
cmsghdr
 *, ));

687 
öë6_›t_öô
 
	`__P
((*, 
sockÀn_t
));

688 
öë6_›t_≠≥nd
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
, socklen_t,

689 
uöt8_t
, **));

690 
öë6_›t_föish
 
	`__P
((*, 
sockÀn_t
, ));

691 
öë6_›t_£t_vÆ
 
	`__P
((*, , *, 
sockÀn_t
));

693 
öë6_›t_√xt
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
 *, socklen_t *,

695 
öë6_›t_föd
 
	`__P
((*, 
sockÀn_t
, , 
uöt8_t
, socklen_t *,

697 
öë6_›t_gë_vÆ
 
	`__P
((*, , *, 
sockÀn_t
));

698 
sockÀn_t
 
öë6_πh_•a˚
 
	`__P
((, ));

699 *
öë6_πh_öô
 
	`__P
((*, 
sockÀn_t
, , ));

700 
öë6_πh_add
 
	`__P
((*, c⁄° 
ö6_addr
 *));

701 
öë6_πh_ªvî£
 
	`__P
((const *, *));

702 
öë6_πh_£gmíts
 
	`__P
((const *));

703 
ö6_addr
 *
öë6_πh_gëaddr
 
	`__P
((const *, ));

704 
__END_DECLS


	@/usr/include/openssl/des_old.h

91 #i‚de‡
HEADER_DES_H


92 
	#HEADER_DES_H


	)

94 
	~<›ís¶/e_os2.h
>

96 #ifde‡
OPENSSL_NO_DES


97 #îr‹ 
DES
 
is
 
dißbÀd
.

100 #i‚de‡
HEADER_NEW_DES_H


101 #îr‹ 
You
 
mu°
 
ö˛ude
 
des
.
h
, 
nŸ
 
des_ﬁd
.h 
dúe˘ly
.

104 #ifde‡
_KERBEROS_DES_H


105 #îr‹ <
›ís¶
/
des_ﬁd
.
h
> 
ª∂a˚s
 <
kîbîos
/
des
.h>.

108 
	~<›ís¶/symhacks.h
>

110 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


111 #unde‡
OPENSSL_EXTERN


112 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

115 #ifde‡ 
__˝lu•lus


119 #ifde‡
_


120 #unde‡
_


123 
	t_os¶_ﬁd_des_cblock
[8];

124 
	s_os¶_ﬁd_des_ks_°ru˘


127 
_os¶_ﬁd_des_cblock
 
_
;

130 
DES_LONG
 
∑d
[2];

131 } 
ks
;

132 } 
	t_os¶_ﬁd_des_key_scheduÀ
[16];

134 #i‚de‡
OPENSSL_DES_LIBDES_COMPATIBILITY


135 
	#des_cblock
 
DES_cblock


	)

136 
	#c⁄°_des_cblock
 
c⁄°_DES_cblock


	)

137 
	#des_key_scheduÀ
 
DES_key_scheduÀ


	)

138 
	#des_ecb3_í¸y±
(
i
,
o
,
k1
,
k2
,
k3
,
e
)\

139 
	`DES_ecb3_í¸y±
((
i
),(
o
),&(
k1
),&(
k2
),&(
k3
),(
e
))

	)

140 
	#des_ede3_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
e
)\

141 
	`DES_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
e
))

	)

142 
	#des_ede3_cbcm_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv1
,
iv2
,
e
)\

143 
	`DES_ede3_cbcm_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv1
),(
iv2
),(
e
))

	)

144 
	#des_ede3_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
,
e
)\

145 
	`DES_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
n
),(
e
))

	)

146 
	#des_ede3_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
)\

147 
	`DES_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),&(
k1
),&(
k2
),&(
k3
),(
iv
),(
n
))

	)

148 
	#des_›ti⁄s
()\

149 
	`DES_›ti⁄s
()

	)

150 
	#des_cbc_cksum
(
i
,
o
,
l
,
k
,
iv
)\

151 
	`DES_cbc_cksum
((
i
),(
o
),(
l
),&(
k
),(
iv
))

	)

152 
	#des_cbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

153 
	`DES_cbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

154 
	#des_ncbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

155 
	`DES_ncbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

156 
	#des_xcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
öw
,
outw
,
e
)\

157 
	`DES_xcbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
öw
),(
outw
),(
e
))

	)

158 
	#des_cfb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
,
e
)\

159 
	`DES_cfb_í¸y±
((
i
),(
o
),(
n
),(
l
),&(
k
),(
iv
),(
e
))

	)

160 
	#des_ecb_í¸y±
(
i
,
o
,
k
,
e
)\

161 
	`DES_ecb_í¸y±
((
i
),(
o
),&(
k
),(
e
))

	)

162 
	#des_í¸y±1
(
d
,
k
,
e
)\

163 
	`DES_í¸y±1
((
d
),&(
k
),(
e
))

	)

164 
	#des_í¸y±2
(
d
,
k
,
e
)\

165 
	`DES_í¸y±2
((
d
),&(
k
),(
e
))

	)

166 
	#des_í¸y±3
(
d
,
k1
,
k2
,
k3
)\

167 
	`DES_í¸y±3
((
d
),&(
k1
),&(
k2
),&(
k3
))

	)

168 
	#des_de¸y±3
(
d
,
k1
,
k2
,
k3
)\

169 
	`DES_de¸y±3
((
d
),&(
k1
),&(
k2
),&(
k3
))

	)

170 
	#des_xwhôe_ö2out
(
k
,
i
,
o
)\

171 
	`DES_xwhôe_ö2out
((
k
),(
i
),(
o
))

	)

172 
	#des_íc_ªad
(
f
,
b
,
l
,
k
,
iv
)\

173 
	`DES_íc_ªad
((
f
),(
b
),(
l
),&(
k
),(
iv
))

	)

174 
	#des_íc_wrôe
(
f
,
b
,
l
,
k
,
iv
)\

175 
	`DES_íc_wrôe
((
f
),(
b
),(
l
),&(
k
),(
iv
))

	)

176 
	#des_f¸y±
(
b
,
s
,
r
)\

177 
	`DES_f¸y±
((
b
),(
s
),(
r
))

	)

179 
	#des_¸y±
(
b
,
s
)\

180 
	`DES_¸y±
((
b
),(
s
))

	)

181 #i‡!
deföed
(
PERL5
Ë&& !deföed(
__FªeBSD__
Ë&& !deföed(
NeXT
Ë&& !deföed(
__O≥nBSD__
)

182 
	#¸y±
(
b
,
s
)\

183 
	`DES_¸y±
((
b
),(
s
))

	)

186 
	#des_ofb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
)\

187 
	`DES_ofb_í¸y±
((
i
),(
o
),(
n
),(
l
),&(
k
),(
iv
))

	)

188 
	#des_pcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

189 
	`DES_pcbc_í¸y±
((
i
),(
o
),(
l
),&(
k
),(
iv
),(
e
))

	)

190 
	#des_quad_cksum
(
i
,
o
,
l
,
c
,
s
)\

191 
	`DES_quad_cksum
((
i
),(
o
),(
l
),(
c
),(
s
))

	)

192 
	#des_øndom_£ed
(
k
)\

193 
	`_os¶_096_des_øndom_£ed
((
k
))

	)

194 
	#des_øndom_key
(
r
)\

195 
	`DES_øndom_key
((
r
))

	)

196 
	#des_ªad_∑ssw‹d
(
k
,
p
,
v
) \

197 
	`DES_ªad_∑ssw‹d
((
k
),(
p
),(
v
))

	)

198 
	#des_ªad_2∑ssw‹ds
(
k1
,
k2
,
p
,
v
) \

199 
	`DES_ªad_2∑ssw‹ds
((
k1
),(
k2
),(
p
),(
v
))

	)

200 
	#des_£t_odd_∑rôy
(
k
)\

201 
	`DES_£t_odd_∑rôy
((
k
))

	)

202 
	#des_check_key_∑rôy
(
k
)\

203 
	`DES_check_key_∑rôy
((
k
))

	)

204 
	#des_is_wók_key
(
k
)\

205 
	`DES_is_wók_key
((
k
))

	)

206 
	#des_£t_key
(
k
,
ks
)\

207 
	`DES_£t_key
((
k
),&(
ks
))

	)

208 
	#des_key_sched
(
k
,
ks
)\

209 
	`DES_key_sched
((
k
),&(
ks
))

	)

210 
	#des_£t_key_checked
(
k
,
ks
)\

211 
	`DES_£t_key_checked
((
k
),&(
ks
))

	)

212 
	#des_£t_key_unchecked
(
k
,
ks
)\

213 
	`DES_£t_key_unchecked
((
k
),&(
ks
))

	)

214 
	#des_°rög_to_key
(
s
,
k
)\

215 
	`DES_°rög_to_key
((
s
),(
k
))

	)

216 
	#des_°rög_to_2keys
(
s
,
k1
,
k2
)\

217 
	`DES_°rög_to_2keys
((
s
),(
k1
),(
k2
))

	)

218 
	#des_cfb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
,
e
)\

219 
	`DES_cfb64_í¸y±
((
i
),(
o
),(
l
),&(
ks
),(
iv
),(
n
),(
e
))

	)

220 
	#des_ofb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
)\

221 
	`DES_ofb64_í¸y±
((
i
),(
o
),(
l
),&(
ks
),(
iv
),(
n
))

	)

224 
	#des_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

225 
	`des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

227 
	#des_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

228 
	`des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

230 
	#des_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

231 
	`des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

233 
	#des_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

234 
	`des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

236 
	#des_check_key
 
DES_check_key


	)

237 
	#des_rw_mode
 
DES_rw_mode


	)

241 
	#des_cblock
 
_os¶_ﬁd_des_cblock


	)

242 
	#des_key_scheduÀ
 
_os¶_ﬁd_des_key_scheduÀ


	)

243 
	#des_ecb3_í¸y±
(
i
,
o
,
k1
,
k2
,
k3
,
e
)\

244 
	`_os¶_ﬁd_des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(
k3
),(
e
))

	)

245 
	#des_ede3_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
e
)\

246 
	`_os¶_ﬁd_des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
e
))

	)

247 
	#des_ede3_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
,
e
)\

248 
	`_os¶_ﬁd_des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
n
),(
e
))

	)

249 
	#des_ede3_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
k3
,
iv
,
n
)\

250 
	`_os¶_ﬁd_des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(
k3
),(
iv
),(
n
))

	)

251 
	#des_›ti⁄s
()\

252 
	`_os¶_ﬁd_des_›ti⁄s
()

	)

253 
	#des_cbc_cksum
(
i
,
o
,
l
,
k
,
iv
)\

254 
	`_os¶_ﬁd_des_cbc_cksum
((
i
),(
o
),(
l
),(
k
),(
iv
))

	)

255 
	#des_cbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

256 
	`_os¶_ﬁd_des_cbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

257 
	#des_ncbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

258 
	`_os¶_ﬁd_des_ncbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

259 
	#des_xcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
öw
,
outw
,
e
)\

260 
	`_os¶_ﬁd_des_xcbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
öw
),(
outw
),(
e
))

	)

261 
	#des_cfb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
,
e
)\

262 
	`_os¶_ﬁd_des_cfb_í¸y±
((
i
),(
o
),(
n
),(
l
),(
k
),(
iv
),(
e
))

	)

263 
	#des_ecb_í¸y±
(
i
,
o
,
k
,
e
)\

264 
	`_os¶_ﬁd_des_ecb_í¸y±
((
i
),(
o
),(
k
),(
e
))

	)

265 
	#des_í¸y±
(
d
,
k
,
e
)\

266 
	`_os¶_ﬁd_des_í¸y±
((
d
),(
k
),(
e
))

	)

267 
	#des_í¸y±2
(
d
,
k
,
e
)\

268 
	`_os¶_ﬁd_des_í¸y±2
((
d
),(
k
),(
e
))

	)

269 
	#des_í¸y±3
(
d
,
k1
,
k2
,
k3
)\

270 
	`_os¶_ﬁd_des_í¸y±3
((
d
),(
k1
),(
k2
),(
k3
))

	)

271 
	#des_de¸y±3
(
d
,
k1
,
k2
,
k3
)\

272 
	`_os¶_ﬁd_des_de¸y±3
((
d
),(
k1
),(
k2
),(
k3
))

	)

273 
	#des_xwhôe_ö2out
(
k
,
i
,
o
)\

274 
	`_os¶_ﬁd_des_xwhôe_ö2out
((
k
),(
i
),(
o
))

	)

275 
	#des_íc_ªad
(
f
,
b
,
l
,
k
,
iv
)\

276 
	`_os¶_ﬁd_des_íc_ªad
((
f
),(
b
),(
l
),(
k
),(
iv
))

	)

277 
	#des_íc_wrôe
(
f
,
b
,
l
,
k
,
iv
)\

278 
	`_os¶_ﬁd_des_íc_wrôe
((
f
),(
b
),(
l
),(
k
),(
iv
))

	)

279 
	#des_f¸y±
(
b
,
s
,
r
)\

280 
	`_os¶_ﬁd_des_f¸y±
((
b
),(
s
),(
r
))

	)

281 
	#des_¸y±
(
b
,
s
)\

282 
	`_os¶_ﬁd_des_¸y±
((
b
),(
s
))

	)

284 
	#¸y±
(
b
,
s
)\

285 
	`_os¶_ﬁd_¸y±
((
b
),(
s
))

	)

287 
	#des_ofb_í¸y±
(
i
,
o
,
n
,
l
,
k
,
iv
)\

288 
	`_os¶_ﬁd_des_ofb_í¸y±
((
i
),(
o
),(
n
),(
l
),(
k
),(
iv
))

	)

289 
	#des_pcbc_í¸y±
(
i
,
o
,
l
,
k
,
iv
,
e
)\

290 
	`_os¶_ﬁd_des_pcbc_í¸y±
((
i
),(
o
),(
l
),(
k
),(
iv
),(
e
))

	)

291 
	#des_quad_cksum
(
i
,
o
,
l
,
c
,
s
)\

292 
	`_os¶_ﬁd_des_quad_cksum
((
i
),(
o
),(
l
),(
c
),(
s
))

	)

293 
	#des_øndom_£ed
(
k
)\

294 
	`_os¶_ﬁd_des_øndom_£ed
((
k
))

	)

295 
	#des_øndom_key
(
r
)\

296 
	`_os¶_ﬁd_des_øndom_key
((
r
))

	)

297 
	#des_ªad_∑ssw‹d
(
k
,
p
,
v
) \

298 
	`_os¶_ﬁd_des_ªad_∑ssw‹d
((
k
),(
p
),(
v
))

	)

299 
	#des_ªad_2∑ssw‹ds
(
k1
,
k2
,
p
,
v
) \

300 
	`_os¶_ﬁd_des_ªad_2∑ssw‹ds
((
k1
),(
k2
),(
p
),(
v
))

	)

301 
	#des_£t_odd_∑rôy
(
k
)\

302 
	`_os¶_ﬁd_des_£t_odd_∑rôy
((
k
))

	)

303 
	#des_is_wók_key
(
k
)\

304 
	`_os¶_ﬁd_des_is_wók_key
((
k
))

	)

305 
	#des_£t_key
(
k
,
ks
)\

306 
	`_os¶_ﬁd_des_£t_key
((
k
),(
ks
))

	)

307 
	#des_key_sched
(
k
,
ks
)\

308 
	`_os¶_ﬁd_des_key_sched
((
k
),(
ks
))

	)

309 
	#des_°rög_to_key
(
s
,
k
)\

310 
	`_os¶_ﬁd_des_°rög_to_key
((
s
),(
k
))

	)

311 
	#des_°rög_to_2keys
(
s
,
k1
,
k2
)\

312 
	`_os¶_ﬁd_des_°rög_to_2keys
((
s
),(
k1
),(
k2
))

	)

313 
	#des_cfb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
,
e
)\

314 
	`_os¶_ﬁd_des_cfb64_í¸y±
((
i
),(
o
),(
l
),(
ks
),(
iv
),(
n
),(
e
))

	)

315 
	#des_ofb64_í¸y±
(
i
,
o
,
l
,
ks
,
iv
,
n
)\

316 
	`_os¶_ﬁd_des_ofb64_í¸y±
((
i
),(
o
),(
l
),(
ks
),(
iv
),(
n
))

	)

319 
	#des_ecb2_í¸y±
(
i
,
o
,
k1
,
k2
,
e
) \

320 
	`des_ecb3_í¸y±
((
i
),(
o
),(
k1
),(
k2
),(k1),(
e
))

	)

322 
	#des_ede2_cbc_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
e
) \

323 
	`des_ede3_cbc_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
e
))

	)

325 
	#des_ede2_cfb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
,
e
) \

326 
	`des_ede3_cfb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
),(
e
))

	)

328 
	#des_ede2_ofb64_í¸y±
(
i
,
o
,
l
,
k1
,
k2
,
iv
,
n
) \

329 
	`des_ede3_ofb64_í¸y±
((
i
),(
o
),(
l
),(
k1
),(
k2
),(k1),(
iv
),(
n
))

	)

331 
	#des_check_key
 
DES_check_key


	)

332 
	#des_rw_mode
 
DES_rw_mode


	)

335 c⁄° *
_os¶_ﬁd_des_›ti⁄s
();

336 
_os¶_ﬁd_des_ecb3_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

337 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,_os¶_ﬁd_des_key_scheduÀ 
ks2
,

338 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
íc
);

339 
DES_LONG
 
_os¶_ﬁd_des_cbc_cksum
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

340 
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
);

341 
_os¶_ﬁd_des_cbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

342 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

343 
_os¶_ﬁd_des_ncbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

344 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

345 
_os¶_ﬁd_des_xcbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

346 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,

347 
_os¶_ﬁd_des_cblock
 *
öw
,_os¶_ﬁd_des_cblock *
outw
,
íc
);

348 
_os¶_ﬁd_des_cfb_í¸y±
(*
ö
,*
out
,
numbôs
,

349 
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

350 
_os¶_ﬁd_des_ecb_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

351 
_os¶_ﬁd_des_key_scheduÀ
 
ks
,
íc
);

352 
_os¶_ﬁd_des_í¸y±
(
DES_LONG
 *
d©a
,
_os¶_ﬁd_des_key_scheduÀ
 
ks
, 
íc
);

353 
_os¶_ﬁd_des_í¸y±2
(
DES_LONG
 *
d©a
,
_os¶_ﬁd_des_key_scheduÀ
 
ks
, 
íc
);

354 
_os¶_ﬁd_des_í¸y±3
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

355 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
, _os¶_ﬁd_des_key_scheduÀ 
ks3
);

356 
_os¶_ﬁd_des_de¸y±3
(
DES_LONG
 *
d©a
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
,

357 
_os¶_ﬁd_des_key_scheduÀ
 
ks2
, _os¶_ﬁd_des_key_scheduÀ 
ks3
);

358 
_os¶_ﬁd_des_ede3_cbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
, _os¶_ﬁd_des_cblock *
ouçut
,

359 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

360 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, 
íc
);

361 
_os¶_ﬁd_des_ede3_cfb64_í¸y±
(*
ö
, *
out
,

362 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

363 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
, 
íc
);

364 
_os¶_ﬁd_des_ede3_ofb64_í¸y±
(*
ö
, *
out
,

365 
Àngth
, 
_os¶_ﬁd_des_key_scheduÀ
 
ks1
, _os¶_ﬁd_des_key_scheduÀ 
ks2
,

366 
_os¶_ﬁd_des_key_scheduÀ
 
ks3
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
);

368 
_os¶_ﬁd_des_xwhôe_ö2out
(
_os¶_ﬁd_des_cblock
 (*
des_key
), _os¶_ﬁd_des_cblock (*
ö_whôe
),

369 
_os¶_ﬁd_des_cblock
 (*
out_whôe
));

372 
_os¶_ﬁd_des_íc_ªad
(
fd
,*
buf
,
Àn
,
_os¶_ﬁd_des_key_scheduÀ
 
sched
,

373 
_os¶_ﬁd_des_cblock
 *
iv
);

374 
_os¶_ﬁd_des_íc_wrôe
(
fd
,*
buf
,
Àn
,
_os¶_ﬁd_des_key_scheduÀ
 
sched
,

375 
_os¶_ﬁd_des_cblock
 *
iv
);

376 *
_os¶_ﬁd_des_f¸y±
(c⁄° *
buf
,c⁄° *
ß…
, *
ªt
);

377 *
_os¶_ﬁd_des_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

378 #i‡!
deföed
(
PERL5
Ë&& !deföed(
NeXT
)

379 *
_os¶_ﬁd_¸y±
(c⁄° *
buf
,c⁄° *
ß…
);

381 
_os¶_ﬁd_des_ofb_í¸y±
(*
ö
,*
out
,

382 
numbôs
,
Àngth
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
);

383 
_os¶_ﬁd_des_pcbc_í¸y±
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,
Àngth
,

384 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
,
_os¶_ﬁd_des_cblock
 *
ivec
,
íc
);

385 
DES_LONG
 
_os¶_ﬁd_des_quad_cksum
(
_os¶_ﬁd_des_cblock
 *
öput
,_os¶_ﬁd_des_cblock *
ouçut
,

386 
Àngth
,
out_cou¡
,
_os¶_ﬁd_des_cblock
 *
£ed
);

387 
_os¶_ﬁd_des_øndom_£ed
(
_os¶_ﬁd_des_cblock
 
key
);

388 
_os¶_ﬁd_des_øndom_key
(
_os¶_ﬁd_des_cblock
 
ªt
);

389 
_os¶_ﬁd_des_ªad_∑ssw‹d
(
_os¶_ﬁd_des_cblock
 *
key
,c⁄° *
¥om±
,
vîify
);

390 
_os¶_ﬁd_des_ªad_2∑ssw‹ds
(
_os¶_ﬁd_des_cblock
 *
key1
,_os¶_ﬁd_des_cblock *
key2
,

391 c⁄° *
¥om±
,
vîify
);

392 
_os¶_ﬁd_des_£t_odd_∑rôy
(
_os¶_ﬁd_des_cblock
 *
key
);

393 
_os¶_ﬁd_des_is_wók_key
(
_os¶_ﬁd_des_cblock
 *
key
);

394 
_os¶_ﬁd_des_£t_key
(
_os¶_ﬁd_des_cblock
 *
key
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
);

395 
_os¶_ﬁd_des_key_sched
(
_os¶_ﬁd_des_cblock
 *
key
,
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
);

396 
_os¶_ﬁd_des_°rög_to_key
(*
°r
,
_os¶_ﬁd_des_cblock
 *
key
);

397 
_os¶_ﬁd_des_°rög_to_2keys
(*
°r
,
_os¶_ﬁd_des_cblock
 *
key1
,_os¶_ﬁd_des_cblock *
key2
);

398 
_os¶_ﬁd_des_cfb64_í¸y±
(*
ö
, *
out
, 
Àngth
,

399 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
, 
íc
);

400 
_os¶_ﬁd_des_ofb64_í¸y±
(*
ö
, *
out
, 
Àngth
,

401 
_os¶_ﬁd_des_key_scheduÀ
 
scheduÀ
, 
_os¶_ﬁd_des_cblock
 *
ivec
, *
num
);

403 
_os¶_096_des_øndom_£ed
(
des_cblock
 *
key
);

408 
	#_KERBEROS_DES_H


	)

410 
	#KRBDES_ENCRYPT
 
DES_ENCRYPT


	)

411 
	#KRBDES_DECRYPT
 
DES_DECRYPT


	)

413 #ifde‡
KERBEROS


414 
	#ENCRYPT
 
DES_ENCRYPT


	)

415 
	#DECRYPT
 
DES_DECRYPT


	)

418 #i‚de‡
NCOMPAT


419 
	#C_Block
 
des_cblock


	)

420 
	#Key_scheduÀ
 
des_key_scheduÀ


	)

421 
	#KEY_SZ
 
DES_KEY_SZ


	)

422 
	#°rög_to_key
 
des_°rög_to_key


	)

423 
	#ªad_pw_°rög
 
des_ªad_pw_°rög


	)

424 
	#øndom_key
 
des_øndom_key


	)

425 
	#pcbc_í¸y±
 
des_pcbc_í¸y±


	)

426 
	#£t_key
 
des_£t_key


	)

427 
	#key_sched
 
des_key_sched


	)

428 
	#ecb_í¸y±
 
des_ecb_í¸y±


	)

429 
	#cbc_í¸y±
 
des_cbc_í¸y±


	)

430 
	#ncbc_í¸y±
 
des_ncbc_í¸y±


	)

431 
	#xcbc_í¸y±
 
des_xcbc_í¸y±


	)

432 
	#cbc_cksum
 
des_cbc_cksum


	)

433 
	#quad_cksum
 
des_quad_cksum


	)

434 
	#check_∑rôy
 
des_check_key_∑rôy


	)

437 
	#des_fixup_key_∑rôy
 
DES_fixup_key_∑rôy


	)

439 #ifde‡ 
__˝lu•lus


444 
	~<›ís¶/ui_com∑t.h
>

	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #ifde‡
OPENSSL_SYSNAME_VOS


197 
	#OPENSSL_SYS_VOS


	)

201 #ifde‡
OPENSSL_SYSNAME_VXWORKS


202 
	#OPENSSL_SYS_VXWORKS


	)

211 #ifde‡
OPENSSL_SYS_MSDOS


212 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

213 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

215 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

216 
	#OPENSSL_DECLARE_EXIT


	)

238 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

239 
	#OPENSSL_EXPORT
 
globÆªf


	)

240 
	#OPENSSL_IMPORT
 
globÆªf


	)

241 
	#OPENSSL_GLOBAL
 
globÆdef


	)

242 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

243 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

244 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

245 
	#OPENSSL_GLOBAL


	)

247 
	#OPENSSL_EXPORT
 

	)

248 
	#OPENSSL_IMPORT
 

	)

249 
	#OPENSSL_GLOBAL


	)

251 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

263 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


264 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
) \

265 
ty≥
 
_hide_
##
«me
; \

266 
ty≥
 *
_shadow_
##
	`«me
(Ë{  &
_hide_
##
«me
; } \

267 
ty≥
 
_hide_
##
«me


	)

268 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

269 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

271 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##
	)
name

272 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

273 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

276 #ifde‡ 
__˝lu•lus


	@/usr/include/sys/_iovec.h

33 #i‚de‡
_SYS__IOVEC_H_


34 
	#_SYS__IOVEC_H_


	)

36 
	~<sys/_ty≥s.h
>

38 #i‚de‡
_SIZE_T_DECLARED


39 
__size_t
 
	tsize_t
;

40 
	#_SIZE_T_DECLARED


	)

43 
	siovec
 {

44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/sys/_lock.h

31 #i‚de‡
_SYS__LOCK_H_


32 
	#_SYS__LOCK_H_


	)

34 
	slock_obje˘
 {

35 c⁄° *
	mlo_«me
;

36 
u_öt
 
	mlo_Êags
;

37 
u_öt
 
	mlo_d©a
;

38 
wô√ss
 *
	mlo_wô√ss
;

	@/usr/include/sys/_mutex.h

31 #i‚de‡
_SYS__MUTEX_H_


32 
	#_SYS__MUTEX_H_


	)

37 
	smtx
 {

38 
lock_obje˘
 
	mlock_obje˘
;

39 vﬁ©ûê
uöçå_t
 
	mmtx_lock
;

	@/usr/include/sys/_null.h

29 #i‚de‡
NULL


31 #i‡!
deföed
(
__˝lu•lus
)

32 
	#NULL
 ((*)0)

	)

34 #i‡
deföed
(
__GNUG__
Ë&& deföed(
__GNUC__
) && __GNUC__ >= 4

35 
	#NULL
 
__nuŒ


	)

37 #i‡
deföed
(
__LP64__
)

38 
	#NULL
 (0L)

	)

40 
	#NULL
 0

	)

	@/usr/include/sys/_pthreadtypes.h

36 #i‚de‡
_SYS__PTHREADTYPES_H_


37 
	#_SYS__PTHREADTYPES_H_


	)

44 
	g±hªad
;

45 
	g±hªad_©å
;

46 
	g±hªad_c⁄d
;

47 
	g±hªad_c⁄d_©å
;

48 
	g±hªad_muãx
;

49 
	g±hªad_muãx_©å
;

50 
	g±hªad_⁄˚
;

51 
	g±hªad_rwlock
;

52 
	g±hªad_rwlock©å
;

53 
	g±hªad_b¨rõr
;

54 
	g±hªad_b¨rõr_©å
;

55 
	g±hªad_•ölock
;

64 #i‚de‡
_PTHREAD_T_DECLARED


65 
±hªad
 *
	t±hªad_t
;

66 
	#_PTHREAD_T_DECLARED


	)

68 
±hªad_©å
 *
	t±hªad_©å_t
;

69 
±hªad_muãx
 *
	t±hªad_muãx_t
;

70 
±hªad_muãx_©å
 *
	t±hªad_muãx©å_t
;

71 
±hªad_c⁄d
 *
	t±hªad_c⁄d_t
;

72 
±hªad_c⁄d_©å
 *
	t±hªad_c⁄d©å_t
;

73 
	t±hªad_key_t
;

74 
±hªad_⁄˚
 
	t±hªad_⁄˚_t
;

75 
±hªad_rwlock
 *
	t±hªad_rwlock_t
;

76 
±hªad_rwlock©å
 *
	t±hªad_rwlock©å_t
;

77 
±hªad_b¨rõr
 *
	t±hªad_b¨rõr_t
;

78 
±hªad_b¨rõøâr
 *
	t±hªad_b¨rõøâr_t
;

79 
±hªad_•ölock
 *
	t±hªad_•ölock_t
;

87 *
	t±hªad_addr_t
;

88 *(*
	t±hªad_°¨åoutöe_t
)(*);

93 
	s±hªad_⁄˚
 {

94 
	m°©e
;

95 
±hªad_muãx_t
 
	mmuãx
;

	@/usr/include/sys/_timespec.h

49 #i‚de‡
_SYS__TIMESPEC_H_


50 
	#_SYS__TIMESPEC_H_


	)

52 
	s__time•ec
 {

53 
__time_t
 
	mtv_£c
;

54 
	mtv_n£c
;

	@/usr/include/sys/_timeval.h

29 #i‚de‡
_SYS__TIMEVAL_H_


30 
	#_SYS__TIMEVAL_H_


	)

32 
	~<sys/_ty≥s.h
>

34 #i‚de‡
_SUSECONDS_T_DECLARED


35 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

36 
	#_SUSECONDS_T_DECLARED


	)

39 #i‚de‡
_TIME_T_DECLARED


40 
__time_t
 
	ttime_t
;

41 
	#_TIME_T_DECLARED


	)

47 
	stimevÆ
 {

48 
time_t
 
	mtv_£c
;

49 
su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/sys/_types.h

29 #i‚de‡
_SYS__TYPES_H_


30 
	#_SYS__TYPES_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<machöe/_ty≥s.h
>

38 
__uöt32_t
 
	t__blksize_t
;

39 
__öt64_t
 
	t__blk˙t_t
;

40 
__öt32_t
 
	t__˛ockid_t
;

41 
__uöt32_t
 
	t__fÊags_t
;

42 
__uöt64_t
 
	t__fsblk˙t_t
;

43 
__uöt64_t
 
	t__fsfû˙t_t
;

44 
__uöt32_t
 
	t__gid_t
;

45 
__öt64_t
 
	t__id_t
;

46 
__uöt32_t
 
	t__öo_t
;

47 
	t__key_t
;

48 
__öt32_t
 
	t__lwpid_t
;

49 
__uöt16_t
 
	t__mode_t
;

50 
	t__accmode_t
;

51 
	t__∆_ôem
;

52 
__uöt16_t
 
	t__∆ök_t
;

53 
__öt64_t
 
	t__off_t
;

54 
__öt32_t
 
	t__pid_t
;

55 
__öt64_t
 
	t__æim_t
;

58 
__uöt8_t
 
	t__ß_Ámûy_t
;

59 
__uöt32_t
 
	t__sockÀn_t
;

60 
	t__su£c⁄ds_t
;

61 
__timî
 *
	t__timî_t
;

62 
__mq
 *
	t__mqd_t
;

63 
__uöt32_t
 
	t__uid_t
;

64 
	t__u£c⁄ds_t
;

65 
	t__˝uwhich_t
;

66 
	t__˝uÀvñ_t
;

67 
	t__˝u£tid_t
;

87 
	t__˘_ru√_t
;

88 
__˘_ru√_t
 
	t__ru√_t
;

89 
__˘_ru√_t
 
	t__wch¨_t
;

90 
__˘_ru√_t
 
	t__wöt_t
;

92 
__uöt32_t
 
	t__dev_t
;

94 
__uöt32_t
 
	t__fix±_t
;

101 
	m__mb°©e8
[128];

102 
__öt64_t
 
	m_mb°©eL
;

103 } 
	t__mb°©e_t
;

	@/usr/include/sys/buf.h

38 #i‚de‡
_SYS_BUF_H_


39 
	#_SYS_BUF_H_


	)

41 
	~<sys/bufobj.h
>

42 
	~<sys/queue.h
>

43 
	~<sys/lock.h
>

44 
	~<sys/lockmgr.h
>

46 
	gbio
;

47 
	gbuf
;

48 
	gbufobj
;

49 
	gmou¡
;

50 
	gvnode
;

51 
	guio
;

56 
LIST_HEAD
(
w‹khód
, 
w‹kli°
);

63 
	sbio_›s
 {

64 (*
io_°¨t
)(
buf
 *);

65 (*
io_com∂ëe
)(
buf
 *);

66 (*
io_dóŒoˇã
)(
buf
 *);

67 (*
io_cou¡dïs
)(
buf
 *, );

68 } 
bio›s
;

70 
	gvm_obje˘
;

72 
	tb_xÊags_t
;

95 
	sbuf
 {

96 
bufobj
 *
	mb_bufobj
;

97 
	mb_bcou¡
;

98 *
	mb_ˇŒî1
;

99 
ˇddr_t
 
	mb_d©a
;

100 
	mb_îr‹
;

101 
uöt8_t
 
	mb_iocmd
;

102 
uöt8_t
 
	mb_ioÊags
;

103 
off_t
 
	mb_iooff£t
;

104 
	mb_ªsid
;

105 (*
	mb_iod⁄e
)(
	mbuf
 *);

106 
daddr_t
 
	mb_blkno
;

107 
off_t
 
	mb_off£t
;

108 
TAILQ_ENTRY
(
buf
Ë
	mb_bobufs
;

109 
buf
 *
	mb_À·
;

110 
buf
 *
	mb_right
;

111 
uöt32_t
 
	mb_vÊags
;

112 
TAILQ_ENTRY
(
buf
Ë
	mb_‰ìli°
;

113 
	mb_qödex
;

114 
uöt32_t
 
	mb_Êags
;

115 
b_xÊags_t
 
	mb_xÊags
;

116 
lock
 
	mb_lock
;

117 
	mb_bufsize
;

118 
	mb_ru¬ögbuf•a˚
;

119 
ˇddr_t
 
	mb_kvaba£
;

120 
	mb_kvasize
;

121 
daddr_t
 
	mb_lblkno
;

122 
vnode
 *
	mb_vp
;

123 
	mb_dútyoff
;

124 
	mb_dútyíd
;

125 
u¸ed
 *
	mb_r¸ed
;

126 
u¸ed
 *
	mb_w¸ed
;

127 *
	mb_ßvóddr
;

128 
	u∑gî_öfo
 {

129 
	mpg_ªq∑ge
;

130 } 
	mb_∑gî
;

131 
	u˛u°î_öfo
 {

132 
TAILQ_HEAD
(
˛u°î_li°_hód
, 
buf
Ë
	m˛u°î_hód
;

133 
TAILQ_ENTRY
(
buf
Ë
	m˛u°î_íåy
;

134 } 
	mb_˛u°î
;

135 
vm_∑ge
 *
	mb_∑ges
[
btoc
(
MAXPHYS
)];

136 
	mb_≈ages
;

137 
w‹khód
 
	mb_dï
;

138 *
	mb_f•riv©e1
;

139 *
	mb_f•riv©e2
;

140 *
	mb_f•riv©e3
;

141 
	mb_pö_cou¡
;

144 
	#b_obje˘
 
b_bufobj
->
bo_obje˘


	)

194 
	#B_AGE
 0x00000001

	)

195 
	#B_NEEDCOMMIT
 0x00000002

	)

196 
	#B_ASYNC
 0x00000004

	)

197 
	#B_DIRECT
 0x00000008

	)

198 
	#B_DEFERRED
 0x00000010

	)

199 
	#B_CACHE
 0x00000020

	)

200 
	#B_VALIDSUSPWRT
 0x00000040

	)

201 
	#B_DELWRI
 0x00000080

	)

202 
	#B_PERSISTENT
 0x00000100

	)

203 
	#B_DONE
 0x00000200

	)

204 
	#B_EINTR
 0x00000400

	)

205 
	#B_00000800
 0x00000800

	)

206 
	#B_00001000
 0x00001000

	)

207 
	#B_INVAL
 0x00002000

	)

208 
	#B_00004000
 0x00004000

	)

209 
	#B_NOCACHE
 0x00008000

	)

210 
	#B_MALLOC
 0x00010000

	)

211 
	#B_CLUSTEROK
 0x00020000

	)

212 
	#B_000400000
 0x00040000

	)

213 
	#B_000800000
 0x00080000

	)

214 
	#B_00100000
 0x00100000

	)

215 
	#B_DIRTY
 0x00200000

	)

216 
	#B_RELBUF
 0x00400000

	)

217 
	#B_00800000
 0x00800000

	)

218 
	#B_01000000
 0x01000000

	)

219 
	#B_NEEDSGIANT
 0x02000000

	)

220 
	#B_PAGING
 0x04000000

	)

221 
	#B_MANAGED
 0x08000000

	)

222 
	#B_RAM
 0x10000000

	)

223 
	#B_VMIO
 0x20000000

	)

224 
	#B_CLUSTER
 0x40000000

	)

225 
	#B_REMFREE
 0x80000000

	)

227 
	#PRINT_BUF_FLAGS
 "\20\40remfree\37cluster\36vmio\35ram\34b27" \

231 "\6ˇche\5de„ºed\4dúe˘\3async\2√edcommô\1age"

	)

236 
	#BX_VNDIRTY
 0x00000001

	)

237 
	#BX_VNCLEAN
 0x00000002

	)

238 
	#BX_BKGRDWRITE
 0x00000010

	)

239 
	#BX_BKGRDMARKER
 0x00000020

	)

240 
	#BX_ALTDATA
 0x00000040

	)

242 
	#NOOFFSET
 (-1LLË

	)

247 
	#BV_SCANNED
 0x00000001

	)

248 
	#BV_BKGRDINPROG
 0x00000002

	)

249 
	#BV_BKGRDWAIT
 0x00000004

	)

250 
	#BV_INFREECNT
 0x80000000

	)

252 #ifde‡
_KERNEL


256 c⁄° *
buf_wmesg
;

257 
	#BUF_WMESG
 "bufwaô"

	)

258 
	~<sys/¥oc.h
>

259 
	~<sys/muãx.h
>

264 
	#BUF_LOCKINIT
(
bp
) \

265 
	`locköô
(&(
bp
)->
b_lock
, 
PRIBIO
 + 4, 
buf_wmesg
, 0, 0)

	)

270 
	#BUF_LOCK
(
bp
, 
lockty≥
, 
öãæock
) \

271 
	`_lockmgr_¨gs
(&(
bp
)->
b_lock
, (
lockty≥
), (
öãæock
), \

272 
LK_WMESG_DEFAULT
, 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, \

273 
LOCK_FILE
, 
LOCK_LINE
)

	)

278 
	#BUF_TIMELOCK
(
bp
, 
lockty≥
, 
öãæock
, 
wmesg
, 
ˇtch
, 
timo
) \

279 
	`_lockmgr_¨gs
(&(
bp
)->
b_lock
, (
lockty≥
Ë| 
LK_TIMELOCK
, \

280 (
öãæock
), (
wmesg
), (
PRIBIO
 + 4Ë| (
ˇtch
), (
timo
), \

281 
LOCK_FILE
, 
LOCK_LINE
)

	)

287 
	#BUF_UNLOCK
(
bp
) do { \

288 
	`KASSERT
(((
bp
)->
b_Êags
 & 
B_REMFREE
) == 0, \

289 ("BUF_UNLOCK %∞whûêB_REMFREE i†°û»£t.", (
bp
))); \

291 ()
	`_lockmgr_¨gs
(&(
bp
)->
b_lock
, 
LK_RELEASE
, 
NULL
, \

292 
LK_WMESG_DEFAULT
, 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, \

293 
LOCK_FILE
, 
LOCK_LINE
); \

294 } 0)

	)

299 
	#BUF_LOCKRECURSED
(
bp
) \

300 
	`lockmgr_ªcur£d
(&(
bp
)->
b_lock
)

	)

305 
	#BUF_ISLOCKED
(
bp
) \

306 
	`lock°©us
(&(
bp
)->
b_lock
)

	)

310 
	#BUF_LOCKFREE
(
bp
) \

311 
	`lockde°roy
(&(
bp
)->
b_lock
)

	)

316 
	#BUF_LOCKPRINTINFO
(
bp
) \

317 
	`lockmgr_¥ötöfo
(&(
bp
)->
b_lock
)

	)

322 #i‡
deföed
(
INVARIANTS
Ë&& deföed(
INVARIANT_SUPPORT
)

323 
	#BUF_ASSERT_LOCKED
(
bp
) \

324 
	`_lockmgr_as£π
(&(
bp
)->
b_lock
, 
KA_LOCKED
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

325 
	#BUF_ASSERT_SLOCKED
(
bp
) \

326 
	`_lockmgr_as£π
(&(
bp
)->
b_lock
, 
KA_SLOCKED
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

327 
	#BUF_ASSERT_XLOCKED
(
bp
) \

328 
	`_lockmgr_as£π
(&(
bp
)->
b_lock
, 
KA_XLOCKED
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

329 
	#BUF_ASSERT_UNLOCKED
(
bp
) \

330 
	`_lockmgr_as£π
(&(
bp
)->
b_lock
, 
KA_UNLOCKED
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

331 
	#BUF_ASSERT_HELD
(
bp
)

	)

332 
	#BUF_ASSERT_UNHELD
(
bp
)

	)

334 
	#BUF_ASSERT_LOCKED
(
bp
)

	)

335 
	#BUF_ASSERT_SLOCKED
(
bp
)

	)

336 
	#BUF_ASSERT_XLOCKED
(
bp
)

	)

337 
	#BUF_ASSERT_UNLOCKED
(
bp
)

	)

338 
	#BUF_ASSERT_HELD
(
bp
)

	)

339 
	#BUF_ASSERT_UNHELD
(
bp
)

	)

342 #ifde‡
_SYS_PROC_H_


349 
	#BUF_KERNPROC
(
bp
) \

350 
	`_lockmgr_disown
(&(
bp
)->
b_lock
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

356 
	#BUF_LOCKWAITERS
(
bp
) \

357 
	`lockmgr_waôîs
(&(
bp
)->
b_lock
)

	)

361 
	sbuf_queue_hód
 {

362 
TAILQ_HEAD
(
buf_queue
, 
buf
Ë
	mqueue
;

363 
daddr_t
 
	mœ°_pblkno
;

364 
buf
 *
	mö£π_poöt
;

365 
buf
 *
	mswôch_poöt
;

374 
	s˛u°î_ßve
 {

375 
	mbs_bcou¡
;

376 
	mbs_bufsize
;

377 *
	mbs_ßvóddr
;

378 
	mbs_nchûdªn
;

379 
buf
 **
	mbs_chûdªn
;

382 #ifde‡
_KERNEL


384 
__ölöe
 

385 
	$bwrôe
(
buf
 *
bp
)

388 
	`KASSERT
(
bp
->
b_bufobj
 !
NULL
, ("bwrite:Ço bufobj bp=%p", bp));

389 
	`KASSERT
(
bp
->
b_bufobj
->
bo_›s
 !
NULL
, ("bwrite:Ço bo_ops bp=%p", bp));

390 
	`KASSERT
(
bp
->
b_bufobj
->
bo_›s
->
b›_wrôe
 !
NULL
,

391 ("bwrôe:Çÿb›_wrôêbp=%p", 
bp
));

392  (
	`BO_WRITE
(
bp
->
b_bufobj
, bp));

393 
	}
}

395 
__ölöe
 

396 
	$b°øãgy
(
buf
 *
bp
)

399 
	`KASSERT
(
bp
->
b_bufobj
 !
NULL
, ("bstrategy:Ço bufobj bp=%p", bp));

400 
	`KASSERT
(
bp
->
b_bufobj
->
bo_›s
 !
NULL
,

401 ("b°øãgy:Çÿbo_›†bp=%p", 
bp
));

402 
	`KASSERT
(
bp
->
b_bufobj
->
bo_›s
->
b›_°øãgy
 !
NULL
,

403 ("b°øãgy:Çÿb›_°øãgy bp=%p", 
bp
));

404 
	`BO_STRATEGY
(
bp
->
b_bufobj
, bp);

405 
	}
}

407 
__ölöe
 

408 
	$buf_°¨t
(
buf
 *
bp
)

410 i‡(
bio›s
.
io_°¨t
)

411 (*
bio›s
.
io_°¨t
)(
bp
);

412 
	}
}

414 
__ölöe
 

415 
	$buf_com∂ëe
(
buf
 *
bp
)

417 i‡(
bio›s
.
io_com∂ëe
)

418 (*
bio›s
.
io_com∂ëe
)(
bp
);

419 
	}
}

421 
__ölöe
 

422 
	$buf_dóŒoˇã
(
buf
 *
bp
)

424 i‡(
bio›s
.
io_dóŒoˇã
)

425 (*
bio›s
.
io_dóŒoˇã
)(
bp
);

426 
	`BUF_LOCKFREE
(
bp
);

427 
	}
}

429 
__ölöe
 

430 
	$buf_cou¡dïs
(
buf
 *
bp
, 
i
)

432 i‡(
bio›s
.
io_cou¡dïs
)

433  ((*
bio›s
.
io_cou¡dïs
)(
bp
, 
i
));

436 
	}
}

443 
	#˛rbuf
(
bp
) { \

444 
	`bzîo
((
bp
)->
b_d©a
, (
u_öt
)(bp)->
b_bcou¡
); \

445 (
bp
)->
b_ªsid
 = 0; \

446 }

	)

451 
	#GB_LOCK_NOWAIT
 0x0001

	)

452 
	#GB_NOCREAT
 0x0002

	)

453 
	#GB_NOWAIT_BD
 0x0004

	)

455 #ifde‡
_KERNEL


456 
nbuf
;

457 
maxswz⁄e
;

458 
maxbˇche
;

459 
ru¬ögbuf•a˚
;

460 
hibuf•a˚
;

461 
dútybu·hªsh
;

462 
bdwrôeskù
;

463 
dútybuf„rÊushes
;

464 
Ætbuf„rÊushes
;

465 
buf_maxio
;

466 
buf
 *buf;

467 *
buf„rs
;

468 
buÂages
;

469 
buf
 *
swbuf
;

470 
nswbuf
;

471 
˛u°î_pbuf_‰ì˙t
;

472 
vnode_pbuf_‰ì˙t
;

474 
ru¬ögbufwakeup
(
buf
 *);

475 
waôru¬ögbuf•a˚
();

476 
ˇddr_t
 
kîn_vfs_bio_buf„r_Æloc
(ˇddr_à
v
, 
physmem_e°
);

477 
buföô
();

478 
bwûlwrôe
();

479 
buf_dúty_cou¡_£vîe
();

480 
bªm‰ì
(
buf
 *);

481 
bªm‰ìf
(
buf
 *);

482 
bªad
(
vnode
 *, 
daddr_t
, , 
u¸ed
 *, 
buf
 **);

483 
bªada
(
vnode
 *, 
daddr_t
 *, *, , 
u¸ed
 *);

484 
bªadn
(
vnode
 *, 
daddr_t
, , daddr_t *, *, ,

485 
u¸ed
 *, 
buf
 **);

486 
bdwrôe
(
buf
 *);

487 
bawrôe
(
buf
 *);

488 
bdúty
(
buf
 *);

489 
bundúty
(
buf
 *);

490 
buf°øãgy
(
bufobj
 *, 
buf
 *);

491 
bªl£
(
buf
 *);

492 
bqªl£
(
buf
 *);

493 
vfs_bio_awrôe
(
buf
 *);

494 
buf
 * 
gëpbuf
(*);

495 
buf
 *
öc‹e
(
bufobj
 *, 
daddr_t
);

496 
buf
 *
gböc‹e
(
bufobj
 *, 
daddr_t
);

497 
buf
 *
gëblk
(
vnode
 *, 
daddr_t
, , , , );

498 
buf
 *
gëeblk
(, );

499 
bufwaô
(
buf
 *);

500 
bufwrôe
(
buf
 *);

501 
bufd⁄e
(
buf
 *);

502 
bufd⁄e_föish
(
buf
 *);

504 
˛u°î_ªad
(
vnode
 *, 
u_quad_t
, 
daddr_t
, ,

505 
u¸ed
 *, , , 
buf
 **);

506 
˛u°î_wbuûd
(
vnode
 *, , 
daddr_t
, );

507 
˛u°î_wrôe
(
vnode
 *, 
buf
 *, 
u_quad_t
, );

508 
vfs_bio_£t_vÆid
(
buf
 *, 
ba£
, 
size
);

509 
vfs_bio_˛rbuf
(
buf
 *);

510 
vfs_busy_∑ges
(
buf
 *, 
˛ór_modify
);

511 
vfs_unbusy_∑ges
(
buf
 *);

512 
vm≠buf
(
buf
 *);

513 
vunm≠buf
(
buf
 *);

514 
ªÕbuf
(
buf
 *, *);

515 
bªlvp
(
buf
 *);

516 
bgëvp
(
vnode
 *, 
buf
 *);

517 
pbgëbo
(
bufobj
 *
bo
, 
buf
 *
bp
);

518 
pbgëvp
(
vnode
 *, 
buf
 *);

519 
pbªlbo
(
buf
 *);

520 
pbªlvp
(
buf
 *);

521 
Ælocbuf
(
buf
 *
bp
, 
size
);

522 
ªassignbuf
(
buf
 *);

523 
buf
 *
åypbuf
(*);

524 
bwaô
(
buf
 *, 
u_ch¨
, const *);

525 
bd⁄e
(
buf
 *);

526 
bpö
(
buf
 *);

527 
bu≈ö
(
buf
 *);

528 
bu≈ö_waô
(
buf
 *);

	@/usr/include/sys/callout.h

38 #i‚de‡
_SYS_CALLOUT_H_


39 
	#_SYS_CALLOUT_H_


	)

41 
	~<sys/queue.h
>

43 
	glock_obje˘
;

45 
SLIST_HEAD
(
ˇŒout_li°
, 
ˇŒout
);

46 
TAILQ_HEAD
(
ˇŒout_èûq
, 
ˇŒout
);

48 
	sˇŒout
 {

50 
SLIST_ENTRY
(
ˇŒout
Ë
	m¶e
;

51 
TAILQ_ENTRY
(
ˇŒout
Ë
	mtqe
;

52 } 
	mc_löks
;

53 
	mc_time
;

54 *
	mc_¨g
;

55 (*
	mc_func
)(*);

56 
lock_obje˘
 *
	mc_lock
;

57 
	mc_Êags
;

58 vﬁ©ûê
	mc_˝u
;

61 
	#CALLOUT_LOCAL_ALLOC
 0x0001

	)

62 
	#CALLOUT_ACTIVE
 0x0002

	)

63 
	#CALLOUT_PENDING
 0x0004

	)

64 
	#CALLOUT_MPSAFE
 0x0008

	)

65 
	#CALLOUT_RETURNUNLOCKED
 0x0010

	)

66 
	#CALLOUT_SHAREDLOCK
 0x0020

	)

68 
	sˇŒout_h™dÀ
 {

69 
ˇŒout
 *
	mˇŒout
;

72 #ifde‡
_KERNEL


73 
nˇŒout
;

75 
	#ˇŒout_a˘ive
(
c
Ë((c)->
c_Êags
 & 
CALLOUT_ACTIVE
)

	)

76 
	#ˇŒout_dó˘iv©e
(
c
Ë((c)->
c_Êags
 &~
CALLOUT_ACTIVE
)

	)

77 
	#ˇŒout_døö
(
c
Ë
	`_ˇŒout_°›_ß„
(c, 1)

	)

78 
ˇŒout_öô
(
ˇŒout
 *, );

79 
_ˇŒout_öô_lock
(
ˇŒout
 *, 
lock_obje˘
 *, );

80 
	#ˇŒout_öô_mtx
(
c
, 
mtx
, 
Êags
) \

81 
	`_ˇŒout_öô_lock
((
c
), ((
mtx
Ë!
NULL
Ë? &(mtx)->
lock_obje˘
 : \

82 
NULL
, (
Êags
))

	)

83 
	#ˇŒout_öô_rw
(
c
, 
rw
, 
Êags
) \

84 
	`_ˇŒout_öô_lock
((
c
), ((
rw
Ë!
NULL
Ë? &‘w)->
lock_obje˘
 : \

85 
NULL
, (
Êags
))

	)

86 
	#ˇŒout_≥ndög
(
c
Ë((c)->
c_Êags
 & 
CALLOUT_PENDING
)

	)

87 
ˇŒout_ª£t_⁄
(
ˇŒout
 *, , (*)(*), *, );

88 
	#ˇŒout_ª£t
(
c
, 
⁄_tick
, 
‚
, 
¨g
) \

89 
	`ˇŒout_ª£t_⁄
((
c
), (
⁄_tick
), (
‚
), (
¨g
), (c)->
c_˝u
)

	)

90 
	#ˇŒout_ª£t_cur˝u
(
c
, 
⁄_tick
, 
‚
, 
¨g
) \

91 
	`ˇŒout_ª£t_⁄
((
c
), (
⁄_tick
), (
‚
), (
¨g
), 
	`PCPU_GET
(
˝uid
))

	)

92 
	`ˇŒout_scheduÀ
(
ˇŒout
 *, );

93 
	`ˇŒout_scheduÀ_⁄
(
ˇŒout
 *, , );

94 
	#ˇŒout_scheduÀ_cur˝u
(
c
, 
⁄_tick
) \

95 
	`ˇŒout_scheduÀ_⁄
((
c
), (
⁄_tick
), 
	`PCPU_GET
(
˝uid
))

	)

96 
	#ˇŒout_°›
(
c
Ë
	`_ˇŒout_°›_ß„
(c, 0)

	)

97 
	`_ˇŒout_°›_ß„
(
ˇŒout
 *, );

98 
	`ˇŒout_tick
();

	@/usr/include/sys/condvar.h

29 #i‚def 
_SYS_CONDVAR_H_


30 
	#_SYS_CONDVAR_H_


	)

32 #i‚def 
LOCORE


33 
	~<sys/queue.h
>

35 
	glock_obje˘
;

36 
	gthªad
;

38 
TAILQ_HEAD
(
cv_waôq
, 
thªad
);

46 
	scv
 {

47 c⁄° *
	mcv_des¸ùti⁄
;

48 
	mcv_waôîs
;

51 #ifde‡
_KERNEL


52 
cv_öô
(
cv
 *
cvp
, c⁄° *
desc
);

53 
cv_de°roy
(
cv
 *
cvp
);

55 
_cv_waô
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

56 
_cv_waô_u∆ock
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

57 
_cv_waô_sig
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

58 
_cv_timedwaô
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
, 
timo
);

59 
_cv_timedwaô_sig
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
, 
timo
);

61 
cv_sig«l
(
cv
 *
cvp
);

62 
cv_brﬂdˇ°¥i
(
cv
 *
cvp
, 
¥i
);

64 
	#cv_waô
(
cvp
, 
lock
) \

65 
	`_cv_waô
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

66 
	#cv_waô_u∆ock
(
cvp
, 
lock
) \

67 
	`_cv_waô_u∆ock
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

68 
	#cv_waô_sig
(
cvp
, 
lock
) \

69 
	`_cv_waô_sig
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

70 
	#cv_timedwaô
(
cvp
, 
lock
, 
timo
) \

71 
	`_cv_timedwaô
((
cvp
), &(
lock
)->
lock_obje˘
, (
timo
))

	)

72 
	#cv_timedwaô_sig
(
cvp
, 
lock
, 
timo
) \

73 
	`_cv_timedwaô_sig
((
cvp
), &(
lock
)->
lock_obje˘
, (
timo
))

	)

75 
	#cv_brﬂdˇ°
(
cvp
Ë
	`cv_brﬂdˇ°¥i
(cvp, 0)

	)

77 
	#cv_wmesg
(
cvp
Ë((cvp)->
cv_des¸ùti⁄
)

	)

	@/usr/include/sys/dirent.h

33 #i‚def 
_SYS_DIRENT_H_


34 
	#_SYS_DIRENT_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

50 
	sdúít
 {

51 
__uöt32_t
 
	md_fûío
;

52 
__uöt16_t
 
	md_ª˛í
;

53 
__uöt8_t
 
	md_ty≥
;

54 
__uöt8_t
 
	md_«mÀn
;

55 #i‡
__BSD_VISIBLE


56 
	#MAXNAMLEN
 255

	)

57 
	md_«me
[
MAXNAMLEN
 + 1];

59 
	md_«me
[255 + 1];

63 #i‡
__BSD_VISIBLE


67 
	#DT_UNKNOWN
 0

	)

68 
	#DT_FIFO
 1

	)

69 
	#DT_CHR
 2

	)

70 
	#DT_DIR
 4

	)

71 
	#DT_BLK
 6

	)

72 
	#DT_REG
 8

	)

73 
	#DT_LNK
 10

	)

74 
	#DT_SOCK
 12

	)

75 
	#DT_WHT
 14

	)

80 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

81 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

92 
	#_GENERIC_DIRSIZ
(
dp
) \

93 (( (
dúít
Ë- (
MAXNAMLEN
+1)Ë+ (((
dp
)->
d_«mÀn
+1 + 3Ë&~ 3))

	)

96 #ifde‡
_KERNEL


97 
	#GENERIC_DIRSIZ
(
dp
Ë
	`_GENERIC_DIRSIZ
(dp)

	)

	@/usr/include/sys/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

171 
	#EBADMSG
 89

	)

172 
	#EMULTIHOP
 90

	)

173 
	#ENOLINK
 91

	)

174 
	#EPROTO
 92

	)

176 #i‚de‡
_POSIX_SOURCE


177 
	#ENOTCAPABLE
 93

	)

180 #i‚de‡
_POSIX_SOURCE


181 
	#ELAST
 93

	)

184 #ifde‡
_KERNEL


186 
	#ERESTART
 (-1Ë

	)

187 
	#EJUSTRETURN
 (-2Ë

	)

188 
	#ENOIOCTL
 (-3Ë

	)

189 
	#EDIRIOCTL
 (-4Ë

	)

	@/usr/include/sys/eventhandler.h

29 #i‚de‡
SYS_EVENTHANDLER_H


30 
	#SYS_EVENTHANDLER_H


	)

32 
	~<sys/lock.h
>

33 
	~<sys/kå.h
>

34 
	~<sys/muãx.h
>

35 
	~<sys/queue.h
>

37 
	sevíth™dÀr_íåy
 {

38 
TAILQ_ENTRY
(
evíth™dÀr_íåy
Ë
	mì_lök
;

39 
	mì_¥i‹ôy
;

40 
	#EHE_DEAD_PRIORITY
 (-1)

	)

41 *
	mì_¨g
;

44 #ifde‡
VIMAGE


45 
	sevíth™dÀr_íåy_vimage
 {

46 (* 
	mfunc
)();

47 *
	mì_¨g
;

48 *
	m•¨ï
[2];

52 
	sevíth™dÀr_li°
 {

53 *
	mñ_«me
;

54 
	mñ_Êags
;

55 
	#EHL_INITTED
 (1<<0)

	)

56 
u_öt
 
	mñ_runcou¡
;

57 
mtx
 
	mñ_lock
;

58 
TAILQ_ENTRY
(
evíth™dÀr_li°
Ë
	mñ_lök
;

59 
TAILQ_HEAD
(,
evíth™dÀr_íåy
Ë
	mñ_íåõs
;

62 
evíth™dÀr_íåy
 *
	tevíth™dÀr_èg
;

64 
	#EHL_LOCK
(
p
Ë
	`mtx_lock
(&’)->
ñ_lock
)

	)

65 
	#EHL_UNLOCK
(
p
Ë
	`mtx_u∆ock
(&’)->
ñ_lock
)

	)

66 
	#EHL_LOCK_ASSERT
(
p
, 
x
Ë
	`mtx_as£π
(&’)->
ñ_lock
, x)

	)

71 
	#_EVENTHANDLER_INVOKE
(
«me
, 
li°
, ...) do { \

72 
evíth™dÀr_íåy
 *
_ï
; \

73 
evíth™dÀr_íåy_
 ## 
«me
 *
_t
; \

75 
	`KASSERT
((
li°
)->
ñ_Êags
 & 
EHL_INITTED
, \

77 
	`EHL_LOCK_ASSERT
((
li°
), 
MA_OWNED
); \

78 (
li°
)->
ñ_runcou¡
++; \

79 
	`KASSERT
((
li°
)->
ñ_runcou¡
 > 0, \

81 
	`CTR0
(
KTR_EVH
, "evíth™dÀr_övoke(\"" 
	`__STRING
(
«me
) "\")"); \

82 
	`TAILQ_FOREACH
(
_ï
, &((
li°
)->
ñ_íåõs
), 
ì_lök
) { \

83 i‡(
_ï
->
ì_¥i‹ôy
 !
EHE_DEAD_PRIORITY
) { \

84 
	`EHL_UNLOCK
((
li°
)); \

85 
_t
 = (
evíth™dÀr_íåy_
 ## 
«me
 *)
_ï
; \

86 
	`CTR1
(
KTR_EVH
, "eventhandler_invoke:Éxecuting %p", \

87 (*)
_t
->
eh_func
); \

88 
_t
->
	`eh_func
(
_ï
->
ì_¨g
 , ## 
__VA_ARGS__
); \

89 
	`EHL_LOCK
((
li°
)); \

92 
	`KASSERT
((
li°
)->
ñ_runcou¡
 > 0, \

94 (
li°
)->
ñ_runcou¡
--; \

95 i‡((
li°
)->
ñ_runcou¡
 == 0) \

96 
	`evíth™dÀr_¥u√_li°
(
li°
); \

97 
	`EHL_UNLOCK
((
li°
)); \

98 } 0)

	)

107 
	#EVENTHANDLER_DECLARE
(
«me
, 
ty≥
) \

108 
evíth™dÀr_íåy_
 ## 
«me
 \

110 
evíth™dÀr_íåy
 
ì
; \

111 
ty≥
 
eh_func
; \

113 
__hack


	)

115 
	#EVENTHANDLER_DEFINE
(
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

116 
evíth™dÀr_èg
 
«me
 ## 
_èg
; \

117 
«me
 ## 
	`_evh_öô
(*
˘x
) \

119 
«me
 ## 
_èg
 = 
	`EVENTHANDLER_REGISTER
“ame, 
func
, 
˘x
, \

120 
¥i‹ôy
); \

122 
	`SYSINIT
(
«me
 ## 
_evh_öô
, 
SI_SUB_CONFIGURE
, 
SI_ORDER_ANY
, \

123 
«me
 ## 
_evh_öô
, 
¨g
); \

124 
__hack


	)

126 
	#EVENTHANDLER_INVOKE
(
«me
, ...) \

128 
evíth™dÀr_li°
 *
_ñ
; \

130 i‡((
_ñ
 = 
	`evíth™dÀr_föd_li°
(#«me)Ë!
NULL
) \

131 
	`_EVENTHANDLER_INVOKE
(
«me
, 
_ñ
 , ## 
__VA_ARGS__
); \

132 } 0)

	)

134 
	#EVENTHANDLER_REGISTER
(
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

135 
	`evíth™dÀr_ªgi°î
(
NULL
, #«me, 
func
, 
¨g
, 
¥i‹ôy
)

	)

137 
	#EVENTHANDLER_DEREGISTER
(
«me
, 
èg
) \

139 
evíth™dÀr_li°
 *
_ñ
; \

141 i‡((
_ñ
 = 
	`evíth™dÀr_föd_li°
(#«me)Ë!
NULL
) \

142 
	`evíth™dÀr_dîegi°î
(
_ñ
, 
èg
); \

143 } 0)

	)

146 
evíth™dÀr_èg
 
evíth™dÀr_ªgi°î
(
evíth™dÀr_li°
 *
li°
,

147 c⁄° *
«me
, *
func
, *
¨g
, 
¥i‹ôy
);

148 
evíth™dÀr_dîegi°î
(
evíth™dÀr_li°
 *
li°
,

149 
evíth™dÀr_èg
 
èg
);

150 
evíth™dÀr_li°
 *
evíth™dÀr_föd_li°
(c⁄° *
«me
);

151 
evíth™dÀr_¥u√_li°
(
evíth™dÀr_li°
 *
li°
);

153 #ifde‡
VIMAGE


154 (*
	tvimage_ôî©‹_func_t
)(*, ...);

156 
evíth™dÀr_èg
 
	`vimage_evíth™dÀr_ªgi°î
(
evíth™dÀr_li°
 *
li°
,

157 c⁄° *
«me
, *
func
, *
¨g
, 
¥i‹ôy
,

158 
vimage_ôî©‹_func_t
);

166 
	#EVENTHANDLER_PRI_FIRST
 0

	)

167 
	#EVENTHANDLER_PRI_ANY
 10000

	)

168 
	#EVENTHANDLER_PRI_LAST
 20000

	)

171 (*
	tshutdown_‚
)(*, );

173 
	#SHUTDOWN_PRI_FIRST
 
EVENTHANDLER_PRI_FIRST


	)

174 
	#SHUTDOWN_PRI_DEFAULT
 
EVENTHANDLER_PRI_ANY


	)

175 
	#SHUTDOWN_PRI_LAST
 
EVENTHANDLER_PRI_LAST


	)

177 
	`EVENTHANDLER_DECLARE
(
shutdown_¥e_sync
, 
shutdown_‚
);

178 
	`EVENTHANDLER_DECLARE
(
shutdown_po°_sync
, 
shutdown_‚
);

179 
	`EVENTHANDLER_DECLARE
(
shutdown_föÆ
, 
shutdown_‚
);

182 (*
	tpowî_ch™ge_‚
)(*);

183 
	`EVENTHANDLER_DECLARE
(
powî_ªsume
, 
powî_ch™ge_‚
);

184 
	`EVENTHANDLER_DECLARE
(
powî_su•íd
, 
powî_ch™ge_‚
);

187 (*
	tvm_lowmem_h™dÀr_t
)(*, );

188 
	#LOWMEM_PRI_DEFAULT
 
EVENTHANDLER_PRI_FIRST


	)

189 
	`EVENTHANDLER_DECLARE
(
vm_lowmem
, 
vm_lowmem_h™dÀr_t
);

192 (*
	tmou¡roŸ_h™dÀr_t
)(*);

193 
	`EVENTHANDLER_DECLARE
(
mou¡roŸ
, 
mou¡roŸ_h™dÀr_t
);

196 
i‚ë
;

197 (*
	tvœn_c⁄fig_‚
)(*, 
	ti‚ë
 *, 
	tuöt16_t
);

198 (*
	tvœn_unc⁄fig_‚
)(*, 
	ti‚ë
 *, 
	tuöt16_t
);

199 
	`EVENTHANDLER_DECLARE
(
vœn_c⁄fig
, 
vœn_c⁄fig_‚
);

200 
	`EVENTHANDLER_DECLARE
(
vœn_unc⁄fig
, 
vœn_unc⁄fig_‚
);

203 
i‚ë
;

204 (*
	tbpf_åack_‚
)(*, 
	ti‚ë
 *, ,

206 
	`EVENTHANDLER_DECLARE
(
bpf_åack
, 
bpf_åack_‚
);

213 
¥oc
;

214 
image_∑øms
;

216 (*
	texôli°_‚
)(*, 
	t¥oc
 *);

217 (*
	tf‹kli°_‚
)(*, 
	t¥oc
 *, proc *, );

218 (*
	texe˛i°_‚
)(*, 
	t¥oc
 *, 
	timage_∑øms
 *);

219 (*
	t¥oc_˘‹_‚
)(*, 
	t¥oc
 *);

220 (*
	t¥oc_dt‹_‚
)(*, 
	t¥oc
 *);

221 (*
	t¥oc_öô_‚
)(*, 
	t¥oc
 *);

222 (*
	t¥oc_föi_‚
)(*, 
	t¥oc
 *);

223 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_˘‹
, 
¥oc_˘‹_‚
);

224 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_dt‹
, 
¥oc_dt‹_‚
);

225 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_öô
, 
¥oc_öô_‚
);

226 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_föi
, 
¥oc_föi_‚
);

227 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_exô
, 
exôli°_‚
);

228 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_f‹k
, 
f‹kli°_‚
);

229 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_exec
, 
exe˛i°_‚
);

231 
thªad
;

232 (*
	tthªad_˘‹_‚
)(*, 
	tthªad
 *);

233 (*
	tthªad_dt‹_‚
)(*, 
	tthªad
 *);

234 (*
	tthªad_föi_‚
)(*, 
	tthªad
 *);

235 (*
	tthªad_öô_‚
)(*, 
	tthªad
 *);

236 
	`EVENTHANDLER_DECLARE
(
thªad_˘‹
, 
thªad_˘‹_‚
);

237 
	`EVENTHANDLER_DECLARE
(
thªad_dt‹
, 
thªad_dt‹_‚
);

238 
	`EVENTHANDLER_DECLARE
(
thªad_öô
, 
thªad_öô_‚
);

239 
	`EVENTHANDLER_DECLARE
(
thªad_föi
, 
thªad_föi_‚
);

241 (*
	tuma_z⁄e_ch‚
)(*);

242 
	`EVENTHANDLER_DECLARE
(
nmb˛u°îs_ch™ge
, 
uma_z⁄e_ch‚
);

243 
	`EVENTHANDLER_DECLARE
(
maxsockës_ch™ge
, 
uma_z⁄e_ch‚
);

	@/usr/include/sys/filedesc.h

33 #i‚de‡
_SYS_FILEDESC_H_


34 
	#_SYS_FILEDESC_H_


	)

36 
	~<sys/queue.h
>

37 
	~<sys/evít.h
>

38 
	~<sys/lock.h
>

39 
	~<sys/¥i‹ôy.h
>

40 
	~<sys/sx.h
>

42 
	~<machöe/_limôs.h
>

48 
	#NDSLOTTYPE
 
u_l⁄g


	)

50 
	sfûedesc
 {

51 
fûe
 **
	mfd_ofûes
;

52 *
	mfd_ofûeÊags
;

53 
vnode
 *
	mfd_cdú
;

54 
vnode
 *
	mfd_rdú
;

55 
vnode
 *
	mfd_jdú
;

56 
	mfd_nfûes
;

57 
NDSLOTTYPE
 *
	mfd_m≠
;

58 
	mfd_œ°fûe
;

59 
	mfd_‰ìfûe
;

60 
u_sh‹t
 
	mfd_cmask
;

61 
u_sh‹t
 
	mfd_ªf˙t
;

62 
u_sh‹t
 
	mfd_hﬁd˙t
;

63 
sx
 
	mfd_sx
;

64 
kqli°
 
	mfd_kqli°
;

65 
	mfd_hﬁdÀadîscou¡
;

66 
	mfd_hﬁdÀadîswakeup
;

78 
	sfûedesc_to_Àadî
 {

79 
	mfdl_ªfcou¡
;

80 
	mfdl_hﬁdcou¡
;

81 
	mfdl_wakeup
;

82 
¥oc
 *
	mfdl_Àadî
;

84 
fûedesc_to_Àadî
 *
	mfdl_¥ev
;

85 
fûedesc_to_Àadî
 *
	mfdl_√xt
;

91 
	#UF_EXCLOSE
 0x01

	)

93 #ifde‡
_KERNEL


96 
	#FILEDESC_LOCK_INIT
(
fdp
Ë
	`sx_öô
(&(fdp)->
fd_sx
, "fûedes¯°ru˘uª")

	)

97 
	#FILEDESC_LOCK_DESTROY
(
fdp
Ë
	`sx_de°roy
(&(fdp)->
fd_sx
)

	)

98 
	#FILEDESC_LOCK
(
fdp
Ë(&(fdp)->
fd_sx
)

	)

99 
	#FILEDESC_XLOCK
(
fdp
Ë
	`sx_xlock
(&(fdp)->
fd_sx
)

	)

100 
	#FILEDESC_XUNLOCK
(
fdp
Ë
	`sx_xu∆ock
(&(fdp)->
fd_sx
)

	)

101 
	#FILEDESC_SLOCK
(
fdp
Ë
	`sx_¶ock
(&(fdp)->
fd_sx
)

	)

102 
	#FILEDESC_SUNLOCK
(
fdp
Ë
	`sx_su∆ock
(&(fdp)->
fd_sx
)

	)

104 
	#FILEDESC_LOCK_ASSERT
(
fdp
Ë
	`sx_as£π
(&(fdp)->
fd_sx
, 
SX_LOCKED
 | \

105 
SX_NOTRECURSED
)

	)

106 
	#FILEDESC_XLOCK_ASSERT
(
fdp
Ë
	`sx_as£π
(&(fdp)->
fd_sx
, 
SX_XLOCKED
 | \

107 
SX_NOTRECURSED
)

	)

109 
	gthªad
;

111 
˛o£f
(
fûe
 *
Â
, 
thªad
 *
td
);

112 
dupfd›í
(
thªad
 *
td
, 
fûedesc
 *
fdp
, 
ödx
, 
dfd
,

113 
mode
, 
îr‹
);

114 
ÁŒoc
(
thªad
 *
td
, 
fûe
 **
ªsu…Â
, *
ªsu…fd
);

115 
ÁŒocf
(
thªad
 *
td
, 
fûe
 **
ªsu…Â
, *
ªsu…fd
,

116 
Êags
);

117 
fdÆloc
(
thªad
 *
td
, 
möfd
, *
ªsu…
);

118 
fdavaû
(
thªad
 *
td
, 
n
);

119 
fdcheck°d
(
thªad
 *
td
);

120 
fd˛o£
(
fûedesc
 *
fdp
, 
fûe
 *
Â
, 
idx
, 
thªad
 *
td
);

121 
fd˛o£exec
(
thªad
 *
td
);

122 
fûedesc
 *
fdc›y
(fûedes¯*
fdp
);

123 
fdunsh¨e
(
¥oc
 *
p
, 
thªad
 *
td
);

124 
fd‰ì
(
thªad
 *
td
);

125 
fûedesc
 *
fdöô
(fûedes¯*
fdp
);

126 
fûedesc
 *
fdsh¨e
(fûedes¯*
fdp
);

127 
fûedesc_to_Àadî
 *

128 
fûedesc_to_Àadî_Æloc
(
fûedesc_to_Àadî
 *
ﬁd
,

129 
fûedesc
 *
fdp
, 
¥oc
 *
Àadî
);

130 
gëvnode
(
fûedesc
 *
fdp
, 
fd
, 
fûe
 **
Âp
);

131 
mou¡checkdús
(
vnode
 *
ﬁddp
, vnodê*
√wdp
);

132 
£tugidß„ty
(
thªad
 *
td
);

135 
fûe
 *
fgë_u∆ocked
(
fûedesc
 *
fdp
, 
fd
);

138 
__ölöe
 
fûe
 *

139 
	$fgë_locked
(
fûedesc
 *
fdp
, 
fd
)

142  (
fd
 < 0 || fd >
fdp
->
fd_nfûes
 ? 
NULL
 : fdp->
fd_ofûes
[fd]);

143 
	}
}

	@/usr/include/sys/ioccom.h

33 #i‚def 
_SYS_IOCCOM_H_


34 
	#_SYS_IOCCOM_H_


	)

41 
	#IOCPARM_SHIFT
 13

	)

42 
	#IOCPARM_MASK
 ((1 << 
IOCPARM_SHIFT
Ë- 1Ë

	)

43 
	#IOCPARM_LEN
(
x
Ë(((xË>> 16Ë& 
IOCPARM_MASK
)

	)

44 
	#IOCBASECMD
(
x
Ë((xË& ~(
IOCPARM_MASK
 << 16))

	)

45 
	#IOCGROUP
(
x
Ë(((xË>> 8Ë& 0xff)

	)

47 
	#IOCPARM_MAX
 (1 << 
IOCPARM_SHIFT
Ë

	)

48 
	#IOC_VOID
 0x20000000

	)

49 
	#IOC_OUT
 0x40000000

	)

50 
	#IOC_IN
 0x80000000

	)

51 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

52 
	#IOC_DIRMASK
 (
IOC_VOID
|
IOC_OUT
|
IOC_IN
)

	)

54 
	#_IOC
(
öout
,
group
,
num
,
Àn
) (() \

55 ((
öout
Ë| (((
Àn
Ë& 
IOCPARM_MASK
Ë<< 16Ë| ((
group
Ë<< 8Ë| (
num
)))

	)

56 
	#_IO
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), 0)

	)

57 
	#_IOWINT
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), ())

	)

58 
	#_IOR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_OUT
, (g), (n), —))

	)

59 
	#_IOW
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_IN
, (g), (n), —))

	)

61 
	#_IOWR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_INOUT
, (g), (n), —))

	)

63 #ifde‡
_KERNEL


65 #i‡
deföed
(
COMPAT_FREEBSD6
Ë|| deföed(
COMPAT_FREEBSD5
) || \

66 
deföed
(
COMPAT_FREEBSD4
Ë|| 
	$deföed
(
COMPAT_43
)

67 
	#IOCPARM_IVAL
(
x
Ë(()(
öçå_t
)(*)*(
ˇddr_t
 *)(*)(x))

	)

72 
	~<sys/cdefs.h
>

74 
__BEGIN_DECLS


75 
	`io˘l
(, , ...);

76 
__END_DECLS


	@/usr/include/sys/kenv.h

29 #i‚de‡
_SYS_KENV_H_


30 
	#_SYS_KENV_H_


	)

35 
	#KENV_GET
 0

	)

36 
	#KENV_SET
 1

	)

37 
	#KENV_UNSET
 2

	)

38 
	#KENV_DUMP
 3

	)

40 
	#KENV_MNAMELEN
 128

	)

41 
	#KENV_MVALLEN
 128

	)

	@/usr/include/sys/limits.h

32 #i‚de‡
_SYS_LIMITS_H_


33 
	#_SYS_LIMITS_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<machöe/_limôs.h
>

38 
	#CHAR_BIT
 
__CHAR_BIT


	)

40 
	#SCHAR_MAX
 
__SCHAR_MAX


	)

41 
	#SCHAR_MIN
 
__SCHAR_MIN


	)

43 
	#UCHAR_MAX
 
__UCHAR_MAX


	)

45 #ifde‡
__CHAR_UNSIGNED__


46 
	#CHAR_MAX
 
UCHAR_MAX


	)

47 
	#CHAR_MIN
 0

	)

49 
	#CHAR_MAX
 
SCHAR_MAX


	)

50 
	#CHAR_MIN
 
SCHAR_MIN


	)

53 
	#USHRT_MAX
 
__USHRT_MAX


	)

54 
	#SHRT_MAX
 
__SHRT_MAX


	)

55 
	#SHRT_MIN
 
__SHRT_MIN


	)

57 
	#UINT_MAX
 
__UINT_MAX


	)

58 
	#INT_MAX
 
__INT_MAX


	)

59 
	#INT_MIN
 
__INT_MIN


	)

61 
	#ULONG_MAX
 
__ULONG_MAX


	)

62 
	#LONG_MAX
 
__LONG_MAX


	)

63 
	#LONG_MIN
 
__LONG_MIN


	)

65 #ifde‡
__LONG_LONG_SUPPORTED


66 
	#ULLONG_MAX
 
__ULLONG_MAX


	)

67 
	#LLONG_MAX
 
__LLONG_MAX


	)

68 
	#LLONG_MIN
 
__LLONG_MIN


	)

71 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


72 
	#SSIZE_MAX
 
__SSIZE_MAX


	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIZE_T_MAX
 
__SIZE_T_MAX


	)

78 
	#OFF_MAX
 
__OFF_MAX


	)

79 
	#OFF_MIN
 
__OFF_MIN


	)

82 #i‡
__BSD_VISIBLE


83 
	#GID_MAX
 
UINT_MAX


	)

84 
	#UID_MAX
 
UINT_MAX


	)

86 
	#UQUAD_MAX
 (
__UQUAD_MAX
Ë

	)

87 
	#QUAD_MAX
 (
__QUAD_MAX
Ë

	)

88 
	#QUAD_MIN
 (
__QUAD_MIN
Ë

	)

91 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

92 
	#LONG_BIT
 
__LONG_BIT


	)

93 
	#WORD_BIT
 
__WORD_BIT


	)

96 #i‡
__POSIX_VISIBLE


97 
	#MQ_PRIO_MAX
 64

	)

	@/usr/include/sys/linker_set.h

30 #i‚de‡
_SYS_LINKER_SET_H_


31 
	#_SYS_LINKER_SET_H_


	)

33 #i‚de‡
_SYS_CDEFS_H_


34 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 #ifde‡
__GNUCLIKE___SECTION


47 
	#__MAKE_SET
(
£t
, 
sym
) \

48 c⁄° * c⁄° 
__£t_
##
£t
##
_sym_
##
sym
 \

49 
	`__£˘i⁄
("£t_" #£tË
__u£d
 = &
sym


	)

51 #i‚de‡
löt


52 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


54 
	#__MAKE_SET
(
£t
, 
sym
Ëc⁄° * c⁄° (
__£t_
##£t##
_sym_
##sym)

	)

60 
	#TEXT_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

61 
	#DATA_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

62 
	#BSS_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

63 
	#ABS_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

64 
	#SET_ENTRY
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

69 
	#SET_DECLARE
(
£t
, 
±y≥
) \

70 
±y≥
 *
	`__CONCAT
(
__°¨t_£t_
,
£t
); \

71 
±y≥
 *
	`__CONCAT
(
__°›_£t_
,
£t
)

	)

73 
	#SET_BEGIN
(
£t
) \

74 (&
	`__CONCAT
(
__°¨t_£t_
,
£t
))

	)

75 
	#SET_LIMIT
(
£t
) \

76 (&
	`__CONCAT
(
__°›_£t_
,
£t
))

	)

85 
	#SET_FOREACH
(
pv¨
, 
£t
) \

86 
pv¨
 = 
	`SET_BEGIN
(
£t
);Öv¨ < 
	`SET_LIMIT
(£t);Öv¨++)

	)

88 
	#SET_ITEM
(
£t
, 
i
) \

89 ((
	`SET_BEGIN
(
£t
))[
i
])

	)

94 
	#SET_COUNT
(
£t
) \

95 (
	`SET_LIMIT
(
£t
Ë- 
	`SET_BEGIN
(£t))

	)

	@/usr/include/sys/lock.h

32 #i‚de‡
_SYS_LOCK_H_


33 
	#_SYS_LOCK_H_


	)

35 
	~<sys/queue.h
>

36 
	~<sys/_lock.h
>

38 
	glock_li°_íåy
;

39 
	gthªad
;

58 
	slock_˛ass
 {

59 c⁄° *
	mlc_«me
;

60 
u_öt
 
	mlc_Êags
;

61 (*
	mlc_as£π
)(
lock_obje˘
 *
	mlock
, 
	mwh©
);

62 (*
	mlc_ddb_show
)(
lock_obje˘
 *
	mlock
);

63 (*
	mlc_lock
)(
lock_obje˘
 *
	mlock
, 
	mhow
);

64 (*
	mlc_ow√r
)(
lock_obje˘
 *
	mlock
, 
thªad
 **
	mow√r
);

65 (*
	mlc_u∆ock
)(
lock_obje˘
 *
	mlock
);

68 
	#LC_SLEEPLOCK
 0x00000001

	)

69 
	#LC_SPINLOCK
 0x00000002

	)

70 
	#LC_SLEEPABLE
 0x00000004

	)

71 
	#LC_RECURSABLE
 0x00000008

	)

72 
	#LC_UPGRADABLE
 0x00000010

	)

74 
	#LO_CLASSFLAGS
 0x0000fff‡

	)

75 
	#LO_INITIALIZED
 0x00010000

	)

76 
	#LO_WITNESS
 0x00020000

	)

77 
	#LO_QUIET
 0x00040000

	)

78 
	#LO_RECURSABLE
 0x00080000

	)

79 
	#LO_SLEEPABLE
 0x00100000

	)

80 
	#LO_UPGRADABLE
 0x00200000

	)

81 
	#LO_DUPOK
 0x00400000

	)

82 
	#LO_CLASSMASK
 0x0f000000

	)

83 
	#LO_NOPROFILE
 0x10000000

	)

90 
	#LO_CLASSSHIFT
 24

	)

91 
	#LO_CLASSINDEX
(
lock
Ë(((÷ock)->
lo_Êags
Ë& 
LO_CLASSMASK
Ë>> 
LO_CLASSSHIFT
)

	)

92 
	#LOCK_CLASS
(
lock
Ë(
lock_˛as£s
[
	`LO_CLASSINDEX
(÷ock))])

	)

93 
	#LOCK_CLASS_MAX
 (
LO_CLASSMASK
 >> 
LO_CLASSSHIFT
)

	)

99 
	#LOP_NEWORDER
 0x00000001

	)

100 
	#LOP_QUIET
 0x00000002

	)

101 
	#LOP_TRYLOCK
 0x00000004

	)

102 
	#LOP_EXCLUSIVE
 0x00000008

	)

103 
	#LOP_DUPOK
 0x00000010

	)

106 
	#LA_MASKASSERT
 0x000000f‡

	)

107 
	#LA_UNLOCKED
 0x00000000

	)

108 
	#LA_LOCKED
 0x00000001

	)

109 
	#LA_SLOCKED
 0x00000002

	)

110 
	#LA_XLOCKED
 0x00000004

	)

111 
	#LA_RECURSED
 0x00000008

	)

112 
	#LA_NOTRECURSED
 0x00000010

	)

114 #ifde‡
_KERNEL


124 #i‡
deföed
(
KLD_MODULE
Ë|| deföed(
WITNESS
Ë|| deföed(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
Ë|| deföed(
KTR
Ë|| deföed(
LOCK_PROFILING
)

125 
	#LOCK_DEBUG
 1

	)

127 
	#LOCK_DEBUG
 0

	)

134 #i‡
LOCK_DEBUG
 > 0

135 
	#LOCK_FILE
 
__FILE__


	)

136 
	#LOCK_LINE
 
__LINE__


	)

138 
	#LOCK_FILE
 
NULL


	)

139 
	#LOCK_LINE
 0

	)

153 
	#LOCK_LOG_TEST
(
lo
, 
Êags
) \

154 (((
Êags
Ë& 
LOP_QUIET
Ë=0 && ((
lo
)->
lo_Êags
 & 
LO_QUIET
Ë=0)

	)

156 
	#LOCK_LOG_LOCK
(
›«me
, 
lo
, 
Êags
, 
ªcur£
, 
fûe
, 
löe
) do { \

157 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

158 
	`CTR6
(
KTR_LOCK
, 
›«me
 " (%s) %s %pÑ = %dát %s:%d", \

159 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
, \

160 (
lo
), (
u_öt
)(
ªcur£
), (
fûe
), (
löe
)); \

161 } 0)

	)

163 
	#LOCK_LOG_TRY
(
›«me
, 
lo
, 
Êags
, 
ªsu…
, 
fûe
, 
löe
) do { \

164 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

165 
	`CTR6
(
KTR_LOCK
, "TRY_" 
›«me
 " (%s) %s %pÑesult=%dát %s:%d",\

166 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
, \

167 (
lo
), (
u_öt
)(
ªsu…
), (
fûe
), (
löe
)); \

168 } 0)

	)

170 
	#LOCK_LOG_INIT
(
lo
, 
Êags
) do { \

171 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

172 
	`CTR4
(
KTR_LOCK
, "%s: %∞(%sË%s", 
__func__
, (
lo
), \

173 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
); \

174 } 0)

	)

176 
	#LOCK_LOG_DESTROY
(
lo
, 
Êags
Ë
	`LOCK_LOG_INIT
÷o, fœgs)

	)

178 
	#lock_öôÆized
(
lo
Ë(÷o)->
lo_Êags
 & 
LO_INITIALIZED
)

	)

184 
	#MPASS
(
ex
Ë
	`MPASS4
”x, #ex, 
__FILE__
, 
__LINE__
)

	)

185 
	#MPASS2
(
ex
, 
wh©
Ë
	`MPASS4
”x, wh©, 
__FILE__
, 
__LINE__
)

	)

186 
	#MPASS3
(
ex
, 
fûe
, 
löe
Ë
	`MPASS4
”x, #ex, fûe,Üöe)

	)

187 
	#MPASS4
(
ex
, 
wh©
, 
fûe
, 
löe
) \

188 
	`KASSERT
((
ex
), ("As£πi⁄ %†Áûedáà%s:%d", 
wh©
, 
fûe
, 
löe
))

	)

190 
lock_˛ass
 
lock_˛ass_mtx_¶ìp
;

191 
lock_˛ass
 
lock_˛ass_mtx_•ö
;

192 
lock_˛ass
 
lock_˛ass_sx
;

193 
lock_˛ass
 
lock_˛ass_rw
;

194 
lock_˛ass
 
lock_˛ass_rm
;

195 
lock_˛ass
 
lock_˛ass_lockmgr
;

197 
lock_˛ass
 *
lock_˛as£s
[];

199 
lock_öô
(
lock_obje˘
 *, 
lock_˛ass
 *,

201 
lock_de°roy
(
lock_obje˘
 *);

202 
•ölock_íãr
();

203 
•ölock_exô
();

204 
wô√ss_öô
(
lock_obje˘
 *, const *);

205 
wô√ss_de°roy
(
lock_obje˘
 *);

206 
wô√ss_deföe‹dî
(
lock_obje˘
 *, lock_object *);

207 
wô√ss_check‹dî
(
lock_obje˘
 *, , const *, ,

208 
lock_obje˘
 *);

209 
wô√ss_lock
(
lock_obje˘
 *, , const *, );

210 
wô√ss_upgøde
(
lock_obje˘
 *, , const *, );

211 
wô√ss_downgøde
(
lock_obje˘
 *, , const *, );

212 
wô√ss_u∆ock
(
lock_obje˘
 *, , const *, );

213 
wô√ss_ßve
(
lock_obje˘
 *, const **, *);

214 
wô√ss_ª°‹e
(
lock_obje˘
 *, const *, );

215 
wô√ss_li°_locks
(
lock_li°_íåy
 **,

217 
	`wô√ss_w¨n
(, 
lock_obje˘
 *, const *, ...);

218 
	`wô√ss_as£π
(
lock_obje˘
 *, , const *, );

219 
	`wô√ss_di•œy_•ölock
(
lock_obje˘
 *, 
thªad
 *,

221 
	`wô√ss_löe
(
lock_obje˘
 *);

222 
	`wô√ss_n‹ñó£
(
lock_obje˘
 *);

223 
	`wô√ss_ªÀa£ok
(
lock_obje˘
 *);

224 c⁄° *
	`wô√ss_fûe
(
lock_obje˘
 *);

225 
	`wô√ss_thªad_exô
(
thªad
 *);

227 #ifdef 
WITNESS


230 
	#WARN_GIANTOK
 0x01

	)

231 
	#WARN_PANIC
 0x02

	)

232 
	#WARN_SLEEPOK
 0x04

	)

234 
	#WITNESS_INIT
(
lock
, 
ty≥
) \

235 
	`wô√ss_öô
((
lock
), (
ty≥
))

	)

237 
	#WITNESS_DESTROY
(
lock
) \

238 
	`wô√ss_de°roy
(
lock
)

	)

240 
	#WITNESS_CHECKORDER
(
lock
, 
Êags
, 
fûe
, 
löe
, 
öãæock
) \

241 
	`wô√ss_check‹dî
((
lock
), (
Êags
), (
fûe
), (
löe
), (
öãæock
))

	)

243 
	#WITNESS_DEFINEORDER
(
lock1
, 
lock2
) \

244 
	`wô√ss_deföe‹dî
((
lock_obje˘
 *)(
lock1
), \

245 (
lock_obje˘
 *)(
lock2
))

	)

247 
	#WITNESS_LOCK
(
lock
, 
Êags
, 
fûe
, 
löe
) \

248 
	`wô√ss_lock
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

250 
	#WITNESS_UPGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
) \

251 
	`wô√ss_upgøde
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

253 
	#WITNESS_DOWNGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
) \

254 
	`wô√ss_downgøde
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

256 
	#WITNESS_UNLOCK
(
lock
, 
Êags
, 
fûe
, 
löe
) \

257 
	`wô√ss_u∆ock
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

259 
	#WITNESS_CHECK
(
Êags
, 
lock
, 
fmt
, ...) \

260 
	`wô√ss_w¨n
((
Êags
), (
lock
), (
fmt
), ## 
__VA_ARGS__
)

	)

262 
	#WITNESS_WARN
(
Êags
, 
lock
, 
fmt
, ...) \

263 
	`wô√ss_w¨n
((
Êags
), (
lock
), (
fmt
), ## 
__VA_ARGS__
)

	)

265 
	#WITNESS_SAVE_DECL
(
n
) \

266 c⁄° * 
	`__CONCAT
(
n
, 
__wf
); \

267 
	`__CONCAT
(
n
, 
__wl
)

	)

269 
	#WITNESS_SAVE
(
lock
, 
n
) \

270 
	`wô√ss_ßve
((
lock
), &
	`__CONCAT
(
n
, 
__wf
), &__CONCAT“, 
__wl
))

	)

272 
	#WITNESS_RESTORE
(
lock
, 
n
) \

273 
	`wô√ss_ª°‹e
((
lock
), 
	`__CONCAT
(
n
, 
__wf
), __CONCAT“, 
__wl
))

	)

275 
	#WITNESS_NORELEASE
(
lock
) \

276 
	`wô√ss_n‹ñó£
(&(
lock
)->
lock_obje˘
)

	)

278 
	#WITNESS_RELEASEOK
(
lock
) \

279 
	`wô√ss_ªÀa£ok
(&(
lock
)->
lock_obje˘
)

	)

281 
	#WITNESS_FILE
(
lock
) \

282 
	`wô√ss_fûe
(
lock
)

	)

284 
	#WITNESS_LINE
(
lock
) \

285 
	`wô√ss_löe
(
lock
)

	)

288 
	#WITNESS_INIT
(
lock
, 
ty≥
Ë()0

	)

289 
	#WITNESS_DESTROY
(
lock
Ë()0

	)

290 
	#WITNESS_DEFINEORDER
(
lock1
, 
lock2
Ë0

	)

291 
	#WITNESS_CHECKORDER
(
lock
, 
Êags
, 
fûe
, 
löe
, 
öãæock
Ë()0

	)

292 
	#WITNESS_LOCK
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

293 
	#WITNESS_UPGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

294 
	#WITNESS_DOWNGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

295 
	#WITNESS_UNLOCK
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

296 
	#WITNESS_CHECK
(
Êags
, 
lock
, 
fmt
, ...Ë0

	)

297 
	#WITNESS_WARN
(
Êags
, 
lock
, 
fmt
, ...Ë()0

	)

298 
	#WITNESS_SAVE_DECL
(
n
Ë()0

	)

299 
	#WITNESS_SAVE
(
lock
, 
n
Ë()0

	)

300 
	#WITNESS_RESTORE
(
lock
, 
n
Ë()0

	)

301 
	#WITNESS_NORELEASE
(
lock
Ë()0

	)

302 
	#WITNESS_RELEASEOK
(
lock
Ë()0

	)

303 
	#WITNESS_FILE
(
lock
Ë("?")

	)

304 
	#WITNESS_LINE
(
lock
Ë(0)

	)

311 
	#wô√ss_check
(
l
) \

312 
	`WITNESS_CHECKORDER
(&(
l
)->
lock_obje˘
, 
LOP_EXCLUSIVE
, 
LOCK_FILE
, \

313 
LOCK_LINE
, 
NULL
)

	)

315 
	#wô√ss_check_sh¨ed
(
l
) \

316 
	`WITNESS_CHECKORDER
(&(
l
)->
lock_obje˘
, 0, 
LOCK_FILE
, 
LOCK_LINE
, 
NULL
)

	)

	@/usr/include/sys/lock_profile.h

31 #i‚de‡
_SYS_LOCK_PROFILE_H_


32 
	#_SYS_LOCK_PROFILE_H_


	)

34 
	glock_¥ofûe_obje˘
;

35 
LIST_HEAD
(
Õohód
, 
lock_¥ofûe_obje˘
);

37 #ifde‡
_KERNEL


38 #ifde‡
LOCK_PROFILING


39 
	~<machöe/˝ufunc.h
>

40 
	~<sys/lock.h
>

42 #i‚de‡
USE_CPU_NANOSECONDS


43 
u_öt64_t
 
«no£c⁄ds
();

46 vﬁ©ûê
lock_¥of_íabÀ
;

48 
lock_¥ofûe_obèö_lock_suc˚ss
(
lock_obje˘
 *
lo
, 
c⁄ã°ed
,

49 
uöt64_t
 
waôtime
, c⁄° *
fûe
, 
löe
);

50 
lock_¥ofûe_ªÀa£_lock
(
lock_obje˘
 *
lo
);

51 
lock_¥ofûe_thªad_exô
(
thªad
 *
td
);

54 
ölöe
 

55 
	$lock_¥ofûe_obèö_lock_Áûed
(
lock_obje˘
 *
lo
, *
c⁄ã°ed
,

56 
uöt64_t
 *
waôtime
)

58 i‡(!
lock_¥of_íabÀ
 || (
lo
->
lo_Êags
 & 
LO_NOPROFILE
Ë|| *
c⁄ã°ed
)

60 *
waôtime
 = 
	`«no£c⁄ds
();

61 *
c⁄ã°ed
 = 1;

62 
	}
}

66 
	#lock_¥ofûe_ªÀa£_lock
(
lo
Ë()0

	)

67 
	#lock_¥ofûe_obèö_lock_Áûed
(
lo
, 
c⁄ã°ed
, 
waôtime
Ë()0

	)

68 
	#lock_¥ofûe_obèö_lock_suc˚ss
(
lo
, 
c⁄ã°ed
, 
waôtime
, 
fûe
, 
löe
Ë()0

	)

69 
	#lock_¥ofûe_thªad_exô
(
td
Ë()0

	)

	@/usr/include/sys/lockmgr.h

31 #i‚def 
_SYS_LOCKMGR_H_


32 
	#_SYS_LOCKMGR_H_


	)

34 
	~<sys/_lock.h
>

35 
	~<sys/_lockmgr.h
>

36 
	~<sys/_muãx.h
>

37 
	~<sys/_rwlock.h
>

39 
	#LK_SHARE
 0x01

	)

40 
	#LK_SHARED_WAITERS
 0x02

	)

41 
	#LK_EXCLUSIVE_WAITERS
 0x04

	)

42 
	#LK_EXCLUSIVE_SPINNERS
 0x08

	)

43 
	#LK_ALL_WAITERS
 \

44 (
LK_SHARED_WAITERS
 | 
LK_EXCLUSIVE_WAITERS
)

	)

45 
	#LK_FLAGMASK
 \

46 (
LK_SHARE
 | 
LK_ALL_WAITERS
 | 
LK_EXCLUSIVE_SPINNERS
)

	)

48 
	#LK_HOLDER
(
x
Ë((xË& ~
LK_FLAGMASK
)

	)

49 
	#LK_SHARERS_SHIFT
 4

	)

50 
	#LK_SHARERS
(
x
Ë(
	`LK_HOLDER
(xË>> 
LK_SHARERS_SHIFT
)

	)

51 
	#LK_SHARERS_LOCK
(
x
Ë((xË<< 
LK_SHARERS_SHIFT
 | 
LK_SHARE
)

	)

52 
	#LK_ONE_SHARER
 (1 << 
LK_SHARERS_SHIFT
)

	)

53 
	#LK_UNLOCKED
 
	`LK_SHARERS_LOCK
(0)

	)

54 
	#LK_KERNPROC
 ((
uöçå_t
)(-1Ë& ~
LK_FLAGMASK
)

	)

56 #ifde‡
_KERNEL


58 #i‡!
deföed
(
LOCK_FILE
Ë|| !deföed(
LOCK_LINE
)

62 
	gthªad
;

63 
	#lk_ªcur£
 
lock_obje˘
.
lo_d©a


	)

69 
__lockmgr_¨gs
(
lock
 *
lk
, 
u_öt
 
Êags
, 
lock_obje˘
 *
ûk
,

70 c⁄° *
wmesg
, 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
);

71 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

72 
_lockmgr_as£π
(
lock
 *
lk
, 
wh©
, c⁄° *
fûe
, 
löe
);

74 
_lockmgr_disown
(
lock
 *
lk
, c⁄° *
fûe
, 
löe
);

76 
lockde°roy
(
lock
 *
lk
);

77 
locköô
(
lock
 *
lk
, 
¥io
, c⁄° *
wmesg
, 
timo
,

78 
Êags
);

79 #ifde‡
DDB


80 
lockmgr_chaö
(
thªad
 *
td
, thªad **
ow√Ω
);

82 
lockmgr_¥ötöfo
(
lock
 *
lk
);

83 
lock°©us
(
lock
 *
lk
);

89 
__ölöe
 

90 
	$_lockmgr_¨gs
(
lock
 *
lk
, 
u_öt
 
Êags
, 
mtx
 *
ûk
, c⁄° *
wmesg
,

91 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
)

94  (
	`__lockmgr_¨gs
(
lk
, 
Êags
, (
ûk
 !
NULL
Ë? &ûk->
lock_obje˘
 :

95 
NULL
, 
wmesg
, 
¥io
, 
timo
, 
fûe
, 
löe
));

96 
	}
}

98 
__ölöe
 

99 
	$_lockmgr_¨gs_rw
(
lock
 *
lk
, 
u_öt
 
Êags
, 
rwlock
 *
ûk
,

100 c⁄° *
wmesg
, 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
)

103  (
	`__lockmgr_¨gs
(
lk
, 
Êags
, (
ûk
 !
NULL
Ë? &ûk->
lock_obje˘
 :

104 
NULL
, 
wmesg
, 
¥io
, 
timo
, 
fûe
, 
löe
));

105 
	}
}

110 
	#lockmgr
(
lk
, 
Êags
, 
ûk
) \

111 
	`_lockmgr_¨gs
((
lk
), (
Êags
), (
ûk
), 
LK_WMESG_DEFAULT
, \

112 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

113 
	#lockmgr_¨gs
(
lk
, 
Êags
, 
ûk
, 
wmesg
, 
¥io
, 
timo
) \

114 
	`_lockmgr_¨gs
((
lk
), (
Êags
), (
ûk
), (
wmesg
), (
¥io
), (
timo
), \

115 
LOCK_FILE
, 
LOCK_LINE
)

	)

116 
	#lockmgr_¨gs_rw
(
lk
, 
Êags
, 
ûk
, 
wmesg
, 
¥io
, 
timo
) \

117 
	`_lockmgr_¨gs_rw
((
lk
), (
Êags
), (
ûk
), (
wmesg
), (
¥io
), (
timo
), \

118 
LOCK_FILE
, 
LOCK_LINE
)

	)

119 
	#lockmgr_disown
(
lk
) \

120 
	`_lockmgr_disown
((
lk
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

121 
	#lockmgr_ªcur£d
(
lk
) \

122 ((
lk
)->
lk_ªcur£
 !0)

	)

123 
	#lockmgr_rw
(
lk
, 
Êags
, 
ûk
) \

124 
	`_lockmgr_¨gs_rw
((
lk
), (
Êags
), (
ûk
), 
LK_WMESG_DEFAULT
, \

125 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

126 
	#lockmgr_waôîs
(
lk
) \

127 ((
lk
)->
lk_lock
 & 
LK_ALL_WAITERS
)

	)

128 #ifde‡
INVARIANTS


129 
	#lockmgr_as£π
(
lk
, 
wh©
) \

130 
	`_lockmgr_as£π
((
lk
), (
wh©
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

132 
	#lockmgr_as£π
(
lk
, 
wh©
)

	)

138 
	#LK_INIT_MASK
 0x0000FF

	)

139 
	#LK_CANRECURSE
 0x000001

	)

140 
	#LK_NODUP
 0x000002

	)

141 
	#LK_NOPROFILE
 0x000004

	)

142 
	#LK_NOSHARE
 0x000008

	)

143 
	#LK_NOWITNESS
 0x000010

	)

144 
	#LK_QUIET
 0x000020

	)

145 
	#LK_ADAPTIVE
 0x000040

	)

148 
	#LK_EXSLPFAIL
 0x000080

	)

153 
	#LK_EATTR_MASK
 0x00FF00

	)

154 
	#LK_INTERLOCK
 0x000100

	)

155 
	#LK_NOWAIT
 0x000200

	)

156 
	#LK_RETRY
 0x000400

	)

157 
	#LK_SLEEPFAIL
 0x000800

	)

158 
	#LK_TIMELOCK
 0x001000

	)

163 
	#LK_TYPE_MASK
 0xFF0000

	)

164 
	#LK_DOWNGRADE
 0x010000

	)

165 
	#LK_DRAIN
 0x020000

	)

166 
	#LK_EXCLOTHER
 0x040000

	)

167 
	#LK_EXCLUSIVE
 0x080000

	)

168 
	#LK_RELEASE
 0x100000

	)

169 
	#LK_SHARED
 0x200000

	)

170 
	#LK_UPGRADE
 0x400000

	)

172 
	#LK_TOTAL_MASK
 (
LK_INIT_MASK
 | 
LK_EATTR_MASK
 | 
LK_TYPE_MASK
)

	)

177 
	#LK_WMESG_DEFAULT
 (
NULL
)

	)

178 
	#LK_PRIO_DEFAULT
 (0)

	)

179 
	#LK_TIMO_DEFAULT
 (0)

	)

184 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

185 
	#KA_LOCKED
 
LA_LOCKED


	)

186 
	#KA_SLOCKED
 
LA_SLOCKED


	)

187 
	#KA_XLOCKED
 
LA_XLOCKED


	)

188 
	#KA_UNLOCKED
 
LA_UNLOCKED


	)

189 
	#KA_RECURSED
 
LA_RECURSED


	)

190 
	#KA_NOTRECURSED
 
LA_NOTRECURSED


	)

	@/usr/include/sys/module.h

29 #i‚de‡
_SYS_MODULE_H_


30 
	#_SYS_MODULE_H_


	)

35 
	#MDT_DEPEND
 1

	)

36 
	#MDT_MODULE
 2

	)

37 
	#MDT_VERSION
 3

	)

39 
	#MDT_STRUCT_VERSION
 1

	)

40 
	#MDT_SETNAME
 "modmëad©a_£t"

	)

42 
	emodevíây≥
 {

43 
	mMOD_LOAD
,

44 
	mMOD_UNLOAD
,

45 
	mMOD_SHUTDOWN
,

46 
	mMOD_QUIESCE


47 } 
	tmodevíây≥_t
;

49 
moduÀ
 *
	tmoduÀ_t
;

50 (*
	tmodevíth™d_t
)(
	tmoduÀ_t
, , *);

55 
	smoduÀd©a
 {

56 c⁄° *
«me
;

57 
modevíth™d_t
 
evh™d
;

58 *
¥iv
;

59 } 
	tmoduÀd©a_t
;

65 
	umod•ecific
 {

66 
ötvÆ
;

67 
u_öt
 
uötvÆ
;

68 
l⁄gvÆ
;

69 
u_l⁄g
 
ul⁄gvÆ
;

70 } 
	tmod•ecific_t
;

75 
	smod_dïíd
 {

76 
md_vî_möimum
;

77 
md_vî_¥e„ºed
;

78 
md_vî_maximum
;

84 
	smod_vîsi⁄
 {

85 
mv_vîsi⁄
;

88 
	smod_mëad©a
 {

89 
md_vîsi⁄
;

90 
md_ty≥
;

91 *
md_d©a
;

92 c⁄° *
md_cvÆ
;

95 #ifdef 
_KERNEL


97 
	~<sys/lökî_£t.h
>

99 
	#MODULE_METADATA
(
uniquifõr
, 
ty≥
, 
d©a
, 
cvÆ
) \

100 
mod_mëad©a
 
_mod_mëad©a
##
uniquifõr
 = { \

101 
MDT_STRUCT_VERSION
, \

102 
ty≥
, \

103 
d©a
, \

104 
cvÆ
 \

105 
	}
}; \

106 
	`DATA_SET
(
modmëad©a_£t
, 
_mod_mëad©a
##
uniquifõr
)

	)

108 
	#MODULE_DEPEND
(
moduÀ
, 
mdïíd
, 
vmö
, 
v¥ef
, 
vmax
) \

109 
mod_dïíd
 
_
##
moduÀ
##
_dïíd_⁄_
##
mdïíd
 = { \

110 
vmö
, \

111 
v¥ef
, \

112 
vmax
 \

114 
	`MODULE_METADATA
(
_md_
##
moduÀ
##
_⁄_
##
mdïíd
, 
MDT_DEPEND
, \

115 &
_
##
moduÀ
##
_dïíd_⁄_
##
mdïíd
, #mdïíd)

	)

126 
	#MODULE_KERNEL_MAXVER
 (
	`roundup
(
__FªeBSD_vîsi⁄
, 100000Ë- 1)

	)

128 
	#DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
maxvî
) \

129 
	`MODULE_DEPEND
(
«me
, 
kî√l
, 
__FªeBSD_vîsi⁄
, \

130 
__FªeBSD_vîsi⁄
, 
maxvî
); \

131 
	`MODULE_METADATA
(
_md_
##
«me
, 
MDT_MODULE
, &
d©a
, #name); \

132 
	`SYSINIT
(
«me
##
moduÀ
, 
sub
, 
‹dî
, 
moduÀ_ªgi°î_öô
, &
d©a
); \

133 
__hack


	)

135 
	#DECLARE_MODULE
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

136 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
MODULE_KERNEL_MAXVER
)

	)

145 
	#DECLARE_MODULE_TIED
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

146 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
__FªeBSD_vîsi⁄
)

	)

148 
	#MODULE_VERSION
(
moduÀ
, 
vîsi⁄
) \

149 
mod_vîsi⁄
 
_
##
moduÀ
##
_vîsi⁄
 = { \

150 
vîsi⁄
 \

152 
	`MODULE_METADATA
(
_
##
moduÀ
##
_vîsi⁄
, 
MDT_VERSION
, \

153 &
_
##
moduÀ
##
_vîsi⁄
, #moduÀ)

	)

155 
sx
 
moduÀs_sx
;

157 
	#MOD_XLOCK
 
	`sx_xlock
(&
moduÀs_sx
)

	)

158 
	#MOD_SLOCK
 
	`sx_¶ock
(&
moduÀs_sx
)

	)

159 
	#MOD_XUNLOCK
 
	`sx_xu∆ock
(&
moduÀs_sx
)

	)

160 
	#MOD_SUNLOCK
 
	`sx_su∆ock
(&
moduÀs_sx
)

	)

161 
	#MOD_LOCK_ASSERT
 
	`sx_as£π
(&
moduÀs_sx
, 
SX_LOCKED
)

	)

162 
	#MOD_XLOCK_ASSERT
 
	`sx_as£π
(&
moduÀs_sx
, 
SX_XLOCKED
)

	)

164 
	glökî_fûe
;

166 
moduÀ_ªgi°î_öô
(const *);

167 
moduÀ_ªgi°î
(c⁄° 
moduÀd©a
 *, 
lökî_fûe
 *);

168 
moduÀ_t
 
moduÀ_lookupby«me
(const *);

169 
moduÀ_t
 
moduÀ_lookupbyid
();

170 
moduÀ_quõs˚
(
moduÀ_t
);

171 
moduÀ_ª„ªn˚
(
moduÀ_t
);

172 
moduÀ_ªÀa£
(
moduÀ_t
);

173 
moduÀ_u∆ﬂd
(
moduÀ_t
);

174 
moduÀ_gëid
(
moduÀ_t
);

175 
moduÀ_t
 
moduÀ_gë‚ext
(module_t);

176 c⁄° * 
moduÀ_gë«me
(
moduÀ_t
);

177 
moduÀ_£t•ecific
(
moduÀ_t
, 
mod•ecific_t
 *);

178 
lökî_fûe
 *
moduÀ_fûe
(
moduÀ_t
);

180 #ifdef 
MOD_DEBUG


181 
mod_debug
;

182 
	#MOD_DEBUG_REFS
 1

	)

184 
	#MOD_DPF
(
ˇt
, 
¨gs
) do { \

185 i‡(
mod_debug
 & 
MOD_DEBUG_
##
ˇt
) \

186 
	`¥ötf
(
¨gs
); \

187 } 0)

	)

191 
	#MOD_DPF
(
ˇt
, 
¨gs
)

	)

195 
	#MAXMODNAME
 32

	)

197 
	smoduÀ_°©
 {

198 
	mvîsi⁄
;

199 
	m«me
[
MAXMODNAME
];

200 
	mªfs
;

201 
	mid
;

202 
mod•ecific_t
 
	md©a
;

205 #i‚de‡
_KERNEL


207 
	~<sys/cdefs.h
>

209 
__BEGIN_DECLS


210 
mod√xt
(
_modid
);

211 
mod‚ext
(
_modid
);

212 
mod°©
(
_modid
, 
moduÀ_°©
 *
_°©
);

213 
modföd
(c⁄° *
_«me
);

214 
	g__END_DECLS


	@/usr/include/sys/nlist_aout.h

39 #i‚de‡
_SYS_NLIST_AOUT_H_


40 
	#_SYS_NLIST_AOUT_H_


	)

51 
	s∆i°
 {

52 #ifde‡
_AOUT_INCLUDE_


54 *
	mn_«me
;

55 
	mn_°rx
;

56 } 
	mn_un
;

58 *
	mn_«me
;

62 
	mn_ty≥
;

63 
	mn_Ÿhî
;

64 
	mn_desc
;

65 
	mn_vÆue
;

68 
	#n_hash
 
n_desc


	)

73 
	#N_UNDF
 0x00

	)

74 
	#N_ABS
 0x02

	)

75 
	#N_TEXT
 0x04

	)

76 
	#N_DATA
 0x06

	)

77 
	#N_BSS
 0x08

	)

78 
	#N_INDR
 0x0®

	)

79 
	#N_SIZE
 0x0¯

	)

80 
	#N_COMM
 0x12

	)

82 
	#N_SETA
 0x14

	)

83 
	#N_SETT
 0x16

	)

84 
	#N_SETD
 0x18

	)

85 
	#N_SETB
 0x1®

	)

86 
	#N_SETV
 0x1¯

	)

88 
	#N_FN
 0x1ê

	)

89 
	#N_WARN
 0x1ê

	)

91 
	#N_EXT
 0x01

	)

92 
	#N_TYPE
 0x1ê

	)

93 
	#N_STAB
 0xe0

	)

100 
	#N_AUX
(
p
Ë(’)->
n_Ÿhî
 & 0xf)

	)

101 
	#N_BIND
(
p
Ë((()’)->
n_Ÿhî
 >> 4Ë& 0xf)

	)

102 
	#N_OTHER
(
r
, 
v
Ë((()‘Ë<< 4Ë| ((vË& 0xf))

	)

104 
	#AUX_OBJECT
 1

	)

105 
	#AUX_FUNC
 2

	)

109 
	#BIND_WEAK
 2

	)

111 
	#N_FORMAT
 "%08x"

	)

	@/usr/include/sys/osd.h

29 #i‚de‡
_SYS_OSD_H_


30 
	#_SYS_OSD_H_


	)

32 
	~<sys/queue.h
>

39 
	sosd
 {

40 
u_öt
 
	mosd_n¶Ÿs
;

41 **
	mosd_¶Ÿs
;

42 
LIST_ENTRY
(
osd
Ë
	mosd_√xt
;

45 #ifde‡
_KERNEL


47 
	#OSD_THREAD
 0

	)

48 
	#OSD_JAIL
 1

	)

49 
	#OSD_KHELP
 2

	)

51 
	#OSD_FIRST
 
OSD_THREAD


	)

52 
	#OSD_LAST
 
OSD_KHELP


	)

54 (*
	tosd_de°ru˘‹_t
)(*
	tvÆue
);

55 (*
	tosd_mëhod_t
)(*
	tobj
, *
	td©a
);

57 
	`osd_ªgi°î
(
u_öt
 
ty≥
, 
osd_de°ru˘‹_t
 
de°ru˘‹
,

58 
osd_mëhod_t
 *
mëhods
);

59 
	`osd_dîegi°î
(
u_öt
 
ty≥
, u_öà
¶Ÿ
);

61 
	`osd_£t
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
, *
vÆue
);

62 *
	`osd_gë
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
);

63 
	`osd_dñ
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
);

64 
	`osd_ˇŒ
(
u_öt
 
ty≥
, u_öà
mëhod
, *
obj
, *
d©a
);

66 
	`osd_exô
(
u_öt
 
ty≥
, 
osd
 *osd);

68 
	#osd_thªad_ªgi°î
(
de°ru˘‹
) \

69 
	`osd_ªgi°î
(
OSD_THREAD
, (
de°ru˘‹
), 
NULL
)

	)

70 
	#osd_thªad_dîegi°î
(
¶Ÿ
) \

71 
	`osd_dîegi°î
(
OSD_THREAD
, (
¶Ÿ
))

	)

72 
	#osd_thªad_£t
(
td
, 
¶Ÿ
, 
vÆue
) \

73 
	`osd_£t
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
), (
vÆue
))

	)

74 
	#osd_thªad_gë
(
td
, 
¶Ÿ
) \

75 
	`osd_gë
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
))

	)

76 
	#osd_thªad_dñ
(
td
, 
¶Ÿ
) do { \

77 
	`KASSERT
((
td
Ë=
cuπhªad
, ("Not curthread.")); \

78 
	`osd_dñ
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
)); \

79 
	}
} 0)

	)

80 
	#osd_thªad_ˇŒ
(
td
, 
mëhod
, 
d©a
) \

81 
	`osd_ˇŒ
(
OSD_THREAD
, (
mëhod
), (
td
), (
d©a
))

	)

82 
	#osd_thªad_exô
(
td
) \

83 
	`osd_exô
(
OSD_THREAD
, &(
td
)->
td_osd
)

	)

85 
	#osd_jaû_ªgi°î
(
de°ru˘‹
, 
mëhods
) \

86 
	`osd_ªgi°î
(
OSD_JAIL
, (
de°ru˘‹
), (
mëhods
))

	)

87 
	#osd_jaû_dîegi°î
(
¶Ÿ
) \

88 
	`osd_dîegi°î
(
OSD_JAIL
, (
¶Ÿ
))

	)

89 
	#osd_jaû_£t
(
¥
, 
¶Ÿ
, 
vÆue
) \

90 
	`osd_£t
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
), (
vÆue
))

	)

91 
	#osd_jaû_gë
(
¥
, 
¶Ÿ
) \

92 
	`osd_gë
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
))

	)

93 
	#osd_jaû_dñ
(
¥
, 
¶Ÿ
) \

94 
	`osd_dñ
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
))

	)

95 
	#osd_jaû_ˇŒ
(
¥
, 
mëhod
, 
d©a
) \

96 
	`osd_ˇŒ
(
OSD_JAIL
, (
mëhod
), (
¥
), (
d©a
))

	)

97 
	#osd_jaû_exô
(
¥
) \

98 
	`osd_exô
(
OSD_JAIL
, &(
¥
)->
¥_osd
)

	)

	@/usr/include/sys/pcpu.h

33 #i‚de‡
_SYS_PCPU_H_


34 
	#_SYS_PCPU_H_


	)

36 #ifde‡
LOCORE


40 
	~<sys/queue.h
>

41 
	~<sys/vmmëî.h
>

42 
	~<sys/ªsour˚.h
>

43 
	~<machöe/p˝u.h
>

48 
uöçå_t
 *
__°¨t_£t_p˝u
;

49 
uöçå_t
 *
__°›_£t_p˝u
;

54 
uöçå_t
 
dp˝u_off
[];

59 
	#DPCPU_START
 ((
uöçå_t
)&
__°¨t_£t_p˝u
)

	)

60 
	#DPCPU_STOP
 ((
uöçå_t
)&
__°›_£t_p˝u
)

	)

61 
	#DPCPU_BYTES
 (
DPCPU_STOP
 - 
DPCPU_START
)

	)

62 
	#DPCPU_MODMIN
 2048

	)

63 
	#DPCPU_SIZE
 
	`roundup2
(
DPCPU_BYTES
, 
PAGE_SIZE
)

	)

64 
	#DPCPU_MODSIZE
 (
DPCPU_SIZE
 - (
DPCPU_BYTES
 - 
DPCPU_MODMIN
))

	)

69 
	#DPCPU_NAME
(
n
Ë
p˝u_íåy_
##
	)
n

70 
	#DPCPU_DECLARE
(
t
, 
n
Ëà
	`DPCPU_NAME
“)

	)

71 
	#DPCPU_DEFINE
(
t
, 
n
Ëà
	`DPCPU_NAME
“Ë
	`__£˘i⁄
("£t_p˝u"Ë
__u£d


	)

76 
	#_DPCPU_PTR
(
b
, 
n
) \

77 (
	`__ty≥of
(
	`DPCPU_NAME
(
n
))*)((
b
Ë+ (
uöçå_t
)&DPCPU_NAME“))

	)

78 
	#_DPCPU_GET
(
b
, 
n
Ë(*
	`_DPCPU_PTR
(b,Ç))

	)

79 
	#_DPCPU_SET
(
b
, 
n
, 
v
Ë(*
	`_DPCPU_PTR
(b,ÇËv)

	)

84 
	#DPCPU_PTR
(
n
Ë
	`_DPCPU_PTR
(
	`PCPU_GET
(
dy«mic
),Ç)

	)

85 
	#DPCPU_GET
(
n
Ë(*
	`DPCPU_PTR
“))

	)

86 
	#DPCPU_SET
(
n
, 
v
Ë(*
	`DPCPU_PTR
“Ëv)

	)

91 
	#DPCPU_ID_PTR
(
i
, 
n
Ë
	`_DPCPU_PTR
(
dp˝u_off
[(i)],Ç)

	)

92 
	#DPCPU_ID_GET
(
i
, 
n
Ë(*
	`DPCPU_ID_PTR
(i,Ç))

	)

93 
	#DPCPU_ID_SET
(
i
, 
n
, 
v
Ë(*
	`DPCPU_ID_PTR
(i,ÇËv)

	)

98 
	#DPCPU_SUM
(
n
Ë
__exãnsi⁄__
 \

100 
u_öt
 
_i
; \

101 
	`__ty≥of
(*
	`DPCPU_PTR
(
n
)Ë
sum
; \

103 
sum
 = 0; \

104 
	`CPU_FOREACH
(
_i
) { \

105 
sum
 +*
	`DPCPU_ID_PTR
(
_i
, 
n
); \

107 
sum
; \

108 })

	)

110 
	#DPCPU_VARSUM
(
n
, 
v¨
Ë
__exãnsi⁄__
 \

112 
u_öt
 
_i
; \

113 
	`__ty≥of
((
	`DPCPU_PTR
(
n
))->
v¨
Ë
sum
; \

115 
sum
 = 0; \

116 
	`CPU_FOREACH
(
_i
) { \

117 
sum
 +(
	`DPCPU_ID_PTR
(
_i
, 
n
))->
v¨
; \

119 
sum
; \

120 })

	)

122 
	#DPCPU_ZERO
(
n
) do { \

123 
u_öt
 
_i
; \

125 
	`CPU_FOREACH
(
_i
) { \

126 
	`bzîo
(
	`DPCPU_ID_PTR
(
_i
, 
n
), (*
	`DPCPU_PTR
(n))); \

128 } 0)

	)

134 
	srm_queue
 {

135 
rm_queue
* vﬁ©ûê
rmq_√xt
;

136 
rm_queue
* vﬁ©ûê
rmq_¥ev
;

139 
	#PCPU_NAME_LEN
 (("CPU "Ë+ (
	`__XSTRING
(
MAXCPU
Ë+ 1))

	)

147 
	sp˝u
 {

148 
thªad
 *
	mpc_cuπhªad
;

149 
thªad
 *
	mpc_idÀthªad
;

150 
thªad
 *
	mpc_Âcuπhªad
;

151 
thªad
 *
	mpc_dódthªad
;

152 
pcb
 *
	mpc_cuΩcb
;

153 
uöt64_t
 
	mpc_swôchtime
;

154 
	mpc_swôchticks
;

155 
u_öt
 
	mpc_˝uid
;

156 
˝umask_t
 
	mpc_˝umask
;

157 
˝umask_t
 
	mpc_Ÿhî_˝us
;

158 
SLIST_ENTRY
(
p˝u
Ë
	mpc_Æl˝u
;

159 
lock_li°_íåy
 *
	mpc_•ölocks
;

160 #ifde‡
KTR


161 
	mpc_«me
[
PCPU_NAME_LEN
];

163 
vmmëî
 
	mpc_˙t
;

164 
	mpc_˝_time
[
CPUSTATES
];

165 
devi˚
 *
	mpc_devi˚
;

166 *
	mpc_√ti§
;

174 
rm_queue
 
	mpc_rm_queue
;

176 
uöçå_t
 
	mpc_dy«mic
;

188 
	mPCPU_MD_FIELDS
;

189 } 
__Æig√d
(128);

191 #ifde‡
_KERNEL


193 
SLIST_HEAD
(
˝uhód
, 
p˝u
);

195 
˝uhód
 cpuhead;

196 
p˝u
 *
˝uid_to_p˝u
[
MAXCPU
];

198 
	#cur˝u
 
	`PCPU_GET
(
˝uid
)

	)

199 
	#cuΩroc
 (
cuπhªad
->
td_¥oc
)

	)

200 #i‚de‡
cuπhªad


201 
	#cuπhªad
 
	`PCPU_GET
(
cuπhªad
)

	)

203 
	#curvid©a
 
	`PCPU_GET
(
vid©a
)

	)

211 
˝u_p˝u_öô
(
p˝u
 *p˝u, 
˝uid
, 
size_t
 
size
);

212 
db_show_mdp˝u
(
p˝u
 *pcpu);

214 *
dp˝u_Æloc
(
size
);

215 
dp˝u_c›y
(*
s
, 
size
);

216 
dp˝u_‰ì
(*
s
, 
size
);

217 
dp˝u_öô
(*
dp˝u
, 
˝uid
);

218 
p˝u_de°roy
(
p˝u
 *pcpu);

219 
p˝u
 *
p˝u_föd
(
u_öt
 
˝uid
);

220 
p˝u_öô
(
p˝u
 *p˝u, 
˝uid
, 
size_t
 
size
);

	@/usr/include/sys/priority.h

34 #i‚de‡
_SYS_PRIORITY_H_


35 
	#_SYS_PRIORITY_H_


	)

45 
	#PRI_ITHD
 1

	)

46 
	#PRI_REALTIME
 2

	)

47 
	#PRI_TIMESHARE
 3

	)

48 
	#PRI_IDLE
 4

	)

54 
	#PRI_FIFO_BIT
 8

	)

55 
	#PRI_FIFO
 (
PRI_FIFO_BIT
 | 
PRI_REALTIME
)

	)

57 
	#PRI_BASE
(
P
Ë((PË& ~
PRI_FIFO_BIT
)

	)

58 
	#PRI_IS_REALTIME
(
P
Ë(
	`PRI_BASE
(PË=
PRI_REALTIME
)

	)

59 
	#PRI_NEED_RR
(
P
Ë((PË!
PRI_FIFO
)

	)

80 
	#PRI_MIN
 (0Ë

	)

81 
	#PRI_MAX
 (255Ë

	)

83 
	#PRI_MIN_ITHD
 (
PRI_MIN
)

	)

84 
	#PRI_MAX_ITHD
 (
PRI_MIN_KERN
 - 1)

	)

86 
	#PI_REALTIME
 (
PRI_MIN_ITHD
 + 0)

	)

87 
	#PI_AV
 (
PRI_MIN_ITHD
 + 4)

	)

88 
	#PI_NET
 (
PRI_MIN_ITHD
 + 16)

	)

89 
	#PI_DISK
 (
PRI_MIN_ITHD
 + 20)

	)

90 
	#PI_TTY
 (
PRI_MIN_ITHD
 + 24)

	)

91 
	#PI_DULL
 (
PRI_MIN_ITHD
 + 32)

	)

92 
	#PI_SOFT
 (
PRI_MIN_ITHD
 + 36)

	)

93 
	#PI_SWI
(
x
Ë(
PI_SOFT
 + (xË* 
RQ_PPQ
)

	)

95 
	#PRI_MIN_KERN
 (64)

	)

96 
	#PRI_MAX_KERN
 (
PRI_MIN_REALTIME
 - 1)

	)

98 
	#PSWP
 (
PRI_MIN_KERN
 + 0)

	)

99 
	#PVM
 (
PRI_MIN_KERN
 + 4)

	)

100 
	#PINOD
 (
PRI_MIN_KERN
 + 8)

	)

101 
	#PRIBIO
 (
PRI_MIN_KERN
 + 12)

	)

102 
	#PVFS
 (
PRI_MIN_KERN
 + 16)

	)

103 
	#PZERO
 (
PRI_MIN_KERN
 + 20)

	)

104 
	#PSOCK
 (
PRI_MIN_KERN
 + 24)

	)

105 
	#PWAIT
 (
PRI_MIN_KERN
 + 28)

	)

106 
	#PLOCK
 (
PRI_MIN_KERN
 + 36)

	)

107 
	#PPAUSE
 (
PRI_MIN_KERN
 + 40)

	)

109 
	#PRI_MIN_REALTIME
 (128)

	)

110 
	#PRI_MAX_REALTIME
 (
PRI_MIN_TIMESHARE
 - 1)

	)

112 
	#PRI_MIN_TIMESHARE
 (160)

	)

113 
	#PRI_MAX_TIMESHARE
 (
PRI_MIN_IDLE
 - 1)

	)

115 
	#PUSER
 (
PRI_MIN_TIMESHARE
)

	)

117 
	#PRI_MIN_IDLE
 (224)

	)

118 
	#PRI_MAX_IDLE
 (
PRI_MAX
)

	)

120 #ifde‡
_KERNEL


122 
	#PRI_USER
 -2

	)

123 
	#PRI_UNCHANGED
 -1

	)

126 
	s¥i‹ôy
 {

127 
u_ch¨
 
	m¥i_˛ass
;

128 
u_ch¨
 
	m¥i_Àvñ
;

129 
u_ch¨
 
	m¥i_«tive
;

130 
u_ch¨
 
	m¥i_u£r
;

	@/usr/include/sys/refcount.h

32 #i‚de‡
__SYS_REFCOUNT_H__


33 
	#__SYS_REFCOUNT_H__


	)

35 
	~<machöe/©omic.h
>

37 #ifde‡
_KERNEL


38 
	~<sys/sy°m.h
>

40 
	#KASSERT
(
exp
, 
msg
Ë

	)

43 
__ölöe
 

44 
	$ªfcou¡_öô
(vﬁ©ûê
u_öt
 *
cou¡
, u_öà
vÆue
)

47 *
cou¡
 = 
vÆue
;

48 
	}
}

50 
__ölöe
 

51 
	$ªfcou¡_acquúe
(vﬁ©ûê
u_öt
 *
cou¡
)

54 
	`©omic_add_acq_öt
(
cou¡
, 1);

55 
	}
}

57 
__ölöe
 

58 
	$ªfcou¡_ªÀa£
(vﬁ©ûê
u_öt
 *
cou¡
)

60 
u_öt
 
ﬁd
;

63 
ﬁd
 = 
	`©omic_„tchadd_öt
(
cou¡
, -1);

64 
	`KASSERT
(
ﬁd
 > 0, ("√g©ivêªfcou¡ %p", 
cou¡
));

65  (
ﬁd
 == 1);

66 
	}
}

	@/usr/include/sys/resourcevar.h

33 #i‚def 
_SYS_RESOURCEVAR_H_


34 
	#_SYS_RESOURCEVAR_H_


	)

36 
	~<sys/ªsour˚.h
>

37 
	~<sys/queue.h
>

38 #ifde‡
_KERNEL


39 
	~<sys/_lock.h
>

40 
	~<sys/_muãx.h
>

53 
	sp°©s
 {

54 
	#p°©_°¨tzîo
 
p_¸u


	)

55 
rußge
 
	mp_¸u
;

56 
ôimîvÆ
 
	mp_timî
[3];

57 
	#p°©_ídzîo
 
p°©_°¨tc›y


	)

59 
	#p°©_°¨tc›y
 
p_¥of


	)

60 
	su¥of
 {

61 
ˇddr_t
 
	m¥_ba£
;

62 
u_l⁄g
 
	m¥_size
;

63 
u_l⁄g
 
	m¥_off
;

64 
u_l⁄g
 
	m¥_sˇÀ
;

65 } 
	mp_¥of
;

66 
	#p°©_ídc›y
 
p_°¨t


	)

67 
timevÆ
 
	mp_°¨t
;

70 #ifde‡
_KERNEL


77 
	s∂imô
 {

78 
æimô
 
	m∂_æimô
[
RLIM_NLIMITS
];

79 
	m∂_ªf˙t
;

91 
	suidöfo
 {

92 
LIST_ENTRY
(
uidöfo
Ë
	mui_hash
;

93 
mtx
 
	mui_vmsize_mtx
;

94 
vm_ooff£t_t
 
	mui_vmsize
;

95 
	mui_sbsize
;

96 
	mui_¥oc˙t
;

97 
	mui_±s˙t
;

98 
uid_t
 
	mui_uid
;

99 
u_öt
 
	mui_ªf
;

102 
	#UIDINFO_VMSIZE_LOCK
(
ui
Ë
	`mtx_lock
(&((ui)->
ui_vmsize_mtx
))

	)

103 
	#UIDINFO_VMSIZE_UNLOCK
(
ui
Ë
	`mtx_u∆ock
(&((ui)->
ui_vmsize_mtx
))

	)

105 
	g¥oc
;

106 
	grußge_ext
;

107 
	gthªad
;

109 
addupc_öå
(
thªad
 *
td
, 
uötÂå_t
 
pc
, 
u_öt
 
ticks
);

110 
addupc_èsk
(
thªad
 *
td
, 
uötÂå_t
 
pc
, 
u_öt
 
ticks
);

111 
ˇlc¸u
(
¥oc
 *
p
, 
timevÆ
 *
up
, timevÆ *
•
);

112 
ˇl¸u
(
¥oc
 *
p
, 
timevÆ
 *
up
, timevÆ *
•
);

113 
chg¥oc˙t
(
uidöfo
 *
uù
, 
diff
, 
æim_t
 
maxvÆ
);

114 
chgsbsize
(
uidöfo
 *
uù
, 
u_öt
 *
hiw©
, u_öà
to
,

115 
æim_t
 
maxvÆ
);

116 
chg±s˙t
(
uidöfo
 *
uù
, 
diff
, 
æim_t
 
maxvÆ
);

117 
fuswöå
(*
ba£
);

118 
∂imô


119 *
lim_Æloc
();

120 
lim_c›y
(
∂imô
 *
d°
, ∂imô *
§c
);

121 
æim_t
 
lim_cur
(
¥oc
 *
p
, 
which
);

122 
lim_f‹k
(
¥oc
 *
p1
, ¥o¯*
p2
);

123 
lim_‰ì
(
∂imô
 *
limp
);

124 
∂imô


125 *
lim_hﬁd
(
∂imô
 *
limp
);

126 
æim_t
 
lim_max
(
¥oc
 *
p
, 
which
);

127 
lim_æimô
(
¥oc
 *
p
, 
which
, 
æimô
 *
æp
);

128 
ruadd
(
rußge
 *
ru
, 
rußge_ext
 *
rux
, rußgê*
ru2
,

129 
rußge_ext
 *
rux2
);

130 
rucﬁÀ˘
(
rußge
 *
ru
, rußgê*
ru2
);

131 
ru„tch
(
¥oc
 *
p
, 
rußge
 *
ru
);

132 
ru„tchˇlc
(
¥oc
 *
p
, 
rußge
 *
ru
, 
timevÆ
 *
up
,

133 
timevÆ
 *
•
);

134 
ruxagg
(
¥oc
 *
p
, 
thªad
 *
td
);

135 
suswöå
(*
ba£
, 
w‹d
);

136 
uidöfo


137 *
uiföd
(
uid_t
 
uid
);

138 
ui‰ì
(
uidöfo
 *
uù
);

139 
uihashöô
();

140 
uihﬁd
(
uidöfo
 *
uù
);

	@/usr/include/sys/rtprio.h

34 #i‚de‡
_SYS_RTPRIO_H_


35 
	#_SYS_RTPRIO_H_


	)

37 
	~<sys/¥i‹ôy.h
>

45 
	#RTP_PRIO_REALTIME
 
PRI_REALTIME


	)

46 
	#RTP_PRIO_NORMAL
 
PRI_TIMESHARE


	)

47 
	#RTP_PRIO_IDLE
 
PRI_IDLE


	)

52 
	#RTP_PRIO_FIFO_BIT
 
PRI_FIFO_BIT


	)

53 
	#RTP_PRIO_FIFO
 
PRI_FIFO


	)

54 
	#RTP_PRIO_BASE
(
P
Ë
	`PRI_BASE
(P)

	)

55 
	#RTP_PRIO_IS_REALTIME
(
P
Ë
	`PRI_IS_REALTIME
(P)

	)

56 
	#RTP_PRIO_NEED_RR
(
P
Ë
	`PRI_NEED_RR
(P)

	)

59 
	#RTP_PRIO_MIN
 0

	)

60 
	#RTP_PRIO_MAX
 31

	)

65 
	#RTP_LOOKUP
 0

	)

66 
	#RTP_SET
 1

	)

68 #i‚de‡
LOCORE


72 
	sπ¥io
 {

73 
u_sh‹t
 
	mty≥
;

74 
u_sh‹t
 
	m¥io
;

77 #ifde‡
_KERNEL


78 
	gthªad
;

79 
πp_to_¥i
(
π¥io
 *, 
thªad
 *);

80 
¥i_to_πp
(
thªad
 *, 
π¥io
 *);

84 #i‚de‡
_KERNEL


85 
	~<sys/cdefs.h
>

87 
__BEGIN_DECLS


88 
π¥io
(, 
pid_t
, rtprio *);

89 
π¥io_thªad
(, 
lwpid_t
, 
π¥io
 *);

90 
	g__END_DECLS


	@/usr/include/sys/runq.h

29 #i‚def 
_RUNQ_H_


30 
	#_RUNQ_H_


	)

32 
	~<machöe/runq.h
>

34 
	gthªad
;

40 
	#RQ_NQS
 (64Ë

	)

41 
	#RQ_PPQ
 (4Ë

	)

46 
TAILQ_HEAD
(
rqhód
, 
thªad
);

52 
	srqbôs
 {

53 
rqb_w‹d_t
 
	mrqb_bôs
[
RQB_LEN
];

60 
	srunq
 {

61 
rqbôs
 
	mrq_°©us
;

62 
rqhód
 
	mrq_queues
[
RQ_NQS
];

65 
runq_add
(
runq
 *, 
thªad
 *, );

66 
runq_add_¥i
(
runq
 *, 
thªad
 *, 
u_ch¨
, );

67 
runq_check
(
runq
 *);

68 
thªad
 *
runq_choo£
(
runq
 *);

69 
thªad
 *
runq_choo£_‰om
(
runq
 *, 
u_ch¨
);

70 
thªad
 *
runq_choo£_fuzz
(
runq
 *, );

71 
runq_öô
(
runq
 *);

72 
runq_ªmove
(
runq
 *, 
thªad
 *);

73 
runq_ªmove_idx
(
runq
 *, 
thªad
 *, 
u_ch¨
 *);

	@/usr/include/sys/select.h

32 #i‚de‡
_SYS_SELECT_H_


33 
	#_SYS_SELECT_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<sys/_ty≥s.h
>

38 
	~<sys/_sig£t.h
>

39 
	~<sys/_timevÆ.h
>

40 
	~<sys/time•ec.h
>

42 
	t__fd_mask
;

43 #i‡
__BSD_VISIBLE


44 
__fd_mask
 
	tfd_mask
;

47 #i‚de‡
_SIGSET_T_DECLARED


48 
	#_SIGSET_T_DECLARED


	)

49 
__sig£t_t
 
	tsig£t_t
;

58 #i‚def 
FD_SETSIZE


59 
	#FD_SETSIZE
 1024U

	)

62 
	#_NFDBITS
 ((
__fd_mask
Ë* 8Ë

	)

63 #i‡
__BSD_VISIBLE


64 
	#NFDBITS
 
_NFDBITS


	)

67 #i‚de‡
_howm™y


68 
	#_howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

71 
	sfd_£t
 {

72 
__fd_mask
 
	m__fds_bôs
[
_howm™y
(
FD_SETSIZE
, 
_NFDBITS
)];

73 } 
	tfd_£t
;

74 #i‡
__BSD_VISIBLE


75 
	#fds_bôs
 
__fds_bôs


	)

78 
	#__fd£t_mask
(
n
Ë((
__fd_mask
)1 << (“Ë% 
_NFDBITS
))

	)

79 
	#FD_CLR
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] &~
	`__fd£t_mask
“))

	)

80 #i‡
__BSD_VISIBLE


81 
	#FD_COPY
(
f
, 
t
Ë()(*—Ë*(f))

	)

83 
	#FD_ISSET
(
n
, 
p
Ë((’)->
__fds_bôs
[“)/
_NFDBITS
] & 
	`__fd£t_mask
“)Ë!0)

	)

84 
	#FD_SET
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] |
	`__fd£t_mask
“))

	)

85 
	#FD_ZERO
(
p
) do { \

86 
fd_£t
 *
_p
; \

87 
__size_t
 
_n
; \

89 
_p
 = (
p
); \

90 
_n
 = 
	`_howm™y
(
FD_SETSIZE
, 
_NFDBITS
); \

91 
_n
 > 0) \

92 
_p
->
__fds_bôs
[--
_n
] = 0; \

93 } 0)

	)

95 #i‚de‡
_KERNEL


97 
__BEGIN_DECLS


98 
p£À˘
(, 
fd_£t
 *
__ª°ri˘
, fd_set *__restrict, fd_set *__restrict,

99 c⁄° 
time•ec
 *
__ª°ri˘
, c⁄° 
sig£t_t
 *__restrict);

100 #i‚de‡
_SELECT_DECLARED


101 
	#_SELECT_DECLARED


	)

103 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

105 
	g__END_DECLS


	@/usr/include/sys/sigio.h

33 #i‚de‡
_SYS_SIGIO_H_


34 
	#_SYS_SIGIO_H_


	)

46 
	ssigio
 {

48 
¥oc
 *
	msiu_¥oc
;

49 
pgΩ
 *
	msiu_pgΩ
;

50 } 
	msio_u
;

51 
SLIST_ENTRY
(
sigio
Ë
	msio_pgsigio
;

52 
sigio
 **
	msio_myªf
;

54 
u¸ed
 *
	msio_u¸ed
;

55 
pid_t
 
	msio_pgid
;

57 
	#sio_¥oc
 
sio_u
.
siu_¥oc


	)

58 
	#sio_pgΩ
 
sio_u
.
siu_pgΩ


	)

60 
SLIST_HEAD
(
sigiﬁ°
, 
sigio
);

62 
pid_t
 
fgëown
(
sigio
 **
sigi›
);

63 
f£town
(
pid_t
 
pgid
, 
sigio
 **
sigi›
);

64 
fun£town
(
sigio
 **
sigi›
);

65 
fun£tow∆°
(
sigiﬁ°
 *sigiolst);

	@/usr/include/sys/signal.h

38 #i‚de‡
_SYS_SIGNAL_H_


39 
	#_SYS_SIGNAL_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_ty≥s.h
>

43 
	~<sys/_sig£t.h
>

45 
	~<machöe/_limôs.h
>

46 
	~<machöe/sig«l.h
>

51 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


52 
	#SIGHUP
 1

	)

54 
	#SIGINT
 2

	)

55 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


56 
	#SIGQUIT
 3

	)

58 
	#SIGILL
 4

	)

59 #i‡
__XSI_VISIBLE


60 
	#SIGTRAP
 5

	)

62 
	#SIGABRT
 6

	)

63 #i‡
__BSD_VISIBLE


64 
	#SIGIOT
 
SIGABRT


	)

65 
	#SIGEMT
 7

	)

67 
	#SIGFPE
 8

	)

68 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


69 
	#SIGKILL
 9

	)

71 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


72 
	#SIGBUS
 10

	)

74 
	#SIGSEGV
 11

	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIGSYS
 12

	)

78 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


79 
	#SIGPIPE
 13

	)

80 
	#SIGALRM
 14

	)

82 
	#SIGTERM
 15

	)

83 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


84 
	#SIGURG
 16

	)

86 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


87 
	#SIGSTOP
 17

	)

88 
	#SIGTSTP
 18

	)

89 
	#SIGCONT
 19

	)

90 
	#SIGCHLD
 20

	)

91 
	#SIGTTIN
 21

	)

92 
	#SIGTTOU
 22

	)

94 #i‡
__BSD_VISIBLE


95 
	#SIGIO
 23

	)

97 #i‡
__XSI_VISIBLE


98 
	#SIGXCPU
 24

	)

99 
	#SIGXFSZ
 25

	)

100 
	#SIGVTALRM
 26

	)

101 
	#SIGPROF
 27

	)

103 #i‡
__BSD_VISIBLE


104 
	#SIGWINCH
 28

	)

105 
	#SIGINFO
 29

	)

107 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


108 
	#SIGUSR1
 30

	)

109 
	#SIGUSR2
 31

	)

111 #i‡
__BSD_VISIBLE


112 
	#SIGTHR
 32

	)

113 
	#SIGLWP
 
SIGTHR


	)

116 
	#SIGRTMIN
 65

	)

117 
	#SIGRTMAX
 126

	)

119 
	#SIG_DFL
 ((
__sigh™dÀr_t
 *)0)

	)

120 
	#SIG_IGN
 ((
__sigh™dÀr_t
 *)1)

	)

121 
	#SIG_ERR
 ((
__sigh™dÀr_t
 *)-1)

	)

123 
	#SIG_HOLD
 ((
__sigh™dÀr_t
 *)3)

	)

141 
	t__sigh™dÀr_t
();

143 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


144 #i‚de‡
_SIGSET_T_DECLARED


145 
	#_SIGSET_T_DECLARED


	)

146 
__sig£t_t
 
	tsig£t_t
;

150 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE
 >= 500

151 
	usigvÆ
 {

153 
	msivÆ_öt
;

154 *
	msivÆ_±r
;

156 
	msigvÆ_öt
;

157 *
	msigvÆ_±r
;

161 #i‡
__POSIX_VISIBLE
 >= 199309

162 
	ssigevít
 {

163 
	msigev_nŸify
;

164 
	msigev_signo
;

165 
sigvÆ
 
	msigev_vÆue
;

167 
__lwpid_t
 
	m_thªadid
;

169 (*
	m_fun˘i⁄
)(
	msigvÆ
);

170 *
	m_©åibuã
;

171 } 
	m_sigev_thªad
;

172 
	m__•¨e__
[8];

173 } 
	m_sigev_un
;

176 #i‡
__BSD_VISIBLE


177 
	#sigev_nŸify_kqueue
 
sigev_signo


	)

178 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_thªadid


	)

180 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

181 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

183 
	#SIGEV_NONE
 0

	)

184 
	#SIGEV_SIGNAL
 1

	)

185 
	#SIGEV_THREAD
 2

	)

186 #i‡
__BSD_VISIBLE


187 
	#SIGEV_KEVENT
 3

	)

188 
	#SIGEV_THREAD_ID
 4

	)

192 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE


193 
	s__sigöfo
 {

194 
	msi_signo
;

195 
	msi_î∫o
;

202 
	msi_code
;

203 
__pid_t
 
	msi_pid
;

204 
__uid_t
 
	msi_uid
;

205 
	msi_°©us
;

206 *
	msi_addr
;

207 
sigvÆ
 
	msi_vÆue
;

210 
	m_å≠no
;

211 } 
	m_Áu…
;

213 
	m_timîid
;

214 
	m_ovîrun
;

215 } 
	m_timî
;

217 
	m_mqd
;

218 } 
	m_mesgq
;

220 
	m_b™d
;

221 } 
	m_pﬁl
;

223 
	m__•¨e1__
;

224 
	m__•¨e2__
[7];

225 } 
	m__•¨e__
;

226 } 
	m_ªas⁄
;

227 } 
	tsigöfo_t
;

229 
	#si_å≠no
 
_ªas⁄
.
_Áu…
.
_å≠no


	)

230 
	#si_timîid
 
_ªas⁄
.
_timî
.
_timîid


	)

231 
	#si_ovîrun
 
_ªas⁄
.
_timî
.
_ovîrun


	)

232 
	#si_mqd
 
_ªas⁄
.
_mesgq
.
_mqd


	)

233 
	#si_b™d
 
_ªas⁄
.
_pﬁl
.
_b™d


	)

237 
	#ILL_ILLOPC
 1

	)

238 
	#ILL_ILLOPN
 2

	)

239 
	#ILL_ILLADR
 3

	)

240 
	#ILL_ILLTRP
 4

	)

241 
	#ILL_PRVOPC
 5

	)

242 
	#ILL_PRVREG
 6

	)

243 
	#ILL_COPROC
 7

	)

244 
	#ILL_BADSTK
 8

	)

247 
	#BUS_ADRALN
 1

	)

248 
	#BUS_ADRERR
 2

	)

249 
	#BUS_OBJERR
 3

	)

252 
	#SEGV_MAPERR
 1

	)

253 
	#SEGV_ACCERR
 2

	)

257 
	#FPE_INTOVF
 1

	)

258 
	#FPE_INTDIV
 2

	)

259 
	#FPE_FLTDIV
 3

	)

260 
	#FPE_FLTOVF
 4

	)

261 
	#FPE_FLTUND
 5

	)

262 
	#FPE_FLTRES
 6

	)

263 
	#FPE_FLTINV
 7

	)

264 
	#FPE_FLTSUB
 8

	)

267 
	#TRAP_BRKPT
 1

	)

268 
	#TRAP_TRACE
 2

	)

269 
	#TRAP_DTRACE
 3

	)

272 
	#CLD_EXITED
 1

	)

273 
	#CLD_KILLED
 2

	)

275 
	#CLD_DUMPED
 3

	)

277 
	#CLD_TRAPPED
 4

	)

278 
	#CLD_STOPPED
 5

	)

279 
	#CLD_CONTINUED
 6

	)

282 
	#POLL_IN
 1

	)

283 
	#POLL_OUT
 2

	)

284 
	#POLL_MSG
 3

	)

285 
	#POLL_ERR
 4

	)

286 
	#POLL_PRI
 5

	)

287 
	#POLL_HUP
 6

	)

291 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


292 
	g__sigöfo
;

297 
	ssiga˘i⁄
 {

299 (*
	m__ß_h™dÀr
)();

300 (*
	m__ß_siga˘i⁄
)(, 
	m__sigöfo
 *, *);

301 } 
	m__siga˘i⁄_u
;

302 
	mß_Êags
;

303 
sig£t_t
 
	mß_mask
;

306 
	#ß_h™dÀr
 
__siga˘i⁄_u
.
__ß_h™dÀr


	)

309 #i‡
__XSI_VISIBLE


311 
	#ß_siga˘i⁄
 
__siga˘i⁄_u
.
__ß_siga˘i⁄


	)

314 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


315 
	#SA_NOCLDSTOP
 0x0008

	)

318 #i‡
__XSI_VISIBLE


319 
	#SA_ONSTACK
 0x0001

	)

320 
	#SA_RESTART
 0x0002

	)

321 
	#SA_RESETHAND
 0x0004

	)

322 
	#SA_NODEFER
 0x0010

	)

323 
	#SA_NOCLDWAIT
 0x0020

	)

324 
	#SA_SIGINFO
 0x0040

	)

327 #i‡
__BSD_VISIBLE


328 
	#NSIG
 32

	)

331 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


332 
	#SI_NOINFO
 0

	)

333 
	#SI_USER
 0x10001

	)

334 
	#SI_QUEUE
 0x10002

	)

335 
	#SI_TIMER
 0x10003

	)

337 
	#SI_ASYNCIO
 0x10004

	)

339 
	#SI_MESGQ
 0x10005

	)

341 
	#SI_KERNEL
 0x10006

	)

343 #i‡
__BSD_VISIBLE


344 
	#SI_UNDEFINED
 0

	)

347 #i‡
__BSD_VISIBLE


348 
__sigh™dÀr_t
 *
	tsig_t
;

349 
	t__sigöfoh™dÀr_t
(, 
	t__sigöfo
 *, *);

352 #i‡
__XSI_VISIBLE


356 #i‡
__BSD_VISIBLE


357 
	ssigÆt°ack
 {

361 *
	mss_•
;

362 
__size_t
 
	mss_size
;

363 
	mss_Êags
;

364 } 
	t°ack_t
;

366 
	#SS_ONSTACK
 0x0001

	)

367 
	#SS_DISABLE
 0x0004

	)

368 
	#MINSIGSTKSZ
 
__MINSIGSTKSZ


	)

369 
	#SIGSTKSZ
 (
MINSIGSTKSZ
 + 32768Ë

	)

372 #i‡
__BSD_VISIBLE


377 
	ssigvec
 {

378 
__sigh™dÀr_t
 *
	msv_h™dÀr
;

379 
	msv_mask
;

380 
	msv_Êags
;

383 
	#SV_ONSTACK
 
SA_ONSTACK


	)

384 
	#SV_INTERRUPT
 
SA_RESTART


	)

385 
	#SV_RESETHAND
 
SA_RESETHAND


	)

386 
	#SV_NODEFER
 
SA_NODEFER


	)

387 
	#SV_NOCLDSTOP
 
SA_NOCLDSTOP


	)

388 
	#SV_SIGINFO
 
SA_SIGINFO


	)

389 
	#sv_⁄°ack
 
sv_Êags


	)

393 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
) && \

394 !
	$deföed
(
__i386__
)

395 
	sosigc⁄ãxt
 {

396 
_nŸ_u£d
;

400 #i‡
__XSI_VISIBLE


404 
	ssig°ack
 {

406 *
ss_•
;

407 
ss_⁄°ack
;

411 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE <= 200112

416 
	#sigmask
(
m
Ë(1 << ((m)-1))

	)

419 #i‡
__BSD_VISIBLE


420 
	#BADSIG
 
SIG_ERR


	)

423 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


427 
	#SIG_BLOCK
 1

	)

428 
	#SIG_UNBLOCK
 2

	)

429 
	#SIG_SETMASK
 3

	)

436 
__BEGIN_DECLS


437 
__sigh™dÀr_t
 *
	`sig«l
(, __sighandler_t *);

438 
__END_DECLS


	@/usr/include/sys/signalvar.h

33 #i‚de‡
_SYS_SIGNALVAR_H_


34 
	#_SYS_SIGNALVAR_H_


	)

36 
	~<sys/queue.h
>

37 
	~<sys/_lock.h
>

38 
	~<sys/_muãx.h
>

39 
	~<sys/sig«l.h
>

53 
	ssiga˘s
 {

54 
sig_t
 
	mps_siga˘
[
_SIG_MAXSIG
];

55 
sig£t_t
 
	mps_ˇtchmask
[
_SIG_MAXSIG
];

56 
sig£t_t
 
	mps_sig⁄°ack
;

57 
sig£t_t
 
	mps_sigöå
;

58 
sig£t_t
 
	mps_sigª£t
;

59 
sig£t_t
 
	mps_signode„r
;

60 
sig£t_t
 
	mps_sigöfo
;

61 
sig£t_t
 
	mps_sigign‹e
;

62 
sig£t_t
 
	mps_sigˇtch
;

63 
sig£t_t
 
	mps_‰ìbsd4
;

64 
sig£t_t
 
	mps_osig£t
;

65 
sig£t_t
 
	mps_u£πømp
;

66 
	mps_Êag
;

67 
	mps_ªf˙t
;

68 
mtx
 
	mps_mtx
;

71 
	#PS_NOCLDWAIT
 0x0001

	)

72 
	#PS_NOCLDSTOP
 0x0002

	)

73 
	#PS_CLDSIGIGN
 0x0004

	)

75 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
)

80 
osigc⁄ãxt
 
	msi_sc
;

81 
	msi_signo
;

82 
	msi_code
;

83 
sigvÆ
 
	msi_vÆue
;

84 } 
	tosigöfo_t
;

86 
	sosiga˘i⁄
 {

88 (*
	m__ß_h™dÀr
)();

89 (*
	m__ß_siga˘i⁄
)(, 
	mosigöfo_t
 *, *);

90 } 
	m__siga˘i⁄_u
;

91 
osig£t_t
 
	mß_mask
;

92 
	mß_Êags
;

95 
	t__osigöfoh™dÀr_t
(, 
	tosigöfo_t
 *, *);

99 
	#SIG_CATCH
 ((
__sigh™dÀr_t
 *)2)

	)

105 
	#SIGACTION
(
p
, 
sig
Ë’->
p_siga˘s
->
ps_siga˘
[
	`_SIG_IDX
(sig)])

	)

110 
	#SIGADDSET
(
£t
, 
signo
) \

111 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] |
	`_SIG_BIT
(signo))

	)

113 
	#SIGDELSET
(
£t
, 
signo
) \

114 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] &~
	`_SIG_BIT
(signo))

	)

116 
	#SIGEMPTYSET
(
£t
) \

118 
__i
; \

119 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

120 (
£t
).
__bôs
[
__i
] = 0; \

121 } 0)

	)

123 
	#SIGFILLSET
(
£t
) \

125 
__i
; \

126 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

127 (
£t
).
__bôs
[
__i
] = ~0U; \

128 } 0)

	)

130 
	#SIGISMEMBER
(
£t
, 
signo
) \

131 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] & 
	`_SIG_BIT
(signo))

	)

133 
	#SIGISEMPTY
(
£t
Ë(
	`__sigi£m±y
(&(£t)))

	)

134 
	#SIGNOTEMPTY
(
£t
Ë(!
	`__sigi£m±y
(&(£t)))

	)

136 
	#SIGSETEQ
(
£t1
, 
£t2
Ë(
	`__sig£ãq
(&(£t1), &(£t2)))

	)

137 
	#SIGSETNEQ
(
£t1
, 
£t2
Ë(!
	`__sig£ãq
(&(£t1), &(£t2)))

	)

139 
	#SIGSETOR
(
£t1
, 
£t2
) \

141 
__i
; \

142 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

143 (
£t1
).
__bôs
[
__i
] |(
£t2
).__bits[__i]; \

144 } 0)

	)

146 
	#SIGSETAND
(
£t1
, 
£t2
) \

148 
__i
; \

149 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

150 (
£t1
).
__bôs
[
__i
] &(
£t2
).__bits[__i]; \

151 } 0)

	)

153 
	#SIGSETNAND
(
£t1
, 
£t2
) \

155 
__i
; \

156 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

157 (
£t1
).
__bôs
[
__i
] &~(
£t2
).__bits[__i]; \

158 } 0)

	)

160 
	#SIGSETLO
(
£t1
, 
£t2
Ë((£t1).
__bôs
[0] = (£t2).__bôs[0])

	)

161 
	#SIGSETOLD
(
£t
, 
o£t
Ë((£t).
__bôs
[0] = (o£t))

	)

163 
	#SIG_CANTMASK
(
£t
) \

164 
	`SIGDELSET
(
£t
, 
SIGKILL
), SIGDELSET(£t, 
SIGSTOP
)

	)

166 
	#SIG_STOPSIGMASK
(
£t
) \

167 
	`SIGDELSET
(
£t
, 
SIGSTOP
), SIGDELSET(£t, 
SIGTSTP
), \

168 
	`SIGDELSET
(
£t
, 
SIGTTIN
), SIGDELSET(£t, 
SIGTTOU
)

	)

170 
	#SIG_CONTSIGMASK
(
£t
) \

171 
	`SIGDELSET
(
£t
, 
SIGCONT
)

	)

173 
	#sigˇ¡mask
 (
	`sigmask
(
SIGKILL
Ë| sigmask(
SIGSTOP
))

	)

175 
	#SIG2OSIG
(
sig
, 
osig
Ë(osig = (sig).
__bôs
[0])

	)

176 
	#OSIG2SIG
(
osig
, 
sig
Ë
	`SIGEMPTYSET
(sig); (sig).
__bôs
[0] = 
	)
osig

178 
__ölöe
 

179 
	$__sigi£m±y
(
sig£t_t
 *
£t
)

181 
i
;

183 
i
 = 0; i < 
_SIG_WORDS
; i++) {

184 i‡(
£t
->
__bôs
[
i
])

188 
	}
}

190 
__ölöe
 

191 
	$__sig£ãq
(
sig£t_t
 *
£t1
, sig£t_à*
£t2
)

193 
i
;

195 
i
 = 0; i < 
_SIG_WORDS
; i++) {

196 i‡(
£t1
->
__bôs
[
i
] !
£t2
->__bits[i])

200 
	}
}

202 
	sosigevít
 {

203 
	msigev_nŸify
;

205 
	m__sigev_signo
;

206 
	m__sigev_nŸify_kqueue
;

207 } 
	m__sigev_u
;

208 
sigvÆ
 
	msigev_vÆue
;

211 
	sksigöfo
 {

212 
TAILQ_ENTRY
(
ksigöfo
Ë
	mksi_lök
;

213 
sigöfo_t
 
	mksi_öfo
;

214 
	mksi_Êags
;

215 
sigqueue
 *
	mksi_sigq
;

216 } 
	tksigöfo_t
;

218 
	#ksi_signo
 
ksi_öfo
.
si_signo


	)

219 
	#ksi_î∫o
 
ksi_öfo
.
si_î∫o


	)

220 
	#ksi_code
 
ksi_öfo
.
si_code


	)

221 
	#ksi_pid
 
ksi_öfo
.
si_pid


	)

222 
	#ksi_uid
 
ksi_öfo
.
si_uid


	)

223 
	#ksi_°©us
 
ksi_öfo
.
si_°©us


	)

224 
	#ksi_addr
 
ksi_öfo
.
si_addr


	)

225 
	#ksi_vÆue
 
ksi_öfo
.
si_vÆue


	)

226 
	#ksi_b™d
 
ksi_öfo
.
si_b™d


	)

227 
	#ksi_å≠no
 
ksi_öfo
.
si_å≠no


	)

228 
	#ksi_ovîrun
 
ksi_öfo
.
si_ovîrun


	)

229 
	#ksi_timîid
 
ksi_öfo
.
si_timîid


	)

230 
	#ksi_mqd
 
ksi_öfo
.
si_mqd


	)

233 
	#KSI_TRAP
 0x01

	)

234 
	#KSI_EXT
 0x02

	)

235 
	#KSI_INS
 0x04

	)

236 
	#KSI_SIGQ
 0x08

	)

237 
	#KSI_HEAD
 0x10

	)

238 
	#KSI_COPYMASK
 (
KSI_TRAP
|
KSI_SIGQ
)

	)

240 
	#KSI_ONQ
(
ksi
Ë((ksi)->
ksi_sigq
 !
NULL
)

	)

242 
	ssigqueue
 {

243 
sig£t_t
 
	msq_sig«ls
;

244 
sig£t_t
 
	msq_kûl
;

245 
TAILQ_HEAD
(, 
ksigöfo
Ë
	msq_li°
;

246 
¥oc
 *
	msq_¥oc
;

247 
	msq_Êags
;

248 } 
	tsigqueue_t
;

251 
	#SQ_INIT
 0x01

	)

253 #ifde‡
_KERNEL


256 
	#SIGPENDING
(
td
) \

257 ((!
	`SIGISEMPTY
((
td
)->
td_sigli°
) && \

258 !
	`sig£tmasked
(&(
td
)->
td_sigli°
, &—d)->
td_sigmask
)) || \

259 (!
	`SIGISEMPTY
((
td
)->
td_¥oc
->
p_sigli°
) && \

260 !
	`sig£tmasked
(&(
td
)->
td_¥oc
->
p_sigli°
, &—d)->
td_sigmask
)))

	)

266 
__ölöe
 

267 
	$sig£tmasked
(
sig£t_t
 *
£t
, sig£t_à*
mask
)

269 
i
;

271 
i
 = 0; i < 
_SIG_WORDS
; i++) {

272 i‡(
£t
->
__bôs
[
i
] & ~
mask
->__bits[i])

276 
	}
}

278 
	#ksigöfo_öô
(
ksi
) \

280 
	`bzîo
(
ksi
, (
ksigöfo_t
)); \

281 } 0)

	)

283 
	#ksigöfo_öô_å≠
(
ksi
) \

285 
ksigöfo_t
 *
kp
 = 
ksi
; \

286 
	`bzîo
(
kp
, (
ksigöfo_t
)); \

287 
kp
->
ksi_Êags
 |
KSI_TRAP
; \

288 } 0)

	)

290 
__ölöe
 

291 
	$ksigöfo_c›y
(
ksigöfo_t
 *
§c
, ksigöfo_à*
d°
)

293 (
d°
)->
ksi_öfo
 = 
§c
->ksi_info;

294 (
d°
)->
ksi_Êags
 = (
§c
->ksi_Êag†& 
KSI_COPYMASK
);

295 
	}
}

297 
	gpgΩ
;

298 
	gthªad
;

299 
	g¥oc
;

300 
	gsigio
;

301 
	gmtx
;

303 
sugid_c‹edump
;

304 
mtx
 
sigio_lock
;

305 
kîn_logsigexô
;

311 
	#SIGIO_LOCK
(Ë
	`mtx_lock
(&
sigio_lock
)

	)

312 
	#SIGIO_TRYLOCK
(Ë
	`mtx_åylock
(&
sigio_lock
)

	)

313 
	#SIGIO_UNLOCK
(Ë
	`mtx_u∆ock
(&
sigio_lock
)

	)

314 
	#SIGIO_LOCKED
(Ë
	`mtx_ow√d
(&
sigio_lock
)

	)

315 
	#SIGIO_ASSERT
(
ty≥
Ë
	`mtx_as£π
(&
sigio_lock
,Åy≥)

	)

318 
	#SIG_STOP_ALLOWED
 100

	)

319 
	#SIG_STOP_NOT_ALLOWED
 101

	)

322 
	#SIGPROCMASK_OLD
 0x0001

	)

323 
	#SIGPROCMASK_PROC_LOCKED
 0x0002

	)

324 
	#SIGPROCMASK_PS_LOCKED
 0x0004

	)

329 
cursig
(
thªad
 *
td
, 
°›_Ælowed
);

330 
execsigs
(
¥oc
 *
p
);

331 
gsig«l
(
pgid
, 
sig
, 
ksigöfo_t
 *
ksi
);

332 
kûÕroc
(
¥oc
 *
p
, *
why
);

333 
pksig«l
(
¥oc
 *
p
, 
sig
, 
ksigöfo_t
 *
ksi
);

334 
pgsigio
(
sigio
 **, 
signum
, 
check˘ty
);

335 
pgsig«l
(
pgΩ
 *pgΩ, 
sig
, 
check˘ty
, 
ksigöfo_t
 *
ksi
);

336 
po°sig
(
sig
);

337 
psig«l
(
¥oc
 *
p
, 
sig
);

338 
psig«l_evít
(
¥oc
 *
p
, 
sigevít
 *, 
ksigöfo_t
 *);

339 
siga˘s
 *
siga˘s_Æloc
();

340 
siga˘s_c›y
(
siga˘s
 *
de°
, siga˘†*
§c
);

341 
siga˘s_‰ì
(
siga˘s
 *
ps
);

342 
siga˘s
 *
siga˘s_hﬁd
(siga˘†*
ps
);

343 
siga˘s_sh¨ed
(
siga˘s
 *
ps
);

344 
	$sigexô
(
thªad
 *
td
, 
signum
Ë
__dód2
;

345 
	`sig_ffs
(
sig£t_t
 *
£t
);

346 
	`sigöô
(
¥oc
 *
p
);

347 
	`signŸify
(
thªad
 *
td
);

348 
	`tdksig«l
(
thªad
 *
td
, 
sig
, 
ksigöfo_t
 *
ksi
);

349 
	`tdsig˛ónup
(
thªad
 *
td
);

350 
	`tdsig«l
(
¥oc
 *
p
, 
thªad
 *
td
, 
sig
,

351 
ksigöfo_t
 *
ksi
);

352 
	`å≠sig«l
(
thªad
 *
td
, 
ksigöfo_t
 *);

353 
	`±ø˚°›
(
thªad
 *
td
, 
sig
);

354 
ksigöfo_t
 * 
	`ksigöfo_Æloc
();

355 
	`ksigöfo_‰ì
(
ksigöfo_t
 *);

356 
	`sigqueue_öô
(
sigqueue
 *
queue
, 
¥oc
 *
p
);

357 
	`sigqueue_Êush
(
sigqueue
 *
queue
);

358 
	`sigqueue_dñëe_¥oc
(
¥oc
 *
p
, 
sig
);

359 
	`sigqueue_dñëe
(
sigqueue
 *
queue
, 
sig
);

360 
	`sigqueue_èke
(
ksigöfo_t
 *
ksi
);

361 
	`kîn_sigtimedwaô
(
thªad
 *, 
sig£t_t
,

362 
ksigöfo_t
 *, 
time•ec
 *);

363 
	`kîn_sig¥ocmask
(
thªad
 *
td
, 
how
,

364 
sig£t_t
 *
£t
, sig£t_à*
o£t
, 
Êags
);

368 
	`£ndsig
(
sig_t
, 
ksigöfo_t
 *, 
sig£t_t
 *
ªtmask
);

	@/usr/include/sys/sockio.h

33 #i‚de‡
_SYS_SOCKIO_H_


34 
	#_SYS_SOCKIO_H_


	)

36 
	~<sys/ioccom.h
>

39 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

40 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

41 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

42 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

43 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

44 
	#SIOCSPGRP
 
	`_IOW
('s', 8, Ë

	)

45 
	#SIOCGPGRP
 
	`_IOR
('s', 9, Ë

	)

47 
	#SIOCADDRT
 
	`_IOW
('r', 10, 
‹ã¡ry
Ë

	)

48 
	#SIOCDELRT
 
	`_IOW
('r', 11, 
‹ã¡ry
Ë

	)

49 
	#SIOCGETVIFCNT
 
	`_IOWR
('r', 15, 
sioc_vif_ªq
)

	)

50 
	#SIOCGETSGCNT
 
	`_IOWR
('r', 16, 
sioc_sg_ªq
Ë

	)

52 
	#SIOCSIFADDR
 
	`_IOW
('i', 12, 
i‰eq
Ë

	)

53 
	#OSIOCGIFADDR
 
	`_IOWR
('i', 13, 
i‰eq
Ë

	)

54 
	#SIOCGIFADDR
 
	`_IOWR
('i', 33, 
i‰eq
Ë

	)

55 
	#SIOCSIFDSTADDR
 
	`_IOW
('i', 14, 
i‰eq
Ë

	)

56 
	#OSIOCGIFDSTADDR
 
	`_IOWR
('i', 15, 
i‰eq
Ë

	)

57 
	#SIOCGIFDSTADDR
 
	`_IOWR
('i', 34, 
i‰eq
Ë

	)

58 
	#SIOCSIFFLAGS
 
	`_IOW
('i', 16, 
i‰eq
Ë

	)

59 
	#SIOCGIFFLAGS
 
	`_IOWR
('i', 17, 
i‰eq
Ë

	)

60 
	#OSIOCGIFBRDADDR
 
	`_IOWR
('i', 18, 
i‰eq
Ë

	)

61 
	#SIOCGIFBRDADDR
 
	`_IOWR
('i', 35, 
i‰eq
Ë

	)

62 
	#SIOCSIFBRDADDR
 
	`_IOW
('i', 19, 
i‰eq
Ë

	)

63 
	#OSIOCGIFCONF
 
	`_IOWR
('i', 20, 
ifc⁄f
Ë

	)

64 
	#SIOCGIFCONF
 
	`_IOWR
('i', 36, 
ifc⁄f
Ë

	)

65 
	#OSIOCGIFNETMASK
 
	`_IOWR
('i', 21, 
i‰eq
Ë

	)

66 
	#SIOCGIFNETMASK
 
	`_IOWR
('i', 37, 
i‰eq
Ë

	)

67 
	#SIOCSIFNETMASK
 
	`_IOW
('i', 22, 
i‰eq
Ë

	)

68 
	#SIOCGIFMETRIC
 
	`_IOWR
('i', 23, 
i‰eq
Ë

	)

69 
	#SIOCSIFMETRIC
 
	`_IOW
('i', 24, 
i‰eq
Ë

	)

70 
	#SIOCDIFADDR
 
	`_IOW
('i', 25, 
i‰eq
Ë

	)

71 
	#SIOCAIFADDR
 
	`_IOW
('i', 26, 
iÁlü§eq
)

	)

73 
	#SIOCALIFADDR
 
	`_IOW
('i', 27, 
if_œddºeq
Ë

	)

74 
	#SIOCGLIFADDR
 
	`_IOWR
('i', 28, 
if_œddºeq
Ë

	)

75 
	#SIOCDLIFADDR
 
	`_IOW
('i', 29, 
if_œddºeq
Ë

	)

76 
	#SIOCSIFCAP
 
	`_IOW
('i', 30, 
i‰eq
Ë

	)

77 
	#SIOCGIFCAP
 
	`_IOWR
('i', 31, 
i‰eq
Ë

	)

78 
	#SIOCGIFINDEX
 
	`_IOWR
('i', 32, 
i‰eq
Ë

	)

79 
	#SIOCGIFMAC
 
	`_IOWR
('i', 38, 
i‰eq
Ë

	)

80 
	#SIOCSIFMAC
 
	`_IOW
('i', 39, 
i‰eq
Ë

	)

81 
	#SIOCSIFNAME
 
	`_IOW
('i', 40, 
i‰eq
Ë

	)

82 
	#SIOCSIFDESCR
 
	`_IOW
('i', 41, 
i‰eq
Ë

	)

83 
	#SIOCGIFDESCR
 
	`_IOWR
('i', 42, 
i‰eq
Ë

	)

85 
	#SIOCADDMULTI
 
	`_IOW
('i', 49, 
i‰eq
Ë

	)

86 
	#SIOCDELMULTI
 
	`_IOW
('i', 50, 
i‰eq
Ë

	)

87 
	#SIOCGIFMTU
 
	`_IOWR
('i', 51, 
i‰eq
Ë

	)

88 
	#SIOCSIFMTU
 
	`_IOW
('i', 52, 
i‰eq
Ë

	)

89 
	#SIOCGIFPHYS
 
	`_IOWR
('i', 53, 
i‰eq
Ë

	)

90 
	#SIOCSIFPHYS
 
	`_IOW
('i', 54, 
i‰eq
Ë

	)

91 
	#SIOCSIFMEDIA
 
	`_IOWR
('i', 55, 
i‰eq
Ë

	)

92 
	#SIOCGIFMEDIA
 
	`_IOWR
('i', 56, 
ifmedüªq
Ë

	)

94 
	#SIOCSIFGENERIC
 
	`_IOW
('i', 57, 
i‰eq
Ë

	)

95 
	#SIOCGIFGENERIC
 
	`_IOWR
('i', 58, 
i‰eq
Ë

	)

97 
	#SIOCGIFSTATUS
 
	`_IOWR
('i', 59, 
if°©
Ë

	)

98 
	#SIOCSIFLLADDR
 
	`_IOW
('i', 60, 
i‰eq
Ë

	)

100 
	#SIOCSIFPHYADDR
 
	`_IOW
('i', 70, 
iÁlü§eq
Ë

	)

101 
	#SIOCGIFPSRCADDR
 
	`_IOWR
('i', 71, 
i‰eq
Ë

	)

102 
	#SIOCGIFPDSTADDR
 
	`_IOWR
('i', 72, 
i‰eq
Ë

	)

103 
	#SIOCDIFPHYADDR
 
	`_IOW
('i', 73, 
i‰eq
Ë

	)

104 
	#SIOCSLIFPHYADDR
 
	`_IOW
('i', 74, 
if_œddºeq
Ë

	)

105 
	#SIOCGLIFPHYADDR
 
	`_IOWR
('i', 75, 
if_œddºeq
Ë

	)

107 
	#SIOCGPRIVATE_0
 
	`_IOWR
('i', 80, 
i‰eq
Ë

	)

108 
	#SIOCGPRIVATE_1
 
	`_IOWR
('i', 81, 
i‰eq
Ë

	)

110 
	#SIOCSIFVNET
 
	`_IOWR
('i', 90, 
i‰eq
Ë

	)

111 
	#SIOCSIFRVNET
 
	`_IOWR
('i', 91, 
i‰eq
Ë

	)

113 
	#SIOCGIFFIB
 
	`_IOWR
('i', 92, 
i‰eq
Ë

	)

114 
	#SIOCSIFFIB
 
	`_IOW
('i', 93, 
i‰eq
Ë

	)

116 
	#SIOCSDRVSPEC
 
	`_IOW
('i', 123, 
ifdrv
Ë

	)

118 
	#SIOCGDRVSPEC
 
	`_IOWR
('i', 123, 
ifdrv
Ë

	)

121 
	#SIOCIFCREATE
 
	`_IOWR
('i', 122, 
i‰eq
Ë

	)

122 
	#SIOCIFCREATE2
 
	`_IOWR
('i', 124, 
i‰eq
Ë

	)

123 
	#SIOCIFDESTROY
 
	`_IOW
('i', 121, 
i‰eq
Ë

	)

124 
	#SIOCIFGCLONERS
 
	`_IOWR
('i', 120, 
if_˛⁄îeq
Ë

	)

126 
	#SIOCAIFGROUP
 
	`_IOW
('i', 135, 
ifgrou¥eq
Ë

	)

127 
	#SIOCGIFGROUP
 
	`_IOWR
('i', 136, 
ifgrou¥eq
Ë

	)

128 
	#SIOCDIFGROUP
 
	`_IOW
('i', 137, 
ifgrou¥eq
Ë

	)

129 
	#SIOCGIFGMEMB
 
	`_IOWR
('i', 138, 
ifgrou¥eq
Ë

	)

	@/usr/include/sys/stdint.h

29 #i‚de‡
_SYS_STDINT_H_


30 
	#_SYS_STDINT_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 
	~<machöe/_°döt.h
>

37 #i‚de‡
_INT8_T_DECLARED


38 
__öt8_t
 
	töt8_t
;

39 
	#_INT8_T_DECLARED


	)

42 #i‚de‡
_INT16_T_DECLARED


43 
__öt16_t
 
	töt16_t
;

44 
	#_INT16_T_DECLARED


	)

47 #i‚de‡
_INT32_T_DECLARED


48 
__öt32_t
 
	töt32_t
;

49 
	#_INT32_T_DECLARED


	)

52 #i‚de‡
_INT64_T_DECLARED


53 
__öt64_t
 
	töt64_t
;

54 
	#_INT64_T_DECLARED


	)

57 #i‚de‡
_UINT8_T_DECLARED


58 
__uöt8_t
 
	tuöt8_t
;

59 
	#_UINT8_T_DECLARED


	)

62 #i‚de‡
_UINT16_T_DECLARED


63 
__uöt16_t
 
	tuöt16_t
;

64 
	#_UINT16_T_DECLARED


	)

67 #i‚de‡
_UINT32_T_DECLARED


68 
__uöt32_t
 
	tuöt32_t
;

69 
	#_UINT32_T_DECLARED


	)

72 #i‚de‡
_UINT64_T_DECLARED


73 
__uöt64_t
 
	tuöt64_t
;

74 
	#_UINT64_T_DECLARED


	)

77 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

78 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

79 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

80 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

82 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

83 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

84 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

85 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

87 
__öt_Á°8_t
 
	töt_Á°8_t
;

88 
__öt_Á°16_t
 
	töt_Á°16_t
;

89 
__öt_Á°32_t
 
	töt_Á°32_t
;

90 
__öt_Á°64_t
 
	töt_Á°64_t
;

92 
__uöt_Á°8_t
 
	tuöt_Á°8_t
;

93 
__uöt_Á°16_t
 
	tuöt_Á°16_t
;

94 
__uöt_Á°32_t
 
	tuöt_Á°32_t
;

95 
__uöt_Á°64_t
 
	tuöt_Á°64_t
;

97 
__ötmax_t
 
	tötmax_t
;

98 
__uötmax_t
 
	tuötmax_t
;

100 #i‚de‡
_INTPTR_T_DECLARED


101 
__öçå_t
 
	töçå_t
;

102 
__uöçå_t
 
	tuöçå_t
;

103 
	#_INTPTR_T_DECLARED


	)

	@/usr/include/sys/syslimits.h

33 #i‚de‡
_SYS_SYSLIMITS_H_


34 
	#_SYS_SYSLIMITS_H_


	)

36 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
_LIMITS_H_
Ë&& !deföed(
_SYS_PARAM_H_
)

37 #i‚de‡
_SYS_CDEFS_H_


38 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


40 #ifde‡
__CC_SUPPORTS_WARNING


49 
	#ARG_MAX
 262144

	)

50 #i‚de‡
CHILD_MAX


51 
	#CHILD_MAX
 40

	)

53 
	#LINK_MAX
 32767

	)

54 
	#MAX_CANON
 255

	)

55 
	#MAX_INPUT
 255

	)

56 
	#NAME_MAX
 255

	)

57 #i‚de‡
NGROUPS_MAX


58 
	#NGROUPS_MAX
 1023

	)

60 #i‚de‡
OPEN_MAX


61 
	#OPEN_MAX
 64

	)

63 
	#PATH_MAX
 1024

	)

64 
	#PIPE_BUF
 512

	)

65 
	#IOV_MAX
 1024

	)

	@/usr/include/sys/timespec.h

38 #i‚de‡
_SYS_TIMESPEC_H_


39 
	#_SYS_TIMESPEC_H_


	)

41 #i‚de‡
_TIME_T_DECLARED


42 
__time_t
 
	ttime_t
;

43 
	#_TIME_T_DECLARED


	)

46 
	stime•ec
 {

47 
time_t
 
	mtv_£c
;

48 
	mtv_n£c
;

51 #i‡
__BSD_VISIBLE


52 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) \

54 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

55 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

56 } 0)

	)

57 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) \

59 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

60 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

61 } 0)

	)

69 
	sôimî•ec
 {

70 
time•ec
 
	mô_öãrvÆ
;

71 
time•ec
 
	mô_vÆue
;

	@/usr/include/sys/ttycom.h

38 #i‚def 
_SYS_TTYCOM_H_


39 
	#_SYS_TTYCOM_H_


	)

41 
	~<sys/ioccom.h
>

52 
	swösize
 {

53 
	mws_row
;

54 
	mws_cﬁ
;

55 
	mws_xpixñ
;

56 
	mws_ypixñ
;

64 
	#TIOCEXCL
 
	`_IO
('t', 13Ë

	)

65 
	#TIOCNXCL
 
	`_IO
('t', 14Ë

	)

66 
	#TIOCGPTN
 
	`_IOR
('t', 15, Ë

	)

67 
	#TIOCFLUSH
 
	`_IOW
('t', 16, Ë

	)

69 
	#TIOCGETA
 
	`_IOR
('t', 19, 
ãrmios
Ë

	)

70 
	#TIOCSETA
 
	`_IOW
('t', 20, 
ãrmios
Ë

	)

71 
	#TIOCSETAW
 
	`_IOW
('t', 21, 
ãrmios
Ë

	)

72 
	#TIOCSETAF
 
	`_IOW
('t', 22, 
ãrmios
Ë

	)

74 
	#TIOCGETD
 
	`_IOR
('t', 26, Ë

	)

75 
	#TIOCSETD
 
	`_IOW
('t', 27, Ë

	)

76 
	#TIOCPTMASTER
 
	`_IO
('t', 28Ë

	)

79 
	#TIOCGDRAINWAIT
 
	`_IOR
('t', 86, Ë

	)

80 
	#TIOCSDRAINWAIT
 
	`_IOW
('t', 87, Ë

	)

82 
	#TIOCTIMESTAMP
 
	`_IOR
('t', 89, 
timevÆ
Ë

	)

85 
	#TIOCMGDTRWAIT
 
	`_IOR
('t', 90, Ë

	)

86 
	#TIOCMSDTRWAIT
 
	`_IOW
('t', 91, Ë

	)

88 
	#TIOCDRAIN
 
	`_IO
('t', 94Ë

	)

89 
	#TIOCSIG
 
	`_IOWINT
('t', 95Ë

	)

90 
	#TIOCEXT
 
	`_IOW
('t', 96, Ë

	)

92 
	#TIOCSCTTY
 
	`_IO
('t', 97Ë

	)

93 
	#TIOCCONS
 
	`_IOW
('t', 98, Ë

	)

94 
	#TIOCGSID
 
	`_IOR
('t', 99, Ë

	)

96 
	#TIOCSTAT
 
	`_IO
('t', 101Ë

	)

97 
	#TIOCUCNTL
 
	`_IOW
('t', 102, Ë

	)

98 
	#UIOCCMD
(
n
Ë
	`_IO
('u',ÇË

	)

99 
	#TIOCSWINSZ
 
	`_IOW
('t', 103, 
wösize
Ë

	)

100 
	#TIOCGWINSZ
 
	`_IOR
('t', 104, 
wösize
Ë

	)

101 
	#TIOCMGET
 
	`_IOR
('t', 106, Ë

	)

102 
	#TIOCM_LE
 0001

	)

103 
	#TIOCM_DTR
 0002

	)

104 
	#TIOCM_RTS
 0004

	)

105 
	#TIOCM_ST
 0010

	)

106 
	#TIOCM_SR
 0020

	)

107 
	#TIOCM_CTS
 0040

	)

108 
	#TIOCM_DCD
 0100

	)

109 
	#TIOCM_RI
 0200

	)

110 
	#TIOCM_DSR
 0400

	)

111 
	#TIOCM_CD
 
TIOCM_DCD


	)

112 
	#TIOCM_CAR
 
TIOCM_DCD


	)

113 
	#TIOCM_RNG
 
TIOCM_RI


	)

114 
	#TIOCMBIC
 
	`_IOW
('t', 107, Ë

	)

115 
	#TIOCMBIS
 
	`_IOW
('t', 108, Ë

	)

116 
	#TIOCMSET
 
	`_IOW
('t', 109, Ë

	)

117 
	#TIOCSTART
 
	`_IO
('t', 110Ë

	)

118 
	#TIOCSTOP
 
	`_IO
('t', 111Ë

	)

119 
	#TIOCPKT
 
	`_IOW
('t', 112, Ë

	)

120 
	#TIOCPKT_DATA
 0x00

	)

121 
	#TIOCPKT_FLUSHREAD
 0x01

	)

122 
	#TIOCPKT_FLUSHWRITE
 0x02

	)

123 
	#TIOCPKT_STOP
 0x04

	)

124 
	#TIOCPKT_START
 0x08

	)

125 
	#TIOCPKT_NOSTOP
 0x10

	)

126 
	#TIOCPKT_DOSTOP
 0x20

	)

127 
	#TIOCPKT_IOCTL
 0x40

	)

128 
	#TIOCNOTTY
 
	`_IO
('t', 113Ë

	)

129 
	#TIOCSTI
 
	`_IOW
('t', 114, Ë

	)

130 
	#TIOCOUTQ
 
	`_IOR
('t', 115, Ë

	)

132 
	#TIOCSPGRP
 
	`_IOW
('t', 118, Ë

	)

133 
	#TIOCGPGRP
 
	`_IOR
('t', 119, Ë

	)

134 
	#TIOCCDTR
 
	`_IO
('t', 120Ë

	)

135 
	#TIOCSDTR
 
	`_IO
('t', 121Ë

	)

136 
	#TIOCCBRK
 
	`_IO
('t', 122Ë

	)

137 
	#TIOCSBRK
 
	`_IO
('t', 123Ë

	)

140 
	#TTYDISC
 0

	)

141 
	#SLIPDISC
 4

	)

142 
	#PPPDISC
 5

	)

143 
	#NETGRAPHDISC
 6

	)

144 
	#H4DISC
 7

	)

	@/usr/include/sys/ttydefaults.h

41 #i‚de‡
_SYS_TTYDEFAULTS_H_


42 
	#_SYS_TTYDEFAULTS_H_


	)

47 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

48 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
)

	)

49 
	#TTYDEF_LFLAG_NOECHO
 (
ICANON
 | 
ISIG
 | 
IEXTEN
)

	)

50 
	#TTYDEF_LFLAG_ECHO
 (
TTYDEF_LFLAG_NOECHO
 \

51 | 
ECHO
 | 
ECHOE
 | 
ECHOKE
 | 
ECHOCTL
)

	)

52 
	#TTYDEF_LFLAG
 
TTYDEF_LFLAG_ECHO


	)

53 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS8
 | 
HUPCL
)

	)

54 
	#TTYDEF_SPEED
 (
B9600
)

	)

65 
	#CTRL
(
x
) ((x) >= 'a' && (x) <= 'z' ? \

66 ((
x
Ë- 'a' + 1Ë: (((xË- 'A' + 1Ë& 0x7f))

	)

67 
	#CEOF
 
	`CTRL
('D')

	)

68 
	#CEOL
 0xf‡

	)

69 
	#CERASE
 
	`CTRL
('?')

	)

70 
	#CERASE2
 
	`CTRL
('H')

	)

71 
	#CINTR
 
	`CTRL
('C')

	)

72 
	#CSTATUS
 
	`CTRL
('T')

	)

73 
	#CKILL
 
	`CTRL
('U')

	)

74 
	#CMIN
 1

	)

75 
	#CQUIT
 
	`CTRL
('\\')

	)

76 
	#CSUSP
 
	`CTRL
('Z')

	)

77 
	#CTIME
 0

	)

78 
	#CDSUSP
 
	`CTRL
('Y')

	)

79 
	#CSTART
 
	`CTRL
('Q')

	)

80 
	#CSTOP
 
	`CTRL
('S')

	)

81 
	#CLNEXT
 
	`CTRL
('V')

	)

82 
	#CDISCARD
 
	`CTRL
('O')

	)

83 
	#CWERASE
 
	`CTRL
('W')

	)

84 
	#CREPRINT
 
	`CTRL
('R')

	)

85 
	#CEOT
 
CEOF


	)

87 
	#CBRK
 
CEOL


	)

88 
	#CRPRNT
 
CREPRINT


	)

89 
	#CFLUSH
 
CDISCARD


	)

97 #ifde‡
TTYDEFCHARS


98 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

99 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

100 
CERASE2
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

101 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


103 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

31 #i‚de‡
_SYS_UCONTEXT_H_


32 
	#_SYS_UCONTEXT_H_


	)

34 
	~<sys/sig«l.h
>

35 
	~<machöe/uc⁄ãxt.h
>

37 
	s__uc⁄ãxt
 {

46 
sig£t_t
 
	muc_sigmask
;

47 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

49 
__uc⁄ãxt
 *
	muc_lök
;

50 
°ack_t
 
	muc_°ack
;

51 
	muc_Êags
;

52 
	#UCF_SWAPPED
 0x00000001

	)

53 
	m__•¨e__
[4];

54 } 
	tuc⁄ãxt_t
;

56 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_FREEBSD4
)

57 #i‡
deföed
(
__i386__
)

58 
	suc⁄ãxt4
 {

59 
sig£t_t
 
	muc_sigmask
;

60 
mc⁄ãxt4
 
	muc_mc⁄ãxt
;

61 
uc⁄ãxt4
 *
	muc_lök
;

62 
°ack_t
 
	muc_°ack
;

63 
	m__•¨e__
[8];

66 
	#uc⁄ãxt4
 
uc⁄ãxt


	)

70 #i‚de‡
_KERNEL


72 
__BEGIN_DECLS


74 
gëc⁄ãxt
(
uc⁄ãxt_t
 *);

75 
£tc⁄ãxt
(c⁄° 
uc⁄ãxt_t
 *);

76 
makec⁄ãxt
(
uc⁄ãxt_t
 *, (*)(), , ...);

77 
	`sig«lc⁄ãxt
(
uc⁄ãxt_t
 *, , 
__sigh™dÀr_t
 *);

78 
	`sw≠c⁄ãxt
(
uc⁄ãxt_t
 *, const ucontext_t *);

80 
__END_DECLS


84 
thªad
;

91 
	#GET_MC_CLEAR_RET
 1

	)

94 
	`gë_mc⁄ãxt
(
thªad
 *, 
mc⁄ãxt_t
 *, );

95 
	`£t_mc⁄ãxt
(
thªad
 *, c⁄° 
mc⁄ãxt_t
 *);

	@/usr/include/sys/ucred.h

33 #i‚de‡
_SYS_UCRED_H_


34 
	#_SYS_UCRED_H_


	)

36 
	~<bsm/audô.h
>

44 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_UCRED
)

45 
	su¸ed
 {

46 
u_öt
 
	m¸_ªf
;

47 
	#¸_°¨tc›y
 
¸_uid


	)

48 
uid_t
 
	m¸_uid
;

49 
uid_t
 
	m¸_ruid
;

50 
uid_t
 
	m¸_svuid
;

51 
	m¸_ngroups
;

52 
gid_t
 
	m¸_rgid
;

53 
gid_t
 
	m¸_svgid
;

54 
uidöfo
 *
	m¸_uidöfo
;

55 
uidöfo
 *
	m¸_ruidöfo
;

56 
¥is⁄
 *
	m¸_¥is⁄
;

57 *
	m¸_p•¨e
;

58 
u_öt
 
	m¸_Êags
;

59 *
	m¸_p•¨e2
[2];

60 
	#¸_ídc›y
 
¸_œbñ


	)

61 
œbñ
 *
	m¸_œbñ
;

62 
audôöfo_addr
 
	m¸_audô
;

63 
gid_t
 *
	m¸_groups
;

64 
	m¸_agroups
;

66 
	#NOCRED
 ((
u¸ed
 *)0Ë

	)

67 
	#FSCRED
 ((
u¸ed
 *)-1Ë

	)

70 
	#XU_NGROUPS
 16

	)

75 
	sxu¸ed
 {

76 
u_öt
 
	m¸_vîsi⁄
;

77 
uid_t
 
	m¸_uid
;

78 
	m¸_ngroups
;

79 
gid_t
 
	m¸_groups
[
XU_NGROUPS
];

80 *
	m_¸_unu£d1
;

82 
	#XUCRED_VERSION
 0

	)

85 
	#¸_gid
 
¸_groups
[0]

	)

87 #ifde‡
_KERNEL


88 
	g¥oc
;

89 
	gthªad
;

91 
ch™ge_egid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
egid
);

92 
ch™ge_euid
(
u¸ed
 *
√w¸ed
, 
uidöfo
 *
euù
);

93 
ch™ge_rgid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
rgid
);

94 
ch™ge_ruid
(
u¸ed
 *
√w¸ed
, 
uidöfo
 *
ruù
);

95 
ch™ge_svgid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
svgid
);

96 
ch™ge_svuid
(
u¸ed
 *
√w¸ed
, 
uid_t
 
svuid
);

97 
¸c›y
(
u¸ed
 *
de°
, u¸ed *
§c
);

98 
u¸ed
 *
¸c›yß„
(
¥oc
 *
p
, u¸ed *
¸
);

99 
u¸ed
 *
¸dup
(u¸ed *
¸
);

100 
¸ed_upd©e_thªad
(
thªad
 *
td
);

101 
¸‰ì
(
u¸ed
 *
¸
);

102 
u¸ed
 *
¸gë
();

103 
u¸ed
 *
¸hﬁd
(u¸ed *
¸
);

104 
¸sh¨ed
(
u¸ed
 *
¸
);

105 
¸u2x
(
u¸ed
 *
¸
, 
xu¸ed
 *
x¸
);

106 
¸£tgroups
(
u¸ed
 *
¸
, 
n
, 
gid_t
 *
groups
);

107 
groupmembî
(
gid_t
 
gid
, 
u¸ed
 *
¸ed
);

	@/usr/include/sys/unistd.h

33 #i‚de‡
_SYS_UNISTD_H_


34 
	#_SYS_UNISTD_H_


	)

36 
	~<sys/cdefs.h
>

52 
	#_POSIX_ADVISORY_INFO
 200112L

	)

53 
	#_POSIX_ASYNCHRONOUS_IO
 0

	)

54 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_CLOCK_SELECTION
 -1

	)

56 
	#_POSIX_CPUTIME
 -1

	)

57 
	#_POSIX_FSYNC
 200112L

	)

58 
	#_POSIX_IPV6
 0

	)

59 
	#_POSIX_JOB_CONTROL
 1

	)

60 
	#_POSIX_MAPPED_FILES
 200112L

	)

61 
	#_POSIX_MEMLOCK
 -1

	)

62 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

63 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

64 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

65 
	#_POSIX_MONOTONIC_CLOCK
 200112L

	)

66 
	#_POSIX_NO_TRUNC
 1

	)

67 
	#_POSIX_PRIORITIZED_IO
 -1

	)

68 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

69 
	#_POSIX_RAW_SOCKETS
 200112L

	)

70 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

71 
	#_POSIX_SEMAPHORES
 -1

	)

72 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

73 
	#_POSIX_SPORADIC_SERVER
 -1

	)

74 
	#_POSIX_SYNCHRONIZED_IO
 -1

	)

75 
	#_POSIX_TIMEOUTS
 200112L

	)

76 
	#_POSIX_TIMERS
 200112L

	)

77 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

78 
	#_POSIX_VDISABLE
 0xff

	)

80 #i‡
__XSI_VISIBLE


81 
	#_XOPEN_SHM
 1

	)

82 
	#_XOPEN_STREAMS
 -1

	)

92 #ifdef 
_NOT_AVAILABLE


93 
	#_POSIX_SAVED_IDS
 1

	)

97 
	#_POSIX_VERSION
 200112L

	)

100 
	#F_OK
 0

	)

101 
	#X_OK
 0x01

	)

102 
	#W_OK
 0x02

	)

103 
	#R_OK
 0x04

	)

106 #i‚de‡
SEEK_SET


107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

111 #i‡
__BSD_VISIBLE


112 
	#SEEK_DATA
 3

	)

113 
	#SEEK_HOLE
 4

	)

116 #i‚de‡
_POSIX_SOURCE


118 
	#L_SET
 
SEEK_SET


	)

119 
	#L_INCR
 
SEEK_CUR


	)

120 
	#L_XTND
 
SEEK_END


	)

124 
	#_PC_LINK_MAX
 1

	)

125 
	#_PC_MAX_CANON
 2

	)

126 
	#_PC_MAX_INPUT
 3

	)

127 
	#_PC_NAME_MAX
 4

	)

128 
	#_PC_PATH_MAX
 5

	)

129 
	#_PC_PIPE_BUF
 6

	)

130 
	#_PC_CHOWN_RESTRICTED
 7

	)

131 
	#_PC_NO_TRUNC
 8

	)

132 
	#_PC_VDISABLE
 9

	)

134 #i‡
__POSIX_VISIBLE
 >= 199309

135 
	#_PC_ASYNC_IO
 53

	)

136 
	#_PC_PRIO_IO
 54

	)

137 
	#_PC_SYNC_IO
 55

	)

140 #i‡
__POSIX_VISIBLE
 >= 200112

141 
	#_PC_ALLOC_SIZE_MIN
 10

	)

142 
	#_PC_FILESIZEBITS
 12

	)

143 
	#_PC_REC_INCR_XFER_SIZE
 14

	)

144 
	#_PC_REC_MAX_XFER_SIZE
 15

	)

145 
	#_PC_REC_MIN_XFER_SIZE
 16

	)

146 
	#_PC_REC_XFER_ALIGN
 17

	)

147 
	#_PC_SYMLINK_MAX
 18

	)

150 #i‡
__BSD_VISIBLE


151 
	#_PC_ACL_EXTENDED
 59

	)

152 
	#_PC_ACL_PATH_MAX
 60

	)

153 
	#_PC_CAP_PRESENT
 61

	)

154 
	#_PC_INF_PRESENT
 62

	)

155 
	#_PC_MAC_PRESENT
 63

	)

156 
	#_PC_ACL_NFS4
 64

	)

160 
	#_PC_MIN_HOLE_SIZE
 21

	)

162 #i‡
__BSD_VISIBLE


168 
	#RFNAMEG
 (1<<0Ë

	)

169 
	#RFENVG
 (1<<1Ë

	)

170 
	#RFFDG
 (1<<2Ë

	)

171 
	#RFNOTEG
 (1<<3Ë

	)

172 
	#RFPROC
 (1<<4Ë

	)

173 
	#RFMEM
 (1<<5Ë

	)

174 
	#RFNOWAIT
 (1<<6Ë

	)

175 
	#RFCNAMEG
 (1<<10Ë

	)

176 
	#RFCENVG
 (1<<11Ë

	)

177 
	#RFCFDG
 (1<<12Ë

	)

178 
	#RFTHREAD
 (1<<13Ë

	)

179 
	#RFSIGSHARE
 (1<<14Ë

	)

180 
	#RFLINUXTHPN
 (1<<16Ë

	)

181 
	#RFSTOPPED
 (1<<17Ë

	)

182 
	#RFHIGHPID
 (1<<18Ë

	)

183 
	#RFTSIGZMB
 (1<<19Ë

	)

184 
	#RFTSIGSHIFT
 20

	)

185 
	#RFTSIGMASK
 0xFF

	)

186 
	#RFTSIGNUM
(
Êags
Ë(((ÊagsË>> 
RFTSIGSHIFT
Ë& 
RFTSIGMASK
)

	)

187 
	#RFTSIGFLAGS
(
signum
Ë((signumË<< 
RFTSIGSHIFT
)

	)

188 
	#RFPPWAIT
 (1<<31Ë

	)

189 
	#RFKERNELONLY
 (
RFSTOPPED
 | 
RFHIGHPID
 | 
RFPPWAIT
)

	)

190 
	#RFFLAGS
 (
RFFDG
 | 
RFPROC
 | 
RFMEM
 | 
RFNOWAIT
 | 
RFCFDG
 | \

191 
RFTHREAD
 | 
RFSIGSHARE
 | 
RFLINUXTHPN
 | 
RFSTOPPED
 | 
RFHIGHPID
 | 
RFTSIGZMB
 | \

192 
RFPPWAIT
)

	)

	@/usr/include/sys/uuid.h

29 #i‚de‡
_SYS_UUID_H_


30 
	#_SYS_UUID_H_


	)

32 
	~<sys/cdefs.h
>

35 
	#_UUID_NODE_LEN
 6

	)

44 
	suuid
 {

45 
uöt32_t
 
	mtime_low
;

46 
uöt16_t
 
	mtime_mid
;

47 
uöt16_t
 
	mtime_hi_™d_vîsi⁄
;

48 
uöt8_t
 
	m˛ock_£q_hi_™d_ª£rved
;

49 
uöt8_t
 
	m˛ock_£q_low
;

50 
uöt8_t
 
	mnode
[
_UUID_NODE_LEN
];

53 #ifde‡
_KERNEL


55 
	#UUID_NODE_LEN
 
_UUID_NODE_LEN


	)

57 
	gsbuf
;

59 
uuid
 *
kîn_uuidgí
(uuid *, 
size_t
);

61 
¢¥ötf_uuid
(*, 
size_t
, 
uuid
 *);

62 
¥ötf_uuid
(
uuid
 *);

63 
sbuf_¥ötf_uuid
(
sbuf
 *, 
uuid
 *);

64 
∑r£_uuid
(c⁄° *, 
uuid
 *);

66 
be_uuid_dec
(c⁄° *
buf
, 
uuid
 *uuid);

67 
be_uuid_íc
(*
buf
, 
uuid
 const *uuid);

68 
À_uuid_dec
(c⁄° *
buf
, 
uuid
 *uuid);

69 
À_uuid_íc
(*
buf
, 
uuid
 const *uuid);

74 
uuid
 
	tuuid_t
;

76 
__BEGIN_DECLS


77 
uuidgí
(
uuid
 *, );

78 
	g__END_DECLS


	@/usr/include/vm/pmap.h

68 #i‚def 
_PMAP_VM_


69 
	#_PMAP_VM_


	)

76 
	spm≠_°©i°ics
 {

77 
	mªsidít_cou¡
;

78 
	mwúed_cou¡
;

80 
pm≠_°©i°ics
 *
	tpm≠_°©i°ics_t
;

89 
	~<machöe/pm≠.h
>

91 #ifde‡
_KERNEL


92 
	gthªad
;

97 
vm_off£t_t
 
kî√l_vm_íd
;

99 
pm≠_Æign_su≥Ωage
(
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
 *,

100 
vm_size_t
);

101 #i‡
deföed
(
__mùs__
)

102 
pm≠_Æign_éb
(
vm_off£t_t
 *);

104 
pm≠_ch™ge_wúög
(
pm≠_t
, 
vm_off£t_t
, 
boﬁón_t
);

105 
pm≠_˛ór_modify
(
vm_∑ge_t
 
m
);

106 
pm≠_˛ór_ª„ªn˚
(
vm_∑ge_t
 
m
);

107 
pm≠_c›y
(
pm≠_t
,Öm≠_t, 
vm_off£t_t
, 
vm_size_t
, vm_offset_t);

108 
pm≠_c›y_∑ge
(
vm_∑ge_t
, vm_page_t);

109 
pm≠_íãr
(
pm≠_t
, 
vm_off£t_t
, 
vm_¥Ÿ_t
, 
vm_∑ge_t
,

110 
vm_¥Ÿ_t
, 
boﬁón_t
);

111 
pm≠_íãr_quick
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
, 
vm_∑ge_t
 
m
,

112 
vm_¥Ÿ_t
 
¥Ÿ
);

113 
pm≠_íãr_obje˘
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
°¨t
,

114 
vm_off£t_t
 
íd
, 
vm_∑ge_t
 
m_°¨t
, 
vm_¥Ÿ_t
 
¥Ÿ
);

115 
vm_∑ddr_t
 
pm≠_exåa˘
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
);

116 
vm_∑ge_t
 
pm≠_exåa˘_™d_hﬁd
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
,

117 
vm_¥Ÿ_t
 
¥Ÿ
);

118 
pm≠_growkî√l
(
vm_off£t_t
);

119 
pm≠_öô
();

120 
boﬁón_t
 
pm≠_is_modifõd
(
vm_∑ge_t
 
m
);

121 
boﬁón_t
 
pm≠_is_¥eÁu…abÀ
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
);

122 
boﬁón_t
 
pm≠_ts_ª„ªn˚d
(
vm_∑ge_t
 
m
);

123 
vm_off£t_t
 
pm≠_m≠
(vm_off£t_à*, 
vm_∑ddr_t
, vm_paddr_t, );

124 
pm≠_obje˘_öô_±
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
addr
,

125 
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
pödex
, 
vm_size_t
 
size
);

126 
boﬁón_t
 
pm≠_∑ge_exi°s_quick
(
pm≠_t
 
pm≠
, 
vm_∑ge_t
 
m
);

127 
pm≠_∑ge_öô
(
vm_∑ge_t
 
m
);

128 
pm≠_∑ge_wúed_m≠pögs
(
vm_∑ge_t
 
m
);

129 
pm≠_pöô
(
pm≠_t
);

130 
pm≠_pöô0
(
pm≠_t
);

131 
pm≠_¥Ÿe˘
(
pm≠_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_¥Ÿ_t
);

132 
pm≠_qíãr
(
vm_off£t_t
, 
vm_∑ge_t
 *, );

133 
pm≠_qªmove
(
vm_off£t_t
, );

134 
pm≠_ªÀa£
(
pm≠_t
);

135 
pm≠_ªmove
(
pm≠_t
, 
vm_off£t_t
, vm_offset_t);

136 
pm≠_ªmove_Æl
(
vm_∑ge_t
 
m
);

137 
pm≠_ªmove_∑ges
(
pm≠_t
);

138 
pm≠_ªmove_wrôe
(
vm_∑ge_t
 
m
);

139 
pm≠_sync_iˇche
(
pm≠_t
, 
vm_off£t_t
, 
vm_size_t
);

140 
pm≠_zîo_∑ge
(
vm_∑ge_t
);

141 
pm≠_zîo_∑ge_¨ó
(
vm_∑ge_t
, 
off
, 
size
);

142 
pm≠_zîo_∑ge_idÀ
(
vm_∑ge_t
);

143 
pm≠_möc‹e
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
addr
);

144 
pm≠_a˘iv©e
(
thªad
 *
td
);

146 
	#pm≠_ªsidít_cou¡
(
pm
Ë(’m)->
pm_°©s
.
ªsidít_cou¡
)

	)

147 
	#pm≠_wúed_cou¡
(
pm
Ë(’m)->
pm_°©s
.
wúed_cou¡
)

	)

	@/usr/include/vm/uma.h

36 #i‚de‡
VM_UMA_H


37 
	#VM_UMA_H


	)

39 
	~<sys/∑øm.h
>

40 
	~<sys/mÆloc.h
>

43 
	#UMA_SMALLEST_UNIT
 (
PAGE_SIZE
 / 256Ë

	)

47 
	guma_z⁄e
;

49 
uma_z⁄e
 * 
	tuma_z⁄e_t
;

51 
z⁄e_døö
(
uma_z⁄e_t
);

70 (*
	tuma_˘‹
)(*
	tmem
, 
	tsize
, *
	t¨g
, 
	tÊags
);

88 (*
	tuma_dt‹
)(*
	tmem
, 
	tsize
, *
	t¨g
);

107 (*
	tuma_öô
)(*
	tmem
, 
	tsize
, 
	tÊags
);

124 (*
	tuma_föi
)(*
	tmem
, 
	tsize
);

168 
uma_z⁄e_t
 
	`uma_z¸óã
(*
«me
, 
size_t
 
size
, 
uma_˘‹
 
˘‹
, 
uma_dt‹
 
dt‹
,

169 
uma_öô
 
umöô
, 
uma_föi
 
föi
, 
Æign
,

170 
u_öt32_t
 
Êags
);

204 
uma_z⁄e_t
 
	`uma_z£c⁄d_¸óã
(*
«me
, 
uma_˘‹
 
˘‹
, 
uma_dt‹
 
dt‹
,

205 
uma_öô
 
zöô
, 
uma_föi
 
zföi
, 
uma_z⁄e_t
 
ma°î
);

216 
	`uma_z£c⁄d_add
(
uma_z⁄e_t
 
z⁄e
, uma_z⁄e_à
ma°î
);

224 
	#UMA_ZONE_PAGEABLE
 0x0001

	)

226 
	#UMA_ZONE_ZINIT
 0x0002

	)

227 
	#UMA_ZONE_STATIC
 0x0004

	)

228 
	#UMA_ZONE_OFFPAGE
 0x0008

	)

230 
	#UMA_ZONE_MALLOC
 0x0010

	)

231 
	#UMA_ZONE_NOFREE
 0x0020

	)

232 
	#UMA_ZONE_MTXCLASS
 0x0040

	)

233 
	#UMA_ZONE_VM
 0x0080

	)

237 
	#UMA_ZONE_HASH
 0x0100

	)

241 
	#UMA_ZONE_SECONDARY
 0x0200

	)

242 
	#UMA_ZONE_REFCNT
 0x0400

	)

243 
	#UMA_ZONE_MAXBUCKET
 0x0800

	)

244 
	#UMA_ZONE_CACHESPREAD
 0x1000

	)

250 
	#UMA_ZONE_VTOSLAB
 0x2000

	)

257 
	#UMA_ZONE_INHERIT
 \

258 (
UMA_ZONE_OFFPAGE
 | 
UMA_ZONE_MALLOC
 | 
UMA_ZONE_HASH
 | \

259 
UMA_ZONE_REFCNT
 | 
UMA_ZONE_VTOSLAB
)

	)

262 
	#UMA_ALIGN_PTR
 ((*Ë- 1Ë

	)

263 
	#UMA_ALIGN_LONG
 ((Ë- 1Ë

	)

264 
	#UMA_ALIGN_INT
 ((Ë- 1Ë

	)

265 
	#UMA_ALIGN_SHORT
 ((Ë- 1Ë

	)

266 
	#UMA_ALIGN_CHAR
 ((Ë- 1Ë

	)

267 
	#UMA_ALIGN_CACHE
 (0 - 1Ë

	)

276 
	`uma_zde°roy
(
uma_z⁄e_t
 
z⁄e
);

292 *
	`uma_zÆloc_¨g
(
uma_z⁄e_t
 
z⁄e
, *
¨g
, 
Êags
);

300 
__ölöe
 *
	`uma_zÆloc
(
uma_z⁄e_t
 
z⁄e
, 
Êags
);

302 
__ölöe
 *

303 
	$uma_zÆloc
(
uma_z⁄e_t
 
z⁄e
, 
Êags
)

305  
	`uma_zÆloc_¨g
(
z⁄e
, 
NULL
, 
Êags
);

306 
	}
}

320 
uma_z‰ì_¨g
(
uma_z⁄e_t
 
z⁄e
, *
ôem
, *
¨g
);

328 
__ölöe
 
uma_z‰ì
(
uma_z⁄e_t
 
z⁄e
, *
ôem
);

330 
__ölöe
 

331 
	$uma_z‰ì
(
uma_z⁄e_t
 
z⁄e
, *
ôem
)

333 
	`uma_z‰ì_¨g
(
z⁄e
, 
ôem
, 
NULL
);

334 
	}
}

354 *(*
	tuma_Æloc
)(
	tuma_z⁄e_t
 
	tz⁄e
, 
	tsize
, 
	tu_öt8_t
 *
	tpÊag
, 
	twaô
);

367 (*
	tuma_‰ì
)(*
	tôem
, 
	tsize
, 
	tu_öt8_t
 
	tpÊag
);

387 
	`uma_°¨tup
(*
boŸmem
, 
boŸ_∑ges
);

403 
	`uma_°¨tup2
();

416 
	`uma_ª˛aim
();

428 
	`uma_£t_Æign
(
Æign
);

447 
vm_obje˘
;

448 
	`uma_z⁄e_£t_obj
(
uma_z⁄e_t
 
z⁄e
, 
vm_obje˘
 *
obj
, 
size
);

459 
	`uma_z⁄e_£t_max
(
uma_z⁄e_t
 
z⁄e
, 
nôems
);

471 
	`uma_z⁄e_gë_max
(
uma_z⁄e_t
 
z⁄e
);

482 
	`uma_z⁄e_gë_cur
(
uma_z⁄e_t
 
z⁄e
);

492 
	`uma_z⁄e_£t_öô
(
uma_z⁄e_t
 
z⁄e
, 
uma_öô
 
umöô
);

493 
	`uma_z⁄e_£t_föi
(
uma_z⁄e_t
 
z⁄e
, 
uma_föi
 
föi
);

503 
	`uma_z⁄e_£t_zöô
(
uma_z⁄e_t
 
z⁄e
, 
uma_öô
 
zöô
);

504 
	`uma_z⁄e_£t_zföi
(
uma_z⁄e_t
 
z⁄e
, 
uma_föi
 
zföi
);

522 
	`uma_z⁄e_£t_Ælocf
(
uma_z⁄e_t
 
z⁄e
, 
uma_Æloc
 
Ælocf
);

535 
	`uma_z⁄e_£t_‰ìf
(
uma_z⁄e_t
 
z⁄e
, 
uma_‰ì
 
‰ìf
);

540 
	#UMA_SLAB_BOOT
 0x01

	)

541 
	#UMA_SLAB_KMEM
 0x02

	)

542 
	#UMA_SLAB_KERNEL
 0x04

	)

543 
	#UMA_SLAB_PRIV
 0x08

	)

544 
	#UMA_SLAB_OFFP
 0x10

	)

545 
	#UMA_SLAB_MALLOC
 0x20

	)

560 
	`uma_¥óŒoc
(
uma_z⁄e_t
 
z⁄e
, 
ôem˙t
);

575 
u_öt32_t
 *
	`uma_föd_ªf˙t
(
uma_z⁄e_t
 
z⁄e
, *
ôem
);

586 
	`uma_z⁄e_exhau°ed
(
uma_z⁄e_t
 
z⁄e
);

587 
	`uma_z⁄e_exhau°ed_nﬁock
(
uma_z⁄e_t
 
z⁄e
);

594 
	#UMA_STREAM_VERSION
 0x00000001

	)

595 
	suma_°ªam_hódî
 {

596 
u_öt32_t
 
ush_vîsi⁄
;

597 
u_öt32_t
 
ush_max˝us
;

598 
u_öt32_t
 
ush_cou¡
;

599 
u_öt32_t
 
_ush_∑d
;

602 
	#UTH_MAX_NAME
 32

	)

603 
	#UTH_ZONE_SECONDARY
 0x00000001

	)

604 
	suma_ty≥_hódî
 {

608 
uth_«me
[
UTH_MAX_NAME
];

609 
u_öt32_t
 
uth_Æign
;

610 
u_öt32_t
 
uth_size
;

611 
u_öt32_t
 
uth_rsize
;

612 
u_öt32_t
 
uth_max∑ges
;

613 
u_öt32_t
 
uth_limô
;

618 
u_öt32_t
 
uth_∑ges
;

619 
u_öt32_t
 
uth_keg_‰ì
;

620 
u_öt32_t
 
uth_z⁄e_‰ì
;

621 
u_öt32_t
 
uth_buckësize
;

622 
u_öt32_t
 
uth_z⁄e_Êags
;

623 
u_öt64_t
 
uth_Ælocs
;

624 
u_öt64_t
 
uth_‰ìs
;

625 
u_öt64_t
 
uth_Áûs
;

626 
u_öt64_t
 
_uth_ª£rved1
[3];

629 
	suma_≥r˝u_°©
 {

630 
u_öt64_t
 
ups_Ælocs
;

631 
u_öt64_t
 
ups_‰ìs
;

632 
u_öt64_t
 
ups_ˇche_‰ì
;

633 
u_öt64_t
 
_ups_ª£rved
[5];

	@/usr/include/vm/vm.h

61 #i‚de‡
VM_H


62 
	#VM_H


	)

64 
	~<machöe/vm.h
>

66 
	tvm_öhîô_t
;

68 
	#VM_INHERIT_SHARE
 ((
vm_öhîô_t
Ë0)

	)

69 
	#VM_INHERIT_COPY
 ((
vm_öhîô_t
Ë1)

	)

70 
	#VM_INHERIT_NONE
 ((
vm_öhîô_t
Ë2)

	)

71 
	#VM_INHERIT_DEFAULT
 
VM_INHERIT_COPY


	)

73 
u_ch¨
 
	tvm_¥Ÿ_t
;

75 
	#VM_PROT_NONE
 ((
vm_¥Ÿ_t
Ë0x00)

	)

76 
	#VM_PROT_READ
 ((
vm_¥Ÿ_t
Ë0x01)

	)

77 
	#VM_PROT_WRITE
 ((
vm_¥Ÿ_t
Ë0x02)

	)

78 
	#VM_PROT_EXECUTE
 ((
vm_¥Ÿ_t
Ë0x04)

	)

79 
	#VM_PROT_OVERRIDE_WRITE
 ((
vm_¥Ÿ_t
Ë0x08Ë

	)

81 
	#VM_PROT_ALL
 (
VM_PROT_READ
|
VM_PROT_WRITE
|
VM_PROT_EXECUTE
)

	)

82 
	#VM_PROT_RW
 (
VM_PROT_READ
|
VM_PROT_WRITE
)

	)

83 
	#VM_PROT_DEFAULT
 
VM_PROT_ALL


	)

85 
	eobj_ty≥
 { 
	mOBJT_DEFAULT
, 
	mOBJT_SWAP
, 
	mOBJT_VNODE
, 
	mOBJT_DEVICE
, 
	mOBJT_PHYS
,

86 
	mOBJT_DEAD
, 
	mOBJT_SG
 };

87 
u_ch¨
 
	tobjty≥_t
;

89 
	gvm_m≠_obje˘
;

90 
vm_m≠_obje˘
 
	tvm_m≠_obje˘_t
;

92 
	gvm_m≠_íåy
;

93 
vm_m≠_íåy
 *
	tvm_m≠_íåy_t
;

95 
	gvm_m≠
;

96 
vm_m≠
 *
	tvm_m≠_t
;

98 
	gvm_obje˘
;

99 
vm_obje˘
 *
	tvm_obje˘_t
;

101 #i‚de‡
_KERNEL


109 
	tboﬁón_t
;

115 
	tvm_mem©å_t
;

121 
	gvm_∑ge
;

122 
vm_∑ge
 *
	tvm_∑ge_t
;

125 
	gvm_ª£rv
;

126 
vm_ª£rv
 *
	tvm_ª£rv_t
;

132 
	skva_md_öfo
 {

133 
vm_off£t_t
 
	mbuf„r_sva
;

134 
vm_off£t_t
 
	mbuf„r_eva
;

135 
vm_off£t_t
 
	m˛ón_sva
;

136 
vm_off£t_t
 
	m˛ón_eva
;

137 
vm_off£t_t
 
	m∑gî_sva
;

138 
vm_off£t_t
 
	m∑gî_eva
;

141 
kva_md_öfo
 
kmi
;

142 
vm_ksubm≠_öô
(
kva_md_öfo
 *);

144 
	guidöfo
;

145 
sw≠_ª£rve
(
vm_ooff£t_t
 
ö¸
);

146 
sw≠_ª£rve_by_uid
(
vm_ooff£t_t
 
ö¸
, 
uidöfo
 *
uù
);

147 
sw≠_ª£rve_f‹˚
(
vm_ooff£t_t
 
ö¸
);

148 
sw≠_ªÀa£
(
vm_ooff£t_t
 
de¸
);

149 
sw≠_ªÀa£_by_uid
(
vm_ooff£t_t
 
de¸
, 
uidöfo
 *
uù
);

	@/usr/include/vm/vm_map.h

66 #i‚def 
_VM_MAP_


67 
	#_VM_MAP_


	)

69 
	~<sys/lock.h
>

70 
	~<sys/sx.h
>

71 
	~<sys/_muãx.h
>

80 
u_ch¨
 
	tvm_Êags_t
;

81 
u_öt
 
	tvm_eÊags_t
;

88 
	uvm_m≠_obje˘
 {

89 
vm_obje˘
 *
	mvm_obje˘
;

90 
vm_m≠
 *
	msub_m≠
;

99 
	svm_m≠_íåy
 {

100 
vm_m≠_íåy
 *
	m¥ev
;

101 
vm_m≠_íåy
 *
	m√xt
;

102 
vm_m≠_íåy
 *
	mÀ·
;

103 
vm_m≠_íåy
 *
	mright
;

104 
vm_off£t_t
 
	m°¨t
;

105 
vm_off£t_t
 
	míd
;

106 
vm_off£t_t
 
	mavaû_ssize
;

107 
vm_size_t
 
	madj_‰ì
;

108 
vm_size_t
 
	mmax_‰ì
;

109 
vm_m≠_obje˘
 
	mobje˘
;

110 
vm_ooff£t_t
 
	moff£t
;

111 
vm_eÊags_t
 
	meÊags
;

112 
vm_¥Ÿ_t
 
	m¥Ÿe˘i⁄
;

113 
vm_¥Ÿ_t
 
	mmax_¥Ÿe˘i⁄
;

114 
vm_öhîô_t
 
	möhîô™˚
;

115 
	mwúed_cou¡
;

116 
vm_pödex_t
 
	mœ°r
;

117 
uidöfo
 *
	muù
;

120 
	#MAP_ENTRY_NOSYNC
 0x0001

	)

121 
	#MAP_ENTRY_IS_SUB_MAP
 0x0002

	)

122 
	#MAP_ENTRY_COW
 0x0004

	)

123 
	#MAP_ENTRY_NEEDS_COPY
 0x0008

	)

124 
	#MAP_ENTRY_NOFAULT
 0x0010

	)

125 
	#MAP_ENTRY_USER_WIRED
 0x0020

	)

127 
	#MAP_ENTRY_BEHAV_NORMAL
 0x0000

	)

128 
	#MAP_ENTRY_BEHAV_SEQUENTIAL
 0x0040

	)

129 
	#MAP_ENTRY_BEHAV_RANDOM
 0x0080

	)

130 
	#MAP_ENTRY_BEHAV_RESERVED
 0x00C0

	)

132 
	#MAP_ENTRY_BEHAV_MASK
 0x00C0

	)

134 
	#MAP_ENTRY_IN_TRANSITION
 0x0100

	)

135 
	#MAP_ENTRY_NEEDS_WAKEUP
 0x0200

	)

136 
	#MAP_ENTRY_NOCOREDUMP
 0x0400

	)

138 
	#MAP_ENTRY_GROWS_DOWN
 0x1000

	)

139 
	#MAP_ENTRY_GROWS_UP
 0x2000

	)

141 
	#MAP_ENTRY_WIRE_SKIPPED
 0x4000

	)

143 #ifdef 
_KERNEL


144 
__ölöe
 
u_ch¨


145 
	$vm_m≠_íåy_behavi‹
(
vm_m≠_íåy_t
 
íåy
)

147  (
íåy
->
eÊags
 & 
MAP_ENTRY_BEHAV_MASK
);

148 
	}
}

150 
__ölöe
 

151 
	$vm_m≠_íåy_u£r_wúed_cou¡
(
vm_m≠_íåy_t
 
íåy
)

153 i‡(
íåy
->
eÊags
 & 
MAP_ENTRY_USER_WIRED
)

156 
	}
}

158 
__ölöe
 

159 
	$vm_m≠_íåy_sy°em_wúed_cou¡
(
vm_m≠_íåy_t
 
íåy
)

161  (
íåy
->
wúed_cou¡
 - 
	`vm_m≠_íåy_u£r_wúed_cou¡
(entry));

162 
	}
}

176 
	svm_m≠
 {

177 
vm_m≠_íåy
 
	mhódî
;

178 
sx
 
	mlock
;

179 
mtx
 
	msy°em_mtx
;

180 
	m√¡rõs
;

181 
vm_size_t
 
	msize
;

182 
u_öt
 
	mtime°amp
;

183 
u_ch¨
 
	m√eds_wakeup
;

184 
u_ch¨
 
	msy°em_m≠
;

185 
vm_Êags_t
 
	mÊags
;

186 
vm_m≠_íåy_t
 
	mroŸ
;

187 
pm≠_t
 
	mpm≠
;

188 
	#mö_off£t
 
hódî
.
°¨t


	)

189 
	#max_off£t
 
hódî
.
íd


	)

190 
	mbusy
;

196 
	#MAP_WIREFUTURE
 0x01

	)

197 
	#MAP_BUSY_WAKEUP
 0x02

	)

199 #ifdef 
_KERNEL


200 
__ölöe
 
vm_off£t_t


201 
	$vm_m≠_max
(
vm_m≠_t
 
m≠
)

203  (
m≠
->
max_off£t
);

204 
	}
}

206 
__ölöe
 
vm_off£t_t


207 
	$vm_m≠_mö
(
vm_m≠_t
 
m≠
)

209  (
m≠
->
mö_off£t
);

210 
	}
}

212 
__ölöe
 
pm≠_t


213 
	$vm_m≠_pm≠
(
vm_m≠_t
 
m≠
)

215  (
m≠
->
pm≠
);

216 
	}
}

218 
__ölöe
 

219 
	$vm_m≠_modÊags
(
vm_m≠_t
 
m≠
, 
vm_Êags_t
 
£t
, vm_Êags_à
˛ór
)

221 
m≠
->
Êags
 = (m≠->Êag†| 
£t
Ë& ~
˛ór
;

222 
	}
}

231 
	svm•a˚
 {

232 
vm_m≠
 
	mvm_m≠
;

233 
shmm≠_°©e
 *
	mvm_shm
;

234 
£gsz_t
 
	mvm_swrss
;

235 
£gsz_t
 
	mvm_tsize
;

236 
£gsz_t
 
	mvm_dsize
;

237 
£gsz_t
 
	mvm_ssize
;

238 
ˇddr_t
 
	mvm_èddr
;

239 
ˇddr_t
 
	mvm_daddr
;

240 
ˇddr_t
 
	mvm_maxßddr
;

241 vﬁ©ûê
	mvm_ªf˙t
;

247 
pm≠
 
	mvm_pm≠
;

250 #ifdef 
_KERNEL


251 
__ölöe
 
pm≠_t


252 
	$vm•a˚_pm≠
(
vm•a˚
 *vmspace)

254  &
vm•a˚
->
vm_pm≠
;

255 
	}
}

258 #ifdef 
_KERNEL


269 
_vm_m≠_lock
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

270 
_vm_m≠_u∆ock
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

271 
_vm_m≠_u∆ock_™d_waô
(
vm_m≠_t
 
m≠
, 
timo
, c⁄° *
fûe
, 
löe
);

272 
_vm_m≠_lock_ªad
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

273 
_vm_m≠_u∆ock_ªad
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

274 
_vm_m≠_åylock
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

275 
_vm_m≠_åylock_ªad
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

276 
_vm_m≠_lock_upgøde
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

277 
_vm_m≠_lock_downgøde
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

278 
vm_m≠_locked
(
vm_m≠_t
 
m≠
);

279 
vm_m≠_wakeup
(
vm_m≠_t
 
m≠
);

280 
vm_m≠_busy
(
vm_m≠_t
 
m≠
);

281 
vm_m≠_unbusy
(
vm_m≠_t
 
m≠
);

282 
vm_m≠_waô_busy
(
vm_m≠_t
 
m≠
);

284 
	#vm_m≠_lock
(
m≠
Ë
	`_vm_m≠_lock
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

285 
	#vm_m≠_u∆ock
(
m≠
Ë
	`_vm_m≠_u∆ock
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

286 
	#vm_m≠_u∆ock_™d_waô
(
m≠
, 
timo
) \

287 
	`_vm_m≠_u∆ock_™d_waô
(
m≠
, 
timo
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

288 
	#vm_m≠_lock_ªad
(
m≠
Ë
	`_vm_m≠_lock_ªad
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

289 
	#vm_m≠_u∆ock_ªad
(
m≠
Ë
	`_vm_m≠_u∆ock_ªad
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

290 
	#vm_m≠_åylock
(
m≠
Ë
	`_vm_m≠_åylock
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

291 
	#vm_m≠_åylock_ªad
(
m≠
) \

292 
	`_vm_m≠_åylock_ªad
(
m≠
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

293 
	#vm_m≠_lock_upgøde
(
m≠
) \

294 
	`_vm_m≠_lock_upgøde
(
m≠
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

295 
	#vm_m≠_lock_downgøde
(
m≠
) \

296 
	`_vm_m≠_lock_downgøde
(
m≠
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

298 
vm•a˚_ªsidít_cou¡
(
vm•a˚
 *vmspace);

299 
vm•a˚_wúed_cou¡
(
vm•a˚
 *vmspace);

304 
	#MAX_KMAP
 10

	)

305 
	#MAX_KMAPENT
 128

	)

310 
	#MAP_UNUSED_01
 0x0001

	)

311 
	#MAP_COPY_ON_WRITE
 0x0002

	)

312 
	#MAP_NOFAULT
 0x0004

	)

313 
	#MAP_PREFAULT
 0x0008

	)

314 
	#MAP_PREFAULT_PARTIAL
 0x0010

	)

315 
	#MAP_DISABLE_SYNCER
 0x0020

	)

316 
	#MAP_DISABLE_COREDUMP
 0x0100

	)

317 
	#MAP_PREFAULT_MADVISE
 0x0200

	)

318 
	#MAP_STACK_GROWS_DOWN
 0x1000

	)

319 
	#MAP_STACK_GROWS_UP
 0x2000

	)

320 
	#MAP_ACC_CHARGED
 0x4000

	)

321 
	#MAP_ACC_NO_CHARGE
 0x8000

	)

326 
	#VM_FAULT_NORMAL
 0

	)

327 
	#VM_FAULT_CHANGE_WIRING
 1

	)

328 
	#VM_FAULT_USER_WIRE
 2

	)

329 
	#VM_FAULT_WIRE_MASK
 (
VM_FAULT_CHANGE_WIRING
|
VM_FAULT_USER_WIRE
)

	)

330 
	#VM_FAULT_DIRTY
 8

	)

335 
	#VMFS_NO_SPACE
 0

	)

336 
	#VMFS_ANY_SPACE
 1

	)

337 
	#VMFS_ALIGNED_SPACE
 2

	)

338 #i‡
deföed
(
__mùs__
)

339 
	#VMFS_TLB_ALIGNED_SPACE
 3

	)

345 
	#VM_MAP_WIRE_SYSTEM
 0

	)

346 
	#VM_MAP_WIRE_USER
 1

	)

348 
	#VM_MAP_WIRE_NOHOLES
 0

	)

349 
	#VM_MAP_WIRE_HOLESOK
 2

	)

351 #ifde‡
_KERNEL


352 
boﬁón_t
 
vm_m≠_check_¥Ÿe˘i⁄
 (
vm_m≠_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_¥Ÿ_t
);

353 
vm_m≠_t
 
vm_m≠_¸óã
(
pm≠_t
, 
vm_off£t_t
, vm_offset_t);

354 
vm_m≠_dñëe
(
vm_m≠_t
, 
vm_off£t_t
, vm_offset_t);

355 
vm_m≠_föd
(
vm_m≠_t
, 
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
 *, 
vm_size_t
,

356 , 
vm_¥Ÿ_t
, vm_prot_t, );

357 
vm_m≠_fixed
(
vm_m≠_t
, 
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
, 
vm_size_t
,

358 
vm_¥Ÿ_t
, vm_prot_t, );

359 
vm_m≠_föd•a˚
 (
vm_m≠_t
, 
vm_off£t_t
, 
vm_size_t
, vm_offset_t *);

360 
vm_m≠_öhîô
 (
vm_m≠_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_öhîô_t
);

361 
vm_m≠_öô
 (
vm_m≠
 *, 
vm_off£t_t
, vm_offset_t);

362 
vm_m≠_ö£π
 (
vm_m≠_t
, 
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_¥Ÿ_t
, vm_prot_t, );

363 
vm_m≠_lookup
 (
vm_m≠_t
 *, 
vm_off£t_t
, 
vm_¥Ÿ_t
, 
vm_m≠_íåy_t
 *, 
vm_obje˘_t
 *,

364 
vm_pödex_t
 *, 
vm_¥Ÿ_t
 *, 
boﬁón_t
 *);

365 
vm_m≠_lookup_locked
(
vm_m≠_t
 *, 
vm_off£t_t
, 
vm_¥Ÿ_t
, 
vm_m≠_íåy_t
 *, 
vm_obje˘_t
 *,

366 
vm_pödex_t
 *, 
vm_¥Ÿ_t
 *, 
boﬁón_t
 *);

367 
vm_m≠_lookup_d⁄e
 (
vm_m≠_t
, 
vm_m≠_íåy_t
);

368 
boﬁón_t
 
vm_m≠_lookup_íåy
 (
vm_m≠_t
, 
vm_off£t_t
, 
vm_m≠_íåy_t
 *);

369 
vm_m≠_pm≠_íãr
(
vm_m≠_t
 
m≠
, 
vm_off£t_t
 
addr
, 
vm_¥Ÿ_t
 
¥Ÿ
,

370 
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
pödex
, 
vm_size_t
 
size
, 
Êags
);

371 
vm_m≠_¥Ÿe˘
 (
vm_m≠_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_¥Ÿ_t
, 
boﬁón_t
);

372 
vm_m≠_ªmove
 (
vm_m≠_t
, 
vm_off£t_t
, vm_offset_t);

373 
vm_m≠_°¨tup
 ();

374 
vm_m≠_subm≠
 (
vm_m≠_t
, 
vm_off£t_t
, vm_offset_t, vm_map_t);

375 
vm_m≠_sync
(
vm_m≠_t
, 
vm_off£t_t
, vm_off£t_t, 
boﬁón_t
, boolean_t);

376 
vm_m≠_madvi£
 (
vm_m≠_t
, 
vm_off£t_t
, vm_offset_t, );

377 
vm_m≠_sim∂ify_íåy
 (
vm_m≠_t
, 
vm_m≠_íåy_t
);

378 
vm_öô2
 ();

379 
vm_m≠_°ack
 (
vm_m≠_t
, 
vm_off£t_t
, 
vm_size_t
, 
vm_¥Ÿ_t
, vm_prot_t, );

380 
vm_m≠_grow°ack
 (
¥oc
 *
p
, 
vm_off£t_t
 
addr
);

381 
vm_m≠_unwúe
(
vm_m≠_t
 
m≠
, 
vm_off£t_t
 
°¨t
, vm_off£t_à
íd
,

382 
Êags
);

383 
vm_m≠_wúe
(
vm_m≠_t
 
m≠
, 
vm_off£t_t
 
°¨t
, vm_off£t_à
íd
,

384 
Êags
);

385 
vm•a˚_sw≠_cou¡
(
vm•a˚
 *vmspace);

	@/usr/include/vm/vm_param.h

67 #i‚def 
_VM_PARAM_


68 
	#_VM_PARAM_


	)

70 
	~<machöe/vm∑øm.h
>

75 
	#VM_TOTAL
 1

	)

76 
	#VM_METER
 
VM_TOTAL


	)

77 
	#VM_LOADAVG
 2

	)

78 
	#VM_V_FREE_MIN
 3

	)

79 
	#VM_V_FREE_TARGET
 4

	)

80 
	#VM_V_FREE_RESERVED
 5

	)

81 
	#VM_V_INACTIVE_TARGET
 6

	)

82 
	#VM_V_CACHE_MIN
 7

	)

83 
	#VM_V_CACHE_MAX
 8

	)

84 
	#VM_V_PAGEOUT_FREE_MIN
 9

	)

85 
	#VM_PAGEOUT_ALGORITHM
 10

	)

86 
	#VM_SWAPPING_ENABLED
 11

	)

87 
	#VM_MAXID
 12

	)

89 
	#CTL_VM_NAMES
 { \

91 { "vmtŸÆ", 
CTLTYPE_STRUCT
 }, \

92 { "lﬂdavg", 
CTLTYPE_STRUCT
 }, \

93 { "v_‰ì_mö", 
CTLTYPE_UINT
 }, \

94 { "v_‰ì_èrgë", 
CTLTYPE_UINT
 }, \

95 { "v_‰ì_ª£rved", 
CTLTYPE_UINT
 }, \

96 { "v_öa˘ive_èrgë", 
CTLTYPE_UINT
 }, \

97 { "v_ˇche_mö", 
CTLTYPE_UINT
 }, \

98 { "v_ˇche_max", 
CTLTYPE_UINT
 }, \

99 { "v_∑geout_‰ì_mö", 
CTLTYPE_UINT
}, \

100 { "∑geout_Æg‹ôhm", 
CTLTYPE_INT
}, \

101 { "sw≠_íabÀd", 
CTLTYPE_INT
},\

102 }

	)

107 
	#XSWDEV_VERSION
 1

	)

108 
	sxswdev
 {

109 
u_öt
 
	mxsw_vîsi⁄
;

110 
dev_t
 
	mxsw_dev
;

111 
	mxsw_Êags
;

112 
	mxsw_nblks
;

113 
	mxsw_u£d
;

119 
	#KERN_SUCCESS
 0

	)

120 
	#KERN_INVALID_ADDRESS
 1

	)

121 
	#KERN_PROTECTION_FAILURE
 2

	)

122 
	#KERN_NO_SPACE
 3

	)

123 
	#KERN_INVALID_ARGUMENT
 4

	)

124 
	#KERN_FAILURE
 5

	)

125 
	#KERN_RESOURCE_SHORTAGE
 6

	)

126 
	#KERN_NOT_RECEIVER
 7

	)

127 
	#KERN_NO_ACCESS
 8

	)

129 #i‚de‡
ASSEMBLER


130 #ifde‡
_KERNEL


131 
	#num_∑ges
(
x
) \

132 ((
vm_off£t_t
)((((vm_off£t_t)(
x
)Ë+ 
PAGE_MASK
Ë>> 
PAGE_SHIFT
))

	)

133 
maxtsiz
;

134 
dÊdsiz
;

135 
maxdsiz
;

136 
dÊssiz
;

137 
maxssiz
;

138 
sgrowsiz
;

	@/usr/include/bsm/audit.h

33 #i‚def 
_BSM_AUDIT_H


34 
	#_BSM_AUDIT_H


	)

36 
	~<sys/∑øm.h
>

37 
	~<sys/ty≥s.h
>

39 
	#AUDIT_RECORD_MAGIC
 0x828a0f1b

	)

40 
	#MAX_AUDIT_RECORDS
 20

	)

41 
	#MAXAUDITDATA
 (0x8000 - 1)

	)

42 
	#MAX_AUDIT_RECORD_SIZE
 
MAXAUDITDATA


	)

43 
	#MIN_AUDIT_FILE_SIZE
 (512 * 1024)

	)

51 
	#AUDIT_HARD_LIMIT_FREE_BLOCKS
 4

	)

56 
	#AUDIT_TRIGGER_MIN
 1

	)

57 
	#AUDIT_TRIGGER_LOW_SPACE
 1

	)

58 
	#AUDIT_TRIGGER_ROTATE_KERNEL
 2

	)

59 
	#AUDIT_TRIGGER_READ_FILE
 3

	)

60 
	#AUDIT_TRIGGER_CLOSE_AND_DIE
 4

	)

61 
	#AUDIT_TRIGGER_NO_SPACE
 5

	)

62 
	#AUDIT_TRIGGER_ROTATE_USER
 6

	)

63 
	#AUDIT_TRIGGER_INITIALIZE
 7

	)

64 
	#AUDIT_TRIGGER_EXPIRE_TRAILS
 8

	)

65 
	#AUDIT_TRIGGER_MAX
 8

	)

70 
	#AUDITDEV_FILENAME
 "audô"

	)

71 
	#AUDIT_TRIGGER_FILE
 ("/dev/" 
AUDITDEV_FILENAME
)

	)

76 
	#AU_DEFAUDITID
 (
uid_t
)(-1)

	)

77 
	#AU_DEFAUDITSID
 0

	)

78 
	#AU_ASSIGN_ASID
 -1

	)

83 
	#AT_IPC_MSG
 ((
u_ch¨
)1Ë

	)

84 
	#AT_IPC_SEM
 ((
u_ch¨
)2Ë

	)

85 
	#AT_IPC_SHM
 ((
u_ch¨
)3Ë

	)

90 
	#AUC_UNSET
 0

	)

91 
	#AUC_AUDITING
 1

	)

92 
	#AUC_NOAUDIT
 2

	)

93 
	#AUC_DISABLED
 -1

	)

98 
	#A_OLDGETPOLICY
 2

	)

99 
	#A_OLDSETPOLICY
 3

	)

100 
	#A_GETKMASK
 4

	)

101 
	#A_SETKMASK
 5

	)

102 
	#A_OLDGETQCTRL
 6

	)

103 
	#A_OLDSETQCTRL
 7

	)

104 
	#A_GETCWD
 8

	)

105 
	#A_GETCAR
 9

	)

106 
	#A_GETSTAT
 12

	)

107 
	#A_SETSTAT
 13

	)

108 
	#A_SETUMASK
 14

	)

109 
	#A_SETSMASK
 15

	)

110 
	#A_OLDGETCOND
 20

	)

111 
	#A_OLDSETCOND
 21

	)

112 
	#A_GETCLASS
 22

	)

113 
	#A_SETCLASS
 23

	)

114 
	#A_GETPINFO
 24

	)

115 
	#A_SETPMASK
 25

	)

116 
	#A_SETFSIZE
 26

	)

117 
	#A_GETFSIZE
 27

	)

118 
	#A_GETPINFO_ADDR
 28

	)

119 
	#A_GETKAUDIT
 29

	)

120 
	#A_SETKAUDIT
 30

	)

121 
	#A_SENDTRIGGER
 31

	)

122 
	#A_GETSINFO_ADDR
 32

	)

123 
	#A_GETPOLICY
 33

	)

124 
	#A_SETPOLICY
 34

	)

125 
	#A_GETQCTRL
 35

	)

126 
	#A_SETQCTRL
 36

	)

127 
	#A_GETCOND
 37

	)

128 
	#A_SETCOND
 38

	)

133 
	#AUDIT_CNT
 0x0001

	)

134 
	#AUDIT_AHLT
 0x0002

	)

135 
	#AUDIT_ARGV
 0x0004

	)

136 
	#AUDIT_ARGE
 0x0008

	)

137 
	#AUDIT_SEQ
 0x0010

	)

138 
	#AUDIT_WINDATA
 0x0020

	)

139 
	#AUDIT_USER
 0x0040

	)

140 
	#AUDIT_GROUP
 0x0080

	)

141 
	#AUDIT_TRAIL
 0x0100

	)

142 
	#AUDIT_PATH
 0x0200

	)

143 
	#AUDIT_SCNT
 0x0400

	)

144 
	#AUDIT_PUBLIC
 0x0800

	)

145 
	#AUDIT_ZONENAME
 0x1000

	)

146 
	#AUDIT_PERZONE
 0x2000

	)

151 
	#AQ_HIWATER
 100

	)

152 
	#AQ_MAXHIGH
 10000

	)

153 
	#AQ_LOWATER
 10

	)

154 
	#AQ_BUFSZ
 
MAXAUDITDATA


	)

155 
	#AQ_MAXBUFSZ
 1048576

	)

160 
	#AU_FS_MINFREE
 20

	)

166 
	#AU_IPv4
 4

	)

167 
	#AU_IPv6
 16

	)

169 
__BEGIN_DECLS


171 
uid_t
 
	tau_id_t
;

172 
pid_t
 
	tau_asid_t
;

173 
u_öt16_t
 
	tau_evít_t
;

174 
u_öt16_t
 
	tau_emod_t
;

175 
u_öt32_t
 
	tau_˛ass_t
;

176 
u_öt64_t
 
	tau_asÊgs_t
 
	t__©åibuã__
 ((
	tÆig√d
 (8)));

178 
	sau_tid
 {

179 
dev_t
 
	mp‹t
;

180 
u_öt32_t
 
	mmachöe
;

182 
au_tid
 
	tau_tid_t
;

184 
	sau_tid_addr
 {

185 
dev_t
 
	m©_p‹t
;

186 
u_öt32_t
 
	m©_ty≥
;

187 
u_öt32_t
 
	m©_addr
[4];

189 
au_tid_addr
 
	tau_tid_addr_t
;

191 
	sau_mask
 {

192 
	mam_suc˚ss
;

193 
	mam_Áûuª
;

195 
au_mask
 
	tau_mask_t
;

197 
	saudôöfo
 {

198 
au_id_t
 
	mai_auid
;

199 
au_mask_t
 
	mai_mask
;

200 
au_tid_t
 
	mai_ãrmid
;

201 
au_asid_t
 
	mai_asid
;

203 
audôöfo
 
	taudôöfo_t
;

205 
	saudôöfo_addr
 {

206 
au_id_t
 
	mai_auid
;

207 
au_mask_t
 
	mai_mask
;

208 
au_tid_addr_t
 
	mai_ãrmid
;

209 
au_asid_t
 
	mai_asid
;

210 
au_asÊgs_t
 
	mai_Êags
;

212 
audôöfo_addr
 
	taudôöfo_addr_t
;

214 
	saudôpöfo
 {

215 
pid_t
 
	m≠_pid
;

216 
au_id_t
 
	m≠_auid
;

217 
au_mask_t
 
	m≠_mask
;

218 
au_tid_t
 
	m≠_ãrmid
;

219 
au_asid_t
 
	m≠_asid
;

221 
audôpöfo
 
	taudôpöfo_t
;

223 
	saudôpöfo_addr
 {

224 
pid_t
 
	m≠_pid
;

225 
au_id_t
 
	m≠_auid
;

226 
au_mask_t
 
	m≠_mask
;

227 
au_tid_addr_t
 
	m≠_ãrmid
;

228 
au_asid_t
 
	m≠_asid
;

229 
au_asÊgs_t
 
	m≠_Êags
;

231 
audôpöfo_addr
 
	taudôpöfo_addr_t
;

233 
	sau_£ssi⁄
 {

234 
audôöfo_addr_t
 *
	mas_aü_p
;

235 
au_mask_t
 
	mas_mask
;

237 
au_£ssi⁄
 
	tau_£ssi⁄_t
;

242 
au_tokí
 
	ttokí_t
;

252 
	sau_q˘æ
 {

253 
	maq_hiw©î
;

256 
	maq_low©î
;

259 
	maq_bufsz
;

260 
	maq_dñay
;

261 
	maq_mö‰ì
;

263 
au_q˘æ
 
	tau_q˘æ_t
;

268 
	saudô_°©
 {

269 
	mas_vîsi⁄
;

270 
	mas_numevít
;

271 
	mas_gíî©ed
;

272 
	mas_n⁄©åib
;

273 
	mas_kî√l
;

274 
	mas_audô
;

275 
	mas_audô˘l
;

276 
	mas_íqueue
;

277 
	mas_wrôãn
;

278 
	mas_wblocked
;

279 
	mas_rblocked
;

280 
	mas_dr›≥d
;

281 
	mas_tŸÆsize
;

282 
	mas_memu£d
;

284 
audô_°©
 
	tau_°©_t
;

289 
	saudô_f°©
 {

290 
u_öt64_t
 
	maf_fûesz
;

291 
u_öt64_t
 
	maf_cuºsz
;

293 
audô_f°©
 
	tau_f°©_t
;

298 
	sau_ev˛ass_m≠
 {

299 
au_evít_t
 
	mec_numbî
;

300 
au_˛ass_t
 
	mec_˛ass
;

302 
au_ev˛ass_m≠
 
	tau_ev˛ass_m≠_t
;

307 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
KERNEL
)

308 
audô
(const *, );

309 
audô⁄
(, *, );

310 
audô˘l
(const *);

311 
gëauid
(
au_id_t
 *);

312 
£èuid
(c⁄° 
au_id_t
 *);

313 
gëaudô
(
audôöfo
 *);

314 
£èudô
(c⁄° 
audôöfo
 *);

315 
gëaudô_addr
(
audôöfo_addr
 *, );

316 
£èudô_addr
(c⁄° 
audôöfo_addr
 *, );

318 #ifde‡
__APPLE_API_PRIVATE


319 
	~<mach/p‹t.h
>

320 
mach_p‹t_«me_t
 
audô_£ssi⁄_£lf
();

321 
au_asid_t
 
audô_£ssi⁄_joö
(
mach_p‹t_«me_t
 
p‹t
);

326 
	g__END_DECLS


	@/usr/include/machine/_types.h

39 #i‚de‡
_MACHINE__TYPES_H_


40 
	#_MACHINE__TYPES_H_


	)

42 #i‚de‡
_SYS_CDEFS_H_


43 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 
	#__NO_STRICT_ALIGNMENT


	)

51 
__sig√d
 
	t__öt8_t
;

52 
	t__uöt8_t
;

53 
	t__öt16_t
;

54 
	t__uöt16_t
;

55 
	t__öt32_t
;

56 
	t__uöt32_t
;

57 
	t__öt64_t
;

58 
	t__uöt64_t
;

63 
__öt32_t
 
	t__˛ock_t
;

64 
	t__˝umask_t
;

65 
__öt64_t
 
	t__¸ôiˇl_t
;

66 
	t__doubÀ_t
;

67 
	t__Êﬂt_t
;

68 
__öt64_t
 
	t__ötÂå_t
;

69 
__öt64_t
 
	t__ötmax_t
;

70 
__öt64_t
 
	t__öçå_t
;

71 
__öt32_t
 
	t__öt_Á°8_t
;

72 
__öt32_t
 
	t__öt_Á°16_t
;

73 
__öt32_t
 
	t__öt_Á°32_t
;

74 
__öt64_t
 
	t__öt_Á°64_t
;

75 
__öt8_t
 
	t__öt_Àa°8_t
;

76 
__öt16_t
 
	t__öt_Àa°16_t
;

77 
__öt32_t
 
	t__öt_Àa°32_t
;

78 
__öt64_t
 
	t__öt_Àa°64_t
;

79 
__öt64_t
 
	t__±rdiff_t
;

80 
__öt64_t
 
	t__ªgi°î_t
;

81 
__öt64_t
 
	t__£gsz_t
;

82 
__uöt64_t
 
	t__size_t
;

83 
__öt64_t
 
	t__ssize_t
;

84 
__öt64_t
 
	t__time_t
;

85 
__uöt64_t
 
	t__uötÂå_t
;

86 
__uöt64_t
 
	t__uötmax_t
;

87 
__uöt64_t
 
	t__uöçå_t
;

88 
__uöt32_t
 
	t__uöt_Á°8_t
;

89 
__uöt32_t
 
	t__uöt_Á°16_t
;

90 
__uöt32_t
 
	t__uöt_Á°32_t
;

91 
__uöt64_t
 
	t__uöt_Á°64_t
;

92 
__uöt8_t
 
	t__uöt_Àa°8_t
;

93 
__uöt16_t
 
	t__uöt_Àa°16_t
;

94 
__uöt32_t
 
	t__uöt_Àa°32_t
;

95 
__uöt64_t
 
	t__uöt_Àa°64_t
;

96 
__uöt64_t
 
	t__u_ªgi°î_t
;

97 
__uöt64_t
 
	t__vm_off£t_t
;

98 
__öt64_t
 
	t__vm_ooff£t_t
;

99 
__uöt64_t
 
	t__vm_∑ddr_t
;

100 
__uöt64_t
 
	t__vm_pödex_t
;

101 
__uöt64_t
 
	t__vm_size_t
;

106 #ifde‡
__GNUCLIKE_BUILTIN_VARARGS


107 
__buûtö_va_li°
 
	t__va_li°
;

108 #ñi‡
deföed
(
löt
)

109 * 
	t__va_li°
;

111 #i‡
deföed
(
__GNUC_VA_LIST_COMPATIBILITY
Ë&& !deföed(
__GNUC_VA_LIST
) \

112 && !
	$deföed
(
__NO_GNUC_VA_LIST
)

113 
	#__GNUC_VA_LIST


	)

114 
__va_li°
 
	t__gnuc_va_li°
;

	@/usr/include/machine/atomic.h

28 #i‚de‡
_MACHINE_ATOMIC_H_


29 
	#_MACHINE_ATOMIC_H_


	)

31 #i‚de‡
_SYS_CDEFS_H_


32 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


35 
	#mb
(Ë
__asm
 
	`__vﬁ©ûe
("m„n˚;" : : : "mem‹y")

	)

36 
	#wmb
(Ë
__asm
 
	`__vﬁ©ûe
("s„n˚;" : : : "mem‹y")

	)

37 
	#rmb
(Ë
__asm
 
	`__vﬁ©ûe
("l„n˚;" : : : "mem‹y")

	)

74 #i‡
deföed
(
KLD_MODULE
Ë|| !deföed(
__GNUCLIKE_ASM
)

75 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

76 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
); \

77 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

79 
©omic_cmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà
exp
, u_öà
§c
);

80 
©omic_cmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g 
exp
, u_l⁄g 
§c
);

81 
u_öt
 
©omic_„tchadd_öt
(vﬁ©ûêu_öà*
p
, u_öà
v
);

82 
u_l⁄g
 
©omic_„tchadd_l⁄g
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
v
);

84 
	#ATOMIC_STORE_LOAD
(
TYPE
, 
LOP
, 
SOP
) \

85 
u_
##
TYPE
 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûêu_##TYPE *
p
); \

86 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

94 #i‡
deföed
(
SMP
Ë|| !deföed(
_KERNEL
)

95 
	#MPLOCKED
 "lock ; "

	)

97 
	#MPLOCKED


	)

105 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

106 
__ölöe
 \

107 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

109 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

110 : "=m" (*
p
) \

111 : 
	`CONS
 (
V
), "m" (*
p
) \

115 
__ölöe
 \

116 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

118 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

119 : "=m" (*
p
) \

120 : 
	`CONS
 (
V
), "m" (*
p
) \

123 
__hack


	)

133 
__ölöe
 

134 
	$©omic_cmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà
exp
, u_öà
§c
)

136 
u_ch¨
 
ªs
;

138 
__asm
 
	`__vﬁ©ûe
(

139 " " 
MPLOCKED
 " "

144 : "˜" (
ªs
),

145 "=m" (*
d°
)

146 : "r" (
§c
),

147 "a" (
exp
),

148 "m" (*
d°
)

151  (
ªs
);

152 
	}
}

154 
__ölöe
 

155 
	$©omic_cmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g 
exp
, u_l⁄g 
§c
)

157 
u_ch¨
 
ªs
;

159 
__asm
 
	`__vﬁ©ûe
(

160 " " 
MPLOCKED
 " "

165 : "˜" (
ªs
),

166 "=m" (*
d°
)

167 : "r" (
§c
),

168 "a" (
exp
),

169 "m" (*
d°
)

172  (
ªs
);

173 
	}
}

179 
__ölöe
 
u_öt


180 
	$©omic_„tchadd_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

183 
__asm
 
	`__vﬁ©ûe
(

184 " " 
MPLOCKED
 " "

187 : "+r" (
v
),

188 "=m" (*
p
)

189 : "m" (*
p
)

191  (
v
);

192 
	}
}

198 
__ölöe
 
u_l⁄g


199 
	$©omic_„tchadd_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
v
)

202 
__asm
 
	`__vﬁ©ûe
(

203 " " 
MPLOCKED
 " "

206 : "+r" (
v
),

207 "=m" (*
p
)

208 : "m" (*
p
)

210  (
v
);

211 
	}
}

213 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
SMP
)

222 
	#ATOMIC_STORE_LOAD
(
TYPE
, 
LOP
, 
SOP
) \

223 
__ölöe
 
u_
##
TYPE
 \

224 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
) \

226 
u_
##
TYPE
 
tmp
; \

228 
tmp
 = *
p
; \

229 
__asm
 
	`__vﬁ©ûe
 ("" : : : "memory"); \

230  (
tmp
); \

233 
__ölöe
 \

234 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

236 
__asm
 
	`__vﬁ©ûe
 ("" : : : "memory"); \

237 *
p
 = 
v
; \

239 
__hack


	)

243 
	#ATOMIC_STORE_LOAD
(
TYPE
, 
LOP
, 
SOP
) \

244 
__ölöe
 
u_
##
TYPE
 \

245 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
) \

247 
u_
##
TYPE
 
ªs
; \

249 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
LOP
 \

250 : "˜" (
ªs
), \

251 "=m" (*
p
) \

252 : "m" (*
p
) \

255  (
ªs
); \

261 
__ölöe
 \

262 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

264 
__asm
 
	`__vﬁ©ûe
(
SOP
 \

265 : "=m" (*
p
), \

266 "+r" (
v
) \

267 : "m" (*
p
) \

270 
__hack


	)

276 
ATOMIC_ASM
(
£t
, , "‹b %b1,%0", "iq", 
v
);

277 
ATOMIC_ASM
(
˛ór
, , "™db %b1,%0", "iq", ~
v
);

278 
ATOMIC_ASM
(
add
, , "addb %b1,%0", "iq", 
v
);

279 
ATOMIC_ASM
(
subåa˘
, , "subb %b1,%0", "iq", 
v
);

281 
ATOMIC_ASM
(
£t
, , "‹w %w1,%0", "ú", 
v
);

282 
ATOMIC_ASM
(
˛ór
, , "™dw %w1,%0", "ú", ~
v
);

283 
ATOMIC_ASM
(
add
, , "addw %w1,%0", "ú", 
v
);

284 
ATOMIC_ASM
(
subåa˘
, , "subw %w1,%0", "ú", 
v
);

286 
ATOMIC_ASM
(
£t
, , "‹»%1,%0", "ú", 
v
);

287 
ATOMIC_ASM
(
˛ór
, , "™d»%1,%0", "ú", ~
v
);

288 
ATOMIC_ASM
(
add
, , "add»%1,%0", "ú", 
v
);

289 
ATOMIC_ASM
(
subåa˘
, , "sub»%1,%0", "ú", 
v
);

291 
ATOMIC_ASM
(
£t
, , "‹q %1,%0", "ú", 
v
);

292 
ATOMIC_ASM
(
˛ór
, , "™dq %1,%0", "ú", ~
v
);

293 
ATOMIC_ASM
(
add
, , "addq %1,%0", "ú", 
v
);

294 
ATOMIC_ASM
(
subåa˘
, , "subq %1,%0", "ú", 
v
);

296 
ATOMIC_STORE_LOAD
(, "cmpxchgb %b0,%1", "xchgb %b1,%0");

297 
ATOMIC_STORE_LOAD
(,"cmpxchgw %w0,%1", "xchgw %w1,%0");

298 
ATOMIC_STORE_LOAD
(, "cmpxchgl %0,%1", "xchgl %1,%0");

299 
ATOMIC_STORE_LOAD
(, "cmpxchgq %0,%1", "xchgq %1,%0");

301 #unde‡
ATOMIC_ASM


302 #unde‡
ATOMIC_STORE_LOAD


304 #i‚de‡
WANT_FUNCTIONS


307 #ifde‡
__GNUCLIKE_ASM


309 
__ölöe
 
u_öt


310 
	$©omic_ªad™d˛ór_öt
(vﬁ©ûê
u_öt
 *
addr
)

312 
u_öt
 
ªs
;

314 
ªs
 = 0;

315 
__asm
 
	`__vﬁ©ûe
(

318 : "+r" (
ªs
),

319 "=m" (*
addr
)

320 : "m" (*
addr
));

322  (
ªs
);

323 
	}
}

325 
__ölöe
 
u_l⁄g


326 
	$©omic_ªad™d˛ór_l⁄g
(vﬁ©ûê
u_l⁄g
 *
addr
)

328 
u_l⁄g
 
ªs
;

330 
ªs
 = 0;

331 
__asm
 
	`__vﬁ©ûe
(

334 : "+r" (
ªs
),

335 "=m" (*
addr
)

336 : "m" (*
addr
));

338  (
ªs
);

339 
	}
}

343 
u_öt
 
©omic_ªad™d˛ór_öt
(vﬁ©ûêu_öà*
addr
);

344 
u_l⁄g
 
©omic_ªad™d˛ór_l⁄g
(vﬁ©ûêu_l⁄g *
addr
);

348 
	#©omic_£t_acq_ch¨
 
©omic_£t_b¨r_ch¨


	)

349 
	#©omic_£t_ªl_ch¨
 
©omic_£t_b¨r_ch¨


	)

350 
	#©omic_˛ór_acq_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

351 
	#©omic_˛ór_ªl_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

352 
	#©omic_add_acq_ch¨
 
©omic_add_b¨r_ch¨


	)

353 
	#©omic_add_ªl_ch¨
 
©omic_add_b¨r_ch¨


	)

354 
	#©omic_subåa˘_acq_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

355 
	#©omic_subåa˘_ªl_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

357 
	#©omic_£t_acq_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

358 
	#©omic_£t_ªl_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

359 
	#©omic_˛ór_acq_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

360 
	#©omic_˛ór_ªl_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

361 
	#©omic_add_acq_sh‹t
 
©omic_add_b¨r_sh‹t


	)

362 
	#©omic_add_ªl_sh‹t
 
©omic_add_b¨r_sh‹t


	)

363 
	#©omic_subåa˘_acq_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

364 
	#©omic_subåa˘_ªl_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

366 
	#©omic_£t_acq_öt
 
©omic_£t_b¨r_öt


	)

367 
	#©omic_£t_ªl_öt
 
©omic_£t_b¨r_öt


	)

368 
	#©omic_˛ór_acq_öt
 
©omic_˛ór_b¨r_öt


	)

369 
	#©omic_˛ór_ªl_öt
 
©omic_˛ór_b¨r_öt


	)

370 
	#©omic_add_acq_öt
 
©omic_add_b¨r_öt


	)

371 
	#©omic_add_ªl_öt
 
©omic_add_b¨r_öt


	)

372 
	#©omic_subåa˘_acq_öt
 
©omic_subåa˘_b¨r_öt


	)

373 
	#©omic_subåa˘_ªl_öt
 
©omic_subåa˘_b¨r_öt


	)

374 
	#©omic_cmp£t_acq_öt
 
©omic_cmp£t_öt


	)

375 
	#©omic_cmp£t_ªl_öt
 
©omic_cmp£t_öt


	)

377 
	#©omic_£t_acq_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

378 
	#©omic_£t_ªl_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

379 
	#©omic_˛ór_acq_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

380 
	#©omic_˛ór_ªl_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

381 
	#©omic_add_acq_l⁄g
 
©omic_add_b¨r_l⁄g


	)

382 
	#©omic_add_ªl_l⁄g
 
©omic_add_b¨r_l⁄g


	)

383 
	#©omic_subåa˘_acq_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

384 
	#©omic_subåa˘_ªl_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

385 
	#©omic_cmp£t_acq_l⁄g
 
©omic_cmp£t_l⁄g


	)

386 
	#©omic_cmp£t_ªl_l⁄g
 
©omic_cmp£t_l⁄g


	)

389 
	#©omic_£t_8
 
©omic_£t_ch¨


	)

390 
	#©omic_£t_acq_8
 
©omic_£t_acq_ch¨


	)

391 
	#©omic_£t_ªl_8
 
©omic_£t_ªl_ch¨


	)

392 
	#©omic_˛ór_8
 
©omic_˛ór_ch¨


	)

393 
	#©omic_˛ór_acq_8
 
©omic_˛ór_acq_ch¨


	)

394 
	#©omic_˛ór_ªl_8
 
©omic_˛ór_ªl_ch¨


	)

395 
	#©omic_add_8
 
©omic_add_ch¨


	)

396 
	#©omic_add_acq_8
 
©omic_add_acq_ch¨


	)

397 
	#©omic_add_ªl_8
 
©omic_add_ªl_ch¨


	)

398 
	#©omic_subåa˘_8
 
©omic_subåa˘_ch¨


	)

399 
	#©omic_subåa˘_acq_8
 
©omic_subåa˘_acq_ch¨


	)

400 
	#©omic_subåa˘_ªl_8
 
©omic_subåa˘_ªl_ch¨


	)

401 
	#©omic_lﬂd_acq_8
 
©omic_lﬂd_acq_ch¨


	)

402 
	#©omic_°‹e_ªl_8
 
©omic_°‹e_ªl_ch¨


	)

405 
	#©omic_£t_16
 
©omic_£t_sh‹t


	)

406 
	#©omic_£t_acq_16
 
©omic_£t_acq_sh‹t


	)

407 
	#©omic_£t_ªl_16
 
©omic_£t_ªl_sh‹t


	)

408 
	#©omic_˛ór_16
 
©omic_˛ór_sh‹t


	)

409 
	#©omic_˛ór_acq_16
 
©omic_˛ór_acq_sh‹t


	)

410 
	#©omic_˛ór_ªl_16
 
©omic_˛ór_ªl_sh‹t


	)

411 
	#©omic_add_16
 
©omic_add_sh‹t


	)

412 
	#©omic_add_acq_16
 
©omic_add_acq_sh‹t


	)

413 
	#©omic_add_ªl_16
 
©omic_add_ªl_sh‹t


	)

414 
	#©omic_subåa˘_16
 
©omic_subåa˘_sh‹t


	)

415 
	#©omic_subåa˘_acq_16
 
©omic_subåa˘_acq_sh‹t


	)

416 
	#©omic_subåa˘_ªl_16
 
©omic_subåa˘_ªl_sh‹t


	)

417 
	#©omic_lﬂd_acq_16
 
©omic_lﬂd_acq_sh‹t


	)

418 
	#©omic_°‹e_ªl_16
 
©omic_°‹e_ªl_sh‹t


	)

421 
	#©omic_£t_32
 
©omic_£t_öt


	)

422 
	#©omic_£t_acq_32
 
©omic_£t_acq_öt


	)

423 
	#©omic_£t_ªl_32
 
©omic_£t_ªl_öt


	)

424 
	#©omic_˛ór_32
 
©omic_˛ór_öt


	)

425 
	#©omic_˛ór_acq_32
 
©omic_˛ór_acq_öt


	)

426 
	#©omic_˛ór_ªl_32
 
©omic_˛ór_ªl_öt


	)

427 
	#©omic_add_32
 
©omic_add_öt


	)

428 
	#©omic_add_acq_32
 
©omic_add_acq_öt


	)

429 
	#©omic_add_ªl_32
 
©omic_add_ªl_öt


	)

430 
	#©omic_subåa˘_32
 
©omic_subåa˘_öt


	)

431 
	#©omic_subåa˘_acq_32
 
©omic_subåa˘_acq_öt


	)

432 
	#©omic_subåa˘_ªl_32
 
©omic_subåa˘_ªl_öt


	)

433 
	#©omic_lﬂd_acq_32
 
©omic_lﬂd_acq_öt


	)

434 
	#©omic_°‹e_ªl_32
 
©omic_°‹e_ªl_öt


	)

435 
	#©omic_cmp£t_32
 
©omic_cmp£t_öt


	)

436 
	#©omic_cmp£t_acq_32
 
©omic_cmp£t_acq_öt


	)

437 
	#©omic_cmp£t_ªl_32
 
©omic_cmp£t_ªl_öt


	)

438 
	#©omic_ªad™d˛ór_32
 
©omic_ªad™d˛ór_öt


	)

439 
	#©omic_„tchadd_32
 
©omic_„tchadd_öt


	)

442 
	#©omic_£t_64
 
©omic_£t_l⁄g


	)

443 
	#©omic_£t_acq_64
 
©omic_£t_acq_l⁄g


	)

444 
	#©omic_£t_ªl_64
 
©omic_£t_ªl_l⁄g


	)

445 
	#©omic_˛ór_64
 
©omic_˛ór_l⁄g


	)

446 
	#©omic_˛ór_acq_64
 
©omic_˛ór_acq_l⁄g


	)

447 
	#©omic_˛ór_ªl_64
 
©omic_˛ór_ªl_l⁄g


	)

448 
	#©omic_add_64
 
©omic_add_l⁄g


	)

449 
	#©omic_add_acq_64
 
©omic_add_acq_l⁄g


	)

450 
	#©omic_add_ªl_64
 
©omic_add_ªl_l⁄g


	)

451 
	#©omic_subåa˘_64
 
©omic_subåa˘_l⁄g


	)

452 
	#©omic_subåa˘_acq_64
 
©omic_subåa˘_acq_l⁄g


	)

453 
	#©omic_subåa˘_ªl_64
 
©omic_subåa˘_ªl_l⁄g


	)

454 
	#©omic_lﬂd_acq_64
 
©omic_lﬂd_acq_l⁄g


	)

455 
	#©omic_°‹e_ªl_64
 
©omic_°‹e_ªl_l⁄g


	)

456 
	#©omic_cmp£t_64
 
©omic_cmp£t_l⁄g


	)

457 
	#©omic_cmp£t_acq_64
 
©omic_cmp£t_acq_l⁄g


	)

458 
	#©omic_cmp£t_ªl_64
 
©omic_cmp£t_ªl_l⁄g


	)

459 
	#©omic_ªad™d˛ór_64
 
©omic_ªad™d˛ór_l⁄g


	)

462 
	#©omic_£t_±r
 
©omic_£t_l⁄g


	)

463 
	#©omic_£t_acq_±r
 
©omic_£t_acq_l⁄g


	)

464 
	#©omic_£t_ªl_±r
 
©omic_£t_ªl_l⁄g


	)

465 
	#©omic_˛ór_±r
 
©omic_˛ór_l⁄g


	)

466 
	#©omic_˛ór_acq_±r
 
©omic_˛ór_acq_l⁄g


	)

467 
	#©omic_˛ór_ªl_±r
 
©omic_˛ór_ªl_l⁄g


	)

468 
	#©omic_add_±r
 
©omic_add_l⁄g


	)

469 
	#©omic_add_acq_±r
 
©omic_add_acq_l⁄g


	)

470 
	#©omic_add_ªl_±r
 
©omic_add_ªl_l⁄g


	)

471 
	#©omic_subåa˘_±r
 
©omic_subåa˘_l⁄g


	)

472 
	#©omic_subåa˘_acq_±r
 
©omic_subåa˘_acq_l⁄g


	)

473 
	#©omic_subåa˘_ªl_±r
 
©omic_subåa˘_ªl_l⁄g


	)

474 
	#©omic_lﬂd_acq_±r
 
©omic_lﬂd_acq_l⁄g


	)

475 
	#©omic_°‹e_ªl_±r
 
©omic_°‹e_ªl_l⁄g


	)

476 
	#©omic_cmp£t_±r
 
©omic_cmp£t_l⁄g


	)

477 
	#©omic_cmp£t_acq_±r
 
©omic_cmp£t_acq_l⁄g


	)

478 
	#©omic_cmp£t_ªl_±r
 
©omic_cmp£t_ªl_l⁄g


	)

479 
	#©omic_ªad™d˛ór_±r
 
©omic_ªad™d˛ór_l⁄g


	)

	@/usr/include/machine/cpufunc.h

39 #i‚de‡
_MACHINE_CPUFUNC_H_


40 
	#_MACHINE_CPUFUNC_H_


	)

42 #i‚de‡
_SYS_CDEFS_H_


43 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 
	gªgi⁄_des¸ùt‹
;

48 
	#ªadb
(
va
Ë(*(vﬁ©ûê
u_öt8_t
 *Ë(va))

	)

49 
	#ªadw
(
va
Ë(*(vﬁ©ûê
u_öt16_t
 *Ë(va))

	)

50 
	#ªadl
(
va
Ë(*(vﬁ©ûê
u_öt32_t
 *Ë(va))

	)

51 
	#ªadq
(
va
Ë(*(vﬁ©ûê
u_öt64_t
 *Ë(va))

	)

53 
	#wrôeb
(
va
, 
d
Ë(*(vﬁ©ûê
u_öt8_t
 *Ë(vaË(d))

	)

54 
	#wrôew
(
va
, 
d
Ë(*(vﬁ©ûê
u_öt16_t
 *Ë(vaË(d))

	)

55 
	#wrôñ
(
va
, 
d
Ë(*(vﬁ©ûê
u_öt32_t
 *Ë(vaË(d))

	)

56 
	#wrôeq
(
va
, 
d
Ë(*(vﬁ©ûê
u_öt64_t
 *Ë(vaË(d))

	)

58 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__CC_SUPPORTS___INLINE
)

60 
__ölöe
 

61 
	$bªakpoöt
()

63 
__asm
 
	`__vﬁ©ûe
("int $3");

64 
	}
}

66 
__ölöe
 
u_öt


67 
	$bsÊ
(
u_öt
 
mask
)

69 
u_öt
 
ªsu…
;

71 
__asm
 
	`__vﬁ©ûe
("bsÊ %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

72  (
ªsu…
);

73 
	}
}

75 
__ölöe
 
u_l⁄g


76 
	$bsfq
(
u_l⁄g
 
mask
)

78 
u_l⁄g
 
ªsu…
;

80 
__asm
 
	`__vﬁ©ûe
("bsfq %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

81  (
ªsu…
);

82 
	}
}

84 
__ölöe
 
u_öt


85 
	$b§l
(
u_öt
 
mask
)

87 
u_öt
 
ªsu…
;

89 
__asm
 
	`__vﬁ©ûe
("b§»%1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

90  (
ªsu…
);

91 
	}
}

93 
__ölöe
 
u_l⁄g


94 
	$b§q
(
u_l⁄g
 
mask
)

96 
u_l⁄g
 
ªsu…
;

98 
__asm
 
	`__vﬁ©ûe
("b§q %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

99  (
ªsu…
);

100 
	}
}

102 
__ölöe
 

103 
	$˛Êush
(
u_l⁄g
 
addr
)

106 
__asm
 
	`__vﬁ©ûe
("˛Êush %0" : : "m" (*(*)
addr
));

107 
	}
}

109 
__ölöe
 

110 
	$dißbÀ_öå
()

112 
__asm
 
	`__vﬁ©ûe
("cli" : : : "memory");

113 
	}
}

115 
__ölöe
 

116 
	$do_˝uid
(
u_öt
 
ax
, u_öà*
p
)

118 
__asm
 
	`__vﬁ©ûe
("cpuid"

119 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

120 : "0" (
ax
));

121 
	}
}

123 
__ölöe
 

124 
	$˝uid_cou¡
(
u_öt
 
ax
, u_öà
cx
, u_öà*
p
)

126 
__asm
 
	`__vﬁ©ûe
("cpuid"

127 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

128 : "0" (
ax
), "c" (
cx
));

129 
	}
}

131 
__ölöe
 

132 
	$íabÀ_öå
()

134 
__asm
 
	`__vﬁ©ûe
("sti");

135 
	}
}

137 #ifde‡
_KERNEL


139 
	#HAVE_INLINE_FFS


	)

140 
	#ffs
(
x
Ë
	`__buûtö_ffs
(x)

	)

142 
	#HAVE_INLINE_FFSL


	)

144 
__ölöe
 

145 
	$ff¶
(
mask
)

147  (
mask
 =0 ? mask : ()
	`bsfq
((
u_l⁄g
)mask) + 1);

148 
	}
}

150 
	#HAVE_INLINE_FLS


	)

152 
__ölöe
 

153 
	$Ês
(
mask
)

155  (
mask
 =0 ? mask : ()
	`b§l
((
u_öt
)mask) + 1);

156 
	}
}

158 
	#HAVE_INLINE_FLSL


	)

160 
__ölöe
 

161 
	$Ê¶
(
mask
)

163  (
mask
 =0 ? mask : ()
	`b§q
((
u_l⁄g
)mask) + 1);

164 
	}
}

168 
__ölöe
 

169 
	$hÆt
()

171 
__asm
 
	`__vﬁ©ûe
("hlt");

172 
	}
}

174 
__ölöe
 
u_ch¨


175 
	$öb
(
u_öt
 
p‹t
)

177 
u_ch¨
 
d©a
;

179 
__asm
 vﬁ©ûe("öb %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

180  (
d©a
);

181 
	}
}

183 
__ölöe
 
u_öt


184 
	$öl
(
u_öt
 
p‹t
)

186 
u_öt
 
d©a
;

188 
__asm
 vﬁ©ûe("ö»%w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

189  (
d©a
);

190 
	}
}

192 
__ölöe
 

193 
	$ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
)

195 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insb"

196 : "+D" (
addr
), "+c" (
˙t
)

197 : "d" (
p‹t
)

199 
	}
}

201 
__ölöe
 

202 
	$ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
)

204 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insw"

205 : "+D" (
addr
), "+c" (
˙t
)

206 : "d" (
p‹t
)

208 
	}
}

210 
__ölöe
 

211 
	$ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
)

213 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insl"

214 : "+D" (
addr
), "+c" (
˙t
)

215 : "d" (
p‹t
)

217 
	}
}

219 
__ölöe
 

220 
	$övd
()

222 
__asm
 
	`__vﬁ©ûe
("invd");

223 
	}
}

225 
__ölöe
 
u_sh‹t


226 
	$öw
(
u_öt
 
p‹t
)

228 
u_sh‹t
 
d©a
;

230 
__asm
 vﬁ©ûe("öw %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

231  (
d©a
);

232 
	}
}

234 
__ölöe
 

235 
	$outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
)

237 
__asm
 vﬁ©ûe("outb %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

238 
	}
}

240 
__ölöe
 

241 
	$oué
(
u_öt
 
p‹t
, u_öà
d©a
)

243 
__asm
 vﬁ©ûe("oué %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

244 
	}
}

246 
__ölöe
 

247 
	$outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

249 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsb"

250 : "+S" (
addr
), "+c" (
˙t
)

251 : "d" (
p‹t
));

252 
	}
}

254 
__ölöe
 

255 
	$outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

257 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsw"

258 : "+S" (
addr
), "+c" (
˙t
)

259 : "d" (
p‹t
));

260 
	}
}

262 
__ölöe
 

263 
	$out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
)

265 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsl"

266 : "+S" (
addr
), "+c" (
˙t
)

267 : "d" (
p‹t
));

268 
	}
}

270 
__ölöe
 

271 
	$outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
)

273 
__asm
 vﬁ©ûe("outw %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

274 
	}
}

276 
__ölöe
 

277 
	$m„n˚
()

280 
__asm
 
	`__vﬁ©ûe
("mfence" : : : "memory");

281 
	}
}

283 
__ölöe
 

284 
	$ü32_∑u£
()

286 
__asm
 
	`__vﬁ©ûe
("pause");

287 
	}
}

289 
__ölöe
 
u_l⁄g


290 
	$ªad_rÊags
()

292 
u_l⁄g
 
rf
;

294 
__asm
 
	`__vﬁ©ûe
("pushfq;Ö›q %0" : "Ù" (
rf
));

295  (
rf
);

296 
	}
}

298 
__ölöe
 
u_öt64_t


299 
	$rdm§
(
u_öt
 
m§
)

301 
u_öt32_t
 
low
, 
high
;

303 
__asm
 
	`__vﬁ©ûe
("rdm§" : "˜" (
low
), "=d" (
high
Ë: "c" (
m§
));

304  (
low
 | ((
u_öt64_t
)
high
 << 32));

305 
	}
}

307 
__ölöe
 
u_öt64_t


308 
	$rdpmc
(
u_öt
 
pmc
)

310 
u_öt32_t
 
low
, 
high
;

312 
__asm
 
	`__vﬁ©ûe
("rdpmc" : "˜" (
low
), "=d" (
high
Ë: "c" (
pmc
));

313  (
low
 | ((
u_öt64_t
)
high
 << 32));

314 
	}
}

316 
__ölöe
 
u_öt64_t


317 
	$rdtsc
()

319 
u_öt32_t
 
low
, 
high
;

321 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "˜" (
low
), "=d" (
high
));

322  (
low
 | ((
u_öt64_t
)
high
 << 32));

323 
	}
}

325 
__ölöe
 

326 
	$wbövd
()

328 
__asm
 
	`__vﬁ©ûe
("wbinvd");

329 
	}
}

331 
__ölöe
 

332 
	$wrôe_rÊags
(
u_l⁄g
 
rf
)

334 
__asm
 
	`__vﬁ©ûe
("pushq %0;Ö›fq" : : "r" (
rf
));

335 
	}
}

337 
__ölöe
 

338 
	$wrm§
(
u_öt
 
m§
, 
u_öt64_t
 
√wvÆ
)

340 
u_öt32_t
 
low
, 
high
;

342 
low
 = 
√wvÆ
;

343 
high
 = 
√wvÆ
 >> 32;

344 
__asm
 
	`__vﬁ©ûe
("wrm§" : : "a" (
low
), "d" (
high
), "c" (
m§
));

345 
	}
}

347 
__ölöe
 

348 
	$lﬂd_¸0
(
u_l⁄g
 
d©a
)

351 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸0" : : "r" (
d©a
));

352 
	}
}

354 
__ölöe
 
u_l⁄g


355 
	$r¸0
()

357 
u_l⁄g
 
d©a
;

359 
__asm
 
	`__vﬁ©ûe
("movq %%¸0,%0" : "Ù" (
d©a
));

360  (
d©a
);

361 
	}
}

363 
__ölöe
 
u_l⁄g


364 
	$r¸2
()

366 
u_l⁄g
 
d©a
;

368 
__asm
 
	`__vﬁ©ûe
("movq %%¸2,%0" : "Ù" (
d©a
));

369  (
d©a
);

370 
	}
}

372 
__ölöe
 

373 
	$lﬂd_¸3
(
u_l⁄g
 
d©a
)

376 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸3" : : "r" (
d©a
) : "memory");

377 
	}
}

379 
__ölöe
 
u_l⁄g


380 
	$r¸3
()

382 
u_l⁄g
 
d©a
;

384 
__asm
 
	`__vﬁ©ûe
("movq %%¸3,%0" : "Ù" (
d©a
));

385  (
d©a
);

386 
	}
}

388 
__ölöe
 

389 
	$lﬂd_¸4
(
u_l⁄g
 
d©a
)

391 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸4" : : "r" (
d©a
));

392 
	}
}

394 
__ölöe
 
u_l⁄g


395 
	$r¸4
()

397 
u_l⁄g
 
d©a
;

399 
__asm
 
	`__vﬁ©ûe
("movq %%¸4,%0" : "Ù" (
d©a
));

400  (
d©a
);

401 
	}
}

406 
__ölöe
 

407 
	$öv…lb
()

410 
	`lﬂd_¸3
(
	`r¸3
());

411 
	}
}

417 
__ölöe
 

418 
	$övÕg
(
u_l⁄g
 
addr
)

421 
__asm
 
	`__vﬁ©ûe
("övÕg %0" : : "m" (*(*)
addr
) : "memory");

422 
	}
}

424 
__ölöe
 
u_öt


425 
	$rfs
()

427 
u_öt
 
£l
;

428 
__asm
 
	`__vﬁ©ûe
("mov %%fs,%0" : "Ùm" (
£l
));

429  (
£l
);

430 
	}
}

432 
__ölöe
 
u_öt


433 
	$rgs
()

435 
u_öt
 
£l
;

436 
__asm
 
	`__vﬁ©ûe
("mov %%gs,%0" : "Ùm" (
£l
));

437  (
£l
);

438 
	}
}

440 
__ölöe
 
u_öt


441 
	$rss
()

443 
u_öt
 
£l
;

444 
__asm
 
	`__vﬁ©ûe
("mov %%ss,%0" : "Ùm" (
£l
));

445  (
£l
);

446 
	}
}

448 
__ölöe
 

449 
	$lﬂd_ds
(
u_öt
 
£l
)

451 
__asm
 
	`__vﬁ©ûe
("mov %0,%%ds" : : "rm" (
£l
));

452 
	}
}

454 
__ölöe
 

455 
	$lﬂd_es
(
u_öt
 
£l
)

457 
__asm
 
	`__vﬁ©ûe
("mov %0,%%es" : : "rm" (
£l
));

458 
	}
}

460 
__ölöe
 

461 
	$˝u_m⁄ô‹
(c⁄° *
addr
, 
exãnsi⁄s
, 
höts
)

463 
__asm
 
	`__vﬁ©ûe
("monitor;"

464 : :"a" (
addr
), "c" (
exãnsi⁄s
), "d"(
höts
));

465 
	}
}

467 
__ölöe
 

468 
	$˝u_mwaô
(
exãnsi⁄s
, 
höts
)

470 
__asm
 
	`__vﬁ©ûe
("mwaô;" : :"a" (
höts
), "c" (
exãnsi⁄s
));

471 
	}
}

473 #ifde‡
_KERNEL


475 #i‚def 
MSR_FSBASE


476 
	#MSR_FSBASE
 0xc0000100

	)

478 
__ölöe
 

479 
	$lﬂd_fs
(
u_öt
 
£l
)

482 
__asm
 
	`__vﬁ©ûe
("rdmsr; mov %0,%%fs; wrmsr"

483 : : "rm" (
£l
), "c" (
MSR_FSBASE
) : "eax", "edx");

484 
	}
}

486 #i‚def 
MSR_GSBASE


487 
	#MSR_GSBASE
 0xc0000101

	)

489 
__ölöe
 

490 
	$lﬂd_gs
(
u_öt
 
£l
)

497 
__asm
 
	`__vﬁ©ûe
("pushfq; cli;Ñdmsr; mov %0,%%gs; wrmsr;Öopfq"

498 : : "rm" (
£l
), "c" (
MSR_GSBASE
) : "eax", "edx");

499 
	}
}

502 
__ölöe
 

503 
	$lﬂd_fs
(
u_öt
 
£l
)

505 
__asm
 
	`__vﬁ©ûe
("mov %0,%%fs" : : "rm" (
£l
));

506 
	}
}

508 
__ölöe
 

509 
	$lﬂd_gs
(
u_öt
 
£l
)

511 
__asm
 
	`__vﬁ©ûe
("mov %0,%%gs" : : "rm" (
£l
));

512 
	}
}

515 
__ölöe
 

516 
	$lidt
(
ªgi⁄_des¸ùt‹
 *
addr
)

518 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
addr
));

519 
	}
}

521 
__ölöe
 

522 
	$Œdt
(
u_sh‹t
 
£l
)

524 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

525 
	}
}

527 
__ölöe
 

528 
	$…r
(
u_sh‹t
 
£l
)

530 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

531 
	}
}

533 
__ölöe
 
u_öt64_t


534 
	$rdr0
()

536 
u_öt64_t
 
d©a
;

537 
__asm
 
	`__vﬁ©ûe
("movq %%dr0,%0" : "Ù" (
d©a
));

538  (
d©a
);

539 
	}
}

541 
__ölöe
 

542 
	$lﬂd_dr0
(
u_öt64_t
 
dr0
)

544 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr0" : : "r" (
dr0
));

545 
	}
}

547 
__ölöe
 
u_öt64_t


548 
	$rdr1
()

550 
u_öt64_t
 
d©a
;

551 
__asm
 
	`__vﬁ©ûe
("movq %%dr1,%0" : "Ù" (
d©a
));

552  (
d©a
);

553 
	}
}

555 
__ölöe
 

556 
	$lﬂd_dr1
(
u_öt64_t
 
dr1
)

558 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr1" : : "r" (
dr1
));

559 
	}
}

561 
__ölöe
 
u_öt64_t


562 
	$rdr2
()

564 
u_öt64_t
 
d©a
;

565 
__asm
 
	`__vﬁ©ûe
("movq %%dr2,%0" : "Ù" (
d©a
));

566  (
d©a
);

567 
	}
}

569 
__ölöe
 

570 
	$lﬂd_dr2
(
u_öt64_t
 
dr2
)

572 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr2" : : "r" (
dr2
));

573 
	}
}

575 
__ölöe
 
u_öt64_t


576 
	$rdr3
()

578 
u_öt64_t
 
d©a
;

579 
__asm
 
	`__vﬁ©ûe
("movq %%dr3,%0" : "Ù" (
d©a
));

580  (
d©a
);

581 
	}
}

583 
__ölöe
 

584 
	$lﬂd_dr3
(
u_öt64_t
 
dr3
)

586 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr3" : : "r" (
dr3
));

587 
	}
}

589 
__ölöe
 
u_öt64_t


590 
	$rdr4
()

592 
u_öt64_t
 
d©a
;

593 
__asm
 
	`__vﬁ©ûe
("movq %%dr4,%0" : "Ù" (
d©a
));

594  (
d©a
);

595 
	}
}

597 
__ölöe
 

598 
	$lﬂd_dr4
(
u_öt64_t
 
dr4
)

600 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr4" : : "r" (
dr4
));

601 
	}
}

603 
__ölöe
 
u_öt64_t


604 
	$rdr5
()

606 
u_öt64_t
 
d©a
;

607 
__asm
 
	`__vﬁ©ûe
("movq %%dr5,%0" : "Ù" (
d©a
));

608  (
d©a
);

609 
	}
}

611 
__ölöe
 

612 
	$lﬂd_dr5
(
u_öt64_t
 
dr5
)

614 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr5" : : "r" (
dr5
));

615 
	}
}

617 
__ölöe
 
u_öt64_t


618 
	$rdr6
()

620 
u_öt64_t
 
d©a
;

621 
__asm
 
	`__vﬁ©ûe
("movq %%dr6,%0" : "Ù" (
d©a
));

622  (
d©a
);

623 
	}
}

625 
__ölöe
 

626 
	$lﬂd_dr6
(
u_öt64_t
 
dr6
)

628 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr6" : : "r" (
dr6
));

629 
	}
}

631 
__ölöe
 
u_öt64_t


632 
	$rdr7
()

634 
u_öt64_t
 
d©a
;

635 
__asm
 
	`__vﬁ©ûe
("movq %%dr7,%0" : "Ù" (
d©a
));

636  (
d©a
);

637 
	}
}

639 
__ölöe
 

640 
	$lﬂd_dr7
(
u_öt64_t
 
dr7
)

642 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr7" : : "r" (
dr7
));

643 
	}
}

645 
__ölöe
 
ªgi°î_t


646 
	$öå_dißbÀ
()

648 
ªgi°î_t
 
rÊags
;

650 
rÊags
 = 
	`ªad_rÊags
();

651 
	`dißbÀ_öå
();

652  (
rÊags
);

653 
	}
}

655 
__ölöe
 

656 
	$öå_ª°‹e
(
ªgi°î_t
 
rÊags
)

658 
	`wrôe_rÊags
(
rÊags
);

659 
	}
}

663 
bªakpoöt
();

664 
u_öt
 
bsÊ
(u_öà
mask
);

665 
u_öt
 
b§l
(u_öà
mask
);

666 
dißbÀ_öå
();

667 
do_˝uid
(
u_öt
 
ax
, u_öà*
p
);

668 
íabÀ_öå
();

669 
hÆt
();

670 
ü32_∑u£
();

671 
u_ch¨
 
öb
(
u_öt
 
p‹t
);

672 
u_öt
 
öl
(u_öà
p‹t
);

673 
ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
);

674 
ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
);

675 
ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
˙t
);

676 
ªgi°î_t
 
öå_dißbÀ
();

677 
öå_ª°‹e
(
ªgi°î_t
 
rf
);

678 
övd
();

679 
övÕg
(
u_öt
 
addr
);

680 
öv…lb
();

681 
u_sh‹t
 
öw
(
u_öt
 
p‹t
);

682 
lidt
(
ªgi⁄_des¸ùt‹
 *
addr
);

683 
Œdt
(
u_sh‹t
 
£l
);

684 
lﬂd_¸0
(
u_l⁄g
 
¸0
);

685 
lﬂd_¸3
(
u_l⁄g
 
¸3
);

686 
lﬂd_¸4
(
u_l⁄g
 
¸4
);

687 
lﬂd_dr0
(
u_öt64_t
 
dr0
);

688 
lﬂd_dr1
(
u_öt64_t
 
dr1
);

689 
lﬂd_dr2
(
u_öt64_t
 
dr2
);

690 
lﬂd_dr3
(
u_öt64_t
 
dr3
);

691 
lﬂd_dr4
(
u_öt64_t
 
dr4
);

692 
lﬂd_dr5
(
u_öt64_t
 
dr5
);

693 
lﬂd_dr6
(
u_öt64_t
 
dr6
);

694 
lﬂd_dr7
(
u_öt64_t
 
dr7
);

695 
lﬂd_fs
(
u_öt
 
£l
);

696 
lﬂd_gs
(
u_öt
 
£l
);

697 
…r
(
u_sh‹t
 
£l
);

698 
outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
);

699 
oué
(
u_öt
 
p‹t
, u_öà
d©a
);

700 
outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
);

701 
out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
);

702 
outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
˙t
);

703 
outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
);

704 
u_l⁄g
 
r¸0
();

705 
u_l⁄g
 
r¸2
();

706 
u_l⁄g
 
r¸3
();

707 
u_l⁄g
 
r¸4
();

708 
u_öt64_t
 
rdm§
(
u_öt
 
m§
);

709 
u_öt64_t
 
rdpmc
(
u_öt
 
pmc
);

710 
u_öt64_t
 
rdr0
();

711 
u_öt64_t
 
rdr1
();

712 
u_öt64_t
 
rdr2
();

713 
u_öt64_t
 
rdr3
();

714 
u_öt64_t
 
rdr4
();

715 
u_öt64_t
 
rdr5
();

716 
u_öt64_t
 
rdr6
();

717 
u_öt64_t
 
rdr7
();

718 
u_öt64_t
 
rdtsc
();

719 
u_öt
 
ªad_rÊags
();

720 
u_öt
 
rfs
();

721 
u_öt
 
rgs
();

722 
wbövd
();

723 
wrôe_rÊags
(
u_öt
 
rf
);

724 
wrm§
(
u_öt
 
m§
, 
u_öt64_t
 
√wvÆ
);

728 
ª£t_dbªgs
();

730 #ifde‡
_KERNEL


731 
rdm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 *
vÆ
);

732 
wrm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
);

	@/usr/include/machine/fpu.h

41 #i‚de‡
_MACHINE_FPU_H_


42 
	#_MACHINE_FPU_H_


	)

45 
	sÂacc87
 {

46 
u_ch¨
 
	mÂ_byãs
[10];

50 
	sxmmacc
 {

51 
u_ch¨
 
	mxmm_byãs
[16];

54 
	sívxmm
 {

55 
u_öt16_t
 
	mí_cw
;

56 
u_öt16_t
 
	mí_sw
;

57 
u_öt8_t
 
	mí_tw
;

58 
u_öt8_t
 
	mí_zîo
;

59 
u_öt16_t
 
	mí_›code
;

60 
u_öt64_t
 
	mí_rù
;

61 
u_öt64_t
 
	mí_rdp
;

62 
u_öt32_t
 
	mí_mxc§
;

63 
u_öt32_t
 
	mí_mxc§_mask
;

66 
	sßveÂu
 {

67 
ívxmm
 
	msv_ív
;

69 
Âacc87
 
	mÂ_acc
;

70 
u_ch¨
 
	mÂ_∑d
[6];

71 } 
	msv_Â
[8];

72 
xmmacc
 
	msv_xmm
[16];

73 
u_ch¨
 
	msv_∑d
[96];

74 } 
__Æig√d
(16);

76 #ifde‡
_KERNEL


77 
	sÂu_kîn_˘x
 {

78 
ßveÂu
 
	mhw°©e
;

79 
ßveÂu
 *
	m¥ev
;

80 
uöt32_t
 
	mÊags
;

82 
	#FPU_KERN_CTX_FPUINITDONE
 0x01

	)

84 
	#PCB_USER_FPU
(
pcb
Ë((’cb)->
pcb_Êags
 & 
PCB_KERNFPU
Ë=0)

	)

105 
	#__INITIAL_FPUCW__
 0x037F

	)

106 
	#__INITIAL_FPUCW_I386__
 0x127F

	)

107 
	#__INITIAL_MXCSR__
 0x1F80

	)

108 
	#__INITIAL_MXCSR_MASK__
 0xFFBF

	)

110 #ifde‡
_KERNEL


111 
Âud«
();

112 
Âudr›
();

113 
Âuexô
(
thªad
 *
td
);

114 
Âuf‹m©
();

115 
Âugëªgs
(
thªad
 *
td
);

116 
Âuöô
();

117 
Âu£åegs
(
thªad
 *
td
, 
ßveÂu
 *
addr
);

118 
Âuå≠
();

119 
Âuu£röôed
(
thªad
 *
td
);

120 
Âu_kîn_íãr
(
thªad
 *
td
, 
Âu_kîn_˘x
 *
˘x
,

121 
u_öt
 
Êags
);

122 
Âu_kîn_Àave
(
thªad
 *
td
, 
Âu_kîn_˘x
 *
˘x
);

123 
Âu_kîn_thªad
(
u_öt
 
Êags
);

124 
is_Âu_kîn_thªad
(
u_öt
 
Êags
);

129 
	#FPU_KERN_NORMAL
 0x0000

	)

	@/usr/include/machine/pcpu.h

29 #i‚de‡
_MACHINE_PCPU_H_


30 
	#_MACHINE_PCPU_H_


	)

32 #i‚de‡
_SYS_CDEFS_H_


36 #i‡
deföed
(
XEN
Ë|| deföed(
XENHVM
)

37 #i‚de‡
NR_VIRQS


38 
	#NR_VIRQS
 24

	)

40 #i‚de‡
NR_IPIS


41 
	#NR_IPIS
 2

	)

45 #ifde‡
XENHVM


46 
	#PCPU_XEN_FIELDS
 \

48 
pc_œ°_¥o˚s£d_l1i
; \

49 
pc_œ°_¥o˚s£d_l2i


	)

51 
	#PCPU_XEN_FIELDS


	)

61 
	#PCPU_MD_FIELDS
 \

62 
pc_m⁄ô‹buf
[128] 
	`__Æig√d
(128); \

63 
p˝u
 *
pc_¥v•a˚
; \

64 
pm≠
 *
pc_cuΩm≠
; \

65 
amd64tss
 *
pc_ts•
; \

66 
amd64tss
 *
pc_comm⁄ts•
; \

67 
ªgi°î_t
 
pc_r•0
; \

68 
ªgi°î_t
 
pc_s¸©ch_r•
; \

69 
u_öt
 
pc_≠ic_id
; \

70 
u_öt
 
pc_a˝i_id
; \

72 
u£r_£gmít_des¸ùt‹
 *
pc_fs32p
; \

74 
u£r_£gmít_des¸ùt‹
 *
pc_gs32p
; \

76 
sy°em_£gmít_des¸ùt‹
 *
pc_ldt
; \

78 
sy°em_£gmít_des¸ùt‹
 *
pc_tss
; \

79 
u_öt
 
pc_cmci_mask
 \

80 
PCPU_XEN_FIELDS


	)

82 #ifde‡
_KERNEL


84 #ifde‡
löt


86 
p˝u
 *
p˝up
;

88 
	#PCPU_GET
(
membî
Ë(
p˝up
->
pc_
 ## membî)

	)

89 
	#PCPU_ADD
(
membî
, 
vÆ
Ë(
p˝up
->
pc_
 ## membî +(vÆ))

	)

90 
	#PCPU_INC
(
membî
Ë
	`PCPU_ADD
(membî, 1)

	)

91 
	#PCPU_PTR
(
membî
Ë(&
p˝up
->
pc_
 ## membî)

	)

92 
	#PCPU_SET
(
membî
, 
vÆ
Ë(
p˝up
->
pc_
 ## membî = (vÆ))

	)

94 #ñi‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__GNUCLIKE___TYPEOF
)

99 
	#__p˝u_off£t
(
«me
) \

100 
	`__off£tof
(
p˝u
, 
«me
)

	)

105 
	#__p˝u_ty≥
(
«me
) \

106 
	`__ty≥of
(((
p˝u
 *)0)->
«me
)

	)

111 
	#__PCPU_PTR
(
«me
Ë
	`__exãnsi⁄__
 ({ \

112 
	`__p˝u_ty≥
(
«me
Ë*
__p
; \

114 
__asm
 
	`__vﬁ©ûe
("movq %%gs:%1,%0;áddq %2,%0" \

115 : "Ù" (
__p
) \

116 : "m" (*(
p˝u
 *)(
	`__p˝u_off£t
(
pc_¥v•a˚
))), \

117 "i" (
	`__p˝u_off£t
(
«me
))); \

119 
__p
; \

120 })

	)

125 
	#__PCPU_GET
(
«me
Ë
	`__exãnsi⁄__
 ({ \

126 
	`__p˝u_ty≥
(
«me
Ë
__ªs
; \

127 
	s__s
 { \

128 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

129 } 
__s
; \

131 i‡((
__ªs
) == 1 || (__res) == 2 || \

132 (
__ªs
) == 4 || (__res) == 8) { \

133 
__asm
 
	`__vﬁ©ûe
("mov %%gs:%1,%0" \

134 : "Ù" (
__s
) \

135 : "m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
)))); \

136 *(
__s
 *)(*)&
__ªs
 = __s; \

138 
__ªs
 = *
	`__PCPU_PTR
(
«me
); \

140 
__ªs
; \

141 })

	)

147 
	#__PCPU_ADD
(
«me
, 
vÆ
) do { \

148 
	`__p˝u_ty≥
(
«me
Ë
__vÆ
; \

149 
	s__s
 { \

150 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

151 } 
__s
; \

153 
__vÆ
 = (
vÆ
); \

154 i‡((
__vÆ
) == 1 || (__val) == 2 || \

155 (
__vÆ
) == 4 || (__val) == 8) { \

156 
__s
 = *(__†*)(*)&
__vÆ
; \

157 
__asm
 
	`__vﬁ©ûe
("add %1,%%gs:%0" \

158 : "=m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
))) \

159 : "r" (
__s
)); \

161 *
	`__PCPU_PTR
(
«me
Ë+
__vÆ
; \

162 } 0)

	)

168 
	#__PCPU_INC
(
«me
) do { \

169 
	`CTASSERT
((
	`__p˝u_ty≥
(
«me
)) == 1 || \

170 (
	`__p˝u_ty≥
(
«me
)) == 2 || \

171 (
	`__p˝u_ty≥
(
«me
)) == 4 || \

172 (
	`__p˝u_ty≥
(
«me
)) == 8); \

173 i‡((
	`__p˝u_ty≥
(
«me
)) == 1) { \

174 
__asm
 
	`__vﬁ©ûe
("incb %%gs:%0" \

175 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

176 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

177 } i‡((
	`__p˝u_ty≥
(
«me
)) == 2) { \

178 
__asm
 
	`__vﬁ©ûe
("incw %%gs:%0" \

179 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

180 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

181 } i‡((
	`__p˝u_ty≥
(
«me
)) == 4) { \

182 
__asm
 
	`__vﬁ©ûe
("incl %%gs:%0" \

183 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

184 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

185 } i‡((
	`__p˝u_ty≥
(
«me
)) == 8) { \

186 
__asm
 
	`__vﬁ©ûe
("incq %%gs:%0" \

187 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

188 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

190 } 0)

	)

195 
	#__PCPU_SET
(
«me
, 
vÆ
) { \

196 
	`__p˝u_ty≥
(
«me
Ë
__vÆ
; \

197 
	s__s
 { \

198 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

199 } 
__s
; \

201 
__vÆ
 = (
vÆ
); \

202 i‡((
__vÆ
) == 1 || (__val) == 2 || \

203 (
__vÆ
) == 4 || (__val) == 8) { \

204 
__s
 = *(__†*)(*)&
__vÆ
; \

205 
__asm
 
	`__vﬁ©ûe
("mov %1,%%gs:%0" \

206 : "=m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
))) \

207 : "r" (
__s
)); \

209 *
	`__PCPU_PTR
(
«me
Ë
__vÆ
; \

211 }

	)

213 
	#PCPU_GET
(
membî
Ë
	`__PCPU_GET
(
pc_
 ## membî)

	)

214 
	#PCPU_ADD
(
membî
, 
vÆ
Ë
	`__PCPU_ADD
(
pc_
 ## membî, vÆ)

	)

215 
	#PCPU_INC
(
membî
Ë
	`__PCPU_INC
(
pc_
 ## membî)

	)

216 
	#PCPU_PTR
(
membî
Ë
	`__PCPU_PTR
(
pc_
 ## membî)

	)

217 
	#PCPU_SET
(
membî
, 
vÆ
Ë
	`__PCPU_SET
(
pc_
 ## membî, vÆ)

	)

219 
__ölöe
 
__puª2
 
thªad
 *

220 
	$__cuπhªad
()

222 
thªad
 *
td
;

224 
	`__asm
("movq %%gs:0,%0" : "Ù" (
td
));

225  (
td
);

226 
	}
}

227 
	#cuπhªad
 (
	`__cuπhªad
())

	)

	@/usr/include/machine/pmap.h

45 #i‚de‡
_MACHINE_PMAP_H_


46 
	#_MACHINE_PMAP_H_


	)

53 
	#PG_V
 0x001

	)

54 
	#PG_RW
 0x002

	)

55 
	#PG_U
 0x004

	)

56 
	#PG_NC_PWT
 0x008

	)

57 
	#PG_NC_PCD
 0x010

	)

58 
	#PG_A
 0x020

	)

59 
	#PG_M
 0x040

	)

60 
	#PG_PS
 0x080

	)

61 
	#PG_PTE_PAT
 0x080

	)

62 
	#PG_G
 0x100

	)

63 
	#PG_AVAIL1
 0x200

	)

64 
	#PG_AVAIL2
 0x400

	)

65 
	#PG_AVAIL3
 0x800

	)

66 
	#PG_PDE_PAT
 0x1000

	)

67 
	#PG_NX
 (1ul<<63Ë

	)

71 
	#PG_W
 
PG_AVAIL1


	)

72 
	#PG_MANAGED
 
PG_AVAIL2


	)

73 
	#PG_FRAME
 (0x000ffffffffff000ul)

	)

74 
	#PG_PS_FRAME
 (0x000ffffff„00000ul)

	)

75 
	#PG_PROT
 (
PG_RW
|
PG_U
Ë

	)

76 
	#PG_N
 (
PG_NC_PWT
|
PG_NC_PCD
Ë

	)

79 
	#PG_PDE_CACHE
 (
PG_PDE_PAT
 | 
PG_NC_PWT
 | 
PG_NC_PCD
)

	)

80 
	#PG_PTE_CACHE
 (
PG_PTE_PAT
 | 
PG_NC_PWT
 | 
PG_NC_PCD
)

	)

86 
	#PG_PTE_PROMOTE
 (
PG_NX
 | 
PG_MANAGED
 | 
PG_W
 | 
PG_G
 | 
PG_PTE_PAT
 | \

87 
PG_M
 | 
PG_A
 | 
PG_NC_PCD
 | 
PG_NC_PWT
 | 
PG_U
 | 
PG_RW
 | 
PG_V
)

	)

93 
	#PGEX_P
 0x01

	)

94 
	#PGEX_W
 0x02

	)

95 
	#PGEX_U
 0x04

	)

96 
	#PGEX_RSV
 0x08

	)

97 
	#PGEX_I
 0x10

	)

103 
	#KVADDR
(
l4
, 
l3
, 
l2
, 
l1
) ( \

105 (()(
l4
Ë<< 
PML4SHIFT
) | \

106 (()(
l3
Ë<< 
PDPSHIFT
) | \

107 (()(
l2
Ë<< 
PDRSHIFT
) | \

108 (()(
l1
Ë<< 
PAGE_SHIFT
))

	)

110 
	#UVADDR
(
l4
, 
l3
, 
l2
, 
l1
) ( \

111 (()(
l4
Ë<< 
PML4SHIFT
) | \

112 (()(
l3
Ë<< 
PDPSHIFT
) | \

113 (()(
l2
Ë<< 
PDRSHIFT
) | \

114 (()(
l1
Ë<< 
PAGE_SHIFT
))

	)

117 #i‚de‡
NKPT


118 
	#NKPT
 32

	)

121 
	#NKPML4E
 1

	)

122 
	#NKPDPE
 
	`howm™y
(
NKPT
, 
NPDEPG
)

	)

124 
	#NUPML4E
 (
NPML4EPG
/2Ë

	)

125 
	#NUPDPE
 (
NUPML4E
*
NPDPEPG
)

	)

126 
	#NUPDE
 (
NUPDPE
*
NPDEPG
Ë

	)

128 
	#NDMPML4E
 1

	)

133 
	#PML4PML4I
 (
NPML4EPG
/2Ë

	)

135 
	#KPML4I
 (
NPML4EPG
-1Ë

	)

136 
	#DMPML4I
 (
KPML4I
-1Ë

	)

138 
	#KPDPI
 (
NPDPEPG
-2Ë

	)

143 
	#ISA_HOLE_START
 0xa0000

	)

144 
	#ISA_HOLE_LENGTH
 (0x100000-
ISA_HOLE_START
)

	)

146 #i‚de‡
LOCORE


148 
	~<sys/queue.h
>

149 
	~<sys/_lock.h
>

150 
	~<sys/_muãx.h
>

152 
u_öt64_t
 
	tpd_íåy_t
;

153 
u_öt64_t
 
	t±_íåy_t
;

154 
u_öt64_t
 
	tpdp_íåy_t
;

155 
u_öt64_t
 
	tpml4_íåy_t
;

157 
	#PML4ESHIFT
 (3)

	)

158 
	#PDPESHIFT
 (3)

	)

159 
	#PTESHIFT
 (3)

	)

160 
	#PDESHIFT
 (3)

	)

165 #ifde‡
_KERNEL


166 
	#addr_PTm≠
 (
	`KVADDR
(
PML4PML4I
, 0, 0, 0))

	)

167 
	#addr_PDm≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, 0, 0))

	)

168 
	#addr_PDPm≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, 0))

	)

169 
	#addr_PML4m≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, PML4PML4I))

	)

170 
	#addr_PML4pml4e
 (
addr_PML4m≠
 + (
PML4PML4I
 * (
pml4_íåy_t
)))

	)

171 
	#PTm≠
 ((
±_íåy_t
 *)(
addr_PTm≠
))

	)

172 
	#PDm≠
 ((
pd_íåy_t
 *)(
addr_PDm≠
))

	)

173 
	#PDPm≠
 ((
pd_íåy_t
 *)(
addr_PDPm≠
))

	)

174 
	#PML4m≠
 ((
pd_íåy_t
 *)(
addr_PML4m≠
))

	)

175 
	#PML4pml4e
 ((
pd_íåy_t
 *)(
addr_PML4pml4e
))

	)

177 
u_öt64_t
 
KPML4phys
;

185 
±_íåy_t
 *
vt›ã
(
vm_off£t_t
);

186 
	#vt›hys
(
va
Ë
	`pm≠_kexåa˘
(((
vm_off£t_t
Ë(va)))

	)

188 
__ölöe
 
±_íåy_t


189 
	$±e_lﬂd
(
±_íåy_t
 *
±ï
)

191 
±_íåy_t
 
r
;

193 
r
 = *
±ï
;

194  (
r
);

195 
	}
}

197 
__ölöe
 
±_íåy_t


198 
	$±e_lﬂd_°‹e
(
±_íåy_t
 *
±ï
,Öt_íåy_à
±e
)

200 
±_íåy_t
 
r
;

202 
__asm
 
	`__vﬁ©ûe
(

204 : "=m" (*
±ï
),

205 "Ù" (
r
)

206 : "1" (
±e
),

207 "m" (*
±ï
));

208  (
r
);

209 
	}
}

211 
	#±e_lﬂd_˛ór
(
±e
Ë
	`©omic_ªad™d˛ór_l⁄g
’ã)

	)

213 
__ölöe
 

214 
	$±e_°‹e
(
±_íåy_t
 *
±ï
,Öt_íåy_à
±e
)

217 *
±ï
 = 
±e
;

218 
	}
}

220 
	#±e_˛ór
(
±ï
Ë
	`±e_°‹e
(’ãp), (
±_íåy_t
)0ULL)

	)

222 
	#pde_°‹e
(
pdï
, 
pde
Ë
	`±e_°‹e
(’dï), (pde))

	)

224 
±_íåy_t
 
pg_nx
;

231 
	gpv_íåy
;

232 
	gpv_chunk
;

234 
	smd_∑ge
 {

235 
TAILQ_HEAD
(,
pv_íåy
Ë
	mpv_li°
;

236 
	m∑t_mode
;

243 
	spm≠
 {

244 
mtx
 
	mpm_mtx
;

245 
pml4_íåy_t
 *
	mpm_pml4
;

246 
TAILQ_HEAD
(,
pv_chunk
Ë
	mpm_pvchunk
;

247 
˝umask_t
 
	mpm_a˘ive
;

249 
pm≠_°©i°ics
 
	mpm_°©s
;

250 
vm_∑ge_t
 
	mpm_roŸ
;

253 
pm≠
 *
	tpm≠_t
;

255 #ifde‡
_KERNEL


256 
pm≠
 
kî√l_pm≠_°‹e
;

257 
	#kî√l_pm≠
 (&
kî√l_pm≠_°‹e
)

	)

259 
	#PMAP_LOCK
(
pm≠
Ë
	`mtx_lock
(&’m≠)->
pm_mtx
)

	)

260 
	#PMAP_LOCK_ASSERT
(
pm≠
, 
ty≥
) \

261 
	`mtx_as£π
(&(
pm≠
)->
pm_mtx
, (
ty≥
))

	)

262 
	#PMAP_LOCK_DESTROY
(
pm≠
Ë
	`mtx_de°roy
(&’m≠)->
pm_mtx
)

	)

263 
	#PMAP_LOCK_INIT
(
pm≠
Ë
	`mtx_öô
(&’m≠)->
pm_mtx
, "pmap", \

264 
NULL
, 
MTX_DEF
 | 
MTX_DUPOK
)

	)

265 
	#PMAP_LOCKED
(
pm≠
Ë
	`mtx_ow√d
(&’m≠)->
pm_mtx
)

	)

266 
	#PMAP_MTX
(
pm≠
Ë(&’m≠)->
pm_mtx
)

	)

267 
	#PMAP_TRYLOCK
(
pm≠
Ë
	`mtx_åylock
(&’m≠)->
pm_mtx
)

	)

268 
	#PMAP_UNLOCK
(
pm≠
Ë
	`mtx_u∆ock
(&’m≠)->
pm_mtx
)

	)

275 
	spv_íåy
 {

276 
vm_off£t_t
 
	mpv_va
;

277 
TAILQ_ENTRY
(
pv_íåy
Ë
	mpv_li°
;

278 } *
	tpv_íåy_t
;

284 
	#_NPCM
 3

	)

285 
	#_NPCPV
 168

	)

286 
	spv_chunk
 {

287 
pm≠_t
 
	mpc_pm≠
;

288 
TAILQ_ENTRY
(
pv_chunk
Ë
	mpc_li°
;

289 
uöt64_t
 
	mpc_m≠
[
_NPCM
];

290 
uöt64_t
 
	mpc_•¨e
[2];

291 
pv_íåy
 
	mpc_pvíåy
[
_NPCPV
];

294 #ifdef 
_KERNEL


296 
ˇddr_t
 
CADDR1
;

297 
±_íåy_t
 *
CMAP1
;

298 
vm_∑ddr_t
 
phys_avaû
[];

299 
vm_∑ddr_t
 
dump_avaû
[];

300 
vm_off£t_t
 
vútuÆ_avaû
;

301 
vm_off£t_t
 
vútuÆ_íd
;

303 
	#pm≠_∑ge_gë_mem©å
(
m
Ë((
vm_mem©å_t
)(m)->
md
.
∑t_mode
)

	)

304 
	#pm≠_unm≠bios
(
va
, 
sz
Ë
	`pm≠_unm≠dev
((va), (sz))

	)

306 
pm≠_boŸ°øp
(
vm_∑ddr_t
 *);

307 
pm≠_ch™ge_©å
(
vm_off£t_t
, 
vm_size_t
, );

308 
pm≠_demŸe_DMAP
(
vm_∑ddr_t
 
ba£
, 
vm_size_t
 
Àn
, 
boﬁón_t
 
övÆid©e
);

309 
pm≠_öô_∑t
();

310 
pm≠_kíãr
(
vm_off£t_t
 
va
, 
vm_∑ddr_t
 
∑
);

311 *
pm≠_kíãr_ãmp‹¨y
(
vm_∑ddr_t
 
∑
, 
i
);

312 
vm_∑ddr_t
 
pm≠_kexåa˘
(
vm_off£t_t
);

313 
pm≠_kªmove
(
vm_off£t_t
);

314 *
pm≠_m≠bios
(
vm_∑ddr_t
, 
vm_size_t
);

315 *
pm≠_m≠dev
(
vm_∑ddr_t
, 
vm_size_t
);

316 *
pm≠_m≠dev_©å
(
vm_∑ddr_t
, 
vm_size_t
, );

317 
boﬁón_t
 
pm≠_∑ge_is_m≠≥d
(
vm_∑ge_t
 
m
);

318 
pm≠_∑ge_£t_mem©å
(
vm_∑ge_t
 
m
, 
vm_mem©å_t
 
ma
);

319 
pm≠_unm≠dev
(
vm_off£t_t
, 
vm_size_t
);

320 
pm≠_övÆid©e_∑ge
(
pm≠_t
, 
vm_off£t_t
);

321 
pm≠_övÆid©e_ønge
(
pm≠_t
, 
vm_off£t_t
, vm_offset_t);

322 
pm≠_övÆid©e_Æl
(
pm≠_t
);

323 
pm≠_övÆid©e_ˇche
();

	@/usr/include/machine/runq.h

29 #i‚def 
_MACHINE_RUNQ_H_


30 
	#_MACHINE_RUNQ_H_


	)

32 
	#RQB_LEN
 (1Ë

	)

33 
	#RQB_L2BPW
 (6Ë

	)

34 
	#RQB_BPW
 (1<<
RQB_L2BPW
Ë

	)

36 
	#RQB_BIT
(
¥i
Ë(1u»<< (’riË& (
RQB_BPW
 - 1)))

	)

37 
	#RQB_WORD
(
¥i
Ë(’riË>> 
RQB_L2BPW
)

	)

39 
	#RQB_FFS
(
w‹d
Ë(
	`bsfq
(w‹d))

	)

44 
u_öt64_t
 
	trqb_w‹d_t
;

	@/usr/include/machine/segments.h

37 #i‚de‡
_MACHINE_SEGMENTS_H_


38 
	#_MACHINE_SEGMENTS_H_


	)

48 
	#SEL_RPL_MASK
 3

	)

49 
	#ISPL
(
s
Ë((s)&3Ë

	)

50 
	#SEL_KPL
 0

	)

51 
	#SEL_UPL
 3

	)

52 
	#ISLDT
(
s
Ë((s)&
SEL_LDT
Ë

	)

53 
	#SEL_LDT
 4

	)

54 
	#IDXSEL
(
s
Ë(((s)>>3Ë& 0x1fffË

	)

55 
	#LSEL
(
s
,
r
Ë(((s)<<3Ë| 
SEL_LDT
 |ÑË

	)

56 
	#GSEL
(
s
,
r
Ë(((s)<<3Ë|ÑË

	)

63 
	su£r_£gmít_des¸ùt‹
 {

64 
u_öt64_t
 
	msd_lﬁimô
:16;

65 
u_öt64_t
 
	msd_loba£
:24;

66 
u_öt64_t
 
	msd_ty≥
:5;

67 
u_öt64_t
 
	msd_d∂
:2;

68 
u_öt64_t
 
	msd_p
:1;

69 
u_öt64_t
 
	msd_hûimô
:4;

70 
u_öt64_t
 
	msd_xx
:1;

71 
u_öt64_t
 
	msd_l⁄g
:1;

72 
u_öt64_t
 
	msd_def32
:1;

73 
u_öt64_t
 
	msd_gøn
:1;

74 
u_öt64_t
 
	msd_hiba£
:8;

75 } 
	g__∑cked
;

77 
	#USD_GETBASE
(
sd
Ë(((sd)->
sd_loba£
Ë| (sd)->
sd_hiba£
 << 24)

	)

78 
	#USD_SETBASE
(
sd
, 
b
Ë(sd)->
sd_loba£
 = (b); \

79 (
sd
)->
sd_hiba£
 = ((
b
Ë>> 24);

	)

80 
	#USD_GETLIMIT
(
sd
Ë(((sd)->
sd_lﬁimô
Ë| (sd)->
sd_hûimô
 << 16)

	)

81 
	#USD_SETLIMIT
(
sd
, 
l
Ë(sd)->
sd_lﬁimô
 = (l); \

82 (
sd
)->
sd_hûimô
 = ((
l
Ë>> 16);

	)

87 
	ssy°em_£gmít_des¸ùt‹
 {

88 
u_öt64_t
 
	msd_lﬁimô
:16;

89 
u_öt64_t
 
	msd_loba£
:24;

90 
u_öt64_t
 
	msd_ty≥
:5;

91 
u_öt64_t
 
	msd_d∂
:2;

92 
u_öt64_t
 
	msd_p
:1;

93 
u_öt64_t
 
	msd_hûimô
:4;

94 
u_öt64_t
 
	msd_xx0
:3;

95 
u_öt64_t
 
	msd_gøn
:1;

96 
u_öt64_t
 
	msd_hiba£
:40 
__∑cked
;

97 
u_öt64_t
 
	msd_xx1
:8;

98 
u_öt64_t
 
	msd_mbz
:5;

99 
u_öt64_t
 
	msd_xx2
:19;

100 } 
	g__∑cked
;

106 
	sg©e_des¸ùt‹
 {

107 
u_öt64_t
 
	mgd_looff£t
:16;

108 
u_öt64_t
 
	mgd_£À˘‹
:16;

109 
u_öt64_t
 
	mgd_i°
:3;

110 
u_öt64_t
 
	mgd_xx
:5;

111 
u_öt64_t
 
	mgd_ty≥
:5;

112 
u_öt64_t
 
	mgd_d∂
:2;

113 
u_öt64_t
 
	mgd_p
:1;

114 
u_öt64_t
 
	mgd_hioff£t
:48 
__∑cked
;

115 
u_öt64_t
 
	msd_xx1
:32;

116 } 
	g__∑cked
;

121 
	udes¸ùt‹
 {

122 
u£r_£gmít_des¸ùt‹
 
	msd
;

123 
g©e_des¸ùt‹
 
	mgd
;

127 
	#SDT_SYSNULL
 0

	)

128 
	#SDT_SYS286TSS
 1

	)

129 
	#SDT_SYSLDT
 2

	)

130 
	#SDT_SYS286BSY
 3

	)

131 
	#SDT_SYS286CGT
 4

	)

132 
	#SDT_SYSTASKGT
 5

	)

133 
	#SDT_SYS286IGT
 6

	)

134 
	#SDT_SYS286TGT
 7

	)

135 
	#SDT_SYSNULL2
 8

	)

136 
	#SDT_SYSTSS
 9

	)

137 
	#SDT_SYSNULL3
 10

	)

138 
	#SDT_SYSBSY
 11

	)

139 
	#SDT_SYSCGT
 12

	)

140 
	#SDT_SYSNULL4
 13

	)

141 
	#SDT_SYSIGT
 14

	)

142 
	#SDT_SYSTGT
 15

	)

145 
	#SDT_MEMRO
 16

	)

146 
	#SDT_MEMROA
 17

	)

147 
	#SDT_MEMRW
 18

	)

148 
	#SDT_MEMRWA
 19

	)

149 
	#SDT_MEMROD
 20

	)

150 
	#SDT_MEMRODA
 21

	)

151 
	#SDT_MEMRWD
 22

	)

152 
	#SDT_MEMRWDA
 23

	)

153 
	#SDT_MEME
 24

	)

154 
	#SDT_MEMEA
 25

	)

155 
	#SDT_MEMER
 26

	)

156 
	#SDT_MEMERA
 27

	)

157 
	#SDT_MEMEC
 28

	)

158 
	#SDT_MEMEAC
 29

	)

159 
	#SDT_MEMERC
 30

	)

160 
	#SDT_MEMERAC
 31

	)

168 
	sso·_£gmít_des¸ùt‹
 {

169 
	mssd_ba£
;

170 
	mssd_limô
;

171 
	mssd_ty≥
:5;

172 
	mssd_d∂
:2;

173 
	mssd_p
:1;

174 
	mssd_l⁄g
:1;

175 
	mssd_def32
:1;

176 
	mssd_gøn
:1;

177 } 
	g__∑cked
;

182 
	sªgi⁄_des¸ùt‹
 {

183 
	mrd_limô
:16;

184 
	mrd_ba£
:64 
__∑cked
;

185 } 
	g__∑cked
;

190 
	#NIDT
 256

	)

191 
	#NRSVIDT
 32

	)

196 
	#IDT_DE
 0

	)

197 
	#IDT_DB
 1

	)

198 
	#IDT_NMI
 2

	)

199 
	#IDT_BP
 3

	)

200 
	#IDT_OF
 4

	)

201 
	#IDT_BR
 5

	)

202 
	#IDT_UD
 6

	)

203 
	#IDT_NM
 7

	)

204 
	#IDT_DF
 8

	)

205 
	#IDT_FPUGP
 9

	)

206 
	#IDT_TS
 10

	)

207 
	#IDT_NP
 11

	)

208 
	#IDT_SS
 12

	)

209 
	#IDT_GP
 13

	)

210 
	#IDT_PF
 14

	)

211 
	#IDT_MF
 16

	)

212 
	#IDT_AC
 17

	)

213 
	#IDT_MC
 18

	)

214 
	#IDT_XF
 19

	)

215 
	#IDT_IO_INTS
 
NRSVIDT


	)

216 
	#IDT_SYSCALL
 0x80

	)

217 
	#IDT_DTRACE_RET
 0x20

	)

222 
	#GNULL_SEL
 0

	)

223 
	#GNULL2_SEL
 1

	)

224 
	#GUFS32_SEL
 2

	)

225 
	#GUGS32_SEL
 3

	)

226 
	#GCODE_SEL
 4

	)

227 
	#GDATA_SEL
 5

	)

228 
	#GUCODE32_SEL
 6

	)

229 
	#GUDATA_SEL
 7

	)

230 
	#GUCODE_SEL
 8

	)

231 
	#GPROC0_SEL
 9

	)

233 
	#GUSERLDT_SEL
 11

	)

235 
	#NGDT
 13

	)

237 #ifde‡
_KERNEL


238 
u£r_£gmít_des¸ùt‹
 
gdt
[];

239 
so·_£gmít_des¸ùt‹
 
gdt_£gs
[];

240 
g©e_des¸ùt‹
 *
idt
;

241 
ªgi⁄_des¸ùt‹
 
r_gdt
, 
r_idt
;

243 
lgdt
(
ªgi⁄_des¸ùt‹
 *
rdp
);

244 
sdtossd
(
u£r_£gmít_des¸ùt‹
 *
sdp
,

245 
so·_£gmít_des¸ùt‹
 *
ssdp
);

246 
ssdtosd
(
so·_£gmít_des¸ùt‹
 *
ssdp
,

247 
u£r_£gmít_des¸ùt‹
 *
sdp
);

248 
ssdtosyssd
(
so·_£gmít_des¸ùt‹
 *
ssdp
,

249 
sy°em_£gmít_des¸ùt‹
 *
sdp
);

250 
upd©e_gdt_gsba£
(
thªad
 *
td
, 
uöt32_t
 
ba£
);

251 
upd©e_gdt_fsba£
(
thªad
 *
td
, 
uöt32_t
 
ba£
);

	@/usr/include/machine/signal.h

34 #i‚de‡
_MACHINE_SIGNAL_H_


35 
	#_MACHINE_SIGNAL_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<sys/_sig£t.h
>

44 
	tsig_©omic_t
;

46 #i‡
__BSD_VISIBLE


47 
	~<machöe/å≠.h
>

63 
	ssigc⁄ãxt
 {

64 
__sig£t
 
	msc_mask
;

65 
	msc_⁄°ack
;

66 
	msc_rdi
;

67 
	msc_rsi
;

68 
	msc_rdx
;

69 
	msc_rcx
;

70 
	msc_r8
;

71 
	msc_r9
;

72 
	msc_øx
;

73 
	msc_rbx
;

74 
	msc_rbp
;

75 
	msc_r10
;

76 
	msc_r11
;

77 
	msc_r12
;

78 
	msc_r13
;

79 
	msc_r14
;

80 
	msc_r15
;

81 
	msc_å≠no
;

82 
	msc_fs
;

83 
	msc_gs
;

84 
	msc_addr
;

85 
	msc_Êags
;

86 
	msc_es
;

87 
	msc_ds
;

88 
	msc_îr
;

89 
	msc_rù
;

90 
	msc_cs
;

91 
	msc_rÊags
;

92 
	msc_r•
;

93 
	msc_ss
;

94 
	msc_Àn
;

99 
	msc_Âf‹m©
;

100 
	msc_ow√dÂ
;

101 
	msc_Â°©e
[64] 
__Æig√d
(16);

103 
	msc_fsba£
;

104 
	msc_gsba£
;

106 
	msc_•¨e
[6];

	@/usr/include/machine/ucontext.h

32 #i‚de‡
_MACHINE_UCONTEXT_H_


33 
	#_MACHINE_UCONTEXT_H_


	)

38 
	#_MC_HASSEGS
 0x1

	)

39 
	#_MC_HASBASES
 0x2

	)

40 
	#_MC_FLAG_MASK
 (
_MC_HASSEGS
 | 
_MC_HASBASES
)

	)

42 
	s__mc⁄ãxt
 {

48 
__ªgi°î_t
 
	mmc_⁄°ack
;

49 
__ªgi°î_t
 
	mmc_rdi
;

50 
__ªgi°î_t
 
	mmc_rsi
;

51 
__ªgi°î_t
 
	mmc_rdx
;

52 
__ªgi°î_t
 
	mmc_rcx
;

53 
__ªgi°î_t
 
	mmc_r8
;

54 
__ªgi°î_t
 
	mmc_r9
;

55 
__ªgi°î_t
 
	mmc_øx
;

56 
__ªgi°î_t
 
	mmc_rbx
;

57 
__ªgi°î_t
 
	mmc_rbp
;

58 
__ªgi°î_t
 
	mmc_r10
;

59 
__ªgi°î_t
 
	mmc_r11
;

60 
__ªgi°î_t
 
	mmc_r12
;

61 
__ªgi°î_t
 
	mmc_r13
;

62 
__ªgi°î_t
 
	mmc_r14
;

63 
__ªgi°î_t
 
	mmc_r15
;

64 
__uöt32_t
 
	mmc_å≠no
;

65 
__uöt16_t
 
	mmc_fs
;

66 
__uöt16_t
 
	mmc_gs
;

67 
__ªgi°î_t
 
	mmc_addr
;

68 
__uöt32_t
 
	mmc_Êags
;

69 
__uöt16_t
 
	mmc_es
;

70 
__uöt16_t
 
	mmc_ds
;

71 
__ªgi°î_t
 
	mmc_îr
;

72 
__ªgi°î_t
 
	mmc_rù
;

73 
__ªgi°î_t
 
	mmc_cs
;

74 
__ªgi°î_t
 
	mmc_rÊags
;

75 
__ªgi°î_t
 
	mmc_r•
;

76 
__ªgi°î_t
 
	mmc_ss
;

78 
	mmc_Àn
;

80 
	#_MC_FPFMT_NODEV
 0x10000

	)

81 
	#_MC_FPFMT_XMM
 0x10002

	)

82 
	mmc_Âf‹m©
;

83 
	#_MC_FPOWNED_NONE
 0x20000

	)

84 
	#_MC_FPOWNED_FPU
 0x20001

	)

85 
	#_MC_FPOWNED_PCB
 0x20002

	)

86 
	mmc_ow√dÂ
;

90 
	mmc_Â°©e
[64] 
__Æig√d
(16);

92 
__ªgi°î_t
 
	mmc_fsba£
;

93 
__ªgi°î_t
 
	mmc_gsba£
;

95 
	mmc_•¨e
[6];

96 } 
	tmc⁄ãxt_t
;

	@/usr/include/machine/vm.h

30 #i‚de‡
_MACHINE_VM_H_


31 
	#_MACHINE_VM_H_


	)

33 
	~<machöe/•ecüÃeg.h
>

36 
	#VM_MEMATTR_UNCACHEABLE
 ((
vm_mem©å_t
)
PAT_UNCACHEABLE
)

	)

37 
	#VM_MEMATTR_WRITE_COMBINING
 ((
vm_mem©å_t
)
PAT_WRITE_COMBINING
)

	)

38 
	#VM_MEMATTR_WRITE_THROUGH
 ((
vm_mem©å_t
)
PAT_WRITE_THROUGH
)

	)

39 
	#VM_MEMATTR_WRITE_PROTECTED
 ((
vm_mem©å_t
)
PAT_WRITE_PROTECTED
)

	)

40 
	#VM_MEMATTR_WRITE_BACK
 ((
vm_mem©å_t
)
PAT_WRITE_BACK
)

	)

41 
	#VM_MEMATTR_UNCACHED
 ((
vm_mem©å_t
)
PAT_UNCACHED
)

	)

43 
	#VM_MEMATTR_DEFAULT
 
VM_MEMATTR_WRITE_BACK


	)

	@/usr/include/machine/vmparam.h

45 #i‚de‡
_MACHINE_VMPARAM_H_


46 
	#_MACHINE_VMPARAM_H_
 1

	)

55 
	#MAXTSIZ
 (128UL*1024*1024Ë

	)

56 #i‚de‡
DFLDSIZ


57 
	#DFLDSIZ
 (128UL*1024*1024Ë

	)

59 #i‚de‡
MAXDSIZ


60 
	#MAXDSIZ
 (32768UL*1024*1024Ë

	)

62 #i‚def 
DFLSSIZ


63 
	#DFLSSIZ
 (8UL*1024*1024Ë

	)

65 #i‚def 
MAXSSIZ


66 
	#MAXSSIZ
 (512UL*1024*1024Ë

	)

68 #i‚de‡
SGROWSIZ


69 
	#SGROWSIZ
 (128UL*1024Ë

	)

81 
	#MAXSLP
 20

	)

88 
	#UMA_MD_SMALL_ALLOC


	)

93 
	#VM_PHYSSEG_DENSE


	)

101 
	#VM_PHYSSEG_MAX
 31

	)

109 
	#VM_NFREEPOOL
 3

	)

110 
	#VM_FREEPOOL_CACHE
 2

	)

111 
	#VM_FREEPOOL_DEFAULT
 0

	)

112 
	#VM_FREEPOOL_DIRECT
 1

	)

120 
	#VM_NFREELIST
 2

	)

121 
	#VM_FREELIST_DEFAULT
 0

	)

122 
	#VM_FREELIST_ISADMA
 1

	)

132 
	#VM_NFREEORDER
 13

	)

137 #i‚def 
VM_NRESERVLEVEL


138 
	#VM_NRESERVLEVEL
 1

	)

144 #i‚def 
VM_LEVEL_0_ORDER


145 
	#VM_LEVEL_0_ORDER
 9

	)

164 
	#VM_MAX_KERNEL_ADDRESS
 
	`KVADDR
(
KPML4I
, 
NPDPEPG
-1, 
NPDEPG
-1, 
NPTEPG
-1)

	)

165 
	#VM_MIN_KERNEL_ADDRESS
 
	`KVADDR
(
KPML4I
, 
NPDPEPG
-512, 0, 0)

	)

167 
	#DMAP_MIN_ADDRESS
 
	`KVADDR
(
DMPML4I
, 0, 0, 0)

	)

168 
	#DMAP_MAX_ADDRESS
 
	`KVADDR
(
DMPML4I
+1, 0, 0, 0)

	)

170 
	#KERNBASE
 
	`KVADDR
(
KPML4I
, 
KPDPI
, 0, 0)

	)

172 
	#UPT_MAX_ADDRESS
 
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, PML4PML4I)

	)

173 
	#UPT_MIN_ADDRESS
 
	`KVADDR
(
PML4PML4I
, 0, 0, 0)

	)

175 
	#VM_MAXUSER_ADDRESS
 
	`UVADDR
(
NUPML4E
, 0, 0, 0)

	)

177 
	#USRSTACK
 
VM_MAXUSER_ADDRESS


	)

179 
	#VM_MAX_ADDRESS
 
UPT_MAX_ADDRESS


	)

180 
	#VM_MIN_ADDRESS
 (0)

	)

182 
	#PHYS_TO_DMAP
(
x
Ë((xË| 
DMAP_MIN_ADDRESS
)

	)

183 
	#DMAP_TO_PHYS
(
x
Ë((xË& ~
DMAP_MIN_ADDRESS
)

	)

186 #i‚de‡
VM_KMEM_SIZE


187 
	#VM_KMEM_SIZE
 (12 * 1024 * 1024)

	)

196 #i‚de‡
VM_KMEM_SIZE_SCALE


197 
	#VM_KMEM_SIZE_SCALE
 (1)

	)

203 #i‚de‡
VM_KMEM_SIZE_MAX


204 
	#VM_KMEM_SIZE_MAX
 ((
VM_MAX_KERNEL_ADDRESS
 - \

205 
VM_MIN_KERNEL_ADDRESS
 + 1Ë* 3 / 5)

	)

209 #i‚de‡
VM_INITIAL_PAGEIN


210 
	#VM_INITIAL_PAGEIN
 16

	)

	@/usr/include/openssl/opensslconf.h

6 #i‚de‡
OPENSSL_DOING_MAKEDEPEND


9 #i‚de‡
OPENSSL_NO_CMS


10 
	#OPENSSL_NO_CMS


	)

13 #i‚de‡
OPENSSL_NO_SEED


14 
	#OPENSSL_NO_SEED


	)

17 #i‚de‡
OPENSSL_NO_GMP


18 
	#OPENSSL_NO_GMP


	)

21 #i‚de‡
OPENSSL_NO_JPAKE


22 
	#OPENSSL_NO_JPAKE


	)

25 #i‚de‡
OPENSSL_NO_KRB5


26 
	#OPENSSL_NO_KRB5


	)

30 #i‚de‡
OPENSSL_THREADS


31 
	#OPENSSL_THREADS


	)

33 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


34 
	#OPENSSL_NO_STATIC_ENGINE


	)

41 #ifde‡
OPENSSL_ALGORITHM_DEFINES


42 #i‡
deföed
(
OPENSSL_NO_GMP
Ë&& !deföed(
NO_GMP
)

43 
	#NO_GMP


	)

45 #i‡
deföed
(
OPENSSL_NO_KRB5
Ë&& !deföed(
NO_KRB5
)

46 
	#NO_KRB5


	)

49 #ifde‡
OPENSSL_OTHER_DEFINES


50 #i‚de‡
NO_ASM


51 
	#NO_ASM


	)

58 #unde‡
I386_ONLY


60 #i‡!(
deföed
(
VMS
Ë|| deföed(
__VMS
))

61 #i‡
deföed
(
HEADER_CRYPTLIB_H
Ë&& !deföed(
OPENSSLDIR
)

62 
	#ENGINESDIR
 "/u§/lib/ígöes"

	)

63 
	#OPENSSLDIR
 "/ëc/s¶"

	)

67 #unde‡
OPENSSL_UNISTD


68 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

70 #unde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


72 #i‡
deföed
(
HEADER_IDEA_H
Ë&& !deföed(
IDEA_INT
)

73 
	#IDEA_INT
 

	)

76 #i‡
deföed
(
HEADER_MD2_H
Ë&& !deföed(
MD2_INT
)

77 
	#MD2_INT
 

	)

80 #i‡
deföed
(
HEADER_RC2_H
Ë&& !deföed(
RC2_INT
)

82 
	#RC2_INT
 

	)

85 #i‡
deföed
(
HEADER_RC4_H
)

86 #i‡!
deföed
(
RC4_INT
)

94 
	#RC4_INT
 

	)

96 #i‡!
deföed
(
RC4_CHUNK
)

101 
	#RC4_CHUNK
 

	)

105 #i‡(
deföed
(
HEADER_NEW_DES_H
Ë|| deföed(
HEADER_DES_H
)Ë&& !deföed(
DES_LONG
)

108 #i‚de‡
DES_LONG


109 
	#DES_LONG
 

	)

113 #i‡
deföed
(
HEADER_BN_H
Ë&& !deföed(
CONFIG_HEADER_BN_H
)

114 
	#CONFIG_HEADER_BN_H


	)

115 #unde‡
BN_LLONG


123 
	#SIXTY_FOUR_BIT_LONG


	)

124 #unde‡
SIXTY_FOUR_BIT


125 #unde‡
THIRTY_TWO_BIT


126 #unde‡
SIXTEEN_BIT


127 #unde‡
EIGHT_BIT


130 #i‡
deföed
(
HEADER_RC4_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_RC4_LOCL_H
)

131 
	#CONFIG_HEADER_RC4_LOCL_H


	)

134 #unde‡
RC4_INDEX


137 #i‡
deföed
(
HEADER_BF_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_BF_LOCL_H
)

138 
	#CONFIG_HEADER_BF_LOCL_H


	)

139 #unde‡
BF_PTR


142 #i‡
deföed
(
HEADER_DES_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_DES_LOCL_H
)

143 
	#CONFIG_HEADER_DES_LOCL_H


	)

144 #i‚de‡
DES_DEFAULT_OPTIONS


147 #i‚de‡
DES_PTR


148 #unde‡
DES_PTR


154 #i‚de‡
DES_RISC1


155 #unde‡
DES_RISC1


158 #i‚de‡
DES_RISC2


159 #unde‡
DES_RISC2


162 #i‡
deföed
(
DES_RISC1
Ë&& deföed(
DES_RISC2
)

163 
YOU
 
SHOULD
 
NOT
 
HAVE
 
BOTH
 
DES_RISC1
 
AND
 
DES_RISC2
 
	gDEFINED
!!!!!

168 #i‚de‡
DES_UNROLL


169 
	#DES_UNROLL


	)

175 #i‡!
deföed
(
DES_PTR
Ë&& !deföed(
DES_RISC1
Ë&& !deföed(
DES_RISC2
Ë&& !deföed(
DES_UNROLL
)

182 #i‡
deföed
–
sun
 )

183 
	#DES_PTR


	)

184 
	#DES_RISC1


	)

185 
	#DES_UNROLL


	)

186 #ñi‡
deföed
–
__u…rix
 )

187 
	#DES_PTR


	)

188 
	#DES_RISC2


	)

189 
	#DES_UNROLL


	)

190 #ñi‡
deföed
–
__osf1__
 )

191 
	#DES_PTR


	)

192 
	#DES_RISC2


	)

193 #ñi‡
deföed
 ( 
_AIX
 )

195 #ñi‡
deföed
–
__hpux
 )

197 #ñi‡
deföed
–
__aux
 )

199 #ñi‡
deföed
–
__dgux
 )

200 
	#DES_UNROLL


	)

201 #ñi‡
deföed
–
__sgi
 )

202 
	#DES_PTR


	)

203 
	#DES_RISC2


	)

204 
	#DES_UNROLL


	)

205 #ñi‡
deföed
–
i386
 )

206 
	#DES_PTR


	)

207 
	#DES_RISC1


	)

208 
	#DES_UNROLL


	)

	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
öt_CRYPTO_£t_do_dy∆ock_ˇŒback


72 
	#öt_CRYPTO_£t_do_dy∆ock_ˇŒback
 
öt_CRYPTO_£t_do_dy∆ock_cb


	)

75 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


76 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

77 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


78 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

81 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


82 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

86 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


87 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

88 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


89 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

94 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


95 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

96 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


97 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

102 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


103 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

104 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


105 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

109 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

113 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

115 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


116 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


118 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

121 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

127 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


128 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


130 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

133 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


134 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

137 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


138 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

139 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


140 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

141 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


142 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

143 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


144 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

145 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


146 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

149 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

151 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


152 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

153 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


154 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

157 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


158 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

159 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


160 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

161 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


162 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

163 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


164 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

167 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


168 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

169 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


170 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

171 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


172 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

173 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


174 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

175 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


176 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

177 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


178 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

179 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


180 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

181 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


182 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

184 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


185 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

186 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


187 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

188 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


189 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

190 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


191 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

194 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


195 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

196 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


197 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

198 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


199 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

200 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


201 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

202 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


203 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

204 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

205 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


206 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

209 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


210 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

211 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


212 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

213 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


214 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

217 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


218 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

219 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


220 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

223 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


224 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

225 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


226 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

229 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


230 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

231 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


232 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

233 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


234 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

235 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


236 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

237 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

238 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


239 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

240 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

241 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


242 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

243 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


244 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

245 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


246 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

247 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


248 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

249 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


250 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

251 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


252 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

253 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

254 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


255 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

256 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


257 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

258 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


259 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

260 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


261 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

262 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


263 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

264 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


265 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

266 
ec_GF2m_smp_±_£t_af_co‹ds


	)

267 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


268 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

269 
ec_GF2m_smp_±_gë_af_co‹ds


	)

270 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


271 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

272 
ec_GF2m_smp_£t_com¥_co‹ds


	)

273 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


274 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

275 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


276 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

277 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


278 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

279 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


280 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

281 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


282 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

283 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


284 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

285 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


286 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

287 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


288 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

289 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


290 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

291 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


292 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

293 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


294 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

295 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

296 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


297 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

298 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

299 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


300 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

301 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

302 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


303 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

304 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

305 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


306 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

307 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

308 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


309 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

310 
ec_GFp_smp_±_£t_af_co‹ds


	)

311 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


312 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

313 
ec_GFp_smp_±_gë_af_co‹ds


	)

314 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


315 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

316 
ec_GFp_smp_£t_com¥_co‹ds


	)

317 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


318 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

321 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


322 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

323 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


324 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

325 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


326 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

327 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


328 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

329 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


330 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

331 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


332 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

333 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


334 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

335 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


336 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

337 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


338 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

339 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


340 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

341 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


342 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

343 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


344 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

345 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


346 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

347 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


348 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

349 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


350 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

351 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


352 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

353 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


354 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

355 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


356 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

357 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


358 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

359 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


360 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

361 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


362 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

363 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


364 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

365 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


366 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

367 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


368 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

371 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


372 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

373 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


374 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

375 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


376 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

377 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


378 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

379 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


380 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

381 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


382 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

385 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


386 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

392 #i‡
deföed
(
OPENSSL_SYS_WIN16
Ë|| deföed(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

393 #unde‡
ERR_lﬂd_CRYPTO_°rögs


394 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

395 #unde‡
OCSP_¸lID_√w


396 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

398 #unde‡
d2i_ECPARAMETERS


399 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

400 #unde‡
i2d_ECPARAMETERS


401 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

402 #unde‡
d2i_ECPKPARAMETERS


403 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

404 #unde‡
i2d_ECPKPARAMETERS


405 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

413 #unde‡
X509v3_˛ónup_exãnsi⁄s


414 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

415 #unde‡
X509v3_add_exãnsi⁄


416 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

417 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


418 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

419 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


420 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

428 #unde‡
cms_D©a_¸óã


429 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/ui_compat.h

59 #i‚de‡
HEADER_UI_COMPAT_H


60 
	#HEADER_UI_COMPAT_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

63 
	~<›ís¶/ui.h
>

65 #ifde‡ 
__˝lu•lus


72 
	#des_ªad_pw_°rög
(
b
,
l
,
p
,
v
) \

73 
	`_os¶_ﬁd_des_ªad_pw_°rög
((
b
),(
l
),(
p
),(
v
))

	)

74 
	#des_ªad_pw
(
b
,
bf
,
s
,
p
,
v
) \

75 
	`_os¶_ﬁd_des_ªad_pw
((
b
),(
bf
),(
s
),(
p
),(
v
))

	)

77 
_os¶_ﬁd_des_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

78 
_os¶_ﬁd_des_ªad_pw
(*
buf
,*
buff
,
size
,c⁄° *
¥om±
,
vîify
);

80 #ifde‡ 
__˝lu•lus


	@/usr/include/runetype.h

40 #i‚def 
_RUNETYPE_H_


41 
	#_RUNETYPE_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_ty≥s.h
>

46 
	#_CACHED_RUNES
 (1 <<8 )

	)

47 
	#_CRMASK
 (~(
_CACHED_RUNES
 - 1))

	)

53 
__ru√_t
 
	m__mö
;

54 
__ru√_t
 
	m__max
;

55 
__ru√_t
 
	m__m≠
;

56 *
	m__ty≥s
;

57 } 
	t_Ru√E¡ry
;

60 
	m__ƒ™ges
;

61 
_Ru√E¡ry
 *
	m__ønges
;

62 } 
	t_Ru√R™ge
;

65 
	m__magic
[8];

66 
	m__ícodög
[32];

68 
__ru√_t
 (*
__sgëru√
)(c⁄° *, 
	m__size_t
, const **);

69 (*
	m__•uåu√
)(
	m__ru√_t
, *, 
	m__size_t
, **);

70 
__ru√_t
 
	m__övÆid_ru√
;

72 
	m__ru√ty≥
[
_CACHED_RUNES
];

73 
__ru√_t
 
	m__m≠lowî
[
_CACHED_RUNES
];

74 
__ru√_t
 
	m__m≠uµî
[
_CACHED_RUNES
];

81 
_Ru√R™ge
 
	m__ru√ty≥_ext
;

82 
_Ru√R™ge
 
	m__m≠lowî_ext
;

83 
_Ru√R™ge
 
	m__m≠uµî_ext
;

85 *
	m__v¨übÀ
;

86 
	m__v¨übÀ_Àn
;

87 } 
	t_Ru√LoˇÀ
;

89 
	#_RUNE_MAGIC_1
 "Ru√Magi"

	)

91 
_Ru√LoˇÀ
 
_DeÁu…Ru√LoˇÀ
;

92 
_Ru√LoˇÀ
 *
_CuºítRu√LoˇÀ
;

	@/usr/include/sys/_lockmgr.h

31 #i‚de‡
_SYS__LOCKMGR_H_


32 
	#_SYS__LOCKMGR_H_


	)

34 #ifde‡
DEBUG_LOCKS


35 
	~<sys/_°ack.h
>

38 
	slock
 {

39 
lock_obje˘
 
	mlock_obje˘
;

40 vﬁ©ûê
uöçå_t
 
	mlk_lock
;

41 
	mlk_timo
;

42 
	mlk_¥i
;

43 #ifde‡
DEBUG_LOCKS


44 
°ack
 
	mlk_°ack
;

	@/usr/include/sys/_rwlock.h

32 #i‚de‡
_SYS__RWLOCK_H_


33 
	#_SYS__RWLOCK_H_


	)

38 
	srwlock
 {

39 
lock_obje˘
 
	mlock_obje˘
;

40 vﬁ©ûê
uöçå_t
 
	mrw_lock
;

	@/usr/include/sys/_sigset.h

38 #i‚de‡
_SYS__SIGSET_H_


39 
	#_SYS__SIGSET_H_


	)

44 
	#_SIG_WORDS
 4

	)

45 
	#_SIG_MAXSIG
 128

	)

46 
	#_SIG_IDX
(
sig
Ë((sigË- 1)

	)

47 
	#_SIG_WORD
(
sig
Ë(
	`_SIG_IDX
(sigË>> 5)

	)

48 
	#_SIG_BIT
(
sig
Ë(1 << (
	`_SIG_IDX
(sigË& 31))

	)

49 
	#_SIG_VALID
(
sig
Ë((sigË<
_SIG_MAXSIG
 && (sigË> 0)

	)

51 
	s__sig£t
 {

52 
__uöt32_t
 
	m__bôs
[
_SIG_WORDS
];

53 } 
	t__sig£t_t
;

55 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
)

56 
	tosig£t_t
;

	@/usr/include/sys/bufobj.h

49 #i‚de‡
_SYS_BUFOBJ_H_


50 
	#_SYS_BUFOBJ_H_


	)

52 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KVM_VNODE
)

54 
	~<sys/queue.h
>

55 
	~<sys/_lock.h
>

56 
	~<sys/_muãx.h
>

58 
	gbufobj
;

59 
	gbuf_›s
;

61 
buf_›s
 
buf_›s_bio
;

63 
TAILQ_HEAD
(
buÊi°s
, 
buf
);

66 
	sbufv
 {

67 
buÊi°s
 
	mbv_hd
;

68 
buf
 *
	mbv_roŸ
;

69 
	mbv_˙t
;

72 
	tb_°øãgy_t
(
	tbufobj
 *, 
	tbuf
 *);

73 
	tb_wrôe_t
(
	tbuf
 *);

74 
	tb_sync_t
(
	tbufobj
 *, 
	twaôf‹
);

75 
	tb_bdÊush_t
(
	tbufobj
 *, 
	tbuf
 *);

77 
	sbuf_›s
 {

78 *
	mb›_«me
;

79 
b_wrôe_t
 *
	mb›_wrôe
;

80 
b_°øãgy_t
 *
	mb›_°øãgy
;

81 
b_sync_t
 *
	mb›_sync
;

82 
b_bdÊush_t
 *
	mb›_bdÊush
;

85 
	#BO_STRATEGY
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_°øãgy
((bo), (bp)))

	)

86 
	#BO_SYNC
(
bo
, 
w
Ë((bo)->
bo_›s
->
	`b›_sync
((bo), (w)))

	)

87 
	#BO_WRITE
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_wrôe
((bp)))

	)

88 
	#BO_BDFLUSH
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_bdÊush
((bo), (bp)))

	)

90 
	sbufobj
 {

91 
mtx
 
	mbo_mtx
;

92 
bufv
 
	mbo_˛ón
;

93 
bufv
 
	mbo_dúty
;

94 
	mbo_numouçut
;

95 
u_öt
 
	mbo_Êag
;

96 
buf_›s
 *
	mbo_›s
;

97 
	mbo_bsize
;

98 
vm_obje˘
 *
	mbo_obje˘
;

99 
LIST_ENTRY
(
bufobj
Ë
	mbo_syn˛i°
;

100 *
	mbo_¥iv©e
;

101 
vnode
 *
	m__bo_vnode
;

112 
	#BO_ONWORKLST
 (1 << 0Ë

	)

113 
	#BO_WWAIT
 (1 << 1Ë

	)

114 
	#BO_NEEDSGIANT
 (1 << 2Ë

	)

116 
	#BO_MTX
(
bo
Ë(&(bo)->
bo_mtx
)

	)

117 
	#BO_LOCK
(
bo
Ë
	`mtx_lock
(
	`BO_MTX
((bo)))

	)

118 
	#BO_UNLOCK
(
bo
Ë
	`mtx_u∆ock
(
	`BO_MTX
((bo)))

	)

119 
	#ASSERT_BO_LOCKED
(
bo
Ë
	`mtx_as£π
(
	`BO_MTX
((bo)), 
MA_OWNED
)

	)

120 
	#ASSERT_BO_UNLOCKED
(
bo
Ë
	`mtx_as£π
(
	`BO_MTX
((bo)), 
MA_NOTOWNED
)

	)

122 
bufobj_wdr›
(
bufobj
 *
bo
);

123 
bufobj_wªf
(
bufobj
 *
bo
);

124 
bufobj_wªÊ
(
bufobj
 *
bo
);

125 
bufobj_övÆbuf
(
bufobj
 *
bo
, 
Êags
, 
¶pÊag
, 
¶±imeo
);

126 
bufobj_wwaô
(
bufobj
 *
bo
, 
¶pÊag
, 
timeo
);

127 
bufsync
(
bufobj
 *
bo
, 
waôf‹
);

128 
bufbdÊush
(
bufobj
 *
bo
, 
buf
 *
bp
);

	@/usr/include/sys/ktr.h

36 #i‚de‡
_SYS_KTR_H_


37 
	#_SYS_KTR_H_


	)

47 
	#KTR_GEN
 0x00000001

	)

48 
	#KTR_NET
 0x00000002

	)

49 
	#KTR_DEV
 0x00000004

	)

50 
	#KTR_LOCK
 0x00000008

	)

51 
	#KTR_SMP
 0x00000010

	)

52 
	#KTR_SUBSYS
 0x00000020

	)

53 
	#KTR_PMAP
 0x00000040

	)

54 
	#KTR_MALLOC
 0x00000080

	)

55 
	#KTR_TRAP
 0x00000100

	)

56 
	#KTR_INTR
 0x00000200

	)

57 
	#KTR_SIG
 0x00000400

	)

58 
	#KTR_SPARE2
 0x00000800

	)

59 
	#KTR_PROC
 0x00001000

	)

60 
	#KTR_SYSC
 0x00002000

	)

61 
	#KTR_INIT
 0x00004000

	)

62 
	#KTR_SPARE3
 0x00008000

	)

63 
	#KTR_SPARE4
 0x00010000

	)

64 
	#KTR_EVH
 0x00020000

	)

65 
	#KTR_VFS
 0x00040000

	)

66 
	#KTR_VOP
 0x00080000

	)

67 
	#KTR_VM
 0x00100000

	)

68 
	#KTR_INET
 0x00200000

	)

69 
	#KTR_RUNQ
 0x00400000

	)

70 
	#KTR_CONTENTION
 0x00800000

	)

71 
	#KTR_UMA
 0x01000000

	)

72 
	#KTR_CALLOUT
 0x02000000

	)

73 
	#KTR_GEOM
 0x04000000

	)

74 
	#KTR_BUSDMA
 0x08000000

	)

75 
	#KTR_INET6
 0x10000000

	)

76 
	#KTR_SCHED
 0x20000000

	)

77 
	#KTR_BUF
 0x40000000

	)

78 
	#KTR_ALL
 0x7fffffff

	)

84 
	#KTR_CT1
 0x01000000

	)

85 
	#KTR_CT2
 0x02000000

	)

86 
	#KTR_CT3
 0x04000000

	)

87 
	#KTR_CT4
 0x08000000

	)

88 
	#KTR_CT5
 0x10000000

	)

89 
	#KTR_CT6
 0x20000000

	)

90 
	#KTR_CT7
 0x40000000

	)

91 
	#KTR_CT8
 0x80000000

	)

94 #ifde‡
KTR


95 #i‚de‡
KTR_COMPILE


96 
	#KTR_COMPILE
 (
KTR_ALL
)

	)

99 #unde‡
KTR_COMPILE


100 
	#KTR_COMPILE
 0

	)

107 
	#KTR_VERSION
 2

	)

109 
	#KTR_PARMS
 6

	)

111 #i‚de‡
LOCORE


113 
	skå_íåy
 {

114 
u_öt64_t
 
	mkå_time°amp
;

115 
	mkå_˝u
;

116 
	mkå_löe
;

117 c⁄° *
	mkå_fûe
;

118 c⁄° *
	mkå_desc
;

119 
thªad
 *
	mkå_thªad
;

120 
u_l⁄g
 
	mkå_∑rms
[
KTR_PARMS
];

123 
kå_˝umask
;

124 
kå_mask
;

125 
kå_íåõs
;

126 
kå_vîbo£
;

128 vﬁ©ûê
kå_idx
;

129 
kå_íåy
 
kå_buf
[];

131 #ifde‡
KTR


133 
kå_åa˚poöt
(
u_öt
 
mask
, c⁄° *
fûe
, 
löe
,

134 c⁄° *
f‹m©
, 
u_l⁄g
 
¨g1
, u_l⁄g 
¨g2
, u_l⁄g 
¨g3
,

135 
u_l⁄g
 
¨g4
, u_l⁄g 
¨g5
, u_l⁄g 
¨g6
);

137 
	#CTR6
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
) do { \

138 i‡(
KTR_COMPILE
 & (
m
)) \

139 
	`kå_åa˚poöt
((
m
), 
__FILE__
, 
__LINE__
, 
f‹m©
, \

140 (
u_l⁄g
)(
p1
), (u_l⁄g)(
p2
), (u_l⁄g)(
p3
), \

141 (
u_l⁄g
)(
p4
), (u_l⁄g)(
p5
), (u_l⁄g)(
p6
)); \

142 } 0)

	)

143 
	#CTR0
(
m
, 
f‹m©
Ë
	`CTR6
(m, f‹m©, 0, 0, 0, 0, 0, 0)

	)

144 
	#CTR1
(
m
, 
f‹m©
, 
p1
Ë
	`CTR6
(m, f‹m©,Ö1, 0, 0, 0, 0, 0)

	)

145 
	#CTR2
(
m
, 
f‹m©
, 
p1
, 
p2
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2, 0, 0, 0, 0)

	)

146 
	#CTR3
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3, 0, 0, 0)

	)

147 
	#CTR4
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3,Ö4, 0, 0)

	)

148 
	#CTR5
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3,Ö4,Ö5, 0)

	)

150 
	#CTR0
(
m
, 
d
Ë()0

	)

151 
	#CTR1
(
m
, 
d
, 
p1
Ë()0

	)

152 
	#CTR2
(
m
, 
d
, 
p1
, 
p2
Ë()0

	)

153 
	#CTR3
(
m
, 
d
, 
p1
, 
p2
, 
p3
Ë()0

	)

154 
	#CTR4
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë()0

	)

155 
	#CTR5
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë()0

	)

156 
	#CTR6
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë()0

	)

159 
	#TR0
(
d
Ë
	`CTR0
(
KTR_GEN
, d)

	)

160 
	#TR1
(
d
, 
p1
Ë
	`CTR1
(
KTR_GEN
, d,Ö1)

	)

161 
	#TR2
(
d
, 
p1
, 
p2
Ë
	`CTR2
(
KTR_GEN
, d,Ö1,Ö2)

	)

162 
	#TR3
(
d
, 
p1
, 
p2
, 
p3
Ë
	`CTR3
(
KTR_GEN
, d,Ö1,Ö2,Ö3)

	)

163 
	#TR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR4
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4)

	)

164 
	#TR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR5
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4,Ö5)

	)

165 
	#TR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë
	`CTR6
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4,Ö5,Ö6)

	)

188 
	#KTR_ATTR_LINKED
 "lökedto:\"%s\""

	)

189 
	#KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
) \

190 "KTRGRAPH group:\"" 
egroup
 "\", id:\"%s\", " 
ëy≥
 ",áâribuãs: "

	)

192 
	#KTR_EVENT0
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
) \

193 
	`CTR2
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë"n⁄e", idít, 
ed©
)

	)

194 
	#KTR_EVENT1
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
) \

195 
	`CTR3
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
, idít, 
ed©
, (
v0
))

	)

196 
	#KTR_EVENT2
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
, 
a1
, 
v1
) \

197 
	`CTR4
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
, \

198 
idít
, 
ed©
, (
v0
), (
v1
))

	)

199 
	#KTR_EVENT3
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
)\

200 
	`CTR5
(
m
,
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
 ", " 
a2
, \

201 
idít
, 
ed©
, (
v0
), (
v1
), (
v2
))

	)

202 
	#KTR_EVENT4
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, \

203 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
) \

204 
	`CTR6
(
m
,
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
 ", " 
a2
 ", " 
a3
,\

205 
idít
, 
ed©
, (
v0
), (
v1
), (
v2
), (
v3
))

	)

210 
	#KTR_STATE0
(
m
, 
egroup
, 
idít
, 
°©e
) \

211 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
)

	)

212 
	#KTR_STATE1
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
) \

213 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
, 
a0
, (
v0
))

	)

214 
	#KTR_STATE2
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
) \

215 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

216 
	#KTR_STATE3
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

217 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "state:\"%s\"", \

218 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

219 
	#KTR_STATE4
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

220 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "state:\"%s\"", \

221 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

227 
	#KTR_COUNTER0
(
m
, 
egroup
, 
idít
, 
cou¡î
) \

228 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
)

	)

229 
	#KTR_COUNTER1
(
m
, 
egroup
, 
idít
, 
ed©
, 
a0
, 
v0
) \

230 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
, 
a0
, (
v0
))

	)

231 
	#KTR_COUNTER2
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
) \

232 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

233 
	#KTR_COUNTER3
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

234 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "counter:%d", \

235 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

236 
	#KTR_COUNTER4
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

237 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "counter:%d", \

238 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

243 
	#KTR_POINT0
(
m
, 
egroup
, 
idít
, 
poöt
) \

244 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
)

	)

245 
	#KTR_POINT1
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
) \

246 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, 
a0
, (
v0
))

	)

247 
	#KTR_POINT2
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
) \

248 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

249 
	#KTR_POINT3
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

250 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, \

251 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

252 
	#KTR_POINT4
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

253 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "point:\"%s\"", \

254 
poöt
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

262 #i‡(
KTR_COMPILE
 & 
KTR_INIT
) != 0

263 
	#ITR0
(
d
Ë
	`CTR0
(
KTR_INIT
, d)

	)

264 
	#ITR1
(
d
, 
p1
Ë
	`CTR1
(
KTR_INIT
, d,Ö1)

	)

265 
	#ITR2
(
d
, 
p1
, 
p2
Ë
	`CTR2
(
KTR_INIT
, d,Ö1,Ö2)

	)

266 
	#ITR3
(
d
, 
p1
, 
p2
, 
p3
Ë
	`CTR3
(
KTR_INIT
, d,Ö1,Ö2,Ö3)

	)

267 
	#ITR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR4
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4)

	)

268 
	#ITR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR5
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4,Ö5)

	)

269 
	#ITR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë
	`CTR6
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4,Ö5,Ö6)

	)

271 
	#ITR0
(
d
)

	)

272 
	#ITR1
(
d
, 
p1
)

	)

273 
	#ITR2
(
d
, 
p1
, 
p2
)

	)

274 
	#ITR3
(
d
, 
p1
, 
p2
, 
p3
)

	)

275 
	#ITR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
)

	)

276 
	#ITR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
)

	)

277 
	#ITR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
)

	)

	@/usr/include/sys/malloc.h

35 #i‚de‡
_SYS_MALLOC_H_


36 
	#_SYS_MALLOC_H_


	)

38 
	~<sys/∑øm.h
>

39 
	~<sys/queue.h
>

40 
	~<sys/_lock.h
>

41 
	~<sys/_muãx.h
>

43 
	#MINALLOCSIZE
 
UMA_SMALLEST_UNIT


	)

48 
	#M_NOWAIT
 0x0001

	)

49 
	#M_WAITOK
 0x0002

	)

50 
	#M_ZERO
 0x0100

	)

51 
	#M_NOVM
 0x0200

	)

52 
	#M_USE_RESERVE
 0x0400

	)

54 
	#M_MAGIC
 877983977

	)

72 
	smÆloc_ty≥_°©s
 {

73 
uöt64_t
 
	mmts_memÆlo˚d
;

74 
uöt64_t
 
	mmts_mem‰ìd
;

75 
uöt64_t
 
	mmts_numÆlocs
;

76 
uöt64_t
 
	mmts_num‰ìs
;

77 
uöt64_t
 
	mmts_size
;

78 
uöt64_t
 
	m_mts_ª£rved1
;

79 
uöt64_t
 
	m_mts_ª£rved2
;

80 
uöt64_t
 
	m_mts_ª£rved3
;

86 
	#DTMALLOC_PROBE_MALLOC
 0

	)

87 
	#DTMALLOC_PROBE_FREE
 1

	)

88 
	#DTMALLOC_PROBE_MAX
 2

	)

90 
	smÆloc_ty≥_öã∫Æ
 {

91 
uöt32_t
 
	mmti_¥obes
[
DTMALLOC_PROBE_MAX
];

93 
mÆloc_ty≥_°©s
 
	mmti_°©s
[
MAXCPU
];

101 
	smÆloc_ty≥
 {

102 
mÆloc_ty≥
 *
	mks_√xt
;

103 
u_l⁄g
 
	mks_magic
;

104 c⁄° *
	mks_sh‹tdesc
;

105 *
	mks_h™dÀ
;

115 
	#MALLOC_TYPE_STREAM_VERSION
 0x00000001

	)

116 
	smÆloc_ty≥_°ªam_hódî
 {

117 
uöt32_t
 
	mmtsh_vîsi⁄
;

118 
uöt32_t
 
	mmtsh_max˝us
;

119 
uöt32_t
 
	mmtsh_cou¡
;

120 
uöt32_t
 
	m_mtsh_∑d
;

123 
	#MALLOC_MAX_NAME
 32

	)

124 
	smÆloc_ty≥_hódî
 {

125 
	mmth_«me
[
MALLOC_MAX_NAME
];

128 #ifde‡
_KERNEL


129 
	#MALLOC_DEFINE
(
ty≥
, 
sh‹tdesc
, 
l⁄gdesc
) \

130 
mÆloc_ty≥
 
ty≥
[1] = { \

131 { 
NULL
, 
M_MAGIC
, 
sh‹tdesc
, NULL } \

133 
	`SYSINIT
(
ty≥
##
_öô
, 
SI_SUB_KMEM
, 
SI_ORDER_SECOND
, 
mÆloc_öô
, \

134 
ty≥
); \

135 
	`SYSUNINIT
(
ty≥
##
_unöô
, 
SI_SUB_KMEM
, 
SI_ORDER_ANY
, \

136 
mÆloc_unöô
, 
ty≥
)

	)

138 
	#MALLOC_DECLARE
(
ty≥
) \

139 
mÆloc_ty≥
 
ty≥
[1]

	)

141 
MALLOC_DECLARE
(
M_CACHE
);

142 
MALLOC_DECLARE
(
M_DEVBUF
);

143 
MALLOC_DECLARE
(
M_TEMP
);

145 
MALLOC_DECLARE
(
M_IP6OPT
);

146 
MALLOC_DECLARE
(
M_IP6NDP
);

151 
	#MALLOC
(
•a˚
, 
ˇ°
, 
size
, 
ty≥
, 
Êags
) \

152 ((
•a˚
Ë(
ˇ°
)
	`mÆloc
((
u_l⁄g
)(
size
), (
ty≥
), (
Êags
)))

	)

153 
	#FREE
(
addr
, 
ty≥
Ë
	`‰ì
(◊ddr), (ty≥))

	)

160 
MALLOC_DECLARE
(
M_IOV
);

162 
mtx
 
mÆloc_mtx
;

167 
	tmÆloc_ty≥_li°_func_t
(
	tmÆloc_ty≥
 *, *);

169 
c⁄tig‰ì
(*
addr
, 
size
, 
mÆloc_ty≥
 *
ty≥
);

170 *
	$c⁄tigmÆloc
(
size
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
,

171 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, 
Æignmít
,

172 
bound¨y
Ë
__mÆloc_like
;

173 
	`‰ì
(*
addr
, 
mÆloc_ty≥
 *
ty≥
);

174 *
	$mÆloc
(
size
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
Ë
__mÆloc_like
;

175 
	`mÆloc_öô
(*);

176 
	`mÆloc_œ°_Áû
();

177 
	`mÆloc_ty≥_Æloˇãd
(
mÆloc_ty≥
 *
ty≥
, 
size
);

178 
	`mÆloc_ty≥_‰ìd
(
mÆloc_ty≥
 *
ty≥
, 
size
);

179 
	`mÆloc_ty≥_li°
(
mÆloc_ty≥_li°_func_t
 *, *);

180 
	`mÆloc_unöô
(*);

181 *
	`ªÆloc
(*
addr
, 
size
, 
mÆloc_ty≥
 *
ty≥
,

182 
Êags
);

183 *
	`ªÆlocf
(*
addr
, 
size
, 
mÆloc_ty≥
 *
ty≥
,

184 
Êags
);

186 
mÆloc_ty≥
 *
	`mÆloc_desc2ty≥
(c⁄° *
desc
);

	@/usr/include/sys/mutex.h

32 #i‚de‡
_SYS_MUTEX_H_


33 
	#_SYS_MUTEX_H_


	)

35 #i‚de‡
LOCORE


36 
	~<sys/queue.h
>

37 
	~<sys/_lock.h
>

38 
	~<sys/_muãx.h
>

40 #ifde‡
_KERNEL


41 
	~<sys/p˝u.h
>

42 
	~<sys/lock_¥ofûe.h
>

43 
	~<sys/lock°©.h
>

44 
	~<machöe/©omic.h
>

45 
	~<machöe/˝ufunc.h
>

49 
	~<machöe/muãx.h
>

51 #ifde‡
_KERNEL


57 
	#MTX_DEF
 0x00000000

	)

58 
	#MTX_SPIN
 0x00000001

	)

59 
	#MTX_RECURSE
 0x00000004

	)

60 
	#MTX_NOWITNESS
 0x00000008

	)

61 
	#MTX_NOPROFILE
 0x00000020

	)

67 
	#MTX_QUIET
 
LOP_QUIET


	)

68 
	#MTX_DUPOK
 
LOP_DUPOK


	)

74 
	#MTX_RECURSED
 0x00000001

	)

75 
	#MTX_CONTESTED
 0x00000002

	)

76 
	#MTX_UNOWNED
 0x00000004

	)

77 
	#MTX_FLAGMASK
 (
MTX_RECURSED
 | 
MTX_CONTESTED
 | 
MTX_UNOWNED
)

	)

82 
	#MTX_DESTROYED
 (
MTX_CONTESTED
 | 
MTX_UNOWNED
)

	)

86 #i‚de‡
LOCORE


92 
	#mp_fixme
(
°rög
)

	)

94 #ifde‡
_KERNEL


107 
mtx_öô
(
mtx
 *
m
, c⁄° *
«me
, c⁄° *
ty≥
, 
›ts
);

108 
mtx_de°roy
(
mtx
 *
m
);

109 
mtx_sysöô
(*
¨g
);

110 
muãx_öô
();

111 
_mtx_lock_¶ìp
(
mtx
 *
m
, 
uöçå_t
 
tid
, 
›ts
,

112 c⁄° *
fûe
, 
löe
);

113 
_mtx_u∆ock_¶ìp
(
mtx
 *
m
, 
›ts
, c⁄° *
fûe
, 
löe
);

114 #ifde‡
SMP


115 
_mtx_lock_•ö
(
mtx
 *
m
, 
uöçå_t
 
tid
, 
›ts
,

116 c⁄° *
fûe
, 
löe
);

118 
_mtx_u∆ock_•ö
(
mtx
 *
m
, 
›ts
, c⁄° *
fûe
, 
löe
);

119 
_mtx_åylock
(
mtx
 *
m
, 
›ts
, c⁄° *
fûe
, 
löe
);

120 
_mtx_lock_Êags
(
mtx
 *
m
, 
›ts
, c⁄° *
fûe
, 
löe
);

121 
_mtx_u∆ock_Êags
(
mtx
 *
m
, 
›ts
, c⁄° *
fûe
, 
löe
);

122 
_mtx_lock_•ö_Êags
(
mtx
 *
m
, 
›ts
, c⁄° *
fûe
,

123 
löe
);

124 
_mtx_u∆ock_•ö_Êags
(
mtx
 *
m
, 
›ts
, c⁄° *
fûe
,

125 
löe
);

126 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

127 
_mtx_as£π
(
mtx
 *
m
, 
wh©
, c⁄° *
fûe
, 
löe
);

129 
_thªad_lock_Êags
(
thªad
 *, , const *, );

131 
	#thªad_lock
(
tdp
) \

132 
	`_thªad_lock_Êags
((
tdp
), 0, 
__FILE__
, 
__LINE__
)

	)

133 
	#thªad_lock_Êags
(
tdp
, 
›t
) \

134 
	`_thªad_lock_Êags
((
tdp
), (
›t
), 
__FILE__
, 
__LINE__
)

	)

135 
	#thªad_u∆ock
(
tdp
) \

136 
	`mtx_u∆ock_•ö
((
tdp
)->
td_lock
)

	)

138 
	#mtx_ªcur£
 
lock_obje˘
.
lo_d©a


	)

146 #i‚de‡
_obèö_lock


147 
	#_obèö_lock
(
mp
, 
tid
) \

148 
	`©omic_cmp£t_acq_±r
(&(
mp
)->
mtx_lock
, 
MTX_UNOWNED
, (
tid
))

	)

152 #i‚de‡
_ªÀa£_lock


153 
	#_ªÀa£_lock
(
mp
, 
tid
) \

154 
	`©omic_cmp£t_ªl_±r
(&(
mp
)->
mtx_lock
, (
tid
), 
MTX_UNOWNED
)

	)

158 #i‚de‡
_ªÀa£_lock_quick


159 
	#_ªÀa£_lock_quick
(
mp
) \

160 
	`©omic_°‹e_ªl_±r
(&(
mp
)->
mtx_lock
, 
MTX_UNOWNED
)

	)

167 #i‚de‡
_gë_¶ìp_lock


168 
	#_gë_¶ìp_lock
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

169 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

170 i‡(!
	`_obèö_lock
((
mp
), 
_tid
)) \

171 
	`_mtx_lock_¶ìp
((
mp
), 
_tid
, (
›ts
), (
fûe
), (
löe
)); \

173 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
LS_MTX_LOCK_ACQUIRE
, \

174 
mp
, 0, 0, (
fûe
), (
löe
)); \

175 } 0)

	)

185 #i‚de‡
_gë_•ö_lock


186 #ifde‡
SMP


187 
	#_gë_•ö_lock
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

188 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

189 
	`•ölock_íãr
(); \

190 i‡(!
	`_obèö_lock
((
mp
), 
_tid
)) { \

191 i‡((
mp
)->
mtx_lock
 =
_tid
) \

192 (
mp
)->
mtx_ªcur£
++; \

194 
	`_mtx_lock_•ö
((
mp
), 
_tid
, (
›ts
), (
fûe
), (
löe
)); \

197 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
LS_MTX_SPIN_LOCK_ACQUIRE
, \

198 
mp
, 0, 0, (
fûe
), (
löe
)); \

199 } 0)

	)

201 
	#_gë_•ö_lock
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

202 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

204 
	`•ölock_íãr
(); \

205 i‡((
mp
)->
mtx_lock
 =
_tid
) \

206 (
mp
)->
mtx_ªcur£
++; \

208 
	`KASSERT
((
mp
)->
mtx_lock
 =
MTX_UNOWNED
, ("corrupt spinlock")); \

209 (
mp
)->
mtx_lock
 = 
_tid
; \

211 } 0)

	)

219 #i‚de‡
_ªl_¶ìp_lock


220 
	#_ªl_¶ìp_lock
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

221 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

223 i‡(!
	`_ªÀa£_lock
((
mp
), 
_tid
)) \

224 
	`_mtx_u∆ock_¶ìp
((
mp
), (
›ts
), (
fûe
), (
löe
)); \

225 } 0)

	)

238 #i‚de‡
_ªl_•ö_lock


239 #ifde‡
SMP


240 
	#_ªl_•ö_lock
(
mp
) do { \

241 i‡(
	`mtx_ªcur£d
((
mp
))) \

242 (
mp
)->
mtx_ªcur£
--; \

244 
	`LOCKSTAT_PROFILE_RELEASE_LOCK
(
LS_MTX_SPIN_UNLOCK_RELEASE
, \

245 
mp
); \

246 
	`_ªÀa£_lock_quick
((
mp
)); \

248 
	`•ölock_exô
(); \

249 } 0)

	)

251 
	#_ªl_•ö_lock
(
mp
) do { \

252 i‡(
	`mtx_ªcur£d
((
mp
))) \

253 (
mp
)->
mtx_ªcur£
--; \

255 
	`LOCKSTAT_PROFILE_RELEASE_LOCK
(
LS_MTX_SPIN_UNLOCK_RELEASE
, \

256 
mp
); \

257 (
mp
)->
mtx_lock
 = 
MTX_UNOWNED
; \

259 
	`•ölock_exô
(); \

260 } 0)

	)

295 
	#mtx_lock
(
m
Ë
	`mtx_lock_Êags
((m), 0)

	)

296 
	#mtx_lock_•ö
(
m
Ë
	`mtx_lock_•ö_Êags
((m), 0)

	)

297 
	#mtx_åylock
(
m
Ë
	`mtx_åylock_Êags
((m), 0)

	)

298 
	#mtx_u∆ock
(
m
Ë
	`mtx_u∆ock_Êags
((m), 0)

	)

299 
	#mtx_u∆ock_•ö
(
m
Ë
	`mtx_u∆ock_•ö_Êags
((m), 0)

	)

301 
	gmtx_poﬁ
;

303 
mtx_poﬁ
 *
mtx_poﬁ_¸óã
(c⁄° *
mtx_«me
, 
poﬁ_size
, 
›ts
);

304 
mtx_poﬁ_de°roy
(
mtx_poﬁ
 **
poﬁp
);

305 
mtx
 *
mtx_poﬁ_föd
(
mtx_poﬁ
 *
poﬁ
, *
±r
);

306 
mtx
 *
mtx_poﬁ_Æloc
(
mtx_poﬁ
 *
poﬁ
);

307 
	#mtx_poﬁ_lock
(
poﬁ
, 
±r
) \

308 
	`mtx_lock
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

309 
	#mtx_poﬁ_lock_•ö
(
poﬁ
, 
±r
) \

310 
	`mtx_lock_•ö
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

311 
	#mtx_poﬁ_u∆ock
(
poﬁ
, 
±r
) \

312 
	`mtx_u∆ock
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

313 
	#mtx_poﬁ_u∆ock_•ö
(
poﬁ
, 
±r
) \

314 
	`mtx_u∆ock_•ö
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

322 
mtx_poﬁ
 *
mtxpoﬁ_lockbuûdî
;

323 
mtx_poﬁ
 *
mtxpoﬁ_¶ìp
;

325 #i‚de‡
LOCK_DEBUG


326 #îr‹ 
LOCK_DEBUG
 
nŸ
 
deföed
, 
ö˛ude
 <
sys
/
lock
.
h
> 
bef‹e
 <sys/
muãx
.h>

328 #i‡
LOCK_DEBUG
 > 0 || 
deföed
(
MUTEX_NOINLINE
)

329 
	#mtx_lock_Êags
(
m
, 
›ts
) \

330 
	`_mtx_lock_Êags
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

331 
	#mtx_u∆ock_Êags
(
m
, 
›ts
) \

332 
	`_mtx_u∆ock_Êags
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

333 
	#mtx_lock_•ö_Êags
(
m
, 
›ts
) \

334 
	`_mtx_lock_•ö_Êags
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

335 
	#mtx_u∆ock_•ö_Êags
(
m
, 
›ts
) \

336 
	`_mtx_u∆ock_•ö_Êags
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

338 
	#mtx_lock_Êags
(
m
, 
›ts
) \

339 
	`_gë_¶ìp_lock
((
m
), 
cuπhªad
, (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

340 
	#mtx_u∆ock_Êags
(
m
, 
›ts
) \

341 
	`_ªl_¶ìp_lock
((
m
), 
cuπhªad
, (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

342 
	#mtx_lock_•ö_Êags
(
m
, 
›ts
) \

343 
	`_gë_•ö_lock
((
m
), 
cuπhªad
, (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

344 
	#mtx_u∆ock_•ö_Êags
(
m
, 
›ts
) \

345 
	`_ªl_•ö_lock
((
m
))

	)

348 
	#mtx_åylock_Êags
(
m
, 
›ts
) \

349 
	`_mtx_åylock
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

351 
	#mtx_¶ìp
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
timo
) \

352 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), (
timo
))

	)

354 
	#mtx_öôülized
(
m
Ë
	`lock_öôÆized
(&(m)->
lock_obje˘
)

	)

356 
	#mtx_ow√d
(
m
Ë(((m)->
mtx_lock
 & ~
MTX_FLAGMASK
Ë=(
uöçå_t
)
cuπhªad
)

	)

358 
	#mtx_ªcur£d
(
m
Ë((m)->
mtx_ªcur£
 !0)

	)

360 
	#mtx_«me
(
m
Ë((m)->
lock_obje˘
.
lo_«me
)

	)

365 
mtx
 
Gü¡
;

366 
mtx
 
blocked_lock
;

375 #i‚de‡
DROP_GIANT


376 
	#DROP_GIANT
() \

378 
_gü¡˙t
 = 0; \

379 
	`WITNESS_SAVE_DECL
(
Gü¡
); \

381 i‡(
	`mtx_ow√d
(&
Gü¡
)) { \

382 
	`WITNESS_SAVE
(&
Gü¡
.
lock_obje˘
, Giant); \

383 
_gü¡˙t
 = 0; 
	`mtx_ow√d
(&
Gü¡
); _giantcnt++) \

384 
	`mtx_u∆ock
(&
Gü¡
); \

385 }

	)

387 
	#PICKUP_GIANT
() \

388 
	`PARTIAL_PICKUP_GIANT
(); \

389 } 0)

	)

391 
	#PARTIAL_PICKUP_GIANT
() \

392 
	`mtx_as£π
(&
Gü¡
, 
MA_NOTOWNED
); \

393 i‡(
_gü¡˙t
 > 0) { \

394 
_gü¡˙t
--) \

395 
	`mtx_lock
(&
Gü¡
); \

396 
	`WITNESS_RESTORE
(&
Gü¡
.
lock_obje˘
, Giant); \

397 }

	)

400 
	#UGAR
(
rvÆ
) do { \

401 
_vÆ
 = (
rvÆ
); \

402 
	`mtx_u∆ock
(&
Gü¡
); \

403  (
_vÆ
); \

404 } 0)

	)

406 
	smtx_¨gs
 {

407 
mtx
 *
	mma_mtx
;

408 c⁄° *
	mma_desc
;

409 
	mma_›ts
;

412 
	#MTX_SYSINIT
(
«me
, 
mtx
, 
desc
, 
›ts
) \

413 
mtx_¨gs
 
«me
##
_¨gs
 = { \

414 (
mtx
), \

415 (
desc
), \

416 (
›ts
) \

418 
	`SYSINIT
(
«me
##
_mtx_sysöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

419 
mtx_sysöô
, &
«me
##
_¨gs
); \

420 
	`SYSUNINIT
(
«me
##
_mtx_sysunöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

421 
mtx_de°roy
, (
mtx
))

	)

430 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

431 
	#MA_OWNED
 
LA_XLOCKED


	)

432 
	#MA_NOTOWNED
 
LA_UNLOCKED


	)

433 
	#MA_RECURSED
 
LA_RECURSED


	)

434 
	#MA_NOTRECURSED
 
LA_NOTRECURSED


	)

437 #ifde‡
INVARIANTS


438 
	#mtx_as£π
(
m
, 
wh©
) \

439 
	`_mtx_as£π
((
m
), (
wh©
), 
__FILE__
, 
__LINE__
)

	)

441 
	#GIANT_REQUIRED
 
	`mtx_as£π
(&
Gü¡
, 
MA_OWNED
)

	)

444 
	#mtx_as£π
(
m
, 
wh©
Ë()0

	)

445 
	#GIANT_REQUIRED


	)

451 
	#MTX_NETWORK_LOCK
 "√tw‹k drivî"

	)

	@/usr/include/sys/sx.h

32 #i‚def 
_SYS_SX_H_


33 
	#_SYS_SX_H_


	)

35 
	~<sys/_lock.h
>

36 
	~<sys/_sx.h
>

38 #ifdef 
_KERNEL


39 
	~<sys/p˝u.h
>

40 
	~<sys/lock_¥ofûe.h
>

41 
	~<sys/lock°©.h
>

42 
	~<machöe/©omic.h
>

68 
	#SX_LOCK_SHARED
 0x01

	)

69 
	#SX_LOCK_SHARED_WAITERS
 0x02

	)

70 
	#SX_LOCK_EXCLUSIVE_WAITERS
 0x04

	)

71 
	#SX_LOCK_RECURSED
 0x08

	)

72 
	#SX_LOCK_FLAGMASK
 \

73 (
SX_LOCK_SHARED
 | 
SX_LOCK_SHARED_WAITERS
 | \

74 
SX_LOCK_EXCLUSIVE_WAITERS
 | 
SX_LOCK_RECURSED
)

	)

76 
	#SX_OWNER
(
x
Ë((xË& ~
SX_LOCK_FLAGMASK
)

	)

77 
	#SX_SHARERS_SHIFT
 4

	)

78 
	#SX_SHARERS
(
x
Ë(
	`SX_OWNER
(xË>> 
SX_SHARERS_SHIFT
)

	)

79 
	#SX_SHARERS_LOCK
(
x
) \

80 ((
x
Ë<< 
SX_SHARERS_SHIFT
 | 
SX_LOCK_SHARED
)

	)

81 
	#SX_ONE_SHARER
 (1 << 
SX_SHARERS_SHIFT
)

	)

83 
	#SX_LOCK_UNLOCKED
 
	`SX_SHARERS_LOCK
(0)

	)

84 
	#SX_LOCK_DESTROYED
 \

85 (
SX_LOCK_SHARED_WAITERS
 | 
SX_LOCK_EXCLUSIVE_WAITERS
)

	)

87 #ifde‡
_KERNEL


93 
sx_sysöô
(*
¨g
);

94 
	#sx_öô
(
sx
, 
desc
Ë
	`sx_öô_Êags
((sx), (desc), 0)

	)

95 
sx_öô_Êags
(
sx
 *sx, c⁄° *
des¸ùti⁄
, 
›ts
);

96 
sx_de°roy
(
sx
 *sx);

97 
_sx_¶ock
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
);

98 
_sx_xlock
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
);

99 
_sx_åy_¶ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

100 
_sx_åy_xlock
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

101 
_sx_su∆ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

102 
_sx_xu∆ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

103 
_sx_åy_upgøde
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

104 
_sx_downgøde
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

105 
_sx_xlock_h¨d
(
sx
 *sx, 
uöçå_t
 
tid
, 
›ts
,

106 c⁄° *
fûe
, 
löe
);

107 
_sx_¶ock_h¨d
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
);

108 
_sx_xu∆ock_h¨d
(
sx
 *sx, 
uöçå_t
 
tid
, c⁄° *
fûe
, 

109 
löe
);

110 
_sx_su∆ock_h¨d
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

111 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

112 
_sx_as£π
(
sx
 *sx, 
wh©
, c⁄° *
fûe
, 
löe
);

114 #ifde‡
DDB


115 
sx_chaö
(
thªad
 *
td
, thªad **
ow√Ω
);

118 
	ssx_¨gs
 {

119 
sx
 *
	mß_sx
;

120 c⁄° *
	mß_desc
;

123 
	#SX_SYSINIT
(
«me
, 
sxa
, 
desc
) \

124 
sx_¨gs
 
«me
##
_¨gs
 = { \

125 (
sxa
), \

126 (
desc
) \

128 
	`SYSINIT
(
«me
##
_sx_sysöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

129 
sx_sysöô
, &
«me
##
_¨gs
); \

130 
	`SYSUNINIT
(
«me
##
_sx_sysunöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

131 
sx_de°roy
, (
sxa
))

	)

140 
__ölöe
 

141 
	$__sx_xlock
(
sx
 *sx, 
thªad
 *
td
, 
›ts
, c⁄° *
fûe
,

142 
löe
)

144 
uöçå_t
 
tid
 = (uöçå_t)
td
;

145 
îr‹
 = 0;

147 i‡(!
	`©omic_cmp£t_acq_±r
(&
sx
->
sx_lock
, 
SX_LOCK_UNLOCKED
, 
tid
))

148 
îr‹
 = 
	`_sx_xlock_h¨d
(
sx
, 
tid
, 
›ts
, 
fûe
, 
löe
);

150 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
LS_SX_XLOCK_ACQUIRE
,

151 
sx
, 0, 0, 
fûe
, 
löe
);

153  (
îr‹
);

154 
	}
}

157 
__ölöe
 

158 
	$__sx_xu∆ock
(
sx
 *sx, 
thªad
 *
td
, c⁄° *
fûe
, 
löe
)

160 
uöçå_t
 
tid
 = (uöçå_t)
td
;

162 i‡(!
	`©omic_cmp£t_ªl_±r
(&
sx
->
sx_lock
, 
tid
, 
SX_LOCK_UNLOCKED
))

163 
	`_sx_xu∆ock_h¨d
(
sx
, 
tid
, 
fûe
, 
löe
);

164 
	}
}

167 
__ölöe
 

168 
	$__sx_¶ock
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
)

170 
uöçå_t
 
x
 = 
sx
->
sx_lock
;

171 
îr‹
 = 0;

173 i‡(!(
x
 & 
SX_LOCK_SHARED
) ||

174 !
	`©omic_cmp£t_acq_±r
(&
sx
->
sx_lock
, 
x
, x + 
SX_ONE_SHARER
))

175 
îr‹
 = 
	`_sx_¶ock_h¨d
(
sx
, 
›ts
, 
fûe
, 
löe
);

177 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
LS_SX_SLOCK_ACQUIRE
, 
sx
, 0,

178 0, 
fûe
, 
löe
);

180  (
îr‹
);

181 
	}
}

190 
__ölöe
 

191 
	$__sx_su∆ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
)

193 
uöçå_t
 
x
 = 
sx
->
sx_lock
;

195 i‡(
x
 =(
	`SX_SHARERS_LOCK
(1Ë| 
SX_LOCK_EXCLUSIVE_WAITERS
) ||

196 !
	`©omic_cmp£t_ªl_±r
(&
sx
->
sx_lock
, 
x
, x - 
SX_ONE_SHARER
))

197 
	`_sx_su∆ock_h¨d
(
sx
, 
fûe
, 
löe
);

198 
	}
}

203 #i‚de‡
LOCK_DEBUG


206 #if (
LOCK_DEBUG
 > 0Ë|| 
deföed
(
SX_NOINLINE
)

207 
	#sx_xlock
(
sx
Ë()
	`_sx_xlock
((sx), 0, 
LOCK_FILE
, 
LOCK_LINE
)

	)

208 
	#sx_xlock_sig
(
sx
) \

209 
	`_sx_xlock
((
sx
), 
SX_INTERRUPTIBLE
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

210 
	#sx_xu∆ock
(
sx
Ë
	`_sx_xu∆ock
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

211 
	#sx_¶ock
(
sx
Ë()
	`_sx_¶ock
((sx), 0, 
LOCK_FILE
, 
LOCK_LINE
)

	)

212 
	#sx_¶ock_sig
(
sx
) \

213 
	`_sx_¶ock
((
sx
), 
SX_INTERRUPTIBLE
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

214 
	#sx_su∆ock
(
sx
Ë
	`_sx_su∆ock
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

216 
	#sx_xlock
(
sx
) \

217 ()
	`__sx_xlock
((
sx
), 
cuπhªad
, 0, 
LOCK_FILE
, 
LOCK_LINE
)

	)

218 
	#sx_xlock_sig
(
sx
) \

219 
	`__sx_xlock
((
sx
), 
cuπhªad
, 
SX_INTERRUPTIBLE
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

220 
	#sx_xu∆ock
(
sx
) \

221 
	`__sx_xu∆ock
((
sx
), 
cuπhªad
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

222 
	#sx_¶ock
(
sx
Ë()
	`__sx_¶ock
((sx), 0, 
LOCK_FILE
, 
LOCK_LINE
)

	)

223 
	#sx_¶ock_sig
(
sx
) \

224 
	`__sx_¶ock
((
sx
), 
SX_INTERRUPTIBLE
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

225 
	#sx_su∆ock
(
sx
Ë
	`__sx_su∆ock
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

227 
	#sx_åy_¶ock
(
sx
Ë
	`_sx_åy_¶ock
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

228 
	#sx_åy_xlock
(
sx
Ë
	`_sx_åy_xlock
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

229 
	#sx_åy_upgøde
(
sx
Ë
	`_sx_åy_upgøde
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

230 
	#sx_downgøde
(
sx
Ë
	`_sx_downgøde
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

236 
	#sx_xhﬁdî
(
sx
) \

237 ((
sx
)->
sx_lock
 & 
SX_LOCK_SHARED
 ? 
NULL
 : \

238 (
thªad
 *)
	`SX_OWNER
((
sx
)->
sx_lock
))

	)

240 
	#sx_xlocked
(
sx
) \

241 (((
sx
)->
sx_lock
 & ~(
SX_LOCK_FLAGMASK
 & ~
SX_LOCK_SHARED
)) == \

242 (
uöçå_t
)
cuπhªad
)

	)

244 
	#sx_u∆ock
(
sx
) do { \

245 i‡(
	`sx_xlocked
(
sx
)) \

246 
	`sx_xu∆ock
(
sx
); \

248 
	`sx_su∆ock
(
sx
); \

249 } 0)

	)

251 
	#sx_¶ìp
(
ch™
, 
sx
, 
¥i
, 
wmesg
, 
timo
) \

252 
	`_¶ìp
((
ch™
), &(
sx
)->
lock_obje˘
, (
¥i
), (
wmesg
), (
timo
))

	)

257 
	#SX_DUPOK
 0x01

	)

258 
	#SX_NOPROFILE
 0x02

	)

259 
	#SX_NOWITNESS
 0x04

	)

260 
	#SX_QUIET
 0x08

	)

261 
	#SX_NOADAPTIVE
 0x10

	)

262 
	#SX_RECURSE
 0x20

	)

267 
	#SX_INTERRUPTIBLE
 0x40

	)

269 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

270 
	#SA_LOCKED
 
LA_LOCKED


	)

271 
	#SA_SLOCKED
 
LA_SLOCKED


	)

272 
	#SA_XLOCKED
 
LA_XLOCKED


	)

273 
	#SA_UNLOCKED
 
LA_UNLOCKED


	)

274 
	#SA_RECURSED
 
LA_RECURSED


	)

275 
	#SA_NOTRECURSED
 
LA_NOTRECURSED


	)

278 
	#SX_LOCKED
 
LA_LOCKED


	)

279 
	#SX_SLOCKED
 
LA_SLOCKED


	)

280 
	#SX_XLOCKED
 
LA_XLOCKED


	)

281 
	#SX_UNLOCKED
 
LA_UNLOCKED


	)

282 
	#SX_RECURSED
 
LA_RECURSED


	)

283 
	#SX_NOTRECURSED
 
LA_NOTRECURSED


	)

286 #ifde‡
INVARIANTS


287 
	#sx_as£π
(
sx
, 
wh©
Ë
	`_sx_as£π
((sx), (wh©), 
LOCK_FILE
, 
LOCK_LINE
)

	)

289 
	#sx_as£π
(
sx
, 
wh©
Ë()0

	)

	@/usr/include/sys/systm.h

38 #i‚de‡
_SYS_SYSTM_H_


39 
	#_SYS_SYSTM_H_


	)

41 
	~<machöe/©omic.h
>

42 
	~<machöe/˝ufunc.h
>

43 
	~<sys/ˇŒout.h
>

44 
	~<sys/cdefs.h
>

45 
	~<sys/queue.h
>

46 
	~<sys/°döt.h
>

48 
cﬁd
;

49 
ªboŸög
;

50 c⁄° *
∑nic°r
;

51 
vîsi⁄
[];

52 
c›yright
[];

53 
k°ack_∑ges
;

55 
nsw≠
;

57 
u_l⁄g
 
∑gesizes
[];

58 
physmem
;

59 
ªÆmem
;

61 *
roŸdev«mes
[2];

63 
boŸhowto
;

64 
boŸvîbo£
;

66 
maxu£rs
;

67 
ngroups_max
;

68 
vm_gue°
;

75 
	eVM_GUEST
 { 
	mVM_GUEST_NO
 = 0, 
	mVM_GUEST_VM
, 
	mVM_GUEST_XEN
 };

77 #ifdef 
INVARIANTS


78 
	#KASSERT
(
exp
,
msg
) do { \

79 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) \

80 
∑nic
 
msg
; \

81 } 0)

	)

82 
	#VNASSERT
(
exp
, 
vp
, 
msg
) do { \

83 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) { \

84 
	`vn_¥ötf
(
vp
, "VNASSERT failed\n"); \

85 
∑nic
 
msg
; \

87 } 0)

	)

89 
	#KASSERT
(
exp
,
msg
) do { \

90 } 0)

	)

92 
	#VNASSERT
(
exp
, 
vp
, 
msg
) do { \

93 } 0)

	)

96 #i‚de‡
CTASSERT


97 
	#CTASSERT
(
x
Ë
	`_CTASSERT
(x, 
__LINE__
)

	)

98 
	#_CTASSERT
(
x
, 
y
Ë
	`__CTASSERT
(x, y)

	)

99 
	#__CTASSERT
(
x
, 
y
Ë
	t__as£π
 ## 
	ty
[(xË? 1 : -1]

	)

109 
	tASSERT_ATOMIC_LOAD_PTR
(
	tv¨
, 
	tmsg
) \

110 
	tKASSERT
((
	tv¨
) == (*) && \

111 ((
	tuöçå_t
)&(
	tv¨
Ë& ((*Ë- 1)Ë=0, 
	tmsg
)

	)

119 
	to§ñd©e
;

120 
ívmode
;

121 
hötmode
;

122 
dy«mic_kív
;

123 
mtx
 
kív_lock
;

124 *
kîn_ívp
;

125 
°©ic_ív
[];

126 
°©ic_höts
[];

128 **
kívp
;

134 
	göpcb
;

135 
	glock_obje˘
;

136 
	gmÆloc_ty≥
;

137 
	gmtx
;

138 
	g¥oc
;

139 
	gsockë
;

140 
	gthªad
;

141 
	gây
;

142 
	gu¸ed
;

143 
	guio
;

144 
	g_jmp_buf
;

146 
£tjmp
(
_jmp_buf
 *);

147 
	$l⁄gjmp
(
_jmp_buf
 *, Ë
__dód2
;

148 
	`dump°©us
(
vm_off£t_t
 
addr
, 
off_t
 
cou¡
);

149 
	`nuŒ›
();

150 
	`e›nŸsuµ
();

151 
	`uªadc
(, 
uio
 *);

152 
	`hashde°roy
(*, 
mÆloc_ty≥
 *, 
u_l⁄g
);

153 *
	`hashöô
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
hashmask
);

154 *
	`hashöô_Êags
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
,

155 
u_l⁄g
 *
hashmask
, 
Êags
);

156 
	#HASH_NOWAIT
 0x00000001

	)

157 
	#HASH_WAITOK
 0x00000002

	)

159 *
	`phashöô
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
√¡rõs
);

160 
	`g_waôidÀ
();

162 #ifde‡
RESTARTABLE_PANICS


163 
	$∑nic
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

165 
	$∑nic
(c⁄° *, ...Ë
__dód2
 
	`__¥ötÊike
(1, 2);

168 
	`˝u_boŸ
();

169 
	`˝u_Êush_dˇche
(*, 
size_t
);

170 
	`˝u_roŸc⁄f
();

171 
	`¸ôiˇl_íãr
();

172 
	`¸ôiˇl_exô
();

173 
	`öô_∑øm1
();

174 
	`öô_∑øm2
(
phy•ages
);

175 
	`öô_∑øm3
(
kmem∑ges
);

176 
	`èbÀfuŒ
(const *);

177 
	`kv¥ötf
(const *, (*)(, *), *, ,

178 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

179 
	$log
(, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

180 
	`log_c⁄sﬁe
(
uio
 *);

181 
	$¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

182 
	$¢¥ötf
(*, 
size_t
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

183 
	$•rötf
(*
buf
, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

184 
	$u¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

185 
	$v¥ötf
(c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

186 
	$v¢¥ötf
(*, 
size_t
, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

187 
	$v¢Ωrötf
(*, 
size_t
, , c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(4, 0);

188 
	$v•rötf
(*
buf
, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(2, 0);

189 
	$ây¥ötf
(
ây
 *, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

190 
	$ssˇnf
(c⁄° *, c⁄° *, ...Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

191 
	$vssˇnf
(c⁄° *, c⁄° *, 
__va_li°
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

192 
	$°πﬁ
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

193 
u_l⁄g
 
	$°πoul
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

194 
quad_t
 
	$°πoq
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

195 
u_quad_t
 
	$°πouq
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

196 
	$çrötf
(
¥oc
 *
p
, 
¥i
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

197 
	`hexdump
(c⁄° *
±r
, 
Àngth
, c⁄° *
hdr
, 
Êags
);

198 
	#HD_COLUMN_MASK
 0xff

	)

199 
	#HD_DELIM_MASK
 0xff00

	)

200 
	#HD_OMIT_COUNT
 (1 << 16)

	)

201 
	#HD_OMIT_HEX
 (1 << 17)

	)

202 
	#HD_OMIT_CHARS
 (1 << 18)

	)

204 
	#ovbc›y
(
f
, 
t
, 
l
Ë
	`bc›y
((f), (t), (l))

	)

205 
	$bc›y
(c⁄° *
‰om
, *
to
, 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

206 
	$bzîo
(*
buf
, 
size_t
 
Àn
Ë
	`__n⁄nuŒ
(1);

208 *
	$mem˝y
(*
to
, c⁄° *
‰om
, 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

209 *
	$memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
n
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

211 
	$c›y°r
(c⁄° * 
__ª°ri˘
 
kÁddr
, * __ª°ri˘ 
kdaddr
,

212 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
Ànc›õd
)

213 
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

214 
	$c›yö°r
(c⁄° * 
__ª°ri˘
 
udaddr
, * __ª°ri˘ 
kaddr
,

215 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
Ànc›õd
)

216 
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

217 
	$c›yö
(c⁄° * 
__ª°ri˘
 
udaddr
, * __ª°ri˘ 
kaddr
,

218 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

219 
	$c›yout
(c⁄° * 
__ª°ri˘
 
kaddr
, * __ª°ri˘ 
udaddr
,

220 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

222 
	`fubyã
(c⁄° *
ba£
);

223 
	`fuw‹d
(c⁄° *
ba£
);

224 
	`fuw‹d16
(*
ba£
);

225 
öt32_t
 
	`fuw‹d32
(c⁄° *
ba£
);

226 
öt64_t
 
	`fuw‹d64
(c⁄° *
ba£
);

227 
	`subyã
(*
ba£
, 
byã
);

228 
	`suw‹d
(*
ba£
, 
w‹d
);

229 
	`suw‹d16
(*
ba£
, 
w‹d
);

230 
	`suw‹d32
(*
ba£
, 
öt32_t
 
w‹d
);

231 
	`suw‹d64
(*
ba£
, 
öt64_t
 
w‹d
);

232 
uöt32_t
 
	`ˇsuw‹d32
(vﬁ©ûêuöt32_à*
ba£
, uöt32_à
ﬁdvÆ
, uöt32_à
√wvÆ
);

233 
u_l⁄g
 
	`ˇsuw‹d
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
ﬁdvÆ
, u_l⁄g 
√wvÆ
);

235 
	`ªÆôexpúe
(*);

237 
	`sysbìp
(
hîtz
, 
≥riod
);

239 
	`h¨d˛ock
(
u£rmode
, 
uötÂå_t
 
pc
);

240 
	`h¨d˛ock_˝u
(
u£rmode
);

241 
	`so·˛ock
(*);

242 
	`°©˛ock
(
u£rmode
);

243 
	`¥of˛ock
(
u£rmode
, 
uötÂå_t
 
pc
);

245 
	`°¨çrof˛ock
(
¥oc
 *);

246 
	`°›¥of˛ock
(
¥oc
 *);

247 
	`˝u_°¨çrof˛ock
();

248 
	`˝u_°›¥of˛ock
();

250 
	`¸_ˇn£e
(
u¸ed
 *
u1
, u¸ed *
u2
);

251 
	`¸_ˇn£esockë
(
u¸ed
 *
¸ed
, 
sockë
 *
so
);

252 
	`¸_ˇn£eöpcb
(
u¸ed
 *
¸ed
, 
öpcb
 *
öp
);

254 *
	`gëív
(c⁄° *
«me
);

255 
	`‰ìív
(*
ív
);

256 
	`gëív_öt
(c⁄° *
«me
, *
d©a
);

257 
	`gëív_uöt
(c⁄° *
«me
, *
d©a
);

258 
	`gëív_l⁄g
(c⁄° *
«me
, *
d©a
);

259 
	`gëív_ul⁄g
(c⁄° *
«me
, *
d©a
);

260 
	`gëív_°rög
(c⁄° *
«me
, *
d©a
, 
size
);

261 
	`gëív_quad
(c⁄° *
«me
, 
quad_t
 *
d©a
);

262 
	`£ãnv
(c⁄° *
«me
, c⁄° *
vÆue
);

263 
	`un£ãnv
(c⁄° *
«me
);

264 
	`ã°ív
(c⁄° *
«me
);

266 
	$uöt64_t
 (
	t˝u_tick_f
)();

267 
	`£t_˝utickî
(
˝u_tick_f
 *
func
, 
uöt64_t
 
‰eq
, 
v¨
);

268 
˝u_tick_f
 *
˝u_ticks
;

269 
uöt64_t
 
	`˝u_tickøã
();

270 
uöt64_t
 
	`˝utick2u£c
(uöt64_à
tick
);

272 #ifde‡
APM_FIXUP_CALLTODO


273 
timevÆ
;

274 
	`adju°_timeout_ˇŒtodo
(
timevÆ
 *
time_ch™ge
);

277 
	~<sys/libkîn.h
>

280 
	`c⁄söô
();

281 
	`˝u_öô˛ocks
();

282 
	`u§öfoöô
();

285 
	`shutdown_ni˚
();

288 
	ttimeout_t
(*);

289 
	#CALLOUT_HANDLE_INITIALIZER
(
h™dÀ
) \

290 { 
NULL
 
	}

	)
}

292 
ˇŒout_h™dÀ_öô
(
ˇŒout_h™dÀ
 *);

293 
ˇŒout_h™dÀ
 
timeout
(
timeout_t
 *, *, );

294 
u¡imeout
(
timeout_t
 *, *, 
ˇŒout_h™dÀ
);

295 
ˇddr_t
 
kîn_timeout_ˇŒwhìl_Æloc
(ˇddr_à
v
);

296 
kîn_timeout_ˇŒwhìl_öô
();

299 
__ölöe
 
	$•l0
(Ë{ ; 
	}
}

300 
__ölöe
 
öåmask_t
 
	$•lbio
(Ë{  0; 
	}
}

301 
__ölöe
 
öåmask_t
 
	$•lˇm
(Ë{  0; 
	}
}

302 
__ölöe
 
öåmask_t
 
	$•l˛ock
(Ë{  0; 
	}
}

303 
__ölöe
 
öåmask_t
 
	$•lhigh
(Ë{  0; 
	}
}

304 
__ölöe
 
öåmask_t
 
	$•limp
(Ë{  0; 
	}
}

305 
__ölöe
 
öåmask_t
 
	$• ë
(Ë{  0; 
	}
}

306 
__ölöe
 
öåmask_t
 
	$•lso·ˇm
(Ë{  0; 
	}
}

307 
__ölöe
 
öåmask_t
 
	$•lso·˛ock
(Ë{  0; 
	}
}

308 
__ölöe
 
öåmask_t
 
	$•lso·ây
(Ë{  0; 
	}
}

309 
__ölöe
 
öåmask_t
 
	$•lso·vm
(Ë{  0; 
	}
}

310 
__ölöe
 
öåmask_t
 
	$•lso·tq
(Ë{  0; 
	}
}

311 
__ölöe
 
öåmask_t
 
	$•l°©˛ock
(Ë{  0; 
	}
}

312 
__ölöe
 
öåmask_t
 
	$•…ty
(Ë{  0; 
	}
}

313 
__ölöe
 
öåmask_t
 
	$•lvm
(Ë{  0; 
	}
}

314 
__ölöe
 
	$•lx
(
öåmask_t
 
ùl
 
__unu£d
Ë{ ; 
	}
}

320 
	$_¶ìp
(*
ch™
, 
lock_obje˘
 *
lock
, 
¥i
, c⁄° *
wmesg
,

321 
timo
Ë
	`__n⁄nuŒ
(1);

322 
	#m¶ìp
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
timo
) \

323 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), (
timo
))

	)

324 
	$m¶ìp_•ö
(*
ch™
, 
mtx
 *mtx, c⁄° *
wmesg
, 
timo
)

325 
	`__n⁄nuŒ
(1);

326 
	`∑u£
(c⁄° *
wmesg
, 
timo
);

327 
	#t¶ìp
(
ch™
, 
¥i
, 
wmesg
, 
timo
) \

328 
	`_¶ìp
((
ch™
), 
NULL
, (
¥i
), (
wmesg
), (
timo
))

	)

329 
	$wakeup
(*
ch™
Ë
	`__n⁄nuŒ
(1);

330 
	$wakeup_⁄e
(*
ch™
Ë
	`__n⁄nuŒ
(1);

336 
cdev
;

337 
dev_t
 
	`dev2udev
(
cdev
 *
x
);

338 c⁄° *
	`devt⁄ame
(
cdev
 *cdev);

340 
	`pﬁl_no_pﬁl
(
evíts
);

343 
	`DELAY
(
u£c
);

346 
roŸ_hﬁd_tokí
;

348 
roŸ_hﬁd_tokí
 *
	`roŸ_mou¡_hﬁd
(c⁄° *
idítifõr
);

349 
	`roŸ_mou¡_ªl
(
roŸ_hﬁd_tokí
 *
h
);

350 
	`roŸ_mou¡_waô
();

351 
	`roŸ_mou¡ed
();

357 
uƒhdr
;

358 
uƒhdr
 *
	`√w_uƒhdr
(
low
, 
high
, 
mtx
 *
muãx
);

359 
	`dñëe_uƒhdr
(
uƒhdr
 *
uh
);

360 
	`˛ón_uƒhdr
(
uƒhdr
 *
uh
);

361 
	`˛ón_uƒhdæ
(
uƒhdr
 *
uh
);

362 
	`Æloc_uƒ
(
uƒhdr
 *
uh
);

363 
	`Æloc_uƒ_•ecific
(
uƒhdr
 *
uh
, 
u_öt
 
ôem
);

364 
	`Æloc_uƒl
(
uƒhdr
 *
uh
);

365 
	`‰ì_uƒ
(
uƒhdr
 *
uh
, 
u_öt
 
ôem
);

371 
__ölöe
 
uöt32_t


372 
	$bôcou¡32
(
uöt32_t
 
x
)

375 
x
 = (x & 0x55555555) + ((x & 0xaaaaaaaa) >> 1);

376 
x
 = (x & 0x33333333) + ((x & 0xcccccccc) >> 2);

377 
x
 = (x + (x >> 4)) & 0x0f0f0f0f;

378 
x
 = (x + (x >> 8));

379 
x
 = (x + (x >> 16)) & 0x000000ff;

380  (
x
);

381 
	}
}

383 
__ölöe
 
uöt16_t


384 
	$bôcou¡16
(
uöt32_t
 
x
)

387 
x
 = (x & 0x5555) + ((x & 0xaaaa) >> 1);

388 
x
 = (x & 0x3333) + ((x & 0xcccc) >> 2);

389 
x
 = (x + (x >> 4)) & 0x0f0f;

390 
x
 = (x + (x >> 8)) & 0x00ff;

391  (
x
);

392 
	}
}

	@/usr/include/sys/vmmeter.h

33 #i‚de‡
_SYS_VMMETER_H_


34 
	#_SYS_VMMETER_H_


	)

45 
	svmmëî
 {

49 
u_öt
 
	mv_swtch
;

50 
u_öt
 
	mv_å≠
;

51 
u_öt
 
	mv_sysˇŒ
;

52 
u_öt
 
	mv_öå
;

53 
u_öt
 
	mv_so·
;

57 
u_öt
 
	mv_vm_Áu…s
;

58 
u_öt
 
	mv_cow_Áu…s
;

59 
u_öt
 
	mv_cow_›tim
;

60 
u_öt
 
	mv_zfod
;

61 
u_öt
 
	mv_ozfod
;

62 
u_öt
 
	mv_sw≠ö
;

63 
u_öt
 
	mv_sw≠out
;

64 
u_öt
 
	mv_sw≠pgsö
;

65 
u_öt
 
	mv_sw≠pgsout
;

66 
u_öt
 
	mv_vnodeö
;

67 
u_öt
 
	mv_vnodeout
;

68 
u_öt
 
	mv_vnodïgsö
;

69 
u_öt
 
	mv_vnodïgsout
;

70 
u_öt
 
	mv_öå™s
;

71 
u_öt
 
	mv_ªa˘iv©ed
;

72 
u_öt
 
	mv_pdwakeups
;

73 
u_öt
 
	mv_pd∑ges
;

75 
u_öt
 
	mv_tˇched
;

76 
u_öt
 
	mv_d‰ì
;

77 
u_öt
 
	mv_p‰ì
;

78 
u_öt
 
	mv_t‰ì
;

82 
u_öt
 
	mv_∑ge_size
;

83 
u_öt
 
	mv_∑ge_cou¡
;

84 
u_öt
 
	mv_‰ì_ª£rved
;

85 
u_öt
 
	mv_‰ì_èrgë
;

86 
u_öt
 
	mv_‰ì_mö
;

87 
u_öt
 
	mv_‰ì_cou¡
;

88 
u_öt
 
	mv_wúe_cou¡
;

89 
u_öt
 
	mv_a˘ive_cou¡
;

90 
u_öt
 
	mv_öa˘ive_èrgë
;

91 
u_öt
 
	mv_öa˘ive_cou¡
;

92 
u_öt
 
	mv_ˇche_cou¡
;

93 
u_öt
 
	mv_ˇche_mö
;

94 
u_öt
 
	mv_ˇche_max
;

95 
u_öt
 
	mv_∑geout_‰ì_mö
;

96 
u_öt
 
	mv_öãºu±_‰ì_mö
;

97 
u_öt
 
	mv_‰ì_£vîe
;

101 
u_öt
 
	mv_f‹ks
;

102 
u_öt
 
	mv_vf‹ks
;

103 
u_öt
 
	mv_rf‹ks
;

104 
u_öt
 
	mv_kthªads
;

105 
u_öt
 
	mv_f‹k∑ges
;

106 
u_öt
 
	mv_vf‹k∑ges
;

107 
u_öt
 
	mv_rf‹k∑ges
;

108 
u_öt
 
	mv_kthªad∑ges
;

110 #ifde‡
_KERNEL


112 
vmmëî
 
˙t
;

121 
__ölöe


123 
	$vm_∑ge_cou¡_£vîe
()

125  (
˙t
.
v_‰ì_£vîe
 > (˙t.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
));

126 
	}
}

138 
__ölöe


140 
	$vm_∑ge_cou¡_mö
()

142  (
˙t
.
v_‰ì_mö
 > (˙t.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
));

143 
	}
}

150 
__ölöe


152 
	$vm_∑ge_cou¡_èrgë
()

154  (
˙t
.
v_‰ì_èrgë
 > (˙t.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
));

155 
	}
}

162 
__ölöe


164 
	$vm_∑gög_èrgë
()

167 (
˙t
.
v_‰ì_èrgë
 + c¡.
v_ˇche_mö
) -

168 (
˙t
.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
)

170 
	}
}

176 
__ölöe


178 
	$vm_∑gög_√eded
()

181 (
˙t
.
v_‰ì_ª£rved
 + c¡.
v_ˇche_mö
) >

182 (
˙t
.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
)

184 
	}
}

189 
	svmtŸÆ
 {

190 
öt16_t
 
	mt_rq
;

191 
öt16_t
 
	mt_dw
;

192 
öt16_t
 
	mt_pw
;

193 
öt16_t
 
	mt_¶
;

194 
öt16_t
 
	mt_sw
;

195 
öt32_t
 
	mt_vm
;

196 
öt32_t
 
	mt_avm
;

197 
öt32_t
 
	mt_rm
;

198 
öt32_t
 
	mt_¨m
;

199 
öt32_t
 
	mt_vmshr
;

200 
öt32_t
 
	mt_avmshr
;

201 
öt32_t
 
	mt_rmshr
;

202 
öt32_t
 
	mt_¨mshr
;

203 
öt32_t
 
	mt_‰ì
;

	@/usr/include/machine/mutex.h

32 #i‚de‡
_MACHINE_MUTEX_H_


33 
	#_MACHINE_MUTEX_H_


	)

	@/usr/include/machine/specialreg.h

33 #i‚de‡
_MACHINE_SPECIALREG_H_


34 
	#_MACHINE_SPECIALREG_H_


	)

39 
	#CR0_PE
 0x00000001

	)

40 
	#CR0_MP
 0x00000002

	)

41 
	#CR0_EM
 0x00000004

	)

42 
	#CR0_TS
 0x00000008

	)

43 
	#CR0_PG
 0x80000000

	)

48 
	#CR0_NE
 0x00000020

	)

49 
	#CR0_WP
 0x00010000

	)

51 
	#CR0_AM
 0x00040000

	)

52 
	#CR0_NW
 0x20000000

	)

53 
	#CR0_CD
 0x40000000

	)

58 
	#CR4_VME
 0x00000001

	)

59 
	#CR4_PVI
 0x00000002

	)

60 
	#CR4_TSD
 0x00000004

	)

61 
	#CR4_DE
 0x00000008

	)

62 
	#CR4_PSE
 0x00000010

	)

63 
	#CR4_PAE
 0x00000020

	)

64 
	#CR4_MCE
 0x00000040

	)

65 
	#CR4_PGE
 0x00000080

	)

66 
	#CR4_PCE
 0x00000100

	)

67 
	#CR4_FXSR
 0x00000200

	)

68 
	#CR4_XMM
 0x00000400

	)

73 
	#EFER_SCE
 0x000000001

	)

74 
	#EFER_LME
 0x000000100

	)

75 
	#EFER_LMA
 0x000000400

	)

76 
	#EFER_NXE
 0x000000800

	)

81 
	#CPUID_FPU
 0x00000001

	)

82 
	#CPUID_VME
 0x00000002

	)

83 
	#CPUID_DE
 0x00000004

	)

84 
	#CPUID_PSE
 0x00000008

	)

85 
	#CPUID_TSC
 0x00000010

	)

86 
	#CPUID_MSR
 0x00000020

	)

87 
	#CPUID_PAE
 0x00000040

	)

88 
	#CPUID_MCE
 0x00000080

	)

89 
	#CPUID_CX8
 0x00000100

	)

90 
	#CPUID_APIC
 0x00000200

	)

91 
	#CPUID_B10
 0x00000400

	)

92 
	#CPUID_SEP
 0x00000800

	)

93 
	#CPUID_MTRR
 0x00001000

	)

94 
	#CPUID_PGE
 0x00002000

	)

95 
	#CPUID_MCA
 0x00004000

	)

96 
	#CPUID_CMOV
 0x00008000

	)

97 
	#CPUID_PAT
 0x00010000

	)

98 
	#CPUID_PSE36
 0x00020000

	)

99 
	#CPUID_PSN
 0x00040000

	)

100 
	#CPUID_CLFSH
 0x00080000

	)

101 
	#CPUID_B20
 0x00100000

	)

102 
	#CPUID_DS
 0x00200000

	)

103 
	#CPUID_ACPI
 0x00400000

	)

104 
	#CPUID_MMX
 0x00800000

	)

105 
	#CPUID_FXSR
 0x01000000

	)

106 
	#CPUID_SSE
 0x02000000

	)

107 
	#CPUID_XMM
 0x02000000

	)

108 
	#CPUID_SSE2
 0x04000000

	)

109 
	#CPUID_SS
 0x08000000

	)

110 
	#CPUID_HTT
 0x10000000

	)

111 
	#CPUID_TM
 0x20000000

	)

112 
	#CPUID_IA64
 0x40000000

	)

113 
	#CPUID_PBE
 0x80000000

	)

115 
	#CPUID2_SSE3
 0x00000001

	)

116 
	#CPUID2_PCLMULQDQ
 0x00000002

	)

117 
	#CPUID2_DTES64
 0x00000004

	)

118 
	#CPUID2_MON
 0x00000008

	)

119 
	#CPUID2_DS_CPL
 0x00000010

	)

120 
	#CPUID2_VMX
 0x00000020

	)

121 
	#CPUID2_SMX
 0x00000040

	)

122 
	#CPUID2_EST
 0x00000080

	)

123 
	#CPUID2_TM2
 0x00000100

	)

124 
	#CPUID2_SSSE3
 0x00000200

	)

125 
	#CPUID2_CNXTID
 0x00000400

	)

126 
	#CPUID2_FMA
 0x00001000

	)

127 
	#CPUID2_CX16
 0x00002000

	)

128 
	#CPUID2_XTPR
 0x00004000

	)

129 
	#CPUID2_PDCM
 0x00008000

	)

130 
	#CPUID2_PCID
 0x00020000

	)

131 
	#CPUID2_DCA
 0x00040000

	)

132 
	#CPUID2_SSE41
 0x00080000

	)

133 
	#CPUID2_SSE42
 0x00100000

	)

134 
	#CPUID2_X2APIC
 0x00200000

	)

135 
	#CPUID2_MOVBE
 0x00400000

	)

136 
	#CPUID2_POPCNT
 0x00800000

	)

137 
	#CPUID2_TSCDLT
 0x01000000

	)

138 
	#CPUID2_AESNI
 0x02000000

	)

139 
	#CPUID2_XSAVE
 0x04000000

	)

140 
	#CPUID2_OSXSAVE
 0x08000000

	)

141 
	#CPUID2_AVX
 0x10000000

	)

142 
	#CPUID2_F16C
 0x20000000

	)

143 
	#CPUID2_HV
 0x80000000

	)

149 
	#CPUTPM1_SENSOR
 0x00000001

	)

150 
	#CPUTPM1_TURBO
 0x00000002

	)

151 
	#CPUTPM1_ARAT
 0x00000004

	)

152 
	#CPUTPM2_EFFREQ
 0x00000001

	)

157 
	#AMDID_SYSCALL
 0x00000800

	)

158 
	#AMDID_MP
 0x00080000

	)

159 
	#AMDID_NX
 0x00100000

	)

160 
	#AMDID_EXT_MMX
 0x00400000

	)

161 
	#AMDID_FFXSR
 0x01000000

	)

162 
	#AMDID_PAGE1GB
 0x04000000

	)

163 
	#AMDID_RDTSCP
 0x08000000

	)

164 
	#AMDID_LM
 0x20000000

	)

165 
	#AMDID_EXT_3DNOW
 0x40000000

	)

166 
	#AMDID_3DNOW
 0x80000000

	)

168 
	#AMDID2_LAHF
 0x00000001

	)

169 
	#AMDID2_CMP
 0x00000002

	)

170 
	#AMDID2_SVM
 0x00000004

	)

171 
	#AMDID2_EXT_APIC
 0x00000008

	)

172 
	#AMDID2_CR8
 0x00000010

	)

173 
	#AMDID2_ABM
 0x00000020

	)

174 
	#AMDID2_SSE4A
 0x00000040

	)

175 
	#AMDID2_MAS
 0x00000080

	)

176 
	#AMDID2_PREFETCH
 0x00000100

	)

177 
	#AMDID2_OSVW
 0x00000200

	)

178 
	#AMDID2_IBS
 0x00000400

	)

179 
	#AMDID2_XOP
 0x00000800

	)

180 
	#AMDID2_SKINIT
 0x00001000

	)

181 
	#AMDID2_WDT
 0x00002000

	)

182 
	#AMDID2_LWP
 0x00008000

	)

183 
	#AMDID2_FMA4
 0x00010000

	)

184 
	#AMDID2_NODE_ID
 0x00080000

	)

185 
	#AMDID2_TBM
 0x00200000

	)

186 
	#AMDID2_TOPOLOGY
 0x00400000

	)

191 
	#CPUID_STEPPING
 0x0000000f

	)

192 
	#CPUID_MODEL
 0x000000f0

	)

193 
	#CPUID_FAMILY
 0x00000f00

	)

194 
	#CPUID_EXT_MODEL
 0x000f0000

	)

195 
	#CPUID_EXT_FAMILY
 0x0ff00000

	)

196 
	#CPUID_TO_MODEL
(
id
) \

197 ((((
id
Ë& 
CPUID_MODEL
) >> 4) | \

198 (((
id
Ë& 
CPUID_EXT_MODEL
Ë>> 12))

	)

199 
	#CPUID_TO_FAMILY
(
id
) \

200 ((((
id
Ë& 
CPUID_FAMILY
) >> 8) + \

201 (((
id
Ë& 
CPUID_EXT_FAMILY
Ë>> 20))

	)

206 
	#CPUID_BRAND_INDEX
 0x000000ff

	)

207 
	#CPUID_CLFUSH_SIZE
 0x0000ff00

	)

208 
	#CPUID_HTT_CORES
 0x00ff0000

	)

209 
	#CPUID_LOCAL_APIC_ID
 0xff000000

	)

214 
	#CPUID_TYPE_INVAL
 0

	)

215 
	#CPUID_TYPE_SMT
 1

	)

216 
	#CPUID_TYPE_CORE
 2

	)

221 
	#AMDPM_TS
 0x00000001

	)

222 
	#AMDPM_FID
 0x00000002

	)

223 
	#AMDPM_VID
 0x00000004

	)

224 
	#AMDPM_TTP
 0x00000008

	)

225 
	#AMDPM_TM
 0x00000010

	)

226 
	#AMDPM_STC
 0x00000020

	)

227 
	#AMDPM_100MHZ_STEPS
 0x00000040

	)

228 
	#AMDPM_HW_PSTATE
 0x00000080

	)

229 
	#AMDPM_TSC_INVARIANT
 0x00000100

	)

230 
	#AMDPM_CPB
 0x00000200

	)

235 
	#AMDID_CMP_CORES
 0x000000ff

	)

236 
	#AMDID_COREID_SIZE
 0x0000f000

	)

237 
	#AMDID_COREID_SIZE_SHIFT
 12

	)

242 
	#AMD_VENDOR_ID
 "AuthíticAMD"

	)

243 
	#CENTAUR_VENDOR_ID
 "CíèurHauls"

	)

244 
	#INTEL_VENDOR_ID
 "GíuöeI¡ñ"

	)

249 
	#MSR_P5_MC_ADDR
 0x000

	)

250 
	#MSR_P5_MC_TYPE
 0x001

	)

251 
	#MSR_TSC
 0x010

	)

252 
	#MSR_P5_CESR
 0x011

	)

253 
	#MSR_P5_CTR0
 0x012

	)

254 
	#MSR_P5_CTR1
 0x013

	)

255 
	#MSR_IA32_PLATFORM_ID
 0x017

	)

256 
	#MSR_APICBASE
 0x01b

	)

257 
	#MSR_EBL_CR_POWERON
 0x02a

	)

258 
	#MSR_TEST_CTL
 0x033

	)

259 
	#MSR_BIOS_UPDT_TRIG
 0x079

	)

260 
	#MSR_BBL_CR_D0
 0x088

	)

261 
	#MSR_BBL_CR_D1
 0x089

	)

262 
	#MSR_BBL_CR_D2
 0x08a

	)

263 
	#MSR_BIOS_SIGN
 0x08b

	)

264 
	#MSR_PERFCTR0
 0x0c1

	)

265 
	#MSR_PERFCTR1
 0x0c2

	)

266 
	#MSR_MPERF
 0x0e7

	)

267 
	#MSR_APERF
 0x0e8

	)

268 
	#MSR_IA32_EXT_CONFIG
 0x0ì

	)

269 
	#MSR_MTRRˇp
 0x0„

	)

270 
	#MSR_BBL_CR_ADDR
 0x116

	)

271 
	#MSR_BBL_CR_DECC
 0x118

	)

272 
	#MSR_BBL_CR_CTL
 0x119

	)

273 
	#MSR_BBL_CR_TRIG
 0x11a

	)

274 
	#MSR_BBL_CR_BUSY
 0x11b

	)

275 
	#MSR_BBL_CR_CTL3
 0x11e

	)

276 
	#MSR_SYSENTER_CS_MSR
 0x174

	)

277 
	#MSR_SYSENTER_ESP_MSR
 0x175

	)

278 
	#MSR_SYSENTER_EIP_MSR
 0x176

	)

279 
	#MSR_MCG_CAP
 0x179

	)

280 
	#MSR_MCG_STATUS
 0x17a

	)

281 
	#MSR_MCG_CTL
 0x17b

	)

282 
	#MSR_EVNTSEL0
 0x186

	)

283 
	#MSR_EVNTSEL1
 0x187

	)

284 
	#MSR_THERM_CONTROL
 0x19a

	)

285 
	#MSR_THERM_INTERRUPT
 0x19b

	)

286 
	#MSR_THERM_STATUS
 0x19c

	)

287 
	#MSR_IA32_MISC_ENABLE
 0x1a0

	)

288 
	#MSR_IA32_TEMPERATURE_TARGET
 0x1a2

	)

289 
	#MSR_DEBUGCTLMSR
 0x1d9

	)

290 
	#MSR_LASTBRANCHFROMIP
 0x1db

	)

291 
	#MSR_LASTBRANCHTOIP
 0x1dc

	)

292 
	#MSR_LASTINTFROMIP
 0x1dd

	)

293 
	#MSR_LASTINTTOIP
 0x1de

	)

294 
	#MSR_ROB_CR_BKUPTMPDR6
 0x1e0

	)

295 
	#MSR_MTRRV¨Ba£
 0x200

	)

296 
	#MSR_MTRR64kBa£
 0x250

	)

297 
	#MSR_MTRR16kBa£
 0x258

	)

298 
	#MSR_MTRR4kBa£
 0x268

	)

299 
	#MSR_PAT
 0x277

	)

300 
	#MSR_MC0_CTL2
 0x280

	)

301 
	#MSR_MTRRdefTy≥
 0x2ff

	)

302 
	#MSR_MC0_CTL
 0x400

	)

303 
	#MSR_MC0_STATUS
 0x401

	)

304 
	#MSR_MC0_ADDR
 0x402

	)

305 
	#MSR_MC0_MISC
 0x403

	)

306 
	#MSR_MC1_CTL
 0x404

	)

307 
	#MSR_MC1_STATUS
 0x405

	)

308 
	#MSR_MC1_ADDR
 0x406

	)

309 
	#MSR_MC1_MISC
 0x407

	)

310 
	#MSR_MC2_CTL
 0x408

	)

311 
	#MSR_MC2_STATUS
 0x409

	)

312 
	#MSR_MC2_ADDR
 0x40a

	)

313 
	#MSR_MC2_MISC
 0x40b

	)

314 
	#MSR_MC3_CTL
 0x40c

	)

315 
	#MSR_MC3_STATUS
 0x40d

	)

316 
	#MSR_MC3_ADDR
 0x40e

	)

317 
	#MSR_MC3_MISC
 0x40f

	)

318 
	#MSR_MC4_CTL
 0x410

	)

319 
	#MSR_MC4_STATUS
 0x411

	)

320 
	#MSR_MC4_ADDR
 0x412

	)

321 
	#MSR_MC4_MISC
 0x413

	)

326 
	#APICBASE_RESERVED
 0x000006ff

	)

327 
	#APICBASE_BSP
 0x00000100

	)

328 
	#APICBASE_ENABLED
 0x00000800

	)

329 
	#APICBASE_ADDRESS
 0xfffff000

	)

334 
	#PAT_UNCACHEABLE
 0x00

	)

335 
	#PAT_WRITE_COMBINING
 0x01

	)

336 
	#PAT_WRITE_THROUGH
 0x04

	)

337 
	#PAT_WRITE_PROTECTED
 0x05

	)

338 
	#PAT_WRITE_BACK
 0x06

	)

339 
	#PAT_UNCACHED
 0x07

	)

340 
	#PAT_VALUE
(
i
, 
m
Ë(()(mË<< (8 * (i)))

	)

341 
	#PAT_MASK
(
i
Ë
	`PAT_VALUE
(i, 0xff)

	)

346 
	#MTRR_UNCACHEABLE
 0x00

	)

347 
	#MTRR_WRITE_COMBINING
 0x01

	)

348 
	#MTRR_WRITE_THROUGH
 0x04

	)

349 
	#MTRR_WRITE_PROTECTED
 0x05

	)

350 
	#MTRR_WRITE_BACK
 0x06

	)

351 
	#MTRR_N64K
 8

	)

352 
	#MTRR_N16K
 16

	)

353 
	#MTRR_N4K
 64

	)

354 
	#MTRR_CAP_WC
 0x0000000000000400

	)

355 
	#MTRR_CAP_FIXED
 0x0000000000000100

	)

356 
	#MTRR_CAP_VCNT
 0x00000000000000ff

	)

357 
	#MTRR_DEF_ENABLE
 0x0000000000000800

	)

358 
	#MTRR_DEF_FIXED_ENABLE
 0x0000000000000400

	)

359 
	#MTRR_DEF_TYPE
 0x00000000000000ff

	)

360 
	#MTRR_PHYSBASE_PHYSBASE
 0x000ffffffffff000

	)

361 
	#MTRR_PHYSBASE_TYPE
 0x00000000000000ff

	)

362 
	#MTRR_PHYSMASK_PHYSMASK
 0x000ffffffffff000

	)

363 
	#MTRR_PHYSMASK_VALID
 0x0000000000000800

	)

366 
	#PCR0
 0x20

	)

367 
	#PCR0_RSTK
 0x01

	)

368 
	#PCR0_BTB
 0x02

	)

369 
	#PCR0_LOOP
 0x04

	)

370 
	#PCR0_AIS
 0x08

	)

372 
	#PCR0_MLR
 0x10

	)

373 
	#PCR0_BTBRT
 0x40

	)

374 
	#PCR0_LSSER
 0x80

	)

377 
	#DIR0
 0x„

	)

378 
	#DIR1
 0xff

	)

383 
	#MCG_CAP_COUNT
 0x000000ff

	)

384 
	#MCG_CAP_CTL_P
 0x00000100

	)

385 
	#MCG_CAP_EXT_P
 0x00000200

	)

386 
	#MCG_CAP_CMCI_P
 0x00000400

	)

387 
	#MCG_CAP_TES_P
 0x00000800

	)

388 
	#MCG_CAP_EXT_CNT
 0x00ff0000

	)

389 
	#MCG_CAP_SER_P
 0x01000000

	)

390 
	#MCG_STATUS_RIPV
 0x00000001

	)

391 
	#MCG_STATUS_EIPV
 0x00000002

	)

392 
	#MCG_STATUS_MCIP
 0x00000004

	)

393 
	#MCG_CTL_ENABLE
 0xffffffffffffffff

	)

394 
	#MCG_CTL_DISABLE
 0x0000000000000000

	)

395 
	#MSR_MC_CTL
(
x
Ë(
MSR_MC0_CTL
 + (xË* 4)

	)

396 
	#MSR_MC_STATUS
(
x
Ë(
MSR_MC0_STATUS
 + (xË* 4)

	)

397 
	#MSR_MC_ADDR
(
x
Ë(
MSR_MC0_ADDR
 + (xË* 4)

	)

398 
	#MSR_MC_MISC
(
x
Ë(
MSR_MC0_MISC
 + (xË* 4)

	)

399 
	#MSR_MC_CTL2
(
x
Ë(
MSR_MC0_CTL2
 + (x)Ë

	)

400 
	#MC_STATUS_MCA_ERROR
 0x000000000000ffff

	)

401 
	#MC_STATUS_MODEL_ERROR
 0x00000000ffff0000

	)

402 
	#MC_STATUS_OTHER_INFO
 0x01ffffff00000000

	)

403 
	#MC_STATUS_COR_COUNT
 0x001fffc000000000

	)

404 
	#MC_STATUS_TES_STATUS
 0x0060000000000000

	)

405 
	#MC_STATUS_AR
 0x0080000000000000

	)

406 
	#MC_STATUS_S
 0x0100000000000000

	)

407 
	#MC_STATUS_PCC
 0x0200000000000000

	)

408 
	#MC_STATUS_ADDRV
 0x0400000000000000

	)

409 
	#MC_STATUS_MISCV
 0x0800000000000000

	)

410 
	#MC_STATUS_EN
 0x1000000000000000

	)

411 
	#MC_STATUS_UC
 0x2000000000000000

	)

412 
	#MC_STATUS_OVER
 0x4000000000000000

	)

413 
	#MC_STATUS_VAL
 0x8000000000000000

	)

414 
	#MC_MISC_RA_LSB
 0x000000000000003‡

	)

415 
	#MC_MISC_ADDRESS_MODE
 0x00000000000001c0

	)

416 
	#MC_CTL2_THRESHOLD
 0x0000000000007fff

	)

417 
	#MC_CTL2_CMCI_EN
 0x0000000040000000

	)

430 
	#NCR1
 0xc4

	)

431 
	#NCR2
 0xc7

	)

432 
	#NCR3
 0xˇ

	)

433 
	#NCR4
 0xcd

	)

435 
	#NCR_SIZE_0K
 0

	)

436 
	#NCR_SIZE_4K
 1

	)

437 
	#NCR_SIZE_8K
 2

	)

438 
	#NCR_SIZE_16K
 3

	)

439 
	#NCR_SIZE_32K
 4

	)

440 
	#NCR_SIZE_64K
 5

	)

441 
	#NCR_SIZE_128K
 6

	)

442 
	#NCR_SIZE_256K
 7

	)

443 
	#NCR_SIZE_512K
 8

	)

444 
	#NCR_SIZE_1M
 9

	)

445 
	#NCR_SIZE_2M
 10

	)

446 
	#NCR_SIZE_4M
 11

	)

447 
	#NCR_SIZE_8M
 12

	)

448 
	#NCR_SIZE_16M
 13

	)

449 
	#NCR_SIZE_32M
 14

	)

450 
	#NCR_SIZE_4G
 15

	)

460 
	#ARR0
 0xc4

	)

461 
	#ARR1
 0xc7

	)

462 
	#ARR2
 0xˇ

	)

463 
	#ARR3
 0xcd

	)

464 
	#ARR4
 0xd0

	)

465 
	#ARR5
 0xd3

	)

466 
	#ARR6
 0xd6

	)

467 
	#ARR7
 0xd9

	)

469 
	#ARR_SIZE_0K
 0

	)

470 
	#ARR_SIZE_4K
 1

	)

471 
	#ARR_SIZE_8K
 2

	)

472 
	#ARR_SIZE_16K
 3

	)

473 
	#ARR_SIZE_32K
 4

	)

474 
	#ARR_SIZE_64K
 5

	)

475 
	#ARR_SIZE_128K
 6

	)

476 
	#ARR_SIZE_256K
 7

	)

477 
	#ARR_SIZE_512K
 8

	)

478 
	#ARR_SIZE_1M
 9

	)

479 
	#ARR_SIZE_2M
 10

	)

480 
	#ARR_SIZE_4M
 11

	)

481 
	#ARR_SIZE_8M
 12

	)

482 
	#ARR_SIZE_16M
 13

	)

483 
	#ARR_SIZE_32M
 14

	)

484 
	#ARR_SIZE_4G
 15

	)

490 
	#RCR0
 0xdc

	)

491 
	#RCR1
 0xdd

	)

492 
	#RCR2
 0xde

	)

493 
	#RCR3
 0xdf

	)

494 
	#RCR4
 0xe0

	)

495 
	#RCR5
 0xe1

	)

496 
	#RCR6
 0xe2

	)

497 
	#RCR7
 0xe3

	)

499 
	#RCR_RCD
 0x01

	)

500 
	#RCR_RCE
 0x01

	)

501 
	#RCR_WWO
 0x02

	)

502 
	#RCR_WL
 0x04

	)

503 
	#RCR_WG
 0x08

	)

504 
	#RCR_WT
 0x10

	)

505 
	#RCR_NLB
 0x20

	)

508 
	#AMD_WT_ALLOC_TME
 0x40000

	)

509 
	#AMD_WT_ALLOC_PRE
 0x20000

	)

510 
	#AMD_WT_ALLOC_FRE
 0x10000

	)

513 
	#MSR_EFER
 0xc0000080

	)

514 
	#MSR_STAR
 0xc0000081

	)

515 
	#MSR_LSTAR
 0xc0000082

	)

516 
	#MSR_CSTAR
 0xc0000083

	)

517 
	#MSR_SF_MASK
 0xc0000084

	)

518 
	#MSR_FSBASE
 0xc0000100

	)

519 
	#MSR_GSBASE
 0xc0000101

	)

520 
	#MSR_KGSBASE
 0xc0000102

	)

521 
	#MSR_PERFEVSEL0
 0xc0010000

	)

522 
	#MSR_PERFEVSEL1
 0xc0010001

	)

523 
	#MSR_PERFEVSEL2
 0xc0010002

	)

524 
	#MSR_PERFEVSEL3
 0xc0010003

	)

525 #unde‡
MSR_PERFCTR0


526 #unde‡
MSR_PERFCTR1


527 
	#MSR_PERFCTR0
 0xc0010004

	)

528 
	#MSR_PERFCTR1
 0xc0010005

	)

529 
	#MSR_PERFCTR2
 0xc0010006

	)

530 
	#MSR_PERFCTR3
 0xc0010007

	)

531 
	#MSR_SYSCFG
 0xc0010010

	)

532 
	#MSR_HWCR
 0xc0010015

	)

533 
	#MSR_IORRBASE0
 0xc0010016

	)

534 
	#MSR_IORRMASK0
 0xc0010017

	)

535 
	#MSR_IORRBASE1
 0xc0010018

	)

536 
	#MSR_IORRMASK1
 0xc0010019

	)

537 
	#MSR_TOP_MEM
 0xc001001®

	)

538 
	#MSR_TOP_MEM2
 0xc001001d

	)

539 
	#MSR_K8_UCODE_UPDATE
 0xc0010020

	)

540 
	#MSR_MC0_CTL_MASK
 0xc0010044

	)

543 
	#VIA_HAS_RNG
 1

	)

546 
	#VIA_HAS_AES
 1

	)

547 
	#VIA_HAS_SHA
 2

	)

548 
	#VIA_HAS_MM
 4

	)

549 
	#VIA_HAS_AESCTR
 8

	)

552 
	#VIA_CPUID_HAS_RNG
 0x000004

	)

553 
	#VIA_CPUID_DO_RNG
 0x000008

	)

554 
	#VIA_CPUID_HAS_ACE
 0x000040

	)

555 
	#VIA_CPUID_DO_ACE
 0x000080

	)

556 
	#VIA_CPUID_HAS_ACE2
 0x000100

	)

557 
	#VIA_CPUID_DO_ACE2
 0x000200

	)

558 
	#VIA_CPUID_HAS_PHE
 0x000400

	)

559 
	#VIA_CPUID_DO_PHE
 0x000800

	)

560 
	#VIA_CPUID_HAS_PMM
 0x001000

	)

561 
	#VIA_CPUID_DO_PMM
 0x002000

	)

564 
	#VIA_CRYPT_CWLO_ROUND_M
 0x0000000f

	)

565 
	#VIA_CRYPT_CWLO_ALG_M
 0x00000070

	)

566 
	#VIA_CRYPT_CWLO_ALG_AES
 0x00000000

	)

567 
	#VIA_CRYPT_CWLO_KEYGEN_M
 0x00000080

	)

568 
	#VIA_CRYPT_CWLO_KEYGEN_HW
 0x00000000

	)

569 
	#VIA_CRYPT_CWLO_KEYGEN_SW
 0x00000080

	)

570 
	#VIA_CRYPT_CWLO_NORMAL
 0x00000000

	)

571 
	#VIA_CRYPT_CWLO_INTERMEDIATE
 0x00000100

	)

572 
	#VIA_CRYPT_CWLO_ENCRYPT
 0x00000000

	)

573 
	#VIA_CRYPT_CWLO_DECRYPT
 0x00000200

	)

574 
	#VIA_CRYPT_CWLO_KEY128
 0x0000000®

	)

575 
	#VIA_CRYPT_CWLO_KEY192
 0x0000040¯

	)

576 
	#VIA_CRYPT_CWLO_KEY256
 0x0000080ê

	)

	@/usr/include/machine/trap.h

36 #i‚de‡
_MACHINE_TRAP_H_


37 
	#_MACHINE_TRAP_H_


	)

44 
	#T_PRIVINFLT
 1

	)

45 
	#T_BPTFLT
 3

	)

46 
	#T_ARITHTRAP
 6

	)

47 
	#T_PROTFLT
 9

	)

48 
	#T_TRCTRAP
 10

	)

49 
	#T_PAGEFLT
 12

	)

50 
	#T_ALIGNFLT
 14

	)

52 
	#T_DIVIDE
 18

	)

53 
	#T_NMI
 19

	)

54 
	#T_OFLOW
 20

	)

55 
	#T_BOUND
 21

	)

56 
	#T_DNA
 22

	)

57 
	#T_DOUBLEFLT
 23

	)

58 
	#T_FPOPFLT
 24

	)

59 
	#T_TSSFLT
 25

	)

60 
	#T_SEGNPFLT
 26

	)

61 
	#T_STKFLT
 27

	)

62 
	#T_MCHK
 28

	)

63 
	#T_XMMFLT
 29

	)

64 
	#T_RESERVED
 30

	)

65 
	#T_DTRACE_RET
 32

	)

66 
	#T_DTRACE_PROBE
 33

	)

71 
	#ILL_RESAD_FAULT
 
T_RESADFLT


	)

72 
	#ILL_PRIVIN_FAULT
 
T_PRIVINFLT


	)

73 
	#ILL_RESOP_FAULT
 
T_RESOPFLT


	)

74 
	#ILL_ALIGN_FAULT
 
T_ALIGNFLT


	)

75 
	#ILL_FPOP_FAULT
 
T_FPOPFLT


	)

78 
	#FPE_INTOVF_TRAP
 0x1

	)

79 
	#FPE_INTDIV_TRAP
 0x2

	)

80 
	#FPE_FLTDIV_TRAP
 0x3

	)

81 
	#FPE_FLTOVF_TRAP
 0x4

	)

82 
	#FPE_FLTUND_TRAP
 0x5

	)

83 
	#FPE_FPU_NP_TRAP
 0x6

	)

84 
	#FPE_SUBRNG_TRAP
 0x7

	)

87 
	#BUS_PAGE_FAULT
 
T_PAGEFLT


	)

88 
	#BUS_SEGNP_FAULT
 
T_SEGNPFLT


	)

89 
	#BUS_STK_FAULT
 
T_STKFLT


	)

90 
	#BUS_SEGM_FAULT
 
T_RESERVED


	)

93 
	#T_USER
 0x100

	)

	@/usr/include/openssl/ui.h

59 #i‚de‡
HEADER_UI_H


60 
	#HEADER_UI_H


	)

62 #i‚de‡
OPENSSL_NO_DEPRECATED


63 
	~<›ís¶/¸y±o.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/os¶_typ.h
>

68 #ifde‡ 
__˝lu•lus


83 
UI
 *
UI_√w
();

84 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

85 
UI_‰ì
(
UI
 *
ui
);

130 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

131 *
ªsu…_buf
, 
mösize
, 
maxsize
);

132 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

133 *
ªsu…_buf
, 
mösize
, 
maxsize
);

134 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

135 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

136 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

137 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

138 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

139 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

140 
Êags
, *
ªsu…_buf
);

141 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

142 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

143 
Êags
, *
ªsu…_buf
);

144 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

145 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

146 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

147 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

151 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

157 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

168 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

188 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

189 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

201 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

203 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

206 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

209 
UI_¥o˚ss
(
UI
 *
ui
);

214 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
)());

220 
	#UI_CTRL_PRINT_ERRORS
 1

	)

224 
	#UI_CTRL_IS_REDOABLE
 2

	)

228 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

229 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

230 
UI_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

231 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

232 
UI_£t_ex_d©a
(
UI
 *
r
,
idx
,*
¨g
);

233 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

236 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

237 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

238 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

239 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

242 
UI_METHOD
 *
UI_O≥nSSL
();

290 
DECLARE_STACK_OF
(
UI_STRING
)

291 
ui_°rög_°
 
	tUI_STRING
;

295 
	eUI_°rög_ty≥s


297 
UIT_NONE
=0,

298 
UIT_PROMPT
,

299 
UIT_VERIFY
,

300 
UIT_BOOLEAN
,

301 
UIT_INFO
,

302 
UIT_ERROR


306 
UI_METHOD
 *
UI_¸óã_mëhod
(*
«me
);

307 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

308 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
)(
UI
 *
ui
));

309 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
, (*
wrôî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

310 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
)(
UI
 *
ui
));

311 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
, (*
ªadî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

312 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
)(
UI
 *
ui
));

313 (*
UI_mëhod_gë_›íî
(
UI_METHOD
 *
mëhod
))(
UI
*);

314 (*
UI_mëhod_gë_wrôî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

315 (*
UI_mëhod_gë_Êushî
(
UI_METHOD
 *
mëhod
))(
UI
*);

316 (*
UI_mëhod_gë_ªadî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

317 (*
UI_mëhod_gë_˛o£r
(
UI_METHOD
 *
mëhod
))(
UI
*);

323 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

325 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

327 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

329 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

331 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

333 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

335 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

337 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

339 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

343 
UI_UTIL_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

344 
UI_UTIL_ªad_pw
(*
buf
,*
buff
,
size
,c⁄° *
¥om±
,
vîify
);

351 
ERR_lﬂd_UI_°rögs
();

356 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

357 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

358 
	#UI_F_GENERAL_ALLOCATE_STRING
 100

	)

359 
	#UI_F_UI_CTRL
 111

	)

360 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

361 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

362 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

363 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

364 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

365 
	#UI_F_UI_GET0_RESULT
 107

	)

366 
	#UI_F_UI_NEW_METHOD
 104

	)

367 
	#UI_F_UI_SET_RESULT
 105

	)

370 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

371 
	#UI_R_INDEX_TOO_LARGE
 102

	)

372 
	#UI_R_INDEX_TOO_SMALL
 103

	)

373 
	#UI_R_NO_RESULT_BUFFER
 105

	)

374 
	#UI_R_RESULT_TOO_LARGE
 100

	)

375 
	#UI_R_RESULT_TOO_SMALL
 101

	)

376 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

378 #ifde‡ 
__˝lu•lus


	@/usr/include/sys/_stack.h

29 #i‚de‡
_SYS__STACK_H_


30 
	#_SYS__STACK_H_


	)

32 
	#STACK_MAX
 18

	)

34 
	s°ack
 {

35 
	mdïth
;

36 
vm_off£t_t
 
	mpcs
[
STACK_MAX
];

	@/usr/include/sys/_sx.h

31 #i‚def 
_SYS__SX_H_


32 
	#_SYS__SX_H_


	)

37 
	ssx
 {

38 
lock_obje˘
 
	mlock_obje˘
;

39 vﬁ©ûê
uöçå_t
 
	msx_lock
;

	@/usr/include/sys/libkern.h

33 #i‚de‡
_SYS_LIBKERN_H_


34 
	#_SYS_LIBKERN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/ty≥s.h
>

38 #ifde‡
_KERNEL


39 
	~<sys/sy°m.h
>

42 #i‚def 
LIBKERN_INLINE


43 
	#LIBKERN_INLINE
 
__ölöe


	)

44 
	#LIBKERN_BODY


	)

48 
u_ch¨
 c⁄° 
bcd2bö_d©a
[];

49 
u_ch¨
 c⁄° 
bö2bcd_d©a
[];

50 c⁄° 
hex2ascii_d©a
[];

52 
	#bcd2bö
(
bcd
Ë(
bcd2bö_d©a
[bcd])

	)

53 
	#bö2bcd
(
bö
Ë(
bö2bcd_d©a
[bö])

	)

54 
	#hex2ascii
(
hex
Ë(
hex2ascii_d©a
[hex])

	)

56 
__ölöe
 
	$imax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

57 
__ölöe
 
	$imö
(
a
, 
b
Ë{  (®< b ?á : b); 
	}
}

58 
__ölöe
 
	$lmax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

59 
__ölöe
 
	$lmö
(
a
, 
b
Ë{  (®< b ?á : b); 
	}
}

60 
__ölöe
 
u_öt
 
	$max
(
u_öt
 
a
, u_öà
b
Ë{  (®> b ?á : b); 
	}
}

61 
__ölöe
 
u_öt
 
	$mö
(
u_öt
 
a
, u_öà
b
Ë{  (®< b ?á : b); 
	}
}

62 
__ölöe
 
quad_t
 
	$qmax
(
quad_t
 
a
, quad_à
b
Ë{  (®> b ?á : b); 
	}
}

63 
__ölöe
 
quad_t
 
	$qmö
(
quad_t
 
a
, quad_à
b
Ë{  (®< b ?á : b); 
	}
}

64 
__ölöe
 
u_l⁄g
 
	$ulmax
(
u_l⁄g
 
a
, u_l⁄g 
b
Ë{  (®> b ?á : b); 
	}
}

65 
__ölöe
 
u_l⁄g
 
	$ulmö
(
u_l⁄g
 
a
, u_l⁄g 
b
Ë{  (®< b ?á : b); 
	}
}

66 
__ölöe
 
off_t
 
	$omax
(
off_t
 
a
, off_à
b
Ë{  (®> b ?á : b); 
	}
}

67 
__ölöe
 
off_t
 
	$omö
(
off_t
 
a
, off_à
b
Ë{  (®< b ?á : b); 
	}
}

69 
__ölöe
 
	$abs
(
a
Ë{  (®< 0 ? -®:á); 
	}
}

70 
__ölöe
 
	$œbs
(
a
Ë{  (®< 0 ? -®:á); 
	}
}

71 
__ölöe
 
quad_t
 
	$qabs
(
quad_t
 
a
Ë{  (®< 0 ? -®:á); 
	}
}

74 
	gmÆloc_ty≥
;

75 
uöt32_t
 
¨c4øndom
();

76 
¨c4ønd
(*
±r
, 
u_öt
 
Àn
, 
ª£ed
);

77 
bcmp
(c⁄° *, c⁄° *, 
size_t
);

78 *
b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

79 
size_t
, (*)(const *, const *));

80 #i‚def 
HAVE_INLINE_FFS


81 
	`ffs
();

83 #i‚def 
HAVE_INLINE_FFSL


84 
	`ff¶
();

86 #i‚def 
HAVE_INLINE_FLS


87 
	`Ês
();

89 #i‚def 
HAVE_INLINE_FLSL


90 
	`Ê¶
();

92 
	`‚m©ch
(const *, const *, );

93 
	`gës
(*, 
size_t
, );

94 
	`locc
(, *, 
u_öt
);

95 
	`memcmp
(c⁄° *
b1
, c⁄° *
b2
, 
size_t
 
Àn
);

96 
	`qs‹t
(*
ba£
, 
size_t
 
nmemb
, size_à
size
,

97 (*
com∑r
)(const *, const *));

98 
	`qs‹t_r
(*
ba£
, 
size_t
 
nmemb
, size_à
size
, *
thunk
,

99 (*
com∑r
)(*, const *, const *));

100 
u_l⁄g
 
	`øndom
();

101 *
	`ödex
(const *, );

102 *
	`rödex
(const *, );

103 
	`sˇnc
(
u_öt
, c⁄° 
u_ch¨
 *, const u_char *, );

104 
	`skpc
(, , *);

105 
	`§™dom
(
u_l⁄g
);

106 
	`°rˇ£cmp
(const *, const *);

107 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

108 
	`°rcmp
(const *, const *);

109 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

110 
size_t
 
	$°rc•n
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘Ë
__puª
;

111 *
	`°rdup
(c⁄° *
__ª°ri˘
, 
mÆloc_ty≥
 *);

112 
size_t
 
	`°æˇt
(*, const *, size_t);

113 
size_t
 
	`°æ˝y
(*, const *, size_t);

114 
size_t
 
	`°æí
(const *);

115 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

116 
	`°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

117 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

118 
size_t
 
	`°∫Àn
(const *, size_t);

119 *
	`°r£p
(**, c⁄° *
dñim
);

120 
size_t
 
	`°r•n
(const *, const *);

121 *
	`°r°r
(const *, const *);

122 
	`°rvÆid
(c⁄° *, 
size_t
);

124 
uöt32_t
 
¸c32_èb
[];

126 
__ölöe
 
uöt32_t


127 
	$¸c32_øw
(c⁄° *
buf
, 
size_t
 
size
, 
uöt32_t
 
¸c
)

129 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
buf
;

131 
size
--)

132 
¸c
 = 
¸c32_èb
[(¸¯^ *
p
++) & 0xFF] ^ (crc >> 8);

133  (
¸c
);

134 
	}
}

136 
__ölöe
 
uöt32_t


137 
	$¸c32
(c⁄° *
buf
, 
size_t
 
size
)

139 
uöt32_t
 
¸c
;

141 
¸c
 = 
	`¸c32_øw
(
buf
, 
size
, ~0U);

142  (
¸c
 ^ ~0U);

143 
	}
}

145 
uöt32_t


146 
ˇlcuœã_¸c32c
(
uöt32_t
 
¸c32c
, c⁄° *
buf„r
,

147 
Àngth
);

150 
LIBKERN_INLINE
 *
mem£t
(*, , 
size_t
);

151 #ifde‡
LIBKERN_BODY


152 
LIBKERN_INLINE
 *

153 
	$mem£t
(*
b
, 
c
, 
size_t
 
Àn
)

155 *
bb
;

157 i‡(
c
 == 0)

158 
	`bzîo
(
b
, 
Àn
);

160 
bb
 = (*)
b
; 
Àn
--; )

161 *
bb
++ = 
c
;

162  (
b
);

163 
	}
}

166 
__ölöe
 *

167 
	$°rchr
(c⁄° *
p
, 
ch
)

169  (
	`ödex
(
p
, 
ch
));

170 
	}
}

172 
__ölöe
 *

173 
	$°ºchr
(c⁄° *
p
, 
ch
)

175  (
	`rödex
(
p
, 
ch
));

176 
	}
}

179 
	#FNM_NOMATCH
 1

	)

182 
	#FNM_NOESCAPE
 0x01

	)

183 
	#FNM_PATHNAME
 0x02

	)

184 
	#FNM_PERIOD
 0x04

	)

185 
	#FNM_LEADING_DIR
 0x08

	)

186 
	#FNM_CASEFOLD
 0x10

	)

187 
	#FNM_IGNORECASE
 
FNM_CASEFOLD


	)

188 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

	@/usr/include/sys/lockstat.h

33 #i‚def 
_SYS_LOCKSTAT_H


34 
	#_SYS_LOCKSTAT_H


	)

36 #ifdef 
_KERNEL


41 
	#LS_MTX_SPIN_LOCK_ACQUIRE
 0

	)

42 
	#LS_MTX_SPIN_UNLOCK_RELEASE
 1

	)

43 
	#LS_MTX_SPIN_LOCK_SPIN
 2

	)

48 
	#LS_MTX_LOCK_ACQUIRE
 3

	)

49 
	#LS_MTX_UNLOCK_RELEASE
 4

	)

50 
	#LS_MTX_LOCK_SPIN
 5

	)

51 
	#LS_MTX_LOCK_BLOCK
 6

	)

52 
	#LS_MTX_TRYLOCK_ACQUIRE
 7

	)

57 
	#LS_RW_RLOCK_ACQUIRE
 8

	)

58 
	#LS_RW_RUNLOCK_RELEASE
 9

	)

59 
	#LS_RW_WLOCK_ACQUIRE
 10

	)

60 
	#LS_RW_WUNLOCK_RELEASE
 11

	)

61 
	#LS_RW_RLOCK_SPIN
 12

	)

62 
	#LS_RW_RLOCK_BLOCK
 13

	)

63 
	#LS_RW_WLOCK_SPIN
 14

	)

64 
	#LS_RW_WLOCK_BLOCK
 15

	)

65 
	#LS_RW_TRYUPGRADE_UPGRADE
 16

	)

66 
	#LS_RW_DOWNGRADE_DOWNGRADE
 17

	)

71 
	#LS_SX_SLOCK_ACQUIRE
 18

	)

72 
	#LS_SX_SUNLOCK_RELEASE
 19

	)

73 
	#LS_SX_XLOCK_ACQUIRE
 20

	)

74 
	#LS_SX_XUNLOCK_RELEASE
 21

	)

75 
	#LS_SX_SLOCK_SPIN
 22

	)

76 
	#LS_SX_SLOCK_BLOCK
 23

	)

77 
	#LS_SX_XLOCK_SPIN
 24

	)

78 
	#LS_SX_XLOCK_BLOCK
 25

	)

79 
	#LS_SX_TRYUPGRADE_UPGRADE
 26

	)

80 
	#LS_SX_DOWNGRADE_DOWNGRADE
 27

	)

85 
	#LS_THREAD_LOCK_SPIN
 28

	)

93 
	#LS_NPROBES
 29

	)

95 
	#LS_MTX_LOCK
 "mtx_lock"

	)

96 
	#LS_MTX_UNLOCK
 "mtx_u∆ock"

	)

97 
	#LS_MTX_SPIN_LOCK
 "mtx_lock_•ö"

	)

98 
	#LS_MTX_SPIN_UNLOCK
 "mtx_u∆ock_•ö"

	)

99 
	#LS_MTX_TRYLOCK
 "mtx_åylock"

	)

100 
	#LS_RW_RLOCK
 "rw_æock"

	)

101 
	#LS_RW_WLOCK
 "rw_wlock"

	)

102 
	#LS_RW_RUNLOCK
 "rw_ru∆ock"

	)

103 
	#LS_RW_WUNLOCK
 "rw_wu∆ock"

	)

104 
	#LS_RW_TRYUPGRADE
 "rw_åy_upgøde"

	)

105 
	#LS_RW_DOWNGRADE
 "rw_downgøde"

	)

106 
	#LS_SX_SLOCK
 "sx_¶ock"

	)

107 
	#LS_SX_XLOCK
 "sx_xlock"

	)

108 
	#LS_SX_SUNLOCK
 "sx_su∆ock"

	)

109 
	#LS_SX_XUNLOCK
 "sx_xu∆ock"

	)

110 
	#LS_SX_TRYUPGRADE
 "sx_åy_upgøde"

	)

111 
	#LS_SX_DOWNGRADE
 "sx_downgøde"

	)

112 
	#LS_THREAD_LOCK
 "thªad_lock"

	)

114 
	#LS_ACQUIRE
 "acquúe"

	)

115 
	#LS_RELEASE
 "ªÀa£"

	)

116 
	#LS_SPIN
 "•ö"

	)

117 
	#LS_BLOCK
 "block"

	)

118 
	#LS_UPGRADE
 "upgøde"

	)

119 
	#LS_DOWNGRADE
 "downgøde"

	)

121 
	#LS_TYPE_ADAPTIVE
 "ad≠tive"

	)

122 
	#LS_TYPE_SPIN
 "•ö"

	)

123 
	#LS_TYPE_THREAD
 "thªad"

	)

124 
	#LS_TYPE_RW
 "rw"

	)

125 
	#LS_TYPE_SX
 "sx"

	)

127 
	#LSA_ACQUIRE
 (
LS_TYPE_ADAPTIVE
 "-" 
LS_ACQUIRE
)

	)

128 
	#LSA_RELEASE
 (
LS_TYPE_ADAPTIVE
 "-" 
LS_RELEASE
)

	)

129 
	#LSA_SPIN
 (
LS_TYPE_ADAPTIVE
 "-" 
LS_SPIN
)

	)

130 
	#LSA_BLOCK
 (
LS_TYPE_ADAPTIVE
 "-" 
LS_BLOCK
)

	)

131 
	#LSS_ACQUIRE
 (
LS_TYPE_SPIN
 "-" 
LS_ACQUIRE
)

	)

132 
	#LSS_RELEASE
 (
LS_TYPE_SPIN
 "-" 
LS_RELEASE
)

	)

133 
	#LSS_SPIN
 (
LS_TYPE_SPIN
 "-" 
LS_SPIN
)

	)

134 
	#LSR_ACQUIRE
 (
LS_TYPE_RW
 "-" 
LS_ACQUIRE
)

	)

135 
	#LSR_RELEASE
 (
LS_TYPE_RW
 "-" 
LS_RELEASE
)

	)

136 
	#LSR_BLOCK
 (
LS_TYPE_RW
 "-" 
LS_BLOCK
)

	)

137 
	#LSR_SPIN
 (
LS_TYPE_RW
 "-" 
LS_SPIN
)

	)

138 
	#LSR_UPGRADE
 (
LS_TYPE_RW
 "-" 
LS_UPGRADE
)

	)

139 
	#LSR_DOWNGRADE
 (
LS_TYPE_RW
 "-" 
LS_DOWNGRADE
)

	)

140 
	#LSX_ACQUIRE
 (
LS_TYPE_SX
 "-" 
LS_ACQUIRE
)

	)

141 
	#LSX_RELEASE
 (
LS_TYPE_SX
 "-" 
LS_RELEASE
)

	)

142 
	#LSX_BLOCK
 (
LS_TYPE_SX
 "-" 
LS_BLOCK
)

	)

143 
	#LSX_SPIN
 (
LS_TYPE_SX
 "-" 
LS_SPIN
)

	)

144 
	#LSX_UPGRADE
 (
LS_TYPE_SX
 "-" 
LS_UPGRADE
)

	)

145 
	#LSX_DOWNGRADE
 (
LS_TYPE_SX
 "-" 
LS_DOWNGRADE
)

	)

146 
	#LST_SPIN
 (
LS_TYPE_THREAD
 "-" 
LS_SPIN
)

	)

152 
uöt32_t
 
lock°©_¥obem≠
[
LS_NPROBES
];

153 (*
	tlock°©_¥obe_func_t
)(
	tuöt32_t
, 
	tuöçå_t
 
	t¨g0
, uöçå_à
	t¨g1
,

154 
	tuöçå_t
 
	t¨g2
, uöçå_à
	t¨g3
, uöçå_à
	t¨g4
);

155 
lock°©_¥obe_func_t
 
lock°©_¥obe_func
;

156 
uöt64_t
 
	`lock°©_n£cs
();

158 #ifdef 
KDTRACE_HOOKS


162 
	#LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) do { \

163 
uöt32_t
 
id
; \

165 i‡((
id
 = 
lock°©_¥obem≠
[(
¥obe
)])) \

166 (*
lock°©_¥obe_func
)(
id
, (
uöçå_t
)(
Õ
), (
¨g1
), (
¨g2
), \

167 (
¨g3
), (
¨g4
)); \

168 
	}
} 0)

	)

170 
	#LOCKSTAT_RECORD
(
¥obe
, 
Õ
, 
¨g1
) \

171 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 0, 0, 0)

	)

173 
	#LOCKSTAT_RECORD0
(
¥obe
, 
Õ
) \

174 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 0, 0, 0, 0)

	)

176 
	#LOCKSTAT_RECORD1
(
¥obe
, 
Õ
, 
¨g1
) \

177 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 0, 0, 0)

	)

179 
	#LOCKSTAT_RECORD2
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
) \

180 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 0, 0)

	)

182 
	#LOCKSTAT_RECORD3
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
) \

183 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 0)

	)

185 
	#LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
) do { \

186 
uöt32_t
 
id
; \

188 
	`lock_¥ofûe_obèö_lock_suc˚ss
(&(
Õ
)->
lock_obje˘
, 
c
, 
wt
, 
f
, 
l
); \

189 i‡((
id
 = 
lock°©_¥obem≠
[(
¥obe
)])) \

190 (*
lock°©_¥obe_func
)(
id
, (
uöçå_t
)(
Õ
), 0, 0, 0, 0); \

191 } 0)

	)

193 
	#LOCKSTAT_PROFILE_RELEASE_LOCK
(
¥obe
, 
Õ
) do { \

194 
uöt32_t
 
id
; \

196 
	`lock_¥ofûe_ªÀa£_lock
(&(
Õ
)->
lock_obje˘
); \

197 i‡((
id
 = 
lock°©_¥obem≠
[(
¥obe
)])) \

198 (*
lock°©_¥obe_func
)(
id
, (
uöçå_t
)(
Õ
), 0, 0, 0, 0); \

199 } 0)

	)

203 
	#LOCKSTAT_RECORD
(
¥obe
, 
Õ
, 
¨g1
)

	)

204 
	#LOCKSTAT_RECORD0
(
¥obe
, 
Õ
)

	)

205 
	#LOCKSTAT_RECORD1
(
¥obe
, 
Õ
, 
¨g1
)

	)

206 
	#LOCKSTAT_RECORD2
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
)

	)

207 
	#LOCKSTAT_RECORD3
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

208 
	#LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

210 
	#LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
) \

211 
	`lock_¥ofûe_obèö_lock_suc˚ss
(&(
Õ
)->
lock_obje˘
, 
c
, 
wt
, 
f
, 
l
)

	)

213 
	#LOCKSTAT_PROFILE_RELEASE_LOCK
(
¥obe
, 
Õ
) \

214 
	`lock_¥ofûe_ªÀa£_lock
(&(
Õ
)->
lock_obje˘
)

	)

	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 #i‚de‡
OPENSSL_FIPS


223 
	#CRYPTO_NUM_LOCKS
 39

	)

225 
	#CRYPTO_LOCK_FIPS
 39

	)

226 
	#CRYPTO_LOCK_FIPS2
 40

	)

227 
	#CRYPTO_NUM_LOCKS
 41

	)

230 
	#CRYPTO_LOCK
 1

	)

231 
	#CRYPTO_UNLOCK
 2

	)

232 
	#CRYPTO_READ
 4

	)

233 
	#CRYPTO_WRITE
 8

	)

235 #i‚de‡
OPENSSL_NO_LOCKING


236 #i‚de‡
CRYPTO_w_lock


237 
	#CRYPTO_w_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_w_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_r_lock
(
ty≥
) \

242 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

243 
	#CRYPTO_r_u∆ock
(
ty≥
) \

244 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

246 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

249 
	#CRYPTO_w_lock
(
a
)

	)

250 
	#CRYPTO_w_u∆ock
(
a
)

	)

251 
	#CRYPTO_r_lock
(
a
)

	)

252 
	#CRYPTO_r_u∆ock
(
a
)

	)

253 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

262 
ª„ªn˚s
;

263 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

264 } 
	tCRYPTO_dy∆ock
;

270 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

271 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

272 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

273 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

279 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

281 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

283 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

287 
bio_°
 
	tBIO_dummy
;

289 
	s¸y±o_ex_d©a_°


291 
STACK
 *
sk
;

292 
dummy
;

298 
	s¸y±o_ex_d©a_func_°


300 
¨gl
;

301 *
¨gp
;

302 
CRYPTO_EX_√w
 *
√w_func
;

303 
CRYPTO_EX_‰ì
 *
‰ì_func
;

304 
CRYPTO_EX_dup
 *
dup_func
;

305 } 
	tCRYPTO_EX_DATA_FUNCS
;

307 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

313 
	#CRYPTO_EX_INDEX_BIO
 0

	)

314 
	#CRYPTO_EX_INDEX_SSL
 1

	)

315 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

316 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

317 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

318 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

319 
	#CRYPTO_EX_INDEX_RSA
 6

	)

320 
	#CRYPTO_EX_INDEX_DSA
 7

	)

321 
	#CRYPTO_EX_INDEX_DH
 8

	)

322 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

323 
	#CRYPTO_EX_INDEX_X509
 10

	)

324 
	#CRYPTO_EX_INDEX_UI
 11

	)

325 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

326 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

327 
	#CRYPTO_EX_INDEX_COMP
 14

	)

328 
	#CRYPTO_EX_INDEX_STORE
 15

	)

332 
	#CRYPTO_EX_INDEX_USER
 100

	)

339 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

340 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

342 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


343 #i‚de‡
CRYPTO_MDEBUG


344 
	#CRYPTO_MDEBUG


	)

350 
CRYPTO_mÆloc_debug_öô
();

352 
CRYPTO_mem_˘æ
(
mode
);

353 
CRYPTO_is_mem_check_⁄
();

356 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

357 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

360 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

361 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

362 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

364 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

365 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

366 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

367 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

368 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

369 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

373 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

375 
	#OPENSSL_mÆloc_locked
(
num
) \

376 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

377 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

380 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

381 
SSLóy
();

383 
OPENSSL_is£tugid
();

386 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

388 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

390 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

392 
CRYPTO_ex_d©a_√w_˛ass
();

394 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

395 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

396 
CRYPTO_EX_‰ì
 *
‰ì_func
);

399 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

400 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

401 
CRYPTO_EX_DATA
 *
‰om
);

402 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

405 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

406 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

409 
CRYPTO_˛ónup_Æl_ex_d©a
();

411 
CRYPTO_gë_√w_lockid
(*
«me
);

413 
CRYPTO_num_locks
();

414 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

415 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

416 c⁄° *
fûe
,
löe
));

417 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

418 
löe
);

419 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

420 c⁄° *
fûe
, 
löe
));

421 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

422 c⁄° *
fûe
,
löe
);

423 
CRYPTO_£t_id_ˇŒback
((*
func
)());

424 (*
CRYPTO_gë_id_ˇŒback
())();

425 
CRYPTO_thªad_id
();

426 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

427 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

428 
löe
);

430 
öt_CRYPTO_£t_do_dy∆ock_ˇŒback
(

431 (*
do_dy∆ock_cb
)(
mode
, 
ty≥
, c⁄° *
fûe
, 
löe
));

433 
CRYPTO_gë_√w_dy∆ockid
();

434 
CRYPTO_de°roy_dy∆ockid
(
i
);

435 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

436 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

437 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

438 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

439 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

440 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

441 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

445 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

446 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

447 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

448 *(*
r
)(*,
size_t
,const *,),

449 (*
f
)(*));

450 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

451 (*
‰ì_func
)(*));

452 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

453 (*
r
)(*,*,,const *,,),

454 (*
f
)(*,),

455 (*
so
)(),

456 (*
go
)());

457 
CRYPTO_£t_mem_öfo_fun˘i⁄s
(

458 (*
push_öfo_‚
)(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
),

459 (*
p›_öfo_‚
)(),

460 (*
ªmove_Æl_öfo_‚
)());

461 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

462 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

463 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

464 *(**
r
)(*, 
size_t
,const *,),

465 (**
f
)(*));

466 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

467 (**
f
)(*));

468 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

469 (**
r
)(*,*,,const *,,),

470 (**
f
)(*,),

471 (**
so
)(),

472 (**
go
)());

474 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

475 
CRYPTO_‰ì_locked
(*);

476 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

477 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

478 
CRYPTO_‰ì
(*);

479 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

480 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

481 
löe
);

482 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

484 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

486 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

487 
CRYPTO_gë_mem_debug_›ti⁄s
();

489 
	#CRYPTO_push_öfo
(
öfo
) \

490 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

491 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

492 
CRYPTO_p›_öfo
();

493 
CRYPTO_ªmove_Æl_öfo
();

503 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

504 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

505 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

514 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

515 
CRYPTO_dbg_gë_›ti⁄s
();

517 
CRYPTO_dbg_push_öfo
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

518 
CRYPTO_dbg_p›_öfo
();

519 
CRYPTO_dbg_ªmove_Æl_öfo
();

521 #i‚de‡
OPENSSL_NO_FP_API


522 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

524 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

526 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

527 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

530 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

531 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

533 *
OPENSSL_ü32ˇp_loc
();

534 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

535 
OPENSSL_is£rvi˚
();

537 #ifde‡
OPENSSL_FIPS


538 
	#FIPS_ERROR_IGNORED
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

539 
Æg
 "Öªviou†FIPS f‹biddíálg‹ôhmÉº‹ ign‹ed");

	)

541 
	#FIPS_BAD_ABORT
(
Æg
Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

542 #Æg " Alg‹ôhm f‹biddí i¿FIPS mode");

	)

544 #ifde‡
OPENSSL_FIPS_STRICT


545 
	#FIPS_BAD_ALGORITHM
(
Æg
Ë
	`FIPS_BAD_ABORT
◊lg)

	)

547 
	#FIPS_BAD_ALGORITHM
(
Æg
) \

549 
	`FIPSîr
(
FIPS_F_HASH_FINAL
,
FIPS_R_NON_FIPS_METHOD
); \

550 
	`ERR_add_îr‹_d©a
(2, "Algorithm=", #alg); \

552 }

	)

557 
	#FIPS_NON_FIPS_MD_Inô
(
Æg
) \

558 
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
) \

560 i‡(
	`FIPS_mode
()) \

561 
	`FIPS_BAD_ALGORITHM
(
Æg
) \

562  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

564 
¥iv©e_
##
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
)

	)

571 
	#FIPS_NON_FIPS_VCIPHER_Inô
(
Æg
) \

572 
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, c⁄° *
d©a
) \

574 i‡(
	`FIPS_mode
()) \

575 
	`FIPS_BAD_ABORT
(
Æg
) \

576 
¥iv©e_
##
Æg
##
	`_£t_key
(
key
, 
Àn
, 
d©a
); \

578 
¥iv©e_
##
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, \

579 c⁄° *
d©a
)

	)

583 
	#FIPS_NON_FIPS_VCIPHER_Inô
(
Æg
) \

584 
Æg
##
	`_£t_key
◊lg##
_KEY
 *
key
, 
Àn
, c⁄° *
d©a
)

	)

586 
	#FIPS_NON_FIPS_MD_Inô
(
Æg
) \

587 
Æg
##
	`_Inô
◊lg##
_CTX
 *
c
)

	)

595 
ERR_lﬂd_CRYPTO_°rögs
();

597 
	#OPENSSL_HAVE_INIT
 1

	)

598 
OPENSSL_öô
();

603 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

604 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

605 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

606 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

607 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

608 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

609 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

610 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

611 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

614 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

616 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
	tASN1_BOOLEAN
;

95 
	tASN1_NULL
;

98 #ifde‡
OPENSSL_SYS_WIN32


99 #unde‡
X509_NAME


100 #unde‡
X509_EXTENSIONS


101 #unde‡
X509_CERT_PAIR


102 #unde‡
PKCS7_ISSUER_AND_SERIAL


103 #unde‡
OCSP_REQUEST


104 #unde‡
OCSP_RESPONSE


107 #ifde‡
BIGNUM


108 #unde‡
BIGNUM


110 
bignum_°
 
	tBIGNUM
;

111 
bignum_˘x
 
	tBN_CTX
;

112 
bn_blödög_°
 
	tBN_BLINDING
;

113 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

114 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

115 
bn_gícb_°
 
	tBN_GENCB
;

117 
buf_mem_°
 
	tBUF_MEM
;

119 
evp_cùhî_°
 
	tEVP_CIPHER
;

120 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

121 
ív_md_°
 
	tEVP_MD
;

122 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

123 
evp_pkey_°
 
	tEVP_PKEY
;

125 
dh_°
 
	tDH
;

126 
dh_mëhod
 
	tDH_METHOD
;

128 
dß_°
 
	tDSA
;

129 
dß_mëhod
 
	tDSA_METHOD
;

131 
rß_°
 
	tRSA
;

132 
rß_mëh_°
 
	tRSA_METHOD
;

134 
ønd_mëh_°
 
	tRAND_METHOD
;

136 
ecdh_mëhod
 
	tECDH_METHOD
;

137 
ecdß_mëhod
 
	tECDSA_METHOD
;

139 
x509_°
 
	tX509
;

140 
X509_Æg‹_°
 
	tX509_ALGOR
;

141 
X509_¸l_°
 
	tX509_CRL
;

142 
X509_«me_°
 
	tX509_NAME
;

143 
x509_°‹e_°
 
	tX509_STORE
;

144 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

145 
s¶_°
 
	tSSL
;

146 
s¶_˘x_°
 
	tSSL_CTX
;

148 
v3_ext_˘x
 
	tX509V3_CTX
;

149 
c⁄f_°
 
	tCONF
;

151 
°‹e_°
 
	tSTORE
;

152 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

154 
ui_°
 
	tUI
;

155 
ui_mëhod_°
 
	tUI_METHOD
;

157 
°_ERR_FNS
 
	tERR_FNS
;

159 
ígöe_°
 
	tENGINE
;

161 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

162 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

163 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

164 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

167 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

168 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

170 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

172 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

173 
	tidx
, 
	t¨gl
, *
	t¨gp
);

174 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

175 
	tidx
, 
	t¨gl
, *
	t¨gp
);

176 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

177 
	tidx
, 
	t¨gl
, *
	t¨gp
);

179 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

180 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

181 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #ifde‡
DEBUG_SAFESTACK


62 #i‚de‡
CHECKED_PTR_OF


63 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

64 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

67 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

68 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

70 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

72 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

74 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

75 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

77 
	#DECLARE_STACK_OF
(
ty≥
) \

78 
	`STACK_OF
(
ty≥
) \

80 
STACK
 
°ack
; \

81 };

	)

83 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

87 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

88 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

89 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

90 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

91 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

92 
	`sk_‰ì
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

93 
	#SKM_sk_num
(
ty≥
, 
°
) \

94 
	`sk_num
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

95 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

96 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), 
i
))

	)

97 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

98 
	`sk_£t
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
i
, CHECKED_PTR_OF—y≥, 
vÆ
))

	)

99 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

100 
	`sk_zîo
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

101 
	#SKM_sk_push
(
ty≥
, 
°
,
vÆ
) \

102 
	`sk_push
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vÆ
))

	)

103 
	#SKM_sk_unshi·
(
ty≥
, 
°
,
vÆ
) \

104 
	`sk_unshi·
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vÆ
))

	)

105 
	#SKM_sk_föd
(
ty≥
, 
°
,
vÆ
) \

106 
	`sk_föd
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vÆ
))

	)

107 
	#SKM_sk_dñëe
(
ty≥
, 
°
,
i
) \

108 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), 
i
)

	)

109 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
,
±r
) \

110 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
), CHECKED_PTR_OF—y≥, 
±r
))

	)

111 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
,
i
) \

112 
	`sk_ö£π
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), CHECKED_PTR_OF—y≥, 
vÆ
), 
i
)

	)

113 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
,
cmp
) \

114 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

115 
	`sk_£t_cmp_func
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

116 
	#SKM_sk_dup
(
ty≥
, 
°
) \

117 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_PTR_OF
(STACK_OF—y≥), 
°
))

	)

118 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
,
‰ì_func
) \

119 
	`sk_p›_‰ì
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

120 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

121 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
))

	)

122 
	#SKM_sk_p›
(
ty≥
, 
°
) \

123 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_PTR_OF
(
	`STACK_OF
—y≥), 
°
))

	)

124 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

125 
	`sk_s‹t
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

126 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

127 
	`sk_is_s‹ãd
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
))

	)

129 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

130 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
(
	`CHECKED_PTR_OF
(STACK_OF—y≥)*, 
°
), \

131 
µ
, 
Àngth
, \

132 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

133 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

134 
ex_èg
, 
ex_˛ass
)

	)

136 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

137 
	`i2d_ASN1_SET
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), 
µ
, \

138 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

139 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

141 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

142 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

143 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

145 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

146 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

148 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

149 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

150 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

151 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

152 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

156 
	#STACK_OF
(
ty≥
Ë
STACK


	)

157 
	#PREDECLARE_STACK_OF
(
ty≥
Ë

	)

158 
	#DECLARE_STACK_OF
(
ty≥
Ë

	)

159 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

161 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

162 
	`sk_√w
(((*)(c⁄° * c⁄° *, c⁄° * c⁄° *))(
cmp
))

	)

163 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

164 
	`sk_√w_nuŒ
()

	)

165 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

166 
	`sk_‰ì
(
°
)

	)

167 
	#SKM_sk_num
(
ty≥
, 
°
) \

168 
	`sk_num
(
°
)

	)

169 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

170 ((
ty≥
 *)
	`sk_vÆue
(
°
, 
i
))

	)

171 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

172 ((
ty≥
 *)
	`sk_£t
(
°
, 
i
,(*)
vÆ
))

	)

173 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

174 
	`sk_zîo
(
°
)

	)

175 
	#SKM_sk_push
(
ty≥
, 
°
,
vÆ
) \

176 
	`sk_push
(
°
, (*)
vÆ
)

	)

177 
	#SKM_sk_unshi·
(
ty≥
, 
°
,
vÆ
) \

178 
	`sk_unshi·
(
°
, (*)
vÆ
)

	)

179 
	#SKM_sk_föd
(
ty≥
, 
°
,
vÆ
) \

180 
	`sk_föd
(
°
, (*)
vÆ
)

	)

181 
	#SKM_sk_dñëe
(
ty≥
, 
°
,
i
) \

182 ((
ty≥
 *)
	`sk_dñëe
(
°
, 
i
))

	)

183 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
,
±r
) \

184 ((
ty≥
 *)
	`sk_dñëe_±r
(
°
,(*)
±r
))

	)

185 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
,
i
) \

186 
	`sk_ö£π
(
°
, (*)
vÆ
, 
i
)

	)

187 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
,
cmp
) \

188 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

189 
	`sk_£t_cmp_func
(
°
, ((*)(c⁄° * c⁄° *, c⁄° * c⁄° *))(
cmp
)))

	)

190 
	#SKM_sk_dup
(
ty≥
, 
°
) \

191 
	`sk_dup
(
°
)

	)

192 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
,
‰ì_func
) \

193 
	`sk_p›_‰ì
(
°
, ((*)(*))
‰ì_func
)

	)

194 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

195 ((
ty≥
 *)
	`sk_shi·
(
°
))

	)

196 
	#SKM_sk_p›
(
ty≥
, 
°
) \

197 ((
ty≥
 *)
	`sk_p›
(
°
))

	)

198 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

199 
	`sk_s‹t
(
°
)

	)

200 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

201 
	`sk_is_s‹ãd
(
°
)

	)

203 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

204 
	`d2i_ASN1_SET
(
°
,
µ
,
Àngth
, (*(*)(** ,c⁄° ** ,))
d2i_func
, ((*)(*))
‰ì_func
, 
ex_èg
,
ex_˛ass
)

	)

205 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

206 
	`i2d_ASN1_SET
(
°
,
µ
,((*)(*, **))
i2d_func
,
ex_èg
,
ex_˛ass
,
is_£t
)

	)

208 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

209 
	`ASN1_£q_∑ck
(
°
, ((*)(*, **))
i2d_func
, 
buf
, 
Àn
)

	)

210 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

211 
	`ASN1_£q_u≈ack
(
buf
,
Àn
,(*(*)(**,c⁄° **,))
d2i_func
, ((*)(*))
‰ì_func
)

	)

213 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

214 ((
STACK
 *)
	`PKCS12_de¸y±_d2i
(
Æg‹
,(*(*)())
d2i_func
, ((*)(*))
‰ì_func
,
∑ss
,
∑s¶í
,
o˘
,
£q
))

	)

219 
	#sk_ACCESS_DESCRIPTION_√w
(
°
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (°))

	)

220 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

221 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

222 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

223 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

224 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

225 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

227 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

228 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

229 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

230 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

231 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

232 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

233 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

234 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

235 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

236 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

237 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

238 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

239 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

241 
	#sk_ASIdOrR™ge_√w
(
°
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (°))

	)

242 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

243 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

244 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

245 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

246 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

247 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

249 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

250 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

251 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

252 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

253 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

254 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

255 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

256 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

257 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

258 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

259 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

260 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

261 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

263 
	#sk_ASN1_GENERALSTRING_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (°))

	)

264 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

265 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

266 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

267 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

268 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

269 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

271 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

272 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

273 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

274 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

275 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

276 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

277 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

278 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

279 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

280 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

281 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

282 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

283 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

285 
	#sk_ASN1_INTEGER_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (°))

	)

286 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

287 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

288 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

289 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

290 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

291 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

293 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

294 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

295 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

296 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

297 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

298 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

299 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

300 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

301 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

302 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

303 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

304 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

305 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

307 
	#sk_ASN1_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (°))

	)

308 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

309 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

310 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

311 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

312 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

313 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

315 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

316 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

317 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

318 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

319 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

320 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

321 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

322 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

323 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

324 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

325 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

326 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

327 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

329 
	#sk_ASN1_STRING_TABLE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (°))

	)

330 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

331 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

332 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

333 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

334 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

335 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

337 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

338 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

339 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

340 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

341 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

342 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

343 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

344 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

345 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

346 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

347 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

348 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

349 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

351 
	#sk_ASN1_TYPE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (°))

	)

352 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

353 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

354 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

355 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

356 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

357 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

359 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

360 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

361 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

362 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

363 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

364 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

365 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

366 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

367 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

368 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

369 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

370 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

371 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

373 
	#sk_ASN1_VALUE_√w
(
°
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (°))

	)

374 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

375 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

376 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

377 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

378 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

379 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

380 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

381 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

382 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

383 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

384 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

385 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

386 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

387 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

388 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

389 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

390 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

392 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

393 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

395 
	#sk_BIO_√w
(
°
Ë
	`SKM_sk_√w
(
BIO
, (°))

	)

396 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

397 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

398 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

399 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

400 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

401 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

402 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

403 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

404 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

405 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

406 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

407 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

408 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

409 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

410 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

411 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

412 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

413 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

414 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

415 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

417 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
°
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

418 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

419 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

420 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

421 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

422 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

423 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

424 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

425 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

426 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

427 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

428 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

429 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

430 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

431 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

432 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

433 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

434 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

435 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

436 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

437 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

439 
	#sk_CMS_Recùõ¡Info_√w
(
°
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (°))

	)

440 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

441 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

442 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

443 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

444 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

445 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

446 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

447 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

448 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

449 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

450 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

451 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

452 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

453 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

454 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

455 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

456 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

457 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

458 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

459 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

461 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
°
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

462 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

463 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

464 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

465 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

466 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

467 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

468 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

469 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

470 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

471 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

472 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

473 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

474 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

475 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

476 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

477 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

478 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

479 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

480 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

481 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

483 
	#sk_CMS_Sig√rInfo_√w
(
°
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (°))

	)

484 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

485 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

486 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

487 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

488 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

489 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

490 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

491 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

492 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

493 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

494 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

495 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

496 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

497 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

498 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

499 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

500 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

501 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

502 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

503 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

505 
	#sk_CONF_IMODULE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (°))

	)

506 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

507 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

508 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

509 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

510 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

511 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

512 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

513 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

514 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

515 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

516 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

517 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

518 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

519 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

520 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

521 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

522 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

523 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

524 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

525 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

527 
	#sk_CONF_MODULE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (°))

	)

528 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

529 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

530 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

531 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

532 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

533 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

534 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

535 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

536 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

537 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

538 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

539 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

540 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

541 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

542 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

543 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

544 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

545 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

546 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

547 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

549 
	#sk_CONF_VALUE_√w
(
°
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (°))

	)

550 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

551 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

552 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

553 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

554 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

555 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

556 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

557 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

558 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

559 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

560 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

561 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

562 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

563 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

564 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

565 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

566 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

567 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

568 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

569 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

571 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
°
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

572 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

573 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

574 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

575 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

576 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

577 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

578 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

579 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

580 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

581 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

582 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

583 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

584 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

585 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

586 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

587 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

588 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

589 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

590 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

591 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

593 
	#sk_CRYPTO_dy∆ock_√w
(
°
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (°))

	)

594 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

595 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

596 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

597 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

598 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

599 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

600 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

601 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

602 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

603 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

604 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

605 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

606 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

607 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

608 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

609 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

610 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

611 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

612 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

613 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

615 
	#sk_DIST_POINT_√w
(
°
Ë
	`SKM_sk_√w
(
DIST_POINT
, (°))

	)

616 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

617 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

618 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

619 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

620 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

621 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

622 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

623 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

624 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

625 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

626 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

627 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

628 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

629 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

630 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

631 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

632 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

633 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

634 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

635 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

637 
	#sk_ENGINE_√w
(
°
Ë
	`SKM_sk_√w
(
ENGINE
, (°))

	)

638 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

639 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

640 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

641 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

642 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

643 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

644 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

645 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

646 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

647 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

648 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

649 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

650 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

651 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

652 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

653 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

654 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

655 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

656 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

657 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

659 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
°
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (°))

	)

660 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

661 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

662 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

663 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

664 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

665 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

666 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

667 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

668 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

669 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

670 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

671 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

672 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

673 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

674 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

675 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

676 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

677 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

678 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

679 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

681 
	#sk_GENERAL_NAME_√w
(
°
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (°))

	)

682 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

683 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

684 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

685 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

686 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

687 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

688 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

689 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

690 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

691 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

692 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

693 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

694 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

695 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

696 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

697 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

698 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

699 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

700 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

701 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

703 
	#sk_GENERAL_NAMES_√w
(
°
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (°))

	)

704 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

705 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

706 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

707 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

708 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

709 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

710 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

711 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

712 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

713 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

714 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

715 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

716 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

717 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

718 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

719 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

720 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

721 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

722 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

723 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

725 
	#sk_GENERAL_SUBTREE_√w
(
°
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (°))

	)

726 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

727 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

728 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

729 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

730 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

731 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

732 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

733 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

734 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

735 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

736 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

737 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

738 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

739 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

740 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

741 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

742 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

743 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

744 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

745 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

747 
	#sk_IPAddªssFamûy_√w
(
°
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (°))

	)

748 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

749 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

750 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

751 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

752 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

753 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

754 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

755 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

756 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

757 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

758 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

759 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

760 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

761 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

762 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

763 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

764 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

765 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

766 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

767 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

769 
	#sk_IPAddªssOrR™ge_√w
(
°
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (°))

	)

770 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

771 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

772 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

773 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

774 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

775 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

776 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

777 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

778 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

779 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

780 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

781 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

782 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

783 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

784 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

785 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

786 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

787 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

788 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

789 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

791 
	#sk_KRB5_APREQBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (°))

	)

792 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

793 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

794 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

795 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

796 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

797 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

798 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

799 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

800 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

801 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

802 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

803 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

804 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

805 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

806 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

807 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

808 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

809 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

810 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

811 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

813 
	#sk_KRB5_AUTHDATA_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (°))

	)

814 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

815 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

816 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

817 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

818 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

819 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

820 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

821 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

822 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

823 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

824 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

825 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

826 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

827 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

828 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

829 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

830 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

831 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

832 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

833 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

835 
	#sk_KRB5_AUTHENTBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (°))

	)

836 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

837 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

838 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

839 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

840 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

841 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

842 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

843 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

844 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

845 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

846 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

847 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

848 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

849 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

850 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

851 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

852 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

853 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

854 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

855 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

857 
	#sk_KRB5_CHECKSUM_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (°))

	)

858 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

859 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

860 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

861 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

862 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

863 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

864 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

865 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

866 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

867 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

868 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

869 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

870 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

871 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

872 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

873 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

874 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

875 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

876 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

877 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

879 
	#sk_KRB5_ENCDATA_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (°))

	)

880 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

881 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

882 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

883 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

884 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

885 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

886 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

887 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

888 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

889 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

890 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

891 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

892 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

893 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

894 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

895 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

896 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

897 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

898 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

899 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

901 
	#sk_KRB5_ENCKEY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (°))

	)

902 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

903 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

904 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

905 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

906 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

907 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

908 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

909 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

910 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

911 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

912 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

913 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

914 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

915 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

916 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

917 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

918 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

919 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

920 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

921 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

923 
	#sk_KRB5_PRINCNAME_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (°))

	)

924 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

925 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

926 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

927 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

928 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

929 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

930 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

931 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

932 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

933 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

934 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

935 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

936 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

937 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

938 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

939 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

940 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

941 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

942 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

943 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

945 
	#sk_KRB5_TKTBODY_√w
(
°
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (°))

	)

946 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

947 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

948 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

949 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

950 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

951 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

952 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

953 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

954 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

955 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

956 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

957 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

958 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

959 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

960 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

961 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

962 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

963 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

964 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

965 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

967 
	#sk_MIME_HEADER_√w
(
°
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (°))

	)

968 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

969 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

970 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

971 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

972 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

973 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

974 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

975 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

976 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

977 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

978 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

979 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

980 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

981 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

982 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

983 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

984 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

985 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

986 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

987 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

989 
	#sk_MIME_PARAM_√w
(
°
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (°))

	)

990 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

991 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

992 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

993 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

994 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

995 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

996 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

997 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

998 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

999 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1000 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1001 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1002 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1003 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1004 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1005 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1006 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1007 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1008 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1009 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1011 
	#sk_NAME_FUNCS_√w
(
°
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (°))

	)

1012 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1013 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1014 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1015 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1016 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1017 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1018 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1019 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1020 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1021 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1022 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1023 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1024 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1025 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1026 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1027 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1028 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1029 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1030 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1031 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1033 
	#sk_OCSP_CERTID_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (°))

	)

1034 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1035 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1036 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1037 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1038 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1039 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1040 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1041 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1042 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1043 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1044 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1045 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1046 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1047 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1048 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1049 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1050 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1051 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1052 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1053 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1055 
	#sk_OCSP_ONEREQ_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (°))

	)

1056 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1057 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1058 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1059 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1060 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1061 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1062 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1063 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1064 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1065 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1066 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1067 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1068 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1069 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1070 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1071 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1072 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1073 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1074 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1075 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1077 
	#sk_OCSP_RESPID_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (°))

	)

1078 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1079 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1080 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1081 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1082 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1083 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1084 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1085 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1086 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1087 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1088 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1089 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1090 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1091 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1092 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1093 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1094 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1095 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1096 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1097 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1099 
	#sk_OCSP_SINGLERESP_√w
(
°
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (°))

	)

1100 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1101 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1102 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1103 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1104 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1105 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1106 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1107 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1108 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1109 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1110 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1111 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1112 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1113 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1114 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1115 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1116 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1117 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1118 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1119 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1121 
	#sk_PKCS12_SAFEBAG_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (°))

	)

1122 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1123 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1124 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1125 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1126 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1127 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1128 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1129 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1130 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1131 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1132 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1133 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1134 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1135 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1136 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1137 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1138 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1139 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1140 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1141 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1143 
	#sk_PKCS7_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7
, (°))

	)

1144 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1145 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1146 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1147 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1148 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1149 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1150 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1151 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1152 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1153 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1154 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1155 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1156 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1157 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1158 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1159 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1160 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1161 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1162 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1163 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1165 
	#sk_PKCS7_RECIP_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (°))

	)

1166 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1167 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1168 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1169 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1170 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1171 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1172 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1173 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1174 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1175 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1176 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1177 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1178 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1179 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1180 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1181 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1182 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1183 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1184 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1185 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1187 
	#sk_PKCS7_SIGNER_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (°))

	)

1188 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1189 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1190 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1191 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1192 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1193 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1194 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1195 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1196 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1197 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1198 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1199 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1200 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1201 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1202 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1203 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1204 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1205 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1206 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1207 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1209 
	#sk_POLICYINFO_√w
(
°
Ë
	`SKM_sk_√w
(
POLICYINFO
, (°))

	)

1210 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1211 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1212 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1213 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1214 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1215 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1216 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1217 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1218 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1219 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1220 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1221 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1222 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1223 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1224 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1225 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1226 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1227 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1228 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1229 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1231 
	#sk_POLICYQUALINFO_√w
(
°
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (°))

	)

1232 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1233 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1234 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1235 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1236 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1237 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1238 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1239 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1240 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1241 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1242 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1243 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1244 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1245 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1246 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1247 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1248 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1249 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1250 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1251 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1253 
	#sk_POLICY_MAPPING_√w
(
°
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (°))

	)

1254 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1255 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1256 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1257 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1258 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1259 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1260 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1261 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1262 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1263 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1264 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1265 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1266 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1267 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1268 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1269 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1270 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1271 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1272 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1273 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1275 
	#sk_SSL_CIPHER_√w
(
°
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (°))

	)

1276 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1277 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1278 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1279 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1280 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1281 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1282 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1283 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1284 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1285 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1286 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1287 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1288 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1289 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1290 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1291 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1292 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1293 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1294 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1295 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1297 
	#sk_SSL_COMP_√w
(
°
Ë
	`SKM_sk_√w
(
SSL_COMP
, (°))

	)

1298 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1299 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1300 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1301 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1302 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1303 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1304 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1305 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1306 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1307 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1308 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1309 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1310 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1311 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1312 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1313 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1314 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1315 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1316 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1317 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1319 
	#sk_STORE_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (°))

	)

1320 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1321 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1322 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1323 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1324 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1325 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1326 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1327 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1328 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1329 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1330 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1331 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1332 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1333 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1334 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1335 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1336 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1337 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1338 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1339 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1341 
	#sk_SXNETID_√w
(
°
Ë
	`SKM_sk_√w
(
SXNETID
, (°))

	)

1342 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1343 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1344 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1345 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1346 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1347 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1348 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1349 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1350 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1351 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1352 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1353 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1354 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1355 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1356 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1357 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1358 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1359 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1360 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1361 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1363 
	#sk_UI_STRING_√w
(
°
Ë
	`SKM_sk_√w
(
UI_STRING
, (°))

	)

1364 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1365 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1366 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1367 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1368 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1369 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1370 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1371 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1372 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1373 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1374 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1375 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1376 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1377 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1378 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1379 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1380 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1381 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1382 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1383 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1385 
	#sk_X509_√w
(
°
Ë
	`SKM_sk_√w
(
X509
, (°))

	)

1386 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1387 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1388 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1389 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1390 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1391 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1392 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1393 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1394 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1395 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1396 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1397 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1398 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1399 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1400 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1401 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1402 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1403 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1404 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1405 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1407 
	#sk_X509V3_EXT_METHOD_√w
(
°
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (°))

	)

1408 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1409 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1410 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1411 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1412 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1413 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1414 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1415 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1416 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1417 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1418 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1419 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1420 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1421 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1422 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1423 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1424 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1425 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1426 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1427 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1429 
	#sk_X509_ALGOR_√w
(
°
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (°))

	)

1430 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1431 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1432 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1433 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1434 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1435 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1436 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1437 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1438 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1439 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1440 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1441 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1442 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1443 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1444 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1445 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1446 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1447 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1448 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1449 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1451 
	#sk_X509_ATTRIBUTE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (°))

	)

1452 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1453 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1454 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1455 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1456 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1457 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1458 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1459 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1460 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1461 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1462 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1463 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1464 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1465 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1466 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1467 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1468 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1469 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1470 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1471 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1473 
	#sk_X509_CRL_√w
(
°
Ë
	`SKM_sk_√w
(
X509_CRL
, (°))

	)

1474 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1475 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1476 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1477 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1478 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1479 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1480 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1481 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1482 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1483 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1484 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1485 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1486 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1487 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1488 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1489 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1490 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1491 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1492 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1493 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1495 
	#sk_X509_EXTENSION_√w
(
°
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (°))

	)

1496 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1497 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1498 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1499 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1500 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1501 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1502 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1503 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1504 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1505 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1506 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1507 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1508 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1509 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1510 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1511 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1512 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1513 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1514 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1515 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1517 
	#sk_X509_INFO_√w
(
°
Ë
	`SKM_sk_√w
(
X509_INFO
, (°))

	)

1518 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1519 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1520 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1521 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1522 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1523 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1524 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1525 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1526 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1527 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1528 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1529 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1530 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1531 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1532 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1533 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1534 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1535 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1536 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1537 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1539 
	#sk_X509_LOOKUP_√w
(
°
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (°))

	)

1540 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1541 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1542 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1543 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1544 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1545 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1546 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1547 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1548 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1549 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1550 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1551 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1552 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1553 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1554 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1555 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1556 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1557 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1558 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1559 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1561 
	#sk_X509_NAME_√w
(
°
Ë
	`SKM_sk_√w
(
X509_NAME
, (°))

	)

1562 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1563 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1564 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1565 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1566 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1567 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1568 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1569 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1570 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1571 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1572 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1573 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1574 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1575 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1576 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1577 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1578 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1579 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1580 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1581 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1583 
	#sk_X509_NAME_ENTRY_√w
(
°
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (°))

	)

1584 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1585 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1586 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1587 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1588 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1589 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1590 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1591 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1592 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1593 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1594 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1595 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1596 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1597 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1598 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1599 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1600 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1602 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1603 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1605 
	#sk_X509_OBJECT_√w
(
°
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (°))

	)

1606 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1607 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1608 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1609 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1610 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1611 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1612 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1613 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1614 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1615 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1616 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1617 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1618 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1619 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1620 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1621 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1622 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1623 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1624 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1625 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1627 
	#sk_X509_POLICY_DATA_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (°))

	)

1628 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1629 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1630 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1631 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1632 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1633 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1634 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1635 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1636 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1637 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1638 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1639 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1640 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1641 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1642 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1643 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1644 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1645 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1646 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1647 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1649 
	#sk_X509_POLICY_NODE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (°))

	)

1650 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1651 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1652 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1653 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1654 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1655 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1656 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1657 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1658 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1659 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1660 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1661 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1662 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1663 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1664 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1665 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1666 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1667 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1668 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1669 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1671 
	#sk_X509_POLICY_REF_√w
(
°
Ë
	`SKM_sk_√w
(
X509_POLICY_REF
, (°))

	)

1672 
	#sk_X509_POLICY_REF_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_REF
)

	)

1673 
	#sk_X509_POLICY_REF_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_REF
, (°))

	)

1674 
	#sk_X509_POLICY_REF_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_REF
, (°))

	)

1675 
	#sk_X509_POLICY_REF_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_REF
, (°), (i))

	)

1676 
	#sk_X509_POLICY_REF_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_REF
, (°), (i), (vÆ))

	)

1677 
	#sk_X509_POLICY_REF_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_REF
, (°))

	)

1678 
	#sk_X509_POLICY_REF_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_REF
, (°), (vÆ))

	)

1679 
	#sk_X509_POLICY_REF_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_REF
, (°), (vÆ))

	)

1680 
	#sk_X509_POLICY_REF_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_REF
, (°), (vÆ))

	)

1681 
	#sk_X509_POLICY_REF_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_REF
, (°), (vÆ))

	)

1682 
	#sk_X509_POLICY_REF_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_REF
, (°), (i))

	)

1683 
	#sk_X509_POLICY_REF_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_REF
, (°), (±r))

	)

1684 
	#sk_X509_POLICY_REF_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_REF
, (°), (vÆ), (i))

	)

1685 
	#sk_X509_POLICY_REF_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_REF
, (°), (cmp))

	)

1686 
	#sk_X509_POLICY_REF_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_REF
, st)

	)

1687 
	#sk_X509_POLICY_REF_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_REF
, (°), (‰ì_func))

	)

1688 
	#sk_X509_POLICY_REF_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_REF
, (°))

	)

1689 
	#sk_X509_POLICY_REF_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_REF
, (°))

	)

1690 
	#sk_X509_POLICY_REF_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_REF
, (°))

	)

1691 
	#sk_X509_POLICY_REF_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_REF
, (°))

	)

1693 
	#sk_X509_PURPOSE_√w
(
°
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (°))

	)

1694 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1695 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1696 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1697 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1698 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1699 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1700 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1701 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1702 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

1703 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

1704 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

1705 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

1706 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

1707 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

1708 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

1709 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

1710 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

1711 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

1712 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

1713 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

1715 
	#sk_X509_REVOKED_√w
(
°
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (°))

	)

1716 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

1717 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

1718 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

1719 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

1720 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

1721 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

1722 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

1723 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

1724 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

1725 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

1726 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

1727 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

1728 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

1729 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

1730 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

1731 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

1732 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

1733 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

1734 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

1735 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

1737 
	#sk_X509_TRUST_√w
(
°
Ë
	`SKM_sk_√w
(
X509_TRUST
, (°))

	)

1738 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

1739 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

1740 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

1741 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

1742 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

1743 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

1744 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

1745 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

1746 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

1747 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

1748 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

1749 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

1750 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

1751 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

1752 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

1753 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

1754 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

1755 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

1756 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

1757 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

1759 
	#sk_X509_VERIFY_PARAM_√w
(
°
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (°))

	)

1760 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

1761 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

1762 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

1763 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

1764 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

1765 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

1766 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1767 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1768 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1769 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

1770 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

1771 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

1772 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

1773 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

1774 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

1775 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

1776 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

1777 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

1778 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

1779 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

1781 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1782 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1783 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1784 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1785 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1786 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1787 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1788 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1790 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1791 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1792 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1793 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1794 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1795 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1796 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1797 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1799 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1800 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1801 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1802 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1803 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1804 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1805 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1806 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1808 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1809 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1810 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1811 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1812 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1813 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1814 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1815 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1817 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1818 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1819 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1820 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1821 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1822 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1823 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1824 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1826 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1827 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1828 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1829 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1830 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1831 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1832 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1833 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1835 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1836 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1837 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1838 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1839 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1840 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1841 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1842 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1844 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1845 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1846 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1847 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1848 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1849 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1850 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1851 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1853 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1854 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1855 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1856 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1857 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1858 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1859 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1860 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1862 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1863 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1864 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1865 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1866 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1867 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1868 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1869 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1871 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1872 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1873 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1874 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1875 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1876 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1877 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1878 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1880 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1881 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1882 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1883 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1884 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1885 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1886 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1887 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1889 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1890 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1891 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1892 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1893 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1894 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1895 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1896 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1898 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1899 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1900 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1901 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1902 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1903 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1904 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1905 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1907 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1908 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1909 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1910 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1911 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1912 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1913 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1914 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1916 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1917 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1918 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1919 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1920 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1921 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1922 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1923 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1925 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1926 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1927 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1928 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1929 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1930 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1931 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1932 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1934 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1935 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1936 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1937 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1938 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1939 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1940 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1941 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1943 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1944 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1945 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1946 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1947 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1948 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1949 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1950 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1952 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1953 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1954 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1955 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1956 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1957 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1958 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1959 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1961 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1962 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1963 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1964 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1965 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1966 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1967 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1968 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1970 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

1971 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

1972 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

1973 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

1974 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

1975 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

1976 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

1977 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

1979 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

1980 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

1982 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

1983 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x0090811f

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 0.9.8q-fù†2 De¯2010"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 0.9.8q 2 De¯2010"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "0.9.8"

	)

	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const * const *, const * const *);

74 } 
	tSTACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
STACK
 *);

80 *
sk_vÆue
(c⁄° 
STACK
 *, );

82 *
sk_£t
(
STACK
 *, , *);

84 
STACK
 *
sk_√w
((*
cmp
)(const * const *, const * const *));

85 
STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
STACK
 *);

87 
sk_p›_‰ì
(
STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
STACK
 *
sk
,*
d©a
,
whîe
);

89 *
sk_dñëe
(
STACK
 *
°
,
loc
);

90 *
sk_dñëe_±r
(
STACK
 *
°
, *
p
);

91 
sk_föd
(
STACK
 *
°
,*
d©a
);

92 
sk_föd_ex
(
STACK
 *
°
,*
d©a
);

93 
sk_push
(
STACK
 *
°
,*
d©a
);

94 
sk_unshi·
(
STACK
 *
°
,*
d©a
);

95 *
sk_shi·
(
STACK
 *
°
);

96 *
sk_p›
(
STACK
 *
°
);

97 
sk_zîo
(
STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
STACK
 *
sk
, (*
c
)(const * const *,

101 
STACK
 *
sk_dup
(STACK *
°
);

102 
sk_s‹t
(
STACK
 *
°
);

103 
sk_is_s‹ãd
(c⁄° 
STACK
 *
°
);

105 #ifde‡ 
__˝lu•lus


	@
1
.
1
/usr/include
351
6747
cat/cat.c
chflags/chflags.c
chio/chio.c
chio/defs.h
chio/pathnames.h
chmod/chmod.c
cp/cp.c
cp/extern.h
cp/utils.c
csh/config.h
csh/config_p.h
csh/iconv.h
csh/iconv_stub.c
date/date.c
date/extern.h
date/netdate.c
date/vary.c
date/vary.h
dd/args.c
dd/conv.c
dd/conv_tab.c
dd/dd.c
dd/dd.h
dd/extern.h
dd/gen.c
dd/misc.c
dd/position.c
df/df.c
domainname/domainname.c
echo/echo.c
ed/buf.c
ed/cbc.c
ed/ed.h
ed/glbl.c
ed/io.c
ed/main.c
ed/re.c
ed/sub.c
ed/undo.c
expr/expr.y
getfacl/getfacl.c
hostname/hostname.c
kenv/kenv.c
kill/kill.c
ln/ln.c
ls/cmp.c
ls/extern.h
ls/ls.c
ls/ls.h
ls/print.c
ls/util.c
mkdir/mkdir.c
mv/mv.c
pax/ar_io.c
pax/ar_subs.c
pax/buf_subs.c
pax/cache.c
pax/cache.h
pax/cpio.c
pax/cpio.h
pax/extern.h
pax/file_subs.c
pax/ftree.c
pax/ftree.h
pax/gen_subs.c
pax/getoldopt.c
pax/options.c
pax/options.h
pax/pat_rep.c
pax/pat_rep.h
pax/pax.c
pax/pax.h
pax/sel_subs.c
pax/sel_subs.h
pax/tables.c
pax/tables.h
pax/tar.c
pax/tar.h
pax/tty_subs.c
pkill/pkill.c
ps/extern.h
ps/fmt.c
ps/keyword.c
ps/nlist.c
ps/print.c
ps/ps.c
ps/ps.h
pwait/pwait.c
pwd/pwd.c
rcp/extern.h
rcp/rcp.c
rcp/util.c
realpath/realpath.c
rm/rm.c
rmdir/rmdir.c
setfacl/file.c
setfacl/mask.c
setfacl/merge.c
setfacl/remove.c
setfacl/setfacl.c
setfacl/setfacl.h
setfacl/util.c
sh/alias.c
sh/alias.h
sh/arith.h
sh/arith.y
sh/arith_lex.l
sh/bltin/bltin.h
sh/bltin/echo.c
sh/cd.c
sh/cd.h
sh/error.c
sh/error.h
sh/eval.c
sh/eval.h
sh/exec.c
sh/exec.h
sh/expand.c
sh/expand.h
sh/histedit.c
sh/init.h
sh/input.c
sh/input.h
sh/jobs.c
sh/jobs.h
sh/mail.c
sh/mail.h
sh/main.c
sh/main.h
sh/memalloc.c
sh/memalloc.h
sh/miscbltin.c
sh/mkinit.c
sh/mknodes.c
sh/mksyntax.c
sh/myhistedit.h
sh/mystring.c
sh/mystring.h
sh/options.c
sh/options.h
sh/output.c
sh/output.h
sh/parser.c
sh/parser.h
sh/redir.c
sh/redir.h
sh/shell.h
sh/show.c
sh/show.h
sh/trap.c
sh/trap.h
sh/var.c
sh/var.h
sleep/sleep.c
stty/cchar.c
stty/extern.h
stty/gfmt.c
stty/key.c
stty/modes.c
stty/print.c
stty/stty.c
stty/stty.h
stty/util.c
sync/sync.c
test/test.c
uuidgen/uuidgen.c
/usr/include/alias.h
/usr/include/assert.h
/usr/include/cpio.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/fts.h
/usr/include/grp.h
/usr/include/histedit.h
/usr/include/inttypes.h
/usr/include/kenv.h
/usr/include/kvm.h
/usr/include/langinfo.h
/usr/include/libgen.h
/usr/include/libutil.h
/usr/include/limits.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/nlist.h
/usr/include/openssl/des.h
/usr/include/paths.h
/usr/include/protocols/timed.h
/usr/include/pwd.h
/usr/include/regex.h
/usr/include/regexp.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdarg.h
/usr/include/stddef.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/acl.h
/usr/include/sys/cdefs.h
/usr/include/sys/chio.h
/usr/include/sys/conf.h
/usr/include/sys/disklabel.h
/usr/include/sys/event.h
/usr/include/sys/fcntl.h
/usr/include/sys/file.h
/usr/include/sys/filio.h
/usr/include/sys/ioctl.h
/usr/include/sys/mac.h
/usr/include/sys/mman.h
/usr/include/sys/mount.h
/usr/include/sys/mtio.h
/usr/include/sys/param.h
/usr/include/sys/proc.h
/usr/include/sys/queue.h
/usr/include/sys/resource.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/sysctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/un.h
/usr/include/sys/user.h
/usr/include/sys/wait.h
/usr/include/sysexits.h
/usr/include/syslog.h
/usr/include/tar.h
/usr/include/termcap.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/ufs/ufs/ufsmount.h
/usr/include/unistd.h
/usr/include/utmp.h
/usr/include/uuid.h
/usr/include/vis.h
/usr/include/wchar.h
/usr/include/wctype.h
/usr/include/_ctype.h
/usr/include/machine/_inttypes.h
/usr/include/machine/_limits.h
/usr/include/machine/_stdint.h
/usr/include/machine/endian.h
/usr/include/machine/param.h
/usr/include/machine/pcb.h
/usr/include/machine/proc.h
/usr/include/machine/setjmp.h
/usr/include/ncurses_dll.h
/usr/include/netinet6/in6.h
/usr/include/openssl/des_old.h
/usr/include/openssl/e_os2.h
/usr/include/sys/_iovec.h
/usr/include/sys/_lock.h
/usr/include/sys/_mutex.h
/usr/include/sys/_null.h
/usr/include/sys/_pthreadtypes.h
/usr/include/sys/_timespec.h
/usr/include/sys/_timeval.h
/usr/include/sys/_types.h
/usr/include/sys/buf.h
/usr/include/sys/callout.h
/usr/include/sys/condvar.h
/usr/include/sys/dirent.h
/usr/include/sys/errno.h
/usr/include/sys/eventhandler.h
/usr/include/sys/filedesc.h
/usr/include/sys/ioccom.h
/usr/include/sys/kenv.h
/usr/include/sys/limits.h
/usr/include/sys/linker_set.h
/usr/include/sys/lock.h
/usr/include/sys/lock_profile.h
/usr/include/sys/lockmgr.h
/usr/include/sys/module.h
/usr/include/sys/nlist_aout.h
/usr/include/sys/osd.h
/usr/include/sys/pcpu.h
/usr/include/sys/priority.h
/usr/include/sys/refcount.h
/usr/include/sys/resourcevar.h
/usr/include/sys/rtprio.h
/usr/include/sys/runq.h
/usr/include/sys/select.h
/usr/include/sys/sigio.h
/usr/include/sys/signal.h
/usr/include/sys/signalvar.h
/usr/include/sys/sockio.h
/usr/include/sys/stdint.h
/usr/include/sys/syslimits.h
/usr/include/sys/timespec.h
/usr/include/sys/ttycom.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/ucred.h
/usr/include/sys/unistd.h
/usr/include/sys/uuid.h
/usr/include/vm/pmap.h
/usr/include/vm/uma.h
/usr/include/vm/vm.h
/usr/include/vm/vm_map.h
/usr/include/vm/vm_param.h
/usr/include/bsm/audit.h
/usr/include/machine/_types.h
/usr/include/machine/atomic.h
/usr/include/machine/cpufunc.h
/usr/include/machine/fpu.h
/usr/include/machine/pcpu.h
/usr/include/machine/pmap.h
/usr/include/machine/runq.h
/usr/include/machine/segments.h
/usr/include/machine/signal.h
/usr/include/machine/ucontext.h
/usr/include/machine/vm.h
/usr/include/machine/vmparam.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/ui_compat.h
/usr/include/runetype.h
/usr/include/sys/_lockmgr.h
/usr/include/sys/_rwlock.h
/usr/include/sys/_sigset.h
/usr/include/sys/bufobj.h
/usr/include/sys/ktr.h
/usr/include/sys/malloc.h
/usr/include/sys/mutex.h
/usr/include/sys/sx.h
/usr/include/sys/systm.h
/usr/include/sys/vmmeter.h
/usr/include/machine/mutex.h
/usr/include/machine/specialreg.h
/usr/include/machine/trap.h
/usr/include/openssl/ui.h
/usr/include/sys/_stack.h
/usr/include/sys/_sx.h
/usr/include/sys/libkern.h
/usr/include/sys/lockstat.h
/usr/include/openssl/crypto.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/safestack.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/stack.h
